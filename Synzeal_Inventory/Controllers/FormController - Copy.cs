using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using Newtonsoft.Json;
using OfficeOpenXml;
using Synzeal_Inventory.Entity;
using Synzeal_Inventory.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Linq.Dynamic;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Net;
using System.Net.NetworkInformation;
using System.Configuration;
using System.Data.SqlClient;
using HtmlAgilityPack;
using System.Runtime.InteropServices;
using OfficeOpenXml.Style;
using System.Drawing;
using System.Data.Entity.Validation;
using System.EnterpriseServices.Internal;
using System.Net.Mail;
using WebGrease.Css.Extensions;
using Org.BouncyCastle.Ocsp;
using Ionic.Zip;
using System.Text.RegularExpressions;
using System.Transactions;
using System.Data.Entity;

namespace Synzeal_Inventory.Controllers
{
    public class FormController : Controller
    {
        public string Domain = "https://synzeal.com/";
        //public string Domain = "http://synzeal.in/";

        synzealEntities db = new synzealEntities();
        public int tabindex = 1;

        public void TakeScreenshot()
        {
            HttpWebRequest request = HttpWebRequest.Create("http://quote.synzeal.com/Form/TodayDashboard") as HttpWebRequest;
            Bitmap bitmap;
            using (Stream stream = request.GetResponse().GetResponseStream())
            {
                bitmap = new Bitmap(stream);
            }
        }

        public ActionResult Uploadquotation()
        {
            string path = Server.MapPath("~/img/");
            string[] filePaths = System.IO.Directory.GetFiles(path, "*.xlsx",
                                         SearchOption.AllDirectories);

            foreach (var item in filePaths)
            {
                var file = new FileInfo(item);

                using (var package = new ExcelPackage(file))
                {
                    var currentSheet = package.Workbook.Worksheets;
                    var workSheet = currentSheet.First();
                    var noOfCol = workSheet.Dimension.End.Column;
                    var noOfRow = workSheet.Dimension.End.Row;
                    for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                    {
                        string quoteno = workSheet.Cells[rowIterator, 1].Value.ToString();
                        string companyname = workSheet.Cells[rowIterator, 2].Value != null ? workSheet.Cells[rowIterator, 2].Value.ToString() : string.Empty;
                        string email = workSheet.Cells[rowIterator, 3].Value != null ? workSheet.Cells[rowIterator, 3].Value.ToString() : string.Empty;
                        string isImageattach = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : "";

                        string countrytype = workSheet.Cells[rowIterator, 5].Value != null ? workSheet.Cells[rowIterator, 5].Value.ToString() : "";
                        string IsQuoteApproved = workSheet.Cells[rowIterator, 6].Value != null ? workSheet.Cells[rowIterator, 6].Value.ToString() : "";
                        string userdistType = workSheet.Cells[rowIterator, 7].Value != null ? workSheet.Cells[rowIterator, 7].Value.ToString() : "";
                        string ProductName = workSheet.Cells[rowIterator, 8].Value != null ? workSheet.Cells[rowIterator, 8].Value.ToString() : "";
                        string CATNo = workSheet.Cells[rowIterator, 9].Value != null ? workSheet.Cells[rowIterator, 9].Value.ToString() : "";
                        string CASNo = workSheet.Cells[rowIterator, 10].Value != null ? workSheet.Cells[rowIterator, 10].Value.ToString() : "";
                        string Price = workSheet.Cells[rowIterator, 11].Value != null ? workSheet.Cells[rowIterator, 11].Value.ToString() : "";
                        string LeadTime = workSheet.Cells[rowIterator, 12].Value != null ? workSheet.Cells[rowIterator, 12].Value.ToString() : "";
                        string DisplayOrder = workSheet.Cells[rowIterator, 13].Value != null ? workSheet.Cells[rowIterator, 13].Value.ToString() : "";
                        var companyData = db.SZ_CompanyList.AsNoTracking().Where(x => x.Name.Trim().ToLower().Contains(companyname.ToLower().Trim())).FirstOrDefault();
                        if (!string.IsNullOrEmpty(CATNo))
                        {
                            CATNo = CATNo.Trim();
                        }
                        if (companyData == null)
                        {
                            SZ_CompanyList comp = new SZ_CompanyList();
                            comp.Name = companyname;
                            comp.UserDistType = userdistType;
                            comp.CountryType = countrytype;
                            comp.CreatedBy = "System Generated";
                            comp.UpdatedBy = "System Generated";
                            comp.CreatedDate = DateTime.Now;
                            comp.UpdatedDate = DateTime.Now;
                            comp.IsPaymentPending = false;
                            db.SZ_CompanyList.Add(comp);
                            db.SaveChanges();
                            companyData = comp;
                        }
                        var productData = db.Products.AsNoTracking().Where(x => x.Deleted == false && x.Published == true && x.Sku.ToLower().Contains(CATNo.ToLower())).FirstOrDefault();

                        var objquote = db.SZ_Quotation.AsNoTracking().Where(x => x.Ref == quoteno.Trim()).FirstOrDefault();
                        if (objquote != null)
                        {
                            SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                            objdetails.IsUploadServer = true;
                            objdetails.CASNo = !string.IsNullOrEmpty(CASNo) ? CASNo : string.Empty;
                            objdetails.CATNo = CATNo;
                            objdetails.CreatedDate = DateTime.Now;
                            objdetails.LeadTime = LeadTime;
                            objdetails.Price = Price;
                            objdetails.ProductId = productData != null ? productData.Id : 0;
                            objdetails.IsUploadServer = productData != null ? true : false;
                            objdetails.CreatedDate = DateTime.Now;
                            objdetails.ProductName = ProductName;
                            objdetails.QuoteId = objquote.Id;
                            objdetails.DisplayOrder = !string.IsNullOrEmpty(DisplayOrder) ? Convert.ToInt32(DisplayOrder) : 0;
                            db.Entry(objdetails).State = EntityState.Added;

                        }
                        else
                        {
                            objquote = new SZ_Quotation();
                            objquote.Ref = quoteno;

                            if (companyData != null)
                            {
                                objquote.CompanyId = companyData.Id;
                                objquote.CompanyName = companyData.Name;
                            }
                            objquote.EmailAddress = email;
                            objquote.IsImageAttach = isImageattach == "1" ? true : false;
                            objquote.PONo = string.Empty;
                            objquote.IsImportedQuote = true;
                            objquote.UserDistType = userdistType;
                            objquote.CountryType = countrytype;
                            objquote.LayoutType = "Standard";
                            objquote.CreatedDate = DateTime.Now;
                            objquote.CreatedBy = SessionCookieManagement.UserName;
                            if (objquote.CountryType == "Export")
                            {
                                objquote.IsAnalyticalData = true;
                            }
                            db.SZ_Quotation.Add(objquote);

                            SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                            objdetails.IsUploadServer = true;
                            objdetails.CASNo = !string.IsNullOrEmpty(CASNo) ? CASNo : string.Empty;
                            objdetails.CATNo = CATNo;
                            objdetails.CreatedDate = DateTime.Now;
                            objdetails.LeadTime = LeadTime;
                            objdetails.Price = Price;
                            objdetails.ProductId = productData != null ? productData.Id : 0;
                            objdetails.ProductName = ProductName;
                            objdetails.QuoteId = objquote.Id;
                            objdetails.IsUploadServer = productData != null ? true : false;
                            objdetails.CreatedDate = DateTime.Now;
                            objdetails.DisplayOrder = !string.IsNullOrEmpty(DisplayOrder) ? Convert.ToInt32(DisplayOrder) : 0;
                            db.SZ_QuotationDetail.Add(objdetails);
                        }
                        db.SaveChanges();
                    }
                }
            }
            return Content("asd");
        }

        public ActionResult EmailTest()
        {
            try
            {
                var htmlstring = "<h1>Email works fine</h1>";
                htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";

                MailMessage mail = new MailMessage();
                SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

                mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());

                mail.Subject = "SynZeal Research Quotation Module :: Email works fine";

                mail.Body = htmlstring;
                mail.IsBodyHtml = true;
                SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                SmtpServer.EnableSsl = true;
                SmtpServer.Send(mail);
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }
            return Content("Success");
        }

        public ActionResult deploy()
        {
            var settingdeploydata = db.Settings.AsNoTracking().Where(x => x.Name == "isDeploy").FirstOrDefault();
            var settingdeploydatedata = db.Settings.AsNoTracking().Where(x => x.Name == "DeployDate").FirstOrDefault();
            if (settingdeploydata != null)
            {
                var value = Convert.ToBoolean(settingdeploydata.Value);
                if (value)
                {
                    settingdeploydata.Value = "false";
                }
                else
                {
                    settingdeploydata.Value = "true";
                    settingdeploydatedata.Value = DateTime.Now.AddMinutes(5).ToString();
                }
                db.Entry(settingdeploydata).State = EntityState.Modified;
                db.Entry(settingdeploydatedata).State = EntityState.Modified;
                db.SaveChanges();

            }

            return Content("success");
        }

        public ActionResult MarkasPaid(string invoiceno, bool paid)
        {
            if (!string.IsNullOrEmpty(invoiceno))
            {
                invoiceno = invoiceno.Trim().ToLower();
            }
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.InvoiceNo.Trim().ToLower() == invoiceno).ToList();
            if (data != null && data.Count > 0)
            {
                foreach (var item in data)
                {
                    item.PaymentStatus = "Paid";
                    db.Entry(item).State = EntityState.Modified;
                }
                db.SaveChanges();
            }

            return RedirectToAction("PaymentUpdate");
        }

        public ActionResult Index()
        {
            return View();
        }
        public ActionResult PaymentUpdate()
        {
            return View();
        }
        public ActionResult Dashboard()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsQuote && SessionCookieManagement.UserEmail != "jinish@synzeal.com")
            {
                return RedirectToAction("Index", "Home");
            }
            //var model = db.Dashboard().ToArray();
            return View(new Dashboard_Result());
        }
        public ActionResult SciDashboard()
        {
            if (!SessionCookieManagement.IsLogin && (!SessionCookieManagement.IsScientist || !SessionCookieManagement.IsSubScientist))
            {
                return RedirectToAction("Index", "Home");
            }

            string subscientistname = Convert.ToString(SessionCookieManagement.UserId);
            var model = new List<SZ_QuotationDetail>();
            using (var txn = new TransactionScope(TransactionScopeOption.Required))
            {
                // Your LINQ to SQL query goes here
                model = (from i in db.SZ_Quotation.AsNoTracking()
                         join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                         where t2.ScientistCustomerId == SessionCookieManagement.UserId
                         || t2.SubScientistName == subscientistname
                         //&& (t2.IsOnHold == false || t2.IsOnHold == null)
                         orderby t2.MoveToScientistDate descending
                         select t2).ToList();
            }

            //var model = (from i in db.SZ_Quotation
            //             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
            //             where t2.ScientistCustomerId == SessionCookieManagement.UserId
            //             || t2.SubScientistName == subscientistname
            //             //&& (t2.IsOnHold == false || t2.IsOnHold == null)
            //             orderby t2.MoveToScientistDate descending
            //             select t2).ToList();

            var quotedetailIds = model.Select(x => x.Id).ToList();
            var formidlist = db.SZ_QuoteDetails_Form.AsNoTracking().Where(x => quotedetailIds.Contains(x.QuoteDetailsId)).Select(x => x.FormId).ToArray();

            var quotedetailsformList = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => formidlist.Contains(x.Id)).ToList();
            var scientistStatusList = db.SZ_ScientistStatus.AsNoTracking().ToList();
            var ReadyToDeliverScientistStatusId = scientistStatusList.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
            var proIds = model.Select(x => x.ProductId).ToList();
            var szInventory = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
            var listItems = new List<SelectListItem>();

            var scienList = db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("scientist")).ToList();
            foreach (var term in scienList)
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }
            var subscienList = db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            foreach (var term in subscienList)
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }

                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });

            }

            ViewBag.scientistItems = listItems;

            var list = new List<SZ_QuotationModel>();
            foreach (var k in model)
            {
                SZ_QuotationModel subList = new SZ_QuotationModel();
                subList.QuoteId = k.QuoteId;
                subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                subList.CompanyName = k.SZ_Quotation.CompanyName;
                subList.Email = k.SZ_Quotation.EmailAddress;
                subList.PONumber = k.SZ_Quotation.PONo;
                subList.Ref = k.SZ_Quotation.Ref;
                subList.Remark = k.SZ_Quotation.Remark;
                subList.MoveToScientistDate = k.MoveToScientistDate;
                subList.SZ_QuotationProductModel = new List<SZ_QuotationProductModel>();

                SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
                objlist.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                objlist.ScientistFormCount = quotedetailsformList.Where(x => x.QuotationDetailsId == k.Id).Count();
                objlist.QuoteDetailsId = k.Id;
                objlist.IsHoldManually = k.IsHoldManually;
                objlist.CASNo = k.CASNo;
                objlist.CATNo = k.CATNo;
                objlist.CATText = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                objlist.MoveToScientistDate = k.MoveToScientistDate;
                objlist.CreatedDate = k.CreatedDate;
                objlist.ImagePath = k.ImagePath;
                objlist.IsUploadServer = k.IsUploadServer;
                objlist.LeadTime = k.LeadTime;
                objlist.Price = k.Price;
                objlist.ProductId = k.ProductId;
                objlist.ProductName = k.ProductName;
                objlist.QuoteId = k.QuoteId;
                objlist.ProjectType = k.ProjectType;
                objlist.ScientistCustomerId = k.ScientistCustomerId;
                objlist.RequiredQty = k.RequiredQty;
                objlist.ProjectStatus = k.ProjectStatus;
                objlist.ScientistStatus = k.ScientistStatus;
                objlist.BatchCode1 = k.BatchCode1;
                objlist.BatchCode2 = k.BatchCode2;
                objlist.Qty1 = k.Qty1;
                objlist.Qty2 = k.Qty2;
                objlist.BatchNo = k.BatchNo;
                objlist.AdditionalBatchNo = k.AdditionalBatchNo;
                objlist.MoveToDispatch = k.MoveToDispatch;
                objlist.MoveToProject = k.MoveToProject;
                objlist.Remark = k.Remark;
                objlist.IsSynthesisLog = k.IsSynthesisLog;
                objlist.EstimateCompleteDate = k.EstimateCompleteDate;
                if (k.ProjectStatus != null)
                {
                    objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                }
                objlist.ScientistStatustext = scientistStatusList.Where(x => x.Id == k.ScientistStatus).Select(x => x.Name).FirstOrDefault();
                objlist.SubScientistName = k.SubScientistName;
                if (!string.IsNullOrEmpty(k.SubScientistName))
                {
                    var subsci = System.Text.RegularExpressions.Regex.IsMatch(k.SubScientistName, @"\d+");
                    if (subsci)
                    {
                        if (System.Text.RegularExpressions.Regex.Match(k.SubScientistName, @"\d+").Value == k.SubScientistName)
                        {
                            var subsciids = Convert.ToInt32(k.SubScientistName);
                            foreach (var r in listItems)
                            {
                                string selected = string.Empty;
                                if (r.Value == Convert.ToString(subsciids))
                                {
                                    objlist.SubScientistName = r.Text;
                                }
                            }
                        }
                    }
                }
                if (k.ProductId.HasValue)
                {
                    string selected = string.Empty;
                    objlist.AdditionalBatchNoText = "<select id='additionalBatch_" + k.ProductId + "' class='addbatch'><option value=''>--Select--</option>";
                    var proBatchData = szInventory.Where(x => x.ProductId == k.ProductId).OrderBy(x => x.Id).ToList();
                    if (proBatchData.Count > 0)
                    {
                        int probatchcount = 1;
                        foreach (var r in proBatchData)
                        {
                            string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            if (r.IsApproved == false)
                            {
                                text = "*" + text;
                            }

                            if (k.AdditionalBatchNo.HasValue && k.AdditionalBatchNo.Value == r.Id)
                            {
                                selected = " selected ";
                            }
                            objlist.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "' " + selected + ">" + text + "</option>";
                            probatchcount += 1;
                        }
                    }
                    objlist.AdditionalBatchNoText += "</select>";
                }
                objlist.Reason = k.Reason;
                objlist.IsOnHold = k.IsOnHold;
                objlist.TrackingNo = k.TrackingNo;
                objlist.QueryText = k.QueryText;
                objlist.QueryDate = k.QueryDate;
                objlist.IsAssignProjectQuery = k.IsAssignProjectQuery;
                objlist.IsAssignScientistQuery = k.IsAssignScientistQuery;
                objlist.IsQueryResolved = k.IsQueryResolved;
                objlist.IsPriority = k.IsPriority;
                objlist.Chemist = k.Chemist;
                if (!string.IsNullOrEmpty(k.DifficultyLevel))
                {
                    EnumList.DifficultyLevel oldfoo = (EnumList.DifficultyLevel)Enum.ToObject(typeof(EnumList.DifficultyLevel), Convert.ToInt32(k.DifficultyLevel));
                    objlist.DifficultyLevel = Common.GetDescription<EnumList.DifficultyLevel>(oldfoo);
                }
                subList.SZ_QuotationProductModel.Add(objlist);
                list.Add(subList);
            }

            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
            ViewBag.NoActionCount = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => string.IsNullOrEmpty(x.SubScientistName)
                && x.ReadyToDeliverScientistStatusId != x.ScientistStatus
                && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null)
                && string.IsNullOrEmpty(x.TrackingNo)).Count()).Sum(x => x);

            ViewBag.All = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => !string.IsNullOrEmpty(x.SubScientistName) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && (x.IsHoldManually == false || x.IsHoldManually == null) && string.IsNullOrEmpty(x.TrackingNo)).Count()).Sum(x => x);

            ViewBag.Completed = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => x.ScientistStatus == x.ReadyToDeliverScientistStatusId && (x.IsOnHold == false || x.IsOnHold == null)).Count()).Sum(x => x);

            ViewBag.Scaleup = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType == inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null)).Count()).Sum(x => x);

            ViewBag.Hold = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => x.IsHoldManually == true).Count()).Sum(x => x);

            ViewBag.Cancelled = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => x.IsOnHold == true).Count()).Sum(x => x);

            ViewBag.Query = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => !string.IsNullOrEmpty(x.QueryText)).Count()).Sum(x => x);

            ViewBag.SynthesisLog = list.
                Select(z => z.SZ_QuotationProductModel.Where(x => x.IsSynthesisLog == true && string.IsNullOrEmpty(z.PONumber)).Count()).Sum(x => x);

            var labelData = new List<string>();

            foreach (var i in list)
            {
                foreach (var k in i.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate == null || x.EstimateCompleteDate.Value.Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo)).OrderByDescending(x => x.EstimateCompleteDate))
                {
                    try
                    {
                        var month = k.EstimateCompleteDate.Value.Month.ToString();
                        var year = k.EstimateCompleteDate.Value.Year.ToString();
                        var strName = month + "-" + year;
                        if (!labelData.Contains(strName))
                        {
                            labelData.Add(strName);
                        }
                    }
                    catch
                    {

                    }
                }
            }
            System.Globalization.DateTimeFormatInfo mfi = new System.Globalization.DateTimeFormatInfo();

            var chartModel = new List<ChartModel>();
            foreach (var item in labelData)
            {
                ChartModel subModel = new ChartModel();
                var month = Convert.ToInt32(item.Split('-')[0]);
                var year = Convert.ToInt32(item.Split('-')[1]);
                subModel.Month = month;
                subModel.Year = year;
                subModel.LabelName = mfi.GetMonthName(month).ToString() + "-" + year.ToString();
                subModel.Count = list.Select(z => z.SZ_QuotationProductModel.Where(x => x.EstimateCompleteDate != null && x.EstimateCompleteDate.Value.Month == month && x.EstimateCompleteDate.Value.Year == year && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo)).Count()).Sum();
                chartModel.Add(subModel);
            }
            ViewBag.chartModel = chartModel.OrderBy(x => x.Year).ThenBy(x => x.Month).ToList();
            List<OverviewSciDashboard> overscimodel = new List<OverviewSciDashboard>();

            foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
            {
                var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                int val = (int)r;

                OverviewSciDashboard suboverscimodelontrack = new OverviewSciDashboard();
                suboverscimodelontrack.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate == null || x.EstimateCompleteDate.Value.AddDays(7).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && x.DifficultyLevel == test).Count()).Sum();
                suboverscimodelontrack.CoumnName = text;
                suboverscimodelontrack.RowName = "On Track";
                overscimodel.Add(suboverscimodelontrack);

                OverviewSciDashboard suboverscimodeldelay = new OverviewSciDashboard();
                suboverscimodeldelay.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate == null || x.EstimateCompleteDate.Value.AddDays(14).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && x.DifficultyLevel == test).Count()).Sum();
                suboverscimodeldelay.CoumnName = text;
                suboverscimodeldelay.RowName = "Delayed";
                overscimodel.Add(suboverscimodeldelay);

                OverviewSciDashboard suboverscimodelSignificantDelayed = new OverviewSciDashboard();
                suboverscimodelSignificantDelayed.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate != null && x.MoveToScientistDate != null && x.EstimateCompleteDate.Value.AddDays(((x.EstimateCompleteDate.Value - x.MoveToScientistDate.Value).TotalDays) * 2).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && x.DifficultyLevel == test).Count()).Sum();
                suboverscimodelSignificantDelayed.CoumnName = text;
                suboverscimodelSignificantDelayed.RowName = "Significant Delayed";
                overscimodel.Add(suboverscimodelSignificantDelayed);

                OverviewSciDashboard suboverscimodelAttention = new OverviewSciDashboard();
                suboverscimodelAttention.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate != null && x.MoveToScientistDate != null && x.EstimateCompleteDate.Value.AddDays(((x.EstimateCompleteDate.Value - x.MoveToScientistDate.Value).TotalDays) * 3).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && x.DifficultyLevel == test).Count()).Sum();
                suboverscimodelAttention.CoumnName = text;
                suboverscimodelAttention.RowName = "Attention";
                overscimodel.Add(suboverscimodelAttention);

                OverviewSciDashboard suboverscimodelTempHold = new OverviewSciDashboard();
                suboverscimodelTempHold.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => x.IsHoldManually == true && x.DifficultyLevel == test).Count()).Sum();
                suboverscimodelTempHold.CoumnName = text;
                suboverscimodelTempHold.RowName = "Temp Hold";
                overscimodel.Add(suboverscimodelTempHold);

                OverviewSciDashboard suboverscimodelCancelled = new OverviewSciDashboard();
                suboverscimodelCancelled.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => x.IsOnHold == true && x.DifficultyLevel == test).Count()).Sum();
                suboverscimodelCancelled.CoumnName = text;
                suboverscimodelCancelled.RowName = "Cancelled";
                overscimodel.Add(suboverscimodelCancelled);
            }

            OverviewSciDashboard suboverscimodeldlabelontrack = new OverviewSciDashboard();
            suboverscimodeldlabelontrack.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate == null || x.EstimateCompleteDate.Value.AddDays(7).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && string.IsNullOrEmpty(x.DifficultyLevel)).Count()).Sum();
            suboverscimodeldlabelontrack.CoumnName = "Not assigned D";
            suboverscimodeldlabelontrack.RowName = "On Track";
            overscimodel.Add(suboverscimodeldlabelontrack);

            OverviewSciDashboard suboverscimodeldlabeldelay = new OverviewSciDashboard();
            suboverscimodeldlabeldelay.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate == null || x.EstimateCompleteDate.Value.AddDays(14).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && string.IsNullOrEmpty(x.DifficultyLevel)).Count()).Sum();
            suboverscimodeldlabeldelay.CoumnName = "Not assigned D";
            suboverscimodeldlabeldelay.RowName = "Delayed";
            overscimodel.Add(suboverscimodeldlabeldelay);

            OverviewSciDashboard suboverscimodelSignificantdlabelDelayed = new OverviewSciDashboard();
            suboverscimodelSignificantdlabelDelayed.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate != null && x.MoveToScientistDate != null && x.EstimateCompleteDate.Value.AddDays(((x.EstimateCompleteDate.Value - x.MoveToScientistDate.Value).TotalDays) * 2).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && string.IsNullOrEmpty(x.DifficultyLevel)).Count()).Sum();
            suboverscimodelSignificantdlabelDelayed.CoumnName = "Not assigned D";
            suboverscimodelSignificantdlabelDelayed.RowName = "Significant Delayed";
            overscimodel.Add(suboverscimodelSignificantdlabelDelayed);

            OverviewSciDashboard suboverscimodeldlabelAttention = new OverviewSciDashboard();
            suboverscimodeldlabelAttention.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => (x.EstimateCompleteDate != null && x.MoveToScientistDate != null && x.EstimateCompleteDate.Value.AddDays(((x.EstimateCompleteDate.Value - x.MoveToScientistDate.Value).TotalDays) * 3).Date < DateTime.Now.Date) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && string.IsNullOrEmpty(x.TrackingNo) && string.IsNullOrEmpty(x.DifficultyLevel)).Count()).Sum();
            suboverscimodeldlabelAttention.CoumnName = "Not assigned D";
            suboverscimodeldlabelAttention.RowName = "Attention";
            overscimodel.Add(suboverscimodeldlabelAttention);

            OverviewSciDashboard suboverscimodeldlabelTempHold = new OverviewSciDashboard();
            suboverscimodeldlabelTempHold.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => x.IsHoldManually == true && string.IsNullOrEmpty(x.DifficultyLevel)).Count()).Sum();
            suboverscimodeldlabelTempHold.CoumnName = "Not assigned D";
            suboverscimodeldlabelTempHold.RowName = "Temp Hold";
            overscimodel.Add(suboverscimodeldlabelTempHold);

            OverviewSciDashboard suboverscimodeldlabelCancelled = new OverviewSciDashboard();
            suboverscimodeldlabelCancelled.ProductCount = list.Select(z => z.SZ_QuotationProductModel.Where(x => x.IsOnHold == true && string.IsNullOrEmpty(x.DifficultyLevel)).Count()).Sum();
            suboverscimodeldlabelCancelled.CoumnName = "Not assigned D";
            suboverscimodeldlabelCancelled.RowName = "Cancelled";
            overscimodel.Add(suboverscimodeldlabelCancelled);

            ViewBag.OverSciModel = overscimodel;
            return View(list.OrderByDescending(x => x.MoveToScientistDate).ToList());
        }
        public ActionResult CompanyDashboard()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsQuote && SessionCookieManagement.UserEmail != "jinish@synzeal.com")
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.Dashboard().ToArray();
            return View(model);
        }

        public ActionResult Search()
        {
            return View();
        }

        public ActionResult TempPDF()
        {
            string htmlstring = "<html><body><h1 style='font-family:andalus; font-size:30px;text-align:center;font-weight:bold'>CERTIFICATE OF ANALYSIS</h1><p>My first paragraph.</p></body></html>";
            string path = ConvertHTMLToPDF(htmlstring, "testcoa-" + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss").Replace("/", "_"));
            return File(path, "application/pdf", Server.UrlEncode("testPDF.pdf"));
        }

        public string GetQuotePlace(SZ_Quotation q, SZ_QuotationDetail qd)
        {
            if (qd == null)
            {
                return "All";
            }
            var str = "";
            if ((q.IsToBe == null || q.IsToBe == false) && (q.IsQuoteApproved == false || q.IsQuoteApproved == null) &&
                (q.IsPark == false || q.IsPark == null) && !q.CompanyName.Contains("synzeal"))
            {
                str = "All";
            }
            if (q.IsToBe == true && (qd.IsSynthesisLog == null || qd.IsSynthesisLog == false) && (q.IsQuoteApproved == false || q.IsQuoteApproved == null) &&
                (q.IsPark == false || q.IsPark == null) && q.UserDistType == "User")
            {
                str = "Pending User";
            }
            if (q.IsToBe == true && (qd.IsSynthesisLog == null || qd.IsSynthesisLog == false) && (q.IsQuoteApproved == false || q.IsQuoteApproved == null) &&
                (q.IsPark == false || q.IsPark == null) && q.UserDistType == "Distributor")
            {
                str = "Pending Distributor";
            }
            if (q.IsQuoteApproved == true && (qd.IsSynthesisLog == null || qd.IsSynthesisLog == false)
                && (q.IsPark == false || q.IsPark == null))
            {
                str = "Approved";
            }
            return str;
        }

        [HttpPost]
        public JsonResult LoadQuicksearchQuotationData()
        {
            try
            {
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }

                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }

                if (string.IsNullOrEmpty(searchbyvalue))
                {
                    return Json(new { draw = draw, recordsFiltered = 0, recordsTotal = 0, data = new List<QuotationListModel>() });
                }
                else
                {
                    DateTime prevdate = DateTime.Now.AddDays(-7);
                    var query = (from q in db.SZ_Quotation.AsNoTracking()
                                 join qd in db.SZ_QuotationDetail.AsNoTracking() on q.Id equals qd.QuoteId
                                 where qd.CreatedDate <= DateTime.Now && qd.CreatedDate >= prevdate
                                 select new QuotationListModel
                                 {
                                     QuoteId = q.Id,
                                     Ref = q.Ref,
                                     PONumber = q.PONo,
                                     CompanyName = q.CompanyName,
                                     ProductName = qd.ProductName,
                                     CASNo = qd.CASNo,
                                     CATNo = qd.CATNo,
                                     LeadTime = qd.LeadTime,
                                     Price = qd.Price,
                                     SZ_QuotationData = q,
                                     SZ_QuotationDetailData = qd
                                     //ActionRow = GetQuotePlace(q, qd)
                                 }).AsQueryable();

                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        query = query.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).AsQueryable();
                    }
                    if (searchby == "ponumber")
                    {
                        query = query.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).AsQueryable();
                    }
                    if (searchby == "company")
                    {
                        query = query.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).AsQueryable();
                    }
                    if (searchby == "productname")
                    {
                        searchbyvalue = searchbyvalue.ToLower().Trim();
                        query = query.Where(x => x.ProductName.ToLower().Trim().Contains(searchbyvalue)).AsQueryable();
                    }
                    if (searchby == "cas")
                    {
                        query = query.Where(x => x.CASNo.ToLower().Contains(searchbyvalue)).AsQueryable();
                    }
                    if (searchby == "cat")
                    {
                        query = query.Where(x => x.CATNo.ToLower().Contains(searchbyvalue)).AsQueryable();
                    }

                    var model = query.ToList();
                    foreach (var item in model)
                    {
                        item.Location = GetQuotePlace(item.SZ_QuotationData, item.SZ_QuotationDetailData);
                        item.SZ_QuotationData = null;
                        item.SZ_QuotationDetailData = null;
                        item.ActionRow = "<a href='javascript:void(0)' onclick='OpenQuoteDetailPage(\"" + item.QuoteId + "\")' > Select</a>";
                    }
                    //var smodel = query.ToList().ForEach(z => 
                    //{
                    //    z.ActionRow = GetQuotePlace(z.SZ_QuotationData, x.SZ_QuotationDetailData);
                    //});
                    int? recordsTotal = model.Count();
                    var jsonResult = Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model }, JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                    //return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
                }


            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public JsonResult LoadQuotationData(string tabname, bool isDispatch = false)
        {
            try
            {
                var companysearch = string.Empty;
                var penuserdate = string.Empty;
                var countrytypesearch = string.Empty;
                var tablename = string.Empty;
                if (Request.Form.GetValues("company_search") != null)
                {
                    companysearch = Request.Form.GetValues("company_search")[0].ToString(); ;
                }
                if (Request.Form.GetValues("date_search") != null)
                {
                    penuserdate = Request.Form.GetValues("date_search")[0].ToString(); ;
                }
                if (Request.Form.GetValues("countrytype_search") != null)
                {
                    countrytypesearch = Request.Form.GetValues("countrytype_search")[0].ToString(); ;
                }
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].Trim().ToString();
                }
                if (Request.Form.GetValues("tablename") != null)
                {
                    tablename = Request.Form.GetValues("tablename")[0].ToString();
                }


                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                TempData["tabname"] = tabname;
                //if (tabname == "followup" && string.IsNullOrEmpty(searchValue))
                //{
                //    return Json(new { draw = draw, recordsFiltered = 0, recordsTotal = 0, data = new List<QuotationListModel>() });
                //}

                var model = db.QuotationList(searchValue, companysearch, penuserdate, countrytypesearch, tabname, searchby, searchbyvalue, pageNo, numberOfObjectsPerPage).ToList();
                int? recordsTotal = model.Select(x => x.TotalRecord).FirstOrDefault();

                var data = PrepareQuotationListModel(model, isDispatch, tablename);
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }

        public ActionResult GetFormDatafromBatchId(int batchId)
        {
            SZ_QuoteDetailForm objData = new SZ_QuoteDetailForm();
            var batchCode = db.SZ_Inventory.AsNoTracking().Where(x => x.Id == batchId).Select(x => x.BatchNo).FirstOrDefault();
            var formdata = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.BatchCode == batchCode).FirstOrDefault();
            if (formdata != null)
            {
                objData.IRAttachment = formdata.IRAttachment;
                objData.MassAttachment = formdata.MassAttachment;
                objData.TempSensitive = formdata.TempSensitive;
                objData.Lacrymatory = formdata.Lacrymatory;
                objData.PLCAttachment = formdata.PLCAttachment;
                objData.NMRAttchment = formdata.NMRAttchment;
                objData.QNMRAttchment = formdata.QNMRAttchment;
                objData.TGAAttachment = formdata.TGAAttachment;
                objData.CMRAttchment = formdata.CMRAttchment;
                objData.DEPTAttachment = formdata.DEPTAttachment;
                objData.HRMSAttachment = formdata.HRMSAttachment;
                objData.ROIAttachment = formdata.ROIAttachment;
                objData.ElementralAttachment = formdata.ElementralAttachment;
                objData.SERAttachment = formdata.SERAttachment;
                objData.GCAttachment = formdata.GCAttachment;
                objData.ELSDAttachment = formdata.ELSDAttachment;
                objData.ChiralAttachmenrt = formdata.ChiralAttachmenrt;
                objData.APCIMassAttachment = formdata.APCIMassAttachment;
                objData.NMRInterpretaionAttachment = formdata.NMRInterpretaionAttachment;
                objData.LightSensitivity = formdata.LightSensitivity;
                objData.Photostability = formdata.Photostability;
                objData.ChkHygroscopic = formdata.ChkHygroscopic;
                objData.TempSensitive = formdata.TempSensitive;
                objData.Lacrymatory = formdata.Lacrymatory;
                objData.State = formdata.State;
                objData.Apearance = formdata.Apearance;
            }
            else
            {
                objData = null;
            }

            return Json(objData, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetAllQuoteDetailsIdOfPoNumberByQuoteId(int id)
        {
            var quote = db.SZ_Quotation.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (quote == null)
            {
                return Json(new { success = false, message = "Quote not found" }, JsonRequestBehavior.AllowGet);
            }
            var multiplepoquote = db.SZ_Quotation.AsNoTracking().Where(x => x.PONo == quote.PONo).ToList();
            var quoteids = multiplepoquote.Select(x => x.Id).ToList();
            List<int> ids = new List<int>();
            ids = db.SZ_QuotationDetail.AsNoTracking().Where(x => quoteids.Contains(x.QuoteId)).Select(x => x.Id).ToList();
            return Json(new { success = true, ids = ids }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult RemoveShowOnDashboard(int id)
        {
            var quote = db.SZ_Quotation.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (quote != null)
            {
                quote.IsShowDashboard = false;
                db.Entry(quote).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(new { success = true }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult LoadCompanyNamefromQuotationtab(string tabName)
        {
            var compList = db.SZ_Quotation.AsNoTracking().Select(x => x.CompanyName).Distinct().OrderBy(x => x).ToList();
            return Json(compList, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult quotecompleted(int id)
        {
            var model = db.SZ_Quotation.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (model != null)
            {
                model.QuoteCompDate = DateTime.Now;
                model.IsCompleted = true;
                db.Entry(model).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult ApprovedSampleRequest(int id)
        {
            var model = db.SZ_SampleRequestDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (model != null)
            {
                model.ResponseDate = DateTime.Now;
                model.IsApproved = true;
                db.Entry(model).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult RejectedSampleRequest(int id, string reason)
        {
            var model = db.SZ_SampleRequestDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (model != null)
            {
                model.ResponseDate = DateTime.Now;
                model.IsApproved = false;
                model.RejectReason = reason;
                db.Entry(model).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SampleRequestList()
        {
            var model = db.SZ_SampleRequestDetail.AsNoTracking().Where(x => x.SZ_SampleRequest.IsConfirm == true).OrderByDescending(x => x.CreatedDate).ToList();
            return View(model);
        }

        public ActionResult NewSampleRequestList()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = (from i in db.SZ_SampleRequest.AsNoTracking()
                         join pc in db.SZ_SampleRequestDetail.AsNoTracking() on i.Id equals pc.SampleRequestId
                         where i.CreateduserId == SessionCookieManagement.UserId
                         select pc).OrderByDescending(x => x.SZ_SampleRequest.RequestDate).ToList();
            return View(model);
        }

        public ActionResult NewSampleRequest(int id = 0)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_SampleRequest.AsNoTracking().AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
            {
                model = new SZ_SampleRequest();
                int refNo = 1;
                string value = string.Empty;
                string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
                var SZ_Quotationdata = (from i in db.SZ_Quotation
                                        where i.Ref.StartsWith(matchingstring)
                                        select i).ToList();
                if (SZ_Quotationdata.Count > 0)
                {
                    refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                    int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                    value = "SZ-SMP-" + newbrokerrewf.ToString().PadLeft(2, '0');
                }
                else
                {
                    value = "SZ-SMP-" + "-01";
                }

                model.RequestNo = value;
            }

            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var samplereasonlist = db.SZ_SampleReason.AsNoTracking().ToList();
            if (samplereasonlist != null && samplereasonlist.Count > 0)
            {
                foreach (var item in samplereasonlist)
                {
                    listItems.Add(new SelectListItem
                    {
                        Text = item.Name,
                        Value = item.Name
                    });
                }
            }

            ViewBag.SampleReasonListItem = listItems;

            return View(model);
        }

        [HttpPost]
        public ActionResult NewSampleRequestData(ProductSampleRequestModel model)
        {
            bool isNew = false;
            if (model.Id == 0)
            {
                isNew = true;
                SZ_SampleRequest objSampleRequest = new SZ_SampleRequest();
                objSampleRequest.Name = model.Name;
                objSampleRequest.RequestNo = model.RequestNo;
                objSampleRequest.RequestDate = model.RequestDate;
                objSampleRequest.Department = model.Department;
                objSampleRequest.CreateduserId = SessionCookieManagement.UserId;
                objSampleRequest.CreatedBy = SessionCookieManagement.UserName;
                objSampleRequest.CreatedDate = DateTime.Now;
                db.SZ_SampleRequest.Add(objSampleRequest);
                db.SaveChanges();


                foreach (var item in model.BatchIds)
                {
                    var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => x.Id == item).FirstOrDefault();
                    SZ_SampleRequestDetail objdetails = new SZ_SampleRequestDetail();
                    objdetails.SampleRequestId = objSampleRequest.Id;
                    objdetails.ProductId = model.ProductId;
                    objdetails.CASNo = model.CASNo;
                    objdetails.CATNo = model.CatelogueNo;
                    objdetails.ProductName = model.ProductName;
                    objdetails.BatchCode = inventoryData.BatchNo;
                    objdetails.BatchId = item;
                    objdetails.Qty = 0;
                    objdetails.Reason = "";
                    objdetails.Handoverby = "";
                    objdetails.CreatedDate = DateTime.Now;
                    objdetails.CreatedBy = SessionCookieManagement.UserName;
                    objdetails.IsApproved = null;
                    db.SZ_SampleRequestDetail.Add(objdetails);
                }
                db.SaveChanges();

                model.Id = objSampleRequest.Id;
            }
            else
            {
                var data = db.SZ_SampleRequest.AsNoTracking().Where(x => x.Id == model.Id).FirstOrDefault();
                if (data != null)
                {
                    data.Name = model.Name;
                    data.RequestNo = model.RequestNo;
                    data.RequestDate = model.RequestDate;
                    data.Department = model.Department;
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();

                    model.Id = data.Id;
                    foreach (var item in model.BatchIds)
                    {
                        var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => x.Id == item).FirstOrDefault();
                        SZ_SampleRequestDetail objdetails = new SZ_SampleRequestDetail();
                        objdetails.SampleRequestId = data.Id;
                        objdetails.ProductId = model.ProductId;
                        objdetails.CASNo = model.CASNo;
                        objdetails.CATNo = model.CatelogueNo;
                        objdetails.ProductName = model.ProductName;
                        objdetails.BatchCode = inventoryData.BatchNo;
                        objdetails.BatchId = item;
                        objdetails.Qty = 0;
                        objdetails.Reason = "";
                        objdetails.Handoverby = "";
                        objdetails.CreatedDate = DateTime.Now;
                        objdetails.CreatedBy = SessionCookieManagement.UserName;
                        objdetails.IsApproved = null;
                        db.SZ_SampleRequestDetail.Add(objdetails);
                    }
                    db.SaveChanges();
                }
            }

            return Json(new { success = true, isNew = isNew, data = model.Id });
        }

        [HttpPost]
        public ActionResult NewProductSampleRequestData(List<ProductSampleRequestProductModel> model, bool isSubmit = false)
        {
            var sampleRequestId = 0;
            foreach (var item in model)
            {
                var data = db.SZ_SampleRequestDetail.AsNoTracking().Where(x => x.Id == item.Id).FirstOrDefault();
                if (data != null)
                {
                    sampleRequestId = data.SampleRequestId;
                    data.Qty = item.Qty;
                    data.Reason = item.Reason;
                    data.Handoverby = item.Handoverby;
                    db.Entry(data).State = EntityState.Modified;
                }
            }

            if (isSubmit)
            {
                var data = db.SZ_SampleRequest.AsNoTracking().Where(x => x.Id == sampleRequestId).FirstOrDefault();
                if (data != null)
                {
                    data.IsConfirm = isSubmit;
                    db.Entry(data).State = EntityState.Modified;
                }
            }

            db.SaveChanges();
            return Json(new { data = sampleRequestId, success = true });
        }

        public JsonResult LoadRFQQuotationData()
        {
            try
            {
                bool isMiniAdmin = SessionCookieManagement.IsMiniAdmin;
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                var data = db.SZ_Query.AsNoTracking().ToList();
                var allproduct = db.Products.AsNoTracking().ToList();
                var allcustomer = db.Customers.AsNoTracking().ToList();

                var model = new List<RFQQuoteModel>();
                foreach (var item in data)
                {
                    try
                    {
                        var objmodel = new RFQQuoteModel();
                        objmodel.FullName = item.FullName;
                        objmodel.CompanyName = item.CompanyName;
                        objmodel.CASNo = item.CASNo;
                        objmodel.CATNo = item.CATNo;
                        objmodel.ProductId = item.ProductId;
                        objmodel.ProductName = item.ProductName;
                        objmodel.RequiredQty = item.Package.Replace("KG", "").Replace("MG", "").Replace("G", "").Trim();
                        objmodel.RFQDate = item.CreatedDate;
                        objmodel.RFQDateText = item.CreatedDate.HasValue ? item.CreatedDate.Value.ToShortDateString() : null;
                        objmodel.Email = item.Email;
                        objmodel.ChkFirstRow = "<input type='checkbox' value='" + item.Id + "' data-companyName='" + objmodel.CompanyName + "' data-productid='" + item.ProductId + "' class='clsRFQQuote' />";
                        if (!isMiniAdmin)
                        {
                            objmodel.Action = "<a href='javascript:void(0)' onclick='DeleteRFQQuote(\"" + item.Id + "\")'>Delete</a>";
                        }
                        model.Add(objmodel);
                    }
                    catch (Exception)
                    {
                        continue;
                    }
                }
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.FullName != null && m.FullName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.Email != null && m.Email.ToLower().Contains(searchValue))
                                        || (m.RFQDateText != null && m.RFQDateText.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))).ToList();
                }
                int? recordsTotal = model.Count;
                model = model.OrderByDescending(x => x.RFQDate).ThenBy(x => x.Email).ToList();
                var result = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult DeleteRFQQuoteData(int id)
        {
            try
            {
                var inv = db.SZ_Query.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        public ActionResult DeleteSampleRequestDetail(int id)
        {
            try
            {
                int sampleId = 0;
                var inv = db.SZ_SampleRequestDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    sampleId = inv.SampleRequestId;
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return RedirectToAction("NewSampleRequest", new { id = sampleId });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        public JsonResult LoadSynthesisLogData(bool issynthesispage = false)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                var model = db.SynthesisLog(searchValue, pageNo, numberOfObjectsPerPage).ToList();
                int? recordsTotal = 0;
                if (model != null)
                {
                    recordsTotal = model.Select(x => x.TotalRecord).FirstOrDefault();
                }


                var data = PrepareSynthesisLogModel(model, true);
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string GetApiNameOfProduct(int productId, List<Category> categoryData, List<Product_Category_Mapping> productCategoryData)
        {
            var data = (from i in categoryData
                        join pc in productCategoryData on i.Id equals pc.CategoryId
                        where i.Deleted == false && i.Published == true && pc.ProductId == productId
                        select i).FirstOrDefault();
            if (data == null)
                return "";

            if (data.ParentCategoryId == 0)
            {
                return data.Name;
            }
            return getSubCategoryName(data.ParentCategoryId, categoryData);
        }
        public List<string> GetApiAllProduct(int productId, List<Category> categoryData, List<Product_Category_Mapping> productCategoryData)
        {
            var data = (from i in categoryData
                        join pc in productCategoryData on i.Id equals pc.CategoryId
                        where i.Deleted == false && i.Published == true && pc.ProductId == productId
                        select i).FirstOrDefault();
            if (data == null)
                return null;

            var maincategoryId = 0;
            if (data.ParentCategoryId == 0)
            {
                maincategoryId = data.Id;
            }
            maincategoryId = getSubCategoryApiCategoryId(data.ParentCategoryId, categoryData);

            return GetProductsByMainCategoryId(maincategoryId);
        }
        public List<string> GetProductsByMainCategoryId(int mainCategoryId)
        {
            List<string> catNos = new List<string>();
            var data = (from i in db.Categories.AsNoTracking()
                        where i.Deleted == false && i.Published == true && i.ParentCategoryId == mainCategoryId
                        select i).ToList();
            if (data.Count == 0)
                return null;

            foreach (var item in data)
            {
                var subcategorydata = GetProductsByMainCategoryId(item.Id);
                if (subcategorydata == null || subcategorydata.Count == 0)
                {
                    var products = GetProductsByCategoryId(item.Id);
                    if (products.Count > 0)
                    {
                        catNos.AddRange(products.Select(x => x.Sku).ToList());
                    }
                }
            }
            return catNos;
        }
        public List<Product> GetProductsByCategoryId(int categoryId)
        {
            return (from i in db.Product_Category_Mapping.AsNoTracking()
                    join p in db.Products.AsNoTracking() on i.ProductId equals p.Id
                    where i.CategoryId == categoryId && p.Published == true
                    && p.Deleted == false
                    select p).ToList();
        }
        public int getSubCategoryApiCategoryId(int parentCategoryId, List<Category> categoryData)
        {
            var data = (from i in categoryData
                        where i.Deleted == false && i.Published == true && i.Id == parentCategoryId
                        select i).FirstOrDefault();
            if (data == null)
                return 0;

            if (data.ParentCategoryId == 0)
            {
                return data.Id;
            }
            return getSubCategoryApiCategoryId(data.ParentCategoryId, categoryData);
        }

        public string getSubCategoryName(int parentCategoryId, List<Category> categoryData)
        {
            var data = (from i in categoryData
                        where i.Deleted == false && i.Published == true && i.Id == parentCategoryId
                        select i).FirstOrDefault();
            if (data == null)
                return "";

            if (data.ParentCategoryId == 0)
            {
                return data.Name;
            }
            return getSubCategoryName(data.ParentCategoryId, categoryData);
        }

        public ActionResult GetCOADataFromBatchId(int id)
        {
            var data = db.SZ_MasterCOA.AsNoTracking().Where(x => x.BatchId == id).FirstOrDefault();
            if (data != null)
            {
                var model = new SZ_MasterCOA();
                model.QuantityAvailable = data.QuantityAvailable;
                model.PhysicalState = data.PhysicalState;
                model.AppearanceProduct = data.AppearanceProduct;
                model.Attachment = data.Attachment;
                return Json(new { success = true, data = model }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = false }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult LoadQuoteNotification()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string approvedstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);

                var model = (from i in db.SZ_Quotation.AsNoTracking()
                             join ql in db.SZ_QuotationDetailLog.AsNoTracking() on i.Id equals ql.QuoteId
                             where i.CreatedBy == SessionCookieManagement.UserName
                             orderby i.CreatedDate descending
                             select new QuoteNotificationModel()
                             {
                                 Username = ql.Username,
                                 After = ql.After,
                                 Before = ql.Before,
                                 DDateTime = ql.Datetime,
                                 FieldName = ql.FieldName,
                                 QuoteId = i.Id,
                                 Ref = ql.QuoteRef
                             }).ToList();

                foreach (var item in model)
                {
                    item.DateTime = item.DDateTime.ToShortDateString();
                    item.QuoteLink = "<a href='/Form/Quote/" + item.QuoteId + "'>Action</a>";
                }

                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.Username != null && m.Username.ToLower().Contains(searchValue))
                                        || (m.After != null && m.After.ToLower().Contains(searchValue))
                                        || (m.Before != null && m.Before.ToLower().Contains(searchValue))
                                        || (m.DateTime != null && m.DateTime.ToLower().Contains(searchValue))
                                        || (m.FieldName != null && m.FieldName.ToLower().Contains(searchValue))
                                        ).ToList();
                }
                recordsTotal = model.Count();
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadQCNewSubmissionData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                string approvedstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var model = (from i in db.SZ_QuoteDetailForm.AsNoTracking()
                             join t3 in db.SZ_QuoteDetails_Form.AsNoTracking() on i.Id equals t3.FormId
                             join q in db.SZ_QuotationDetail.AsNoTracking() on t3.QuoteDetailsId equals q.Id
                             where i.IsDraftEntry == true
                             && (i.ApprovalStatus == null || i.ApprovalStatus != approvedstatus)
                             && (i.IsDispatchedEntry == null || i.IsDispatchedEntry == false)
                             orderby i.CreatedDate descending
                             select new QCModel()
                             {
                                 FormId = i.Id,
                                 QuoteDetailsId = i.QuotationDetailsId,
                                 ScientistName = i.TLName,
                                 Chemist = i.ScientistName,
                                 Diff = q.DifficultyLevel,
                                 ProductName = i.ProductName,
                                 CASNo = i.CASNo,
                                 CATNo = i.CATNo,
                                 Qty = i.Qty,
                                 SubmittedQty = q.RequiredQty,
                                 SubmissionDate = i.SubmissionDate,
                                 ReviewStatus = q.ReviewSciStatus,
                                 AssignDate = q.QCApprovedDate,
                                 BatchNo = i.BatchCode,
                                 DataRemark = q.Remark,
                                 AvailableData = i.RbAdditionalAnalysis,
                                 PhysicalState = i.State,
                                 Appearance = i.Apearance,
                                 Hygroscopic = i.ChkHygroscopic,
                                 TempSensitive = i.TempSensitive,
                                 Lacrymatory = i.Lacrymatory,
                                 LightSensitivity = i.LightSensitivity,
                                 Photostability = i.Photostability,
                                 StabilityRelatedComment = i.StabilityRelatedComment,
                                 Stability = i.Stability,
                                 SaltFreeBase = i.RbSaltMentionName,
                                 COA = "",
                                 HPLC = i.HPLCPurity,
                                 RbAdditionalAnalysis = i.RbAdditionalAnalysis,
                                 IRAttachment = i.IRAttachment,
                                 MassAttachment = i.MassAttachment,
                                 HPLCGCELSDAttachment = i.PLCAttachment,
                                 NMRAttachment = i.NMRAttchment,
                                 qNMRAttachment = i.QNMRAttchment,
                                 TGAAttachment = i.TGAAttachment,
                                 CMRAttachment = i.CMRAttchment,
                                 DEPTAttachment = i.DEPTAttachment,
                                 HRMSAttachment = i.HRMSAttachment,
                                 ROIAttachment = i.ROIAttachment,
                                 ElementalAttachment = i.ElementralAttachment,
                                 SERAttachment = i.SERAttachment,
                                 GCAttachment = i.GCAttachment,
                                 ELSDAttachment = i.ELSDAttachment,
                                 ChairalAttachment = i.ChiralAttachmenrt,
                                 APCIMassAttachment = i.APCIMassAttachment,
                                 NMRInterpretaionAttachment = i.NMRInterpretaionAttachment,
                                 ApprovedStatus = i.ApprovalStatus,
                                 ApprovedAs = q.ApprovedAs,
                                 ApprovalComments = q.ApprovalComment,
                                 RecommondationRetest = q.RecommendedPeriod,
                                 ProductId = q.ProductId,
                                 StabilityRT = i.SolidForm,
                                 StabilitySolution = i.SolutionForm,
                                 chkNMRDone = i.chkNMRDone,
                                 chkCrystallizationDone = i.chkCrystallizationDone,
                                 N1NMRAttachment = i.N1NmrAttachment,
                                 ChiralHPLCAttachment = i.ChiralHPLCAttachment,
                                 IsotropicpurityAttachment = i.IsotropicpurityAttachment,
                                 TwoDNMRAttachment = i.TwoDNMRAttachment,
                                 QCApprovedDate = i.QCApprovedDate,
                                 COSYAttachment = i.COSYAttachment,
                                 CHNSAttachment = i.CHNSAttachment,
                                 StabilitydataAttachment = i.StabilitydataAttachment
                             }).ToList();

                model.ForEach(x =>
                {
                    x.ApprovedAsText = GetApproveStatusList(x.QuoteDetailsId, x.ApprovedStatus, true);
                });
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                         || (m.ApprovedAsText != null && m.ApprovedAsText.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        ).ToList();
                }

                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                var categoryData = db.Categories.AsNoTracking().ToList();
                var productCategoryData = db.Product_Category_Mapping.AsNoTracking().ToList();

                foreach (var itemObj in data)
                {
                    if (!string.IsNullOrEmpty(itemObj.AvailableData))
                    {
                        itemObj.AvailableData = itemObj.AvailableData.Replace("APCI Mass", "Mass Interpretaion");
                    }
                    itemObj.N1NMRAttachment = (itemObj.N1NMRAttachment != null ? "<a href='" + itemObj.N1NMRAttachment.Replace("..", "") + "' download='N1NMRAttachment'><i class='fa fa-download'></i></a>" : "");
                    itemObj.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + itemObj.ProductId + ", " + itemObj.QuoteDetailsId + ")'></i>";
                    if (!string.IsNullOrEmpty(itemObj.Diff))
                    {
                        foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                        {
                            var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                            var test = r.ToString();
                            string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                            int val = (int)r;
                            if (Convert.ToString(val) == itemObj.Diff)
                            {
                                itemObj.Diff = text;
                            }
                        }
                    }
                    if (itemObj.QCApprovedDate.HasValue)
                    {
                        itemObj.QCApprovedDateStr = itemObj.QCApprovedDate.Value.ToShortDateString();
                    }
                    if (itemObj.AssignDate.HasValue)
                    {
                        itemObj.AssignDatestr = itemObj.AssignDate.Value.ToShortDateString();
                    }
                    if (itemObj.SubmissionDate != null && itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.SubmissionDatestr = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.APIName = GetApiNameOfProduct(itemObj.ProductId.Value, categoryData, productCategoryData);
                    itemObj.ApprovedStatusText = GetApproveStatusList(itemObj.QuoteDetailsId, itemObj.ApprovedStatus);
                    itemObj.ApprovedAsText = GetApprovedAsList(itemObj.QuoteDetailsId, itemObj.ApprovedAs);
                    itemObj.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + itemObj.QuoteDetailsId + "\")' ></i>";
                    itemObj.RecommondationRetestText = "<input type='number' id='recommondationretest_" + itemObj.QuoteDetailsId + "' name='recommondationretest_" + itemObj.QuoteDetailsId + "' value='" + itemObj.RecommondationRetest + "' />";
                    itemObj.ChkSaveRow = "<input type='checkbox' data-formid='" + itemObj.FormId + "' value='" + itemObj.QuoteDetailsId + "' class='clsSaverow' />";
                    if (itemObj.Hygroscopic.HasValue && itemObj.Hygroscopic.Value)
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.TempSensitive.HasValue && itemObj.TempSensitive.Value)
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Lacrymatory.HasValue && itemObj.Lacrymatory.Value)
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Photostability.HasValue && itemObj.Photostability.Value)
                    {
                        itemObj.TextPhotostability = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextPhotostability = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.LightSensitivity.HasValue && itemObj.LightSensitivity.Value)
                    {
                        itemObj.TextLightSensitivity = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLightSensitivity = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.DraftSubmissionForm = itemObj.SubmissionDate.Value.ToShortDateString();
                    }

                    if (itemObj.chkNMRDone.HasValue && itemObj.chkNMRDone.Value)
                    {
                        itemObj.chkNMRDoneText = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.chkNMRDoneText = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.chkCrystallizationDone.HasValue && itemObj.chkCrystallizationDone.Value)
                    {
                        itemObj.chkCrystallizationDoneText = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.chkCrystallizationDoneText = "<i class='fa fa-close'></i>";
                    }

                    if (!string.IsNullOrEmpty(itemObj.RbAdditionalAnalysis))
                    {
                        itemObj.IR = itemObj.RbAdditionalAnalysis.Contains("IR") ? (itemObj.IRAttachment != null ? "<a href='" + itemObj.IRAttachment.ReplaceForFilepath() + "' download='IRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.Mass = itemObj.RbAdditionalAnalysis.Contains("Mass") ? (itemObj.MassAttachment != null ? "<a href='" + itemObj.MassAttachment.Replace("..", "") + "' download='MassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.HPLCGCELSD = itemObj.RbAdditionalAnalysis.Contains("HPLC/GC/ELSD") ? (itemObj.HPLCGCELSDAttachment != null ? "<a href='" + itemObj.HPLCGCELSDAttachment.Replace("..", "") + "' download='HPLCGCELSDAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.NMR = itemObj.RbAdditionalAnalysis.Contains("NMR") ? (itemObj.NMRAttachment != null ? "<a href='" + itemObj.NMRAttachment.Replace("..", "") + "' download='NMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.qNMR = itemObj.RbAdditionalAnalysis.Contains("qNMR") ? (itemObj.qNMRAttachment != null ? "<a href='" + itemObj.qNMRAttachment.Replace("..", "") + "' download='qNMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.TGA = itemObj.RbAdditionalAnalysis.Contains("TGA") ? (itemObj.TGAAttachment != null ? "<a href='" + itemObj.TGAAttachment.Replace("..", "") + "' download='TGAAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.CMR = itemObj.RbAdditionalAnalysis.Contains("CMR") ? (itemObj.CMRAttachment != null ? "<a href='" + itemObj.CMRAttachment.Replace("..", "") + "' download='CMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.DEPT = itemObj.RbAdditionalAnalysis.Contains("DEPT") ? (itemObj.DEPTAttachment != null ? "<a href='" + itemObj.DEPTAttachment.Replace("..", "") + "' download='DEPTAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.HRMS = itemObj.RbAdditionalAnalysis.Contains("HRMS") ? (itemObj.HRMSAttachment != null ? "<a href='" + itemObj.HRMSAttachment.Replace("..", "") + "' download='HRMSAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.ROI = itemObj.RbAdditionalAnalysis.Contains("ROI") ? (itemObj.ROIAttachment != null ? "<a href='" + itemObj.ROIAttachment.Replace("..", "") + "' download='ROIAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.Elemental = itemObj.RbAdditionalAnalysis.Contains("Elemental") ? (itemObj.ElementalAttachment != null ? "<a href='" + itemObj.ElementalAttachment.Replace("..", "") + "' download='ElementalAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.SER = itemObj.RbAdditionalAnalysis.Contains("CMR Interpretaion") ? (itemObj.SERAttachment != null ? "<a href='" + itemObj.SERAttachment.Replace("..", "") + "' download='SERAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.APCIMass = itemObj.RbAdditionalAnalysis.Contains("APCI Mass") ? (itemObj.APCIMassAttachment != null ? "<a href='" + itemObj.APCIMassAttachment.Replace("..", "") + "' download='APCIMassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.NMRInterpretaion = itemObj.RbAdditionalAnalysis.Contains("NMR Interpretaion") ? (itemObj.NMRInterpretaionAttachment != null ? "<a href='" + itemObj.NMRInterpretaionAttachment.Replace("..", "") + "' download='NMRInterpretaionAttachment'><i class='fa fa-download'></i></a>" : "") : "";

                        itemObj.TwoDNmr = itemObj.RbAdditionalAnalysis.Contains("2D NMR") ? (itemObj.TwoDNMRAttachment != null ? "<a href='" + itemObj.TwoDNMRAttachment.Replace("..", "") + "' download='TwoDNMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.COSY = itemObj.RbAdditionalAnalysis.Contains("COSY") ? (itemObj.COSYAttachment != null ? "<a href='" + itemObj.COSYAttachment.Replace("..", "") + "' download='COSYAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.CHNS = itemObj.RbAdditionalAnalysis.Contains("CHNS") ? (itemObj.CHNSAttachment != null ? "<a href='" + itemObj.CHNSAttachment.Replace("..", "") + "' download='CHNSAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.Stabilitydata = itemObj.RbAdditionalAnalysis.Contains("Stability Data") ? (itemObj.StabilitydataAttachment != null ? "<a href='" + itemObj.StabilitydataAttachment.Replace("..", "") + "' download='StabilitydataAttachment'><i class='fa fa-download'></i></a>" : "") : "";

                        itemObj.ChemDrawFile = !string.IsNullOrEmpty(itemObj.ChemdrawFileAttachment) ? "<a href='javascript:void(0)' onclick='DownloadChemDraw(" + itemObj.FormId + ")'><i class='fa fa-download'></i></a>" : "";
                    }
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == itemObj.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                             query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                             query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    itemObj.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                }
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);
                throw ex;
            }
        }
        public string GetApproveStatusList(int QuoteDetailsId, string approvedstatus, bool isTextReturned = false)
        {
            var stringtext = "";
            var str = "<select id='approvestatus_" + QuoteDetailsId + "' class='clsappropro'><option value=''>--Select--</option>";
            foreach (EnumList.ApprovedStatus r in Enum.GetValues(typeof(EnumList.ApprovedStatus)))
            {
                var item = Enum.GetName(typeof(EnumList.ApprovedStatus), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ApprovedStatus)(int)r);
                int val = (int)r;
                string selected = "";
                if (Convert.ToString(val) == approvedstatus)
                {
                    stringtext = text;
                    selected = "selected ";
                }
                str += "<option value='" + val + "' " + selected + ">" + text + "</option>";

            }
            str += "</select>";
            if (isTextReturned)
            {
                return stringtext;
            }
            return str;
        }
        public string GetApprovedAsList(int QuoteDetailsId, string approvedas)
        {
            var str = "<select id='approveas_" + QuoteDetailsId + "' class='clsapproas'><option value=''>--Select--</option>";
            foreach (EnumList.ApprovedAs r in Enum.GetValues(typeof(EnumList.ApprovedAs)))
            {
                var item = Enum.GetName(typeof(EnumList.ApprovedAs), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ApprovedAs)(int)r);
                int val = (int)r;
                string selected = "";
                if (Convert.ToString(val) == approvedas)
                {
                    selected = "selected ";
                }
                str += "<option value='" + val + "' " + selected + ">" + text + "</option>";

            }
            str += "</select>";

            return str;
        }

        [HttpPost]
        public ActionResult LoadQCDispatchedInstockData()
        {
            try
            {
                string approvedstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                string instockProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);

                var model = (from quo in db.SZ_Quotation.AsNoTracking()
                             join q in db.SZ_QuotationDetail.AsNoTracking() on quo.Id equals q.QuoteId
                             join i in db.SZ_MasterCOA.AsNoTracking() on q.AdditionalBatchNo equals i.BatchId
                             join l in db.SZ_QuotationDetailLog.AsNoTracking() on q.Id equals l.QuoteDetailsId
                             where (q.MoveToProject == true) && string.IsNullOrEmpty(q.TrackingNo)
                             && (q.IsOnHold == false || q.IsOnHold == null)
                             && (q.ProjectType == instockProjectType)
                             && quo.CountryType == "Domestic"
                             && (q.ApprovalStatus != approvedstatus || q.ApprovalStatus == null)
                             && q.MoveToProject == true
                             && (q.MoveToDispatch == null || q.MoveToDispatch == false)
                             && (q.MoveToInvoice == null || q.MoveToInvoice == false)
                             && ((string.IsNullOrEmpty(l.Before) && l.After == "In-Stock") || (l.Before == "No Action" && l.After == "In-Stock"))
                             && l.FieldName == "Project Type"
                             orderby q.CreatedDate descending
                             select new QCModel()
                             {
                                 FormId = i.Id,
                                 QuoteDetailsId = q.Id,
                                 ScientistName = i.CreatedBy,
                                 Chemist = "",
                                 Diff = q.DifficultyLevel,
                                 ProductName = i.ProductName,
                                 CASNo = i.CASNo,
                                 CATNo = i.CATNo,
                                 Qty = i.QuantityAvailable,
                                 SubmittedQty = q.RequiredQty,
                                 SubmissionDate = i.CreatedDate.Value,
                                 ReviewStatus = q.ReviewSciStatus,
                                 AssignDate = q.MoveToScientistDate,
                                 AdditionalBatchNo = q.AdditionalBatchNo,
                                 ProductId = q.ProductId,
                                 DataRemark = q.Remark,
                                 DraftSubmissionForm = "",
                                 RbAdditionalAnalysis = i.Attachment,
                                 AvailableData = i.Attachment,
                                 PhysicalState = i.PhysicalState,
                                 Appearance = i.AppearanceProduct,
                                 COA = "",
                                 ApprovedStatus = q.ApprovalStatus,
                                 ApprovedAs = q.ApprovedAs,
                                 ApprovalComments = q.ApprovalComment,
                                 RecommondationRetest = q.RecommendedPeriod,
                                 QCApprovedDate = q.QCApprovedDate
                             }).ToList();
                model.ForEach(x =>
                {
                    x.ApprovedAsText = GetApproveStatusList(x.QuoteDetailsId, x.ApprovedStatus, true);
                });
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ApprovedAsText != null && m.ApprovedAsText.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        ).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                var categoryData = db.Categories.AsNoTracking().ToList();
                var productCategoryData = db.Product_Category_Mapping.AsNoTracking().ToList();
                var proIds = data.Select(x => x.ProductId).Distinct().ToList();
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var productsData = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                foreach (var itemObj in data)
                {
                    itemObj.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + itemObj.ProductId + ", " + itemObj.QuoteDetailsId + ")'></i>";
                    if (itemObj.QCApprovedDate.HasValue)
                    {
                        itemObj.QCApprovedDateStr = itemObj.QCApprovedDate.Value.ToShortDateString();
                    }
                    if (!string.IsNullOrEmpty(itemObj.Diff))
                    {
                        foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                        {
                            var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                            var test = r.ToString();
                            string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                            int val = (int)r;
                            if (Convert.ToString(val) == itemObj.Diff)
                            {
                                itemObj.Diff = text;
                            }
                        }
                    }
                    itemObj.AdditionalBatchNoText = "<select id='additionalBatch_" + itemObj.QuoteDetailsId + "' data-quotationdetailsid='" + itemObj.QuoteDetailsId + "' class='dddladditionalbatch'><option value=''>--Select--</option>";
                    if (itemObj.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == itemObj.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == itemObj.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            proBatchData.ForEach(r =>
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;

                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == itemObj.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    itemObj.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }

                                itemObj.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            });
                        }
                    }
                    itemObj.AdditionalBatchNoText += "</select>";
                    if (itemObj.AssignDate.HasValue)
                    {
                        itemObj.AssignDatestr = itemObj.AssignDate.Value.ToShortDateString();
                    }
                    if (itemObj.SubmissionDate != null && itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.SubmissionDatestr = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.APIName = GetApiNameOfProduct(itemObj.ProductId.Value, categoryData, productCategoryData);
                    itemObj.ApprovedStatusText = GetApproveStatusList(itemObj.QuoteDetailsId, itemObj.ApprovedStatus);
                    itemObj.ApprovedAsText = GetApprovedAsList(itemObj.QuoteDetailsId, itemObj.ApprovedAs);
                    itemObj.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + itemObj.QuoteDetailsId + "\")' ></i>";
                    itemObj.RecommondationRetestText = "<input type='number' id='recommondationretest_" + itemObj.QuoteDetailsId + "' name='recommondationretest_" + itemObj.QuoteDetailsId + "' value='" + itemObj.RecommondationRetest + "' />";
                    itemObj.ChkSaveRow = "<input type='checkbox' value='" + itemObj.QuoteDetailsId + "' class='clsSaverow' />";
                    if (!string.IsNullOrEmpty(itemObj.RbAdditionalAnalysis))
                    {
                        itemObj.IR = itemObj.RbAdditionalAnalysis.Contains("IR") ? "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.Mass = itemObj.RbAdditionalAnalysis.Contains("Mass") ? "<i id='mass_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.HPLCGCELSD = itemObj.RbAdditionalAnalysis.Contains("HPLC/GC/ELSD") ? "<i id='hplc_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.NMR = itemObj.RbAdditionalAnalysis.Contains("NMR") ? "<i id='nmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.qNMR = itemObj.RbAdditionalAnalysis.Contains("qNMR") ? "<i id='qnmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.TGA = itemObj.RbAdditionalAnalysis.Contains("TGA") ? "<i id='tga_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.CMR = itemObj.RbAdditionalAnalysis.Contains("CMR") ? "<i id='cmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.DEPT = itemObj.RbAdditionalAnalysis.Contains("DEPT") ? "<i id='dept_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.HRMS = itemObj.RbAdditionalAnalysis.Contains("HRMS") ? "<i id='hrms_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.ROI = itemObj.RbAdditionalAnalysis.Contains("ROI") ? "<i id='roi_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.Elemental = itemObj.RbAdditionalAnalysis.Contains("Elemental") ? "<i id='elementral_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.SER = itemObj.RbAdditionalAnalysis.Contains("CMR Interpretaion") ? "<i id='ser_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.APCIMass = itemObj.RbAdditionalAnalysis.Contains("APCI Mass") ? "<i id='apcimass_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='apcimass_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.NMRInterpretaion = itemObj.RbAdditionalAnalysis.Contains("NMR Interpretaion") ? "<i id='nmrinterpretaion_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='nmrinterpretaion_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    }

                    if (itemObj.Hygroscopic.HasValue && itemObj.Hygroscopic.Value)
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.TempSensitive.HasValue && itemObj.TempSensitive.Value)
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Lacrymatory.HasValue && itemObj.Lacrymatory.Value)
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.DraftSubmissionForm = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.Qty = "<span id='availableqty_" + itemObj.QuoteDetailsId + "'>" + itemObj.Qty + "</span>";
                    itemObj.AvailableData = "<span id='availabledata_" + itemObj.QuoteDetailsId + "'>" + itemObj.AvailableData + "</span>";
                    itemObj.PhysicalState = "<span id='physicalstate_" + itemObj.QuoteDetailsId + "'>" + itemObj.PhysicalState + "</span>";
                    itemObj.Appearance = "<span id='appearance_" + itemObj.QuoteDetailsId + "'>" + itemObj.Appearance + "</span>";
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == itemObj.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    itemObj.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                }

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadQCWorkingStandardData()
        {
            try
            {
                string approvedstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);

                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();

                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var model = (from q in db.SZ_QuotationDetail.AsNoTracking()
                             join id in db.SZ_Inventory.AsNoTracking() on q.AdditionalBatchNo equals id.Id into pss
                             from id in pss.DefaultIfEmpty()
                             join i in db.SZ_MasterCOA.AsNoTracking() on id.Id equals i.BatchId into ps
                             from i in ps.DefaultIfEmpty()
                             where q.IsQC == true && (q.ApprovalStatus != approvedstatus || q.ApprovalStatus == null)
                             orderby q.CreatedDate descending
                             select new QCModel()
                             {
                                 FormId = i != null ? i.Id : 0,
                                 QuoteDetailsId = q.Id,
                                 QuoteRefNo = q.SZ_Quotation.Ref,
                                 ScientistName = "",
                                 Chemist = "",
                                 Diff = q.DifficultyLevel,
                                 ProductName = q.ProductName,
                                 CASNo = q.CASNo,
                                 CATNo = q.CATNo,
                                 Qty = "",
                                 SubmittedQty = q.RequiredQty,
                                 SubmissionDate = i != null ? i.CreatedDate : (DateTime?)null,
                                 ReviewStatus = q.ReviewSciStatus,
                                 AssignDate = q.MoveToScientistDate,
                                 DataRemark = q.Remark,
                                 DraftSubmissionForm = "",
                                 AvailableData = i != null ? i.Attachment : "",
                                 PhysicalState = i != null ? i.PhysicalState : "",
                                 Appearance = i != null ? i.AppearanceProduct : "",
                                 Hygroscopic = false,
                                 TempSensitive = false,
                                 Lacrymatory = false,
                                 COA = "",
                                 HPLC = "",
                                 RbAdditionalAnalysis = i != null ? i.Attachment : "",
                                 ApprovedStatus = q.ApprovalStatus,
                                 ApprovedAs = q.ApprovedAs,
                                 ApprovalComments = q.ApprovalComment,
                                 PrimaryStdOrdered = q.PrimaryStdOrdered,
                                 ColumnOrder = q.ColumnOrder,
                                 SystemSuitability = q.SystemSuitability,
                                 RecommondationRetest = q.RecommendedPeriod,
                                 ProductId = q.ProductId,
                                 QCApprovedDate = q.QCApprovedDate
                             }).ToList();
                model.ForEach(x =>
                {
                    x.ApprovedAsText = GetApproveStatusList(x.QuoteDetailsId, x.ApprovedStatus, true);
                });
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                         || (m.ApprovedAsText != null && m.ApprovedAsText.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        ).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();

                var data = model.Skip(skip).Take(pageSize).ToList();
                var categoryData = db.Categories.AsNoTracking().ToList();
                var productCategoryData = db.Product_Category_Mapping.AsNoTracking().ToList();
                var proIds = data.Select(x => x.ProductId).Distinct().ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var productsData = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                foreach (var itemObj in data)
                {
                    itemObj.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + itemObj.ProductId + ", " + itemObj.QuoteDetailsId + ")'></i>";
                    if (!string.IsNullOrEmpty(itemObj.Diff))
                    {
                        foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                        {
                            var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                            var test = r.ToString();
                            string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                            int val = (int)r;
                            if (Convert.ToString(val) == itemObj.Diff)
                            {
                                itemObj.Diff = text;
                            }
                        }
                    }
                    itemObj.AdditionalBatchNoText = "<select id='additionalBatch_" + itemObj.QuoteDetailsId + "' data-quotationdetailsid='" + itemObj.QuoteDetailsId + "' class='dddladditionalbatch'><option value=''>--Select--</option>";
                    if (itemObj.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == itemObj.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == itemObj.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            proBatchData.ForEach(r =>
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;

                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == itemObj.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    itemObj.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }

                                itemObj.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            });
                        }
                    }
                    if (itemObj.QCApprovedDate.HasValue)
                    {
                        itemObj.QCApprovedDateStr = itemObj.QCApprovedDate.Value.ToShortDateString();
                    }
                    if (itemObj.AssignDate.HasValue)
                    {
                        itemObj.AssignDatestr = itemObj.AssignDate.Value.ToShortDateString();
                    }
                    if (itemObj.SubmissionDate != null && itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.SubmissionDatestr = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.APIName = GetApiNameOfProduct(itemObj.ProductId.Value, categoryData, productCategoryData);
                    itemObj.ApprovedStatusText = GetApproveStatusList(itemObj.QuoteDetailsId, itemObj.ApprovedStatus);
                    itemObj.ApprovedAsText = GetApprovedAsList(itemObj.QuoteDetailsId, itemObj.ApprovedAs);
                    itemObj.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + itemObj.QuoteDetailsId + "\")' ></i>";
                    itemObj.RecommondationRetestText = "<input type='number' id='recommondationretest_" + itemObj.QuoteDetailsId + "' name='recommondationretest_" + itemObj.QuoteDetailsId + "' value='" + itemObj.RecommondationRetest + "' />";
                    itemObj.ChkSaveRow = "<input type='checkbox' value='" + itemObj.QuoteDetailsId + "' class='clsSaverow' />";
                    itemObj.IR = itemObj.RbAdditionalAnalysis.Contains("IR") ? "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.Mass = itemObj.RbAdditionalAnalysis.Contains("Mass") ? "<i id='mass_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.HPLCGCELSD = itemObj.RbAdditionalAnalysis.Contains("HPLC/GC/ELSD") ? "<i id='hplc_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.NMR = itemObj.RbAdditionalAnalysis.Contains("NMR") ? "<i id='nmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.qNMR = itemObj.RbAdditionalAnalysis.Contains("qNMR") ? "<i id='qnmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.TGA = itemObj.RbAdditionalAnalysis.Contains("TGA") ? "<i id='tga_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.CMR = itemObj.RbAdditionalAnalysis.Contains("CMR") ? "<i id='cmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.DEPT = itemObj.RbAdditionalAnalysis.Contains("DEPT") ? "<i id='dept_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.HRMS = itemObj.RbAdditionalAnalysis.Contains("HRMS") ? "<i id='hrms_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.ROI = itemObj.RbAdditionalAnalysis.Contains("ROI") ? "<i id='roi_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.Elemental = itemObj.RbAdditionalAnalysis.Contains("Elemental") ? "<i id='elementral_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.SER = itemObj.RbAdditionalAnalysis.Contains("CMR Interpretaion") ? "<i id='ser_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.APCIMass = itemObj.RbAdditionalAnalysis.Contains("APCI Mass") ? "<i id='apcimass_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='apcimass_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    itemObj.NMRInterpretaion = itemObj.RbAdditionalAnalysis.Contains("NMR Interpretaion") ? "<i id='nmrinterpretaion_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='nmrinterpretaion_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    if (itemObj.Hygroscopic.HasValue && itemObj.Hygroscopic.Value)
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.TempSensitive.HasValue && itemObj.TempSensitive.Value)
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Lacrymatory.HasValue && itemObj.Lacrymatory.Value)
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-close'></i>";
                    }
                    itemObj.PrimaryStdOrderedText = "<input type='text' id='PrimaryStdOrdered_" + itemObj.QuoteDetailsId + "' name='PrimaryStdOrdered_" + itemObj.QuoteDetailsId + "' value='" + itemObj.PrimaryStdOrdered + "' />";
                    itemObj.ColumnOrderText = "<input type='text' id='ColumnOrder_" + itemObj.QuoteDetailsId + "' name='ColumnOrder_" + itemObj.QuoteDetailsId + "' value='" + itemObj.ColumnOrder + "' />";
                    itemObj.SystemSuitabilityText = "<input type='text' id='SystemSuitability_" + itemObj.QuoteDetailsId + "' name='SystemSuitability_" + itemObj.QuoteDetailsId + "' value='" + itemObj.SystemSuitability + "' />";
                    if (itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.DraftSubmissionForm = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.Qty = "<span id='availableqty_" + itemObj.QuoteDetailsId + "'>" + itemObj.Qty + "</span>";

                    itemObj.AvailableData = "<span id='availabledata_" + itemObj.QuoteDetailsId + "'>" + itemObj.AvailableData + "</span>";
                    itemObj.PhysicalState = "<span id='physicalstate_" + itemObj.QuoteDetailsId + "'>" + itemObj.PhysicalState + "</span>";
                    itemObj.Appearance = "<span id='appearance_" + itemObj.QuoteDetailsId + "'>" + itemObj.Appearance + "</span>";
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == itemObj.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    itemObj.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                }

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadQCInventoryData()
        {
            try
            {
                string approvedstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);

                string ProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                // Getting all Customer data  
                var model = (from q in db.SZ_QuotationDetail.AsNoTracking()
                             join t3 in db.SZ_QuoteDetails_Form.AsNoTracking() on q.Id equals t3.QuoteDetailsId
                             join i in db.SZ_QuoteDetailForm.AsNoTracking() on t3.FormId equals i.Id
                             where (i.ApprovalStatus != approvedstatus || i.ApprovalStatus == null)
                             && i.IsDispatchedEntry == true
                             orderby i.CreatedDate descending
                             select new QCModel()
                             {
                                 FormId = i != null ? i.Id : 0,
                                 QuoteDetailsId = q.Id,
                                 ScientistName = i != null ? i.TLName : "",
                                 Chemist = i != null ? i.ScientistName : "",
                                 Diff = q.DifficultyLevel,
                                 ProductName = q.ProductName,
                                 CASNo = q.CASNo,
                                 CATNo = q.CATNo,
                                 Qty = i != null ? i.Qty : "",
                                 SubmittedQty = q.RequiredQty,
                                 SubmissionDate = i != null ? i.SubmissionDate : (DateTime?)null,
                                 ReviewStatus = q.ReviewSciStatus,
                                 AssignDate = q.MoveToScientistDate,
                                 BatchNo = i != null ? i.BatchCode : "",
                                 DataRemark = i != null ? i.RbAdditionalAnalysis : "",
                                 DraftSubmissionForm = "",
                                 AvailableData = "",
                                 PhysicalState = i != null ? i.State : "",
                                 Appearance = i != null ? i.Apearance : "",
                                 Hygroscopic = i != null ? i.ChkHygroscopic : false,
                                 TempSensitive = i != null ? i.TempSensitive : false,
                                 Lacrymatory = i != null ? i.Lacrymatory : false,
                                 Photostability = i != null ? i.Photostability : false,
                                 StabilityRelatedComment = i != null ? i.StabilityRelatedComment : "",
                                 Stability = i != null ? i.Stability : "",
                                 SaltFreeBase = i != null ? i.RbSaltMentionName : "",
                                 COA = "",
                                 HPLC = i != null ? i.HPLCPurity : "",
                                 RbAdditionalAnalysis = i != null ? i.RbAdditionalAnalysis : "",
                                 IRAttachment = i != null ? i.IRAttachment : "",
                                 MassAttachment = i != null ? i.MassAttachment : "",
                                 HPLCGCELSDAttachment = i != null ? i.PLCAttachment : "",
                                 NMRAttachment = i != null ? i.NMRAttchment : "",
                                 qNMRAttachment = i != null ? i.QNMRAttchment : "",
                                 TGAAttachment = i != null ? i.TGAAttachment : "",
                                 CMRAttachment = i != null ? i.CMRAttchment : "",
                                 DEPTAttachment = i != null ? i.DEPTAttachment : "",
                                 HRMSAttachment = i != null ? i.HRMSAttachment : "",
                                 ROIAttachment = i != null ? i.ROIAttachment : "",
                                 ElementalAttachment = i != null ? i.ElementralAttachment : "",
                                 SERAttachment = i != null ? i.SERAttachment : "",
                                 GCAttachment = i != null ? i.GCAttachment : "",
                                 ELSDAttachment = i != null ? i.ELSDAttachment : "",
                                 ChairalAttachment = i != null ? i.ChiralAttachmenrt : "",
                                 N1NMRAttachment = i != null ? i.N1NmrAttachment : "",
                                 ApprovedStatus = q.ApprovalStatus,
                                 ApprovedAs = q.ApprovedAs,
                                 ApprovalComments = q.ApprovalComment,
                                 RecommondationRetest = q.RecommendedPeriod,
                                 ProductId = q.ProductId,
                                 StabilityRT = i.SolidForm,
                                 StabilitySolution = i.SolutionForm,
                                 chkNMRDone = i.chkNMRDone,
                                 chkCrystallizationDone = i.chkCrystallizationDone,
                                 ChemdrawFileAttachment = i.ChemdrawFileAttachment,
                                 QCApprovedDate = i != null ? i.QCApprovedDate : null
                             }).ToList();

                model.ForEach(x =>
                {
                    x.ApprovedAsText = GetApproveStatusList(x.QuoteDetailsId, x.ApprovedStatus, true);
                });
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ApprovedAsText != null && m.ApprovedAsText.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        ).ToList();
                }

                recordsTotal = model.Count();
                var data = model.Skip(skip).Take(pageSize).ToList();
                var categoryData = db.Categories.AsNoTracking().ToList();
                var productCategoryData = db.Product_Category_Mapping.AsNoTracking().ToList();
                var proIds = data.Select(x => x.ProductId).Distinct().ToList();
                var productsData = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                foreach (var itemObj in data)
                {
                    if (!string.IsNullOrEmpty(itemObj.AvailableData))
                    {
                        itemObj.AvailableData = itemObj.AvailableData.Replace("APCI Mass", "Mass Interpretaion");
                    }
                    if (!string.IsNullOrEmpty(itemObj.N1NMRAttachment))
                    {
                        itemObj.N1NMRAttachment = (itemObj.N1NMRAttachment != null ? "<a href='" + itemObj.N1NMRAttachment.Replace("..", "") + "' download='N1NMRAttachment'><i class='fa fa-download'></i></a>" : "");
                    }
                    itemObj.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + itemObj.ProductId + ", " + itemObj.QuoteDetailsId + ")'></i>";
                    if (!string.IsNullOrEmpty(itemObj.Diff))
                    {
                        foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                        {
                            var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                            var test = r.ToString();
                            string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                            int val = (int)r;
                            if (Convert.ToString(val) == itemObj.Diff)
                            {
                                itemObj.Diff = text;
                            }
                        }
                    }
                    if (itemObj.QCApprovedDate.HasValue)
                    {
                        itemObj.QCApprovedDateStr = itemObj.QCApprovedDate.Value.ToShortDateString();
                    }
                    if (itemObj.AssignDate.HasValue)
                    {
                        itemObj.AssignDatestr = itemObj.AssignDate.Value.ToShortDateString();
                    }
                    if (itemObj.SubmissionDate != null && itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.SubmissionDatestr = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.APIName = GetApiNameOfProduct(itemObj.ProductId.Value, categoryData, productCategoryData);
                    itemObj.ApprovedStatusText = GetApproveStatusList(itemObj.QuoteDetailsId, itemObj.ApprovedStatus);
                    itemObj.ApprovedAsText = GetApprovedAsList(itemObj.QuoteDetailsId, itemObj.ApprovedAs);
                    itemObj.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + itemObj.QuoteDetailsId + "\")' ></i>";
                    itemObj.RecommondationRetestText = "<input type='number' id='recommondationretest_" + itemObj.QuoteDetailsId + "' name='recommondationretest_" + itemObj.QuoteDetailsId + "' value='" + itemObj.RecommondationRetest + "' />";
                    itemObj.ChkSaveRow = "<input type='checkbox' data-formid='" + itemObj.FormId + "' value='" + itemObj.QuoteDetailsId + "' class='clsSaverow' />";
                    if (!string.IsNullOrEmpty(itemObj.RbAdditionalAnalysis))
                    {
                        itemObj.IR = itemObj.RbAdditionalAnalysis.Contains("IR") ? (itemObj.IRAttachment != null ? "<a href='" + itemObj.IRAttachment.Replace("..", "") + "' download='IRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.Mass = itemObj.RbAdditionalAnalysis.Contains("Mass") ? (itemObj.MassAttachment != null ? "<a href='" + itemObj.MassAttachment.Replace("..", "") + "' download='MassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.HPLCGCELSD = itemObj.RbAdditionalAnalysis.Contains("HPLC/GC/ELSD") ? (itemObj.HPLCGCELSDAttachment != null ? "<a href='" + itemObj.HPLCGCELSDAttachment.Replace("..", "") + "' download='HPLCGCELSDAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.NMR = itemObj.RbAdditionalAnalysis.Contains("NMR") ? (itemObj.NMRAttachment != null ? "<a href='" + itemObj.NMRAttachment.Replace("..", "") + "' download='NMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.qNMR = itemObj.RbAdditionalAnalysis.Contains("qNMR") ? (itemObj.qNMRAttachment != null ? "<a href='" + itemObj.qNMRAttachment.Replace("..", "") + "' download='qNMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.TGA = itemObj.RbAdditionalAnalysis.Contains("TGA") ? (itemObj.TGAAttachment != null ? "<a href='" + itemObj.TGAAttachment.Replace("..", "") + "' download='TGAAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.CMR = itemObj.RbAdditionalAnalysis.Contains("CMR") ? (itemObj.CMRAttachment != null ? "<a href='" + itemObj.CMRAttachment.Replace("..", "") + "' download='CMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.DEPT = itemObj.RbAdditionalAnalysis.Contains("DEPT") ? (itemObj.DEPTAttachment != null ? "<a href='" + itemObj.DEPTAttachment.Replace("..", "") + "' download='DEPTAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.HRMS = itemObj.RbAdditionalAnalysis.Contains("HRMS") ? (itemObj.HRMSAttachment != null ? "<a href='" + itemObj.HRMSAttachment.Replace("..", "") + "' download='HRMSAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.ROI = itemObj.RbAdditionalAnalysis.Contains("ROI") ? (itemObj.ROIAttachment != null ? "<a href='" + itemObj.ROIAttachment.Replace("..", "") + "' download='ROIAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.Elemental = itemObj.RbAdditionalAnalysis.Contains("Elemental") ? (itemObj.ElementalAttachment != null ? "<a href='" + itemObj.ElementalAttachment.Replace("..", "") + "' download='ElementalAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.SER = itemObj.RbAdditionalAnalysis.Contains("CMR Interpretaion") ? (itemObj.SERAttachment != null ? "<a href='" + itemObj.SERAttachment.Replace("..", "") + "' download='SERAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.APCIMass = itemObj.RbAdditionalAnalysis.Contains("APCI Mass") ? (itemObj.APCIMassAttachment != null ? "<a href='" + itemObj.APCIMassAttachment.Replace("..", "") + "' download='APCIMassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.NMRInterpretaion = itemObj.RbAdditionalAnalysis.Contains("NMR Interpretaion") ? (itemObj.NMRInterpretaionAttachment != null ? "<a href='" + itemObj.NMRInterpretaionAttachment.Replace("..", "") + "' download='NMRInterpretaionAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.ChemDrawFile = !string.IsNullOrEmpty(itemObj.ChemdrawFileAttachment) ? "<a href='javascript:void(0)' onclick='DownloadChemDraw(" + itemObj.FormId + ")'><i class='fa fa-download'></i></a>" : "";
                    }
                    if (itemObj.Hygroscopic.HasValue && itemObj.Hygroscopic.Value)
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.TempSensitive.HasValue && itemObj.TempSensitive.Value)
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Lacrymatory.HasValue && itemObj.Lacrymatory.Value)
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.chkNMRDone.HasValue && itemObj.chkNMRDone.Value)
                    {
                        itemObj.chkNMRDoneText = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.chkNMRDoneText = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.chkCrystallizationDone.HasValue && itemObj.chkCrystallizationDone.Value)
                    {
                        itemObj.chkCrystallizationDoneText = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.chkCrystallizationDoneText = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.DraftSubmissionForm = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    if (itemObj.Photostability.HasValue && itemObj.Photostability.Value)
                    {
                        itemObj.TextPhotostability = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextPhotostability = "<i class='fa fa-close'></i>";
                    }
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == itemObj.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    itemObj.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                }

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }


        public ActionResult DownloadChemDraw(int id)
        {
            var formdata = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (formdata == null)
                return null;

            string startPath = Server.MapPath(formdata.ChemdrawFileAttachment.Replace("..", "~"));
            string zipPath = Server.MapPath("~/Content/NewProducts/" + Guid.NewGuid().ToString() + ".zip");
            string[] Filenames = new string[] { startPath };
            using (ZipFile zip = new ZipFile())
            {
                zip.AddFiles(Filenames, "Chemdraw File");//Zip file inside filename  
                zip.Save(zipPath);//location and name for creating zip file  
            }
            return File(zipPath, "application/zip", Server.UrlEncode("ChemDraw-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".zip"));

        }

        [HttpPost]
        public ActionResult LoadQCApprovedData()
        {
            try
            {
                string approvedstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);

                string ProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var model = (from q in db.SZ_QuotationDetail.AsNoTracking()
                             where q.ApprovalStatus == approvedstatus
                             orderby q.QCApprovedDate descending
                             select new QCModel()
                             {
                                 QuoteDetailsId = q.Id,
                                 ScientistName = q.SubScientistName,
                                 Chemist = q.Chemist,
                                 Diff = q.DifficultyLevel,
                                 ProductName = q.ProductName,
                                 CASNo = q.CASNo,
                                 CATNo = q.CATNo,
                                 Qty = q.RequiredQty,
                                 SubmittedQty = q.RequiredQty,

                                 ReviewStatus = q.ReviewSciStatus,
                                 AssignDate = q.MoveToScientistDate,
                                 DataRemark = q.Remark,
                                 DraftSubmissionForm = "",
                                 COA = "",
                                 ApprovedStatus = q.ApprovalStatus,
                                 ApprovedAs = q.ApprovedAs,
                                 ApprovalComments = q.ApprovalComment,
                                 RecommondationRetest = q.RecommendedPeriod,
                                 ProductId = q.ProductId,
                                 QCApprovedDate = q.QCApprovedDate
                             }).ToList();
                model.ForEach(x =>
                {
                    x.ApprovedAsText = GetApproveStatusList(x.QuoteDetailsId, x.ApprovedStatus, true);
                });
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ApprovedAsText != null && m.ApprovedAsText.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        ).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                var categoryData = db.Categories.AsNoTracking().ToList();
                var productCategoryData = db.Product_Category_Mapping.AsNoTracking().ToList();
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();


                foreach (var itemObj in data)
                {
                    itemObj.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + itemObj.ProductId + ", " + itemObj.QuoteDetailsId + ")'></i>";
                    if (!string.IsNullOrEmpty(itemObj.Diff))
                    {
                        foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                        {
                            var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                            var test = r.ToString();
                            string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                            int val = (int)r;
                            if (Convert.ToString(val) == itemObj.Diff)
                            {
                                itemObj.Diff = text;
                            }
                        }
                    }
                    if (itemObj.QCApprovedDate.HasValue)
                    {
                        itemObj.QCApprovedDateStr = itemObj.QCApprovedDate.Value.ToShortDateString();
                    }
                    if (itemObj.AssignDate.HasValue)
                    {
                        itemObj.AssignDatestr = itemObj.AssignDate.Value.ToShortDateString();
                    }
                    if (itemObj.SubmissionDate != null && itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.SubmissionDatestr = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.APIName = GetApiNameOfProduct(itemObj.ProductId.Value, categoryData, productCategoryData);
                    //itemObj.CATNo = "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                    itemObj.ApprovedStatusText = GetApproveStatusList(itemObj.QuoteDetailsId, itemObj.ApprovedStatus);
                    itemObj.ApprovedAsText = GetApprovedAsList(itemObj.QuoteDetailsId, itemObj.ApprovedAs);
                    //itemObj.ApprovalCommentsText = "<input type='text' id='approvalcomment_" + itemObj.FormId + "' name='approvalcomment_" + itemObj.FormId + "' value='" + itemObj.ApprovalComments + "' />";
                    itemObj.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + itemObj.QuoteDetailsId + "\")' ></i>";
                    itemObj.RecommondationRetestText = "<input type='number' id='recommondationretest_" + itemObj.QuoteDetailsId + "' name='recommondationretest_" + itemObj.QuoteDetailsId + "' value='" + itemObj.RecommondationRetest + "' />";
                    itemObj.ChkSaveRow = "<input type='checkbox' value='" + itemObj.QuoteDetailsId + "' class='clsSaverow' />";

                    if (!string.IsNullOrEmpty(itemObj.RbAdditionalAnalysis))
                    {
                        itemObj.IR = itemObj.RbAdditionalAnalysis.Contains("IR") ? (itemObj.IRAttachment != null ? "<a href='" + itemObj.IRAttachment.ReplaceForFilepath() + "' download='IRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.Mass = itemObj.RbAdditionalAnalysis.Contains("Mass") ? (itemObj.MassAttachment != null ? "<a href='" + itemObj.MassAttachment.Replace("..", "") + "' download='MassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.HPLCGCELSD = itemObj.RbAdditionalAnalysis.Contains("HPLC/GC/ELSD") ? (itemObj.HPLCGCELSDAttachment != null ? "<a href='" + itemObj.HPLCGCELSDAttachment.Replace("..", "") + "' download='HPLCGCELSDAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.NMR = itemObj.RbAdditionalAnalysis.Contains("NMR") ? (itemObj.NMRAttachment != null ? "<a href='" + itemObj.NMRAttachment.Replace("..", "") + "' download='NMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.qNMR = itemObj.RbAdditionalAnalysis.Contains("qNMR") ? (itemObj.qNMRAttachment != null ? "<a href='" + itemObj.qNMRAttachment.Replace("..", "") + "' download='qNMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.TGA = itemObj.RbAdditionalAnalysis.Contains("TGA") ? (itemObj.TGAAttachment != null ? "<a href='" + itemObj.TGAAttachment.Replace("..", "") + "' download='TGAAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.CMR = itemObj.RbAdditionalAnalysis.Contains("CMR") ? (itemObj.CMRAttachment != null ? "<a href='" + itemObj.CMRAttachment.Replace("..", "") + "' download='CMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.DEPT = itemObj.RbAdditionalAnalysis.Contains("DEPT") ? (itemObj.DEPTAttachment != null ? "<a href='" + itemObj.DEPTAttachment.Replace("..", "") + "' download='DEPTAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.HRMS = itemObj.RbAdditionalAnalysis.Contains("HRMS") ? (itemObj.HRMSAttachment != null ? "<a href='" + itemObj.HRMSAttachment.Replace("..", "") + "' download='HRMSAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.ROI = itemObj.RbAdditionalAnalysis.Contains("ROI") ? (itemObj.ROIAttachment != null ? "<a href='" + itemObj.ROIAttachment.Replace("..", "") + "' download='ROIAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.Elemental = itemObj.RbAdditionalAnalysis.Contains("Elemental") ? (itemObj.ElementalAttachment != null ? "<a href='" + itemObj.ElementalAttachment.Replace("..", "") + "' download='ElementalAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.SER = itemObj.RbAdditionalAnalysis.Contains("SER") ? (itemObj.SERAttachment != null ? "<a href='" + itemObj.SERAttachment.Replace("..", "") + "' download='SERAttachment'><i class='fa fa-download'></i></a>" : "") : "";

                        itemObj.APCIMass = itemObj.RbAdditionalAnalysis.Contains("APCI Mass") ? (itemObj.APCIMassAttachment != null ? "<a href='" + itemObj.APCIMassAttachment.Replace("..", "") + "' download='APCIMassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                        itemObj.NMRInterpretaion = itemObj.RbAdditionalAnalysis.Contains("NMR Interpretaion") ? (itemObj.NMRInterpretaionAttachment != null ? "<a href='" + itemObj.NMRInterpretaionAttachment.Replace("..", "") + "' download='NMRInterpretaionAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    }
                    if (itemObj.Hygroscopic.HasValue && itemObj.Hygroscopic.Value)
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.TempSensitive.HasValue && itemObj.TempSensitive.Value)
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Lacrymatory.HasValue && itemObj.Lacrymatory.Value)
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-close'></i>";
                    }
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == itemObj.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    itemObj.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                }

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadQCFormApprovedData()
        {
            try
            {
                string approvedstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);

                string ProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var model = (from i in db.SZ_QuoteDetailForm.AsNoTracking()
                             join t3 in db.SZ_QuoteDetails_Form.AsNoTracking() on i.Id equals t3.FormId
                             join q in db.SZ_QuotationDetail.AsNoTracking() on t3.QuoteDetailsId equals q.Id
                             where i.ApprovalStatus == approvedstatus
                             orderby i.QCApprovedDate descending
                             select new QCModel()
                             {
                                 FormId = i.Id,
                                 QuoteDetailsId = i.QuotationDetailsId,
                                 ScientistName = i.TLName,
                                 Chemist = i.ScientistName,
                                 Diff = q.DifficultyLevel,
                                 ProductName = i.ProductName,
                                 CASNo = i.CASNo,
                                 CATNo = i.CATNo,
                                 Qty = i.Qty,
                                 SubmittedQty = q.RequiredQty,
                                 SubmissionDate = i.SubmissionDate,
                                 ReviewStatus = q.ReviewSciStatus,
                                 AssignDate = q.MoveToScientistDate,
                                 BatchNo = i.BatchCode,
                                 DataRemark = q.Remark,
                                 DraftSubmissionForm = "",
                                 AvailableData = i.RbAdditionalAnalysis,
                                 PhysicalState = i.State,
                                 Appearance = i.Apearance,
                                 Hygroscopic = i.ChkHygroscopic,
                                 TempSensitive = i.TempSensitive,
                                 Lacrymatory = i.Lacrymatory,
                                 StabilityRelatedComment = i.StabilityRelatedComment,
                                 Stability = i.Stability,
                                 SaltFreeBase = i.RbSaltMentionName,
                                 COA = "",
                                 HPLC = i.HPLCPurity,
                                 RbAdditionalAnalysis = i.RbAdditionalAnalysis,
                                 IRAttachment = i.IRAttachment,
                                 MassAttachment = i.MassAttachment,
                                 HPLCGCELSDAttachment = i.PLCAttachment,
                                 NMRAttachment = i.NMRAttchment,
                                 qNMRAttachment = i.QNMRAttchment,
                                 TGAAttachment = i.TGAAttachment,
                                 CMRAttachment = i.CMRAttchment,
                                 DEPTAttachment = i.DEPTAttachment,
                                 HRMSAttachment = i.HRMSAttachment,
                                 ROIAttachment = i.ROIAttachment,
                                 ElementalAttachment = i.ElementralAttachment,
                                 SERAttachment = i.SERAttachment,
                                 APCIMassAttachment = i.APCIMassAttachment,
                                 NMRInterpretaionAttachment = i.NMRInterpretaionAttachment,
                                 GCAttachment = i.GCAttachment,
                                 ELSDAttachment = i.ELSDAttachment,
                                 ChairalAttachment = i.ChiralAttachmenrt,
                                 N1NMRAttachment = i.N1NmrAttachment,
                                 ApprovedStatus = i.ApprovalStatus,
                                 ApprovedAs = i.ApprovedAs,
                                 ApprovalComments = i.ApprovalComment,
                                 RecommondationRetest = i.RecommendedPeriod,
                                 ProductId = q.ProductId,
                                 QCApprovedDate = q.QCApprovedDate
                             }).ToList();

                model.ForEach(x =>
                {
                    x.ApprovedAsText = GetApproveStatusList(x.QuoteDetailsId, x.ApprovedStatus, true);
                });

                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ApprovedAsText != null && m.ApprovedAsText.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        ).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                var categoryData = db.Categories.AsNoTracking().ToList();
                var productCategoryData = db.Product_Category_Mapping.AsNoTracking().ToList();
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();

                foreach (var itemObj in data)
                {
                    if (!string.IsNullOrEmpty(itemObj.AvailableData))
                    {
                        itemObj.AvailableData = itemObj.AvailableData.Replace("APCI Mass", "Mass Interpretaion");
                    }
                    if (!string.IsNullOrEmpty(itemObj.N1NMRAttachment))
                    {
                        itemObj.N1NMRAttachment = (itemObj.N1NMRAttachment != null ? "<a href='" + itemObj.N1NMRAttachment.Replace("..", "") + "' download='N1NMRAttachment'><i class='fa fa-download'></i></a>" : "");
                    }
                    itemObj.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + itemObj.ProductId + ", " + itemObj.QuoteDetailsId + ")'></i>";
                    if (!string.IsNullOrEmpty(itemObj.Diff))
                    {
                        foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                        {
                            var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                            var test = r.ToString();
                            string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                            int val = (int)r;
                            if (Convert.ToString(val) == itemObj.Diff)
                            {
                                itemObj.Diff = text;
                            }
                        }
                    }
                    if (itemObj.QCApprovedDate.HasValue)
                    {
                        itemObj.QCApprovedDateStr = itemObj.QCApprovedDate.Value.ToShortDateString();
                    }
                    if (itemObj.AssignDate.HasValue)
                    {
                        itemObj.AssignDatestr = itemObj.AssignDate.Value.ToShortDateString();
                    }
                    if (itemObj.SubmissionDate != null && itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.SubmissionDatestr = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.APIName = GetApiNameOfProduct(itemObj.ProductId.Value, categoryData, productCategoryData);
                    //itemObj.CATNo = "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                    itemObj.ApprovedStatusText = GetApproveStatusList(itemObj.QuoteDetailsId, itemObj.ApprovedStatus);
                    itemObj.ApprovedAsText = GetApprovedAsList(itemObj.QuoteDetailsId, itemObj.ApprovedAs);
                    //itemObj.ApprovalCommentsText = "<input type='text' id='approvalcomment_" + itemObj.FormId + "' name='approvalcomment_" + itemObj.FormId + "' value='" + itemObj.ApprovalComments + "' />";
                    itemObj.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + itemObj.QuoteDetailsId + "\")' ></i>";
                    itemObj.RecommondationRetestText = "<input type='number' id='recommondationretest_" + itemObj.QuoteDetailsId + "' name='recommondationretest_" + itemObj.QuoteDetailsId + "' value='" + itemObj.RecommondationRetest + "' />";
                    itemObj.ChkSaveRow = "<input type='checkbox' value='" + itemObj.QuoteDetailsId + "' class='clsSaverow' />";
                    itemObj.IR = itemObj.RbAdditionalAnalysis.Contains("IR") ? (itemObj.IRAttachment != null ? "<a href='" + itemObj.IRAttachment.ReplaceForFilepath() + "' download='IRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.Mass = itemObj.RbAdditionalAnalysis.Contains("Mass") ? (itemObj.MassAttachment != null ? "<a href='" + itemObj.MassAttachment.Replace("..", "") + "' download='MassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.HPLCGCELSD = itemObj.RbAdditionalAnalysis.Contains("HPLC/GC/ELSD") ? (itemObj.HPLCGCELSDAttachment != null ? "<a href='" + itemObj.HPLCGCELSDAttachment.Replace("..", "") + "' download='HPLCGCELSDAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.NMR = itemObj.RbAdditionalAnalysis.Contains("NMR") ? (itemObj.NMRAttachment != null ? "<a href='" + itemObj.NMRAttachment.Replace("..", "") + "' download='NMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.qNMR = itemObj.RbAdditionalAnalysis.Contains("qNMR") ? (itemObj.qNMRAttachment != null ? "<a href='" + itemObj.qNMRAttachment.Replace("..", "") + "' download='qNMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.TGA = itemObj.RbAdditionalAnalysis.Contains("TGA") ? (itemObj.TGAAttachment != null ? "<a href='" + itemObj.TGAAttachment.Replace("..", "") + "' download='TGAAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.CMR = itemObj.RbAdditionalAnalysis.Contains("CMR") ? (itemObj.CMRAttachment != null ? "<a href='" + itemObj.CMRAttachment.Replace("..", "") + "' download='CMRAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.DEPT = itemObj.RbAdditionalAnalysis.Contains("DEPT") ? (itemObj.DEPTAttachment != null ? "<a href='" + itemObj.DEPTAttachment.Replace("..", "") + "' download='DEPTAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.HRMS = itemObj.RbAdditionalAnalysis.Contains("HRMS") ? (itemObj.HRMSAttachment != null ? "<a href='" + itemObj.HRMSAttachment.Replace("..", "") + "' download='HRMSAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.ROI = itemObj.RbAdditionalAnalysis.Contains("ROI") ? (itemObj.ROIAttachment != null ? "<a href='" + itemObj.ROIAttachment.Replace("..", "") + "' download='ROIAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.Elemental = itemObj.RbAdditionalAnalysis.Contains("Elemental") ? (itemObj.ElementalAttachment != null ? "<a href='" + itemObj.ElementalAttachment.Replace("..", "") + "' download='ElementalAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.SER = itemObj.RbAdditionalAnalysis.Contains("CMR Interpretaion") ? (!string.IsNullOrEmpty(itemObj.SERAttachment) ? "<a href='" + itemObj.SERAttachment.Replace("..", "") + "' download='SERAttachment'><i class='fa fa-download'></i></a>" : "") : "";

                    itemObj.APCIMass = itemObj.RbAdditionalAnalysis.Contains("APCI Mass") ? (!string.IsNullOrEmpty(itemObj.APCIMassAttachment) ? "<a href='" + itemObj.APCIMassAttachment.Replace("..", "") + "' download='APCIMassAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    itemObj.NMRInterpretaion = itemObj.RbAdditionalAnalysis.Contains("NMR Interpretaion") ? (!string.IsNullOrEmpty(itemObj.NMRInterpretaionAttachment) ? "<a href='" + itemObj.NMRInterpretaionAttachment.Replace("..", "") + "' download='NMRInterpretaionAttachment'><i class='fa fa-download'></i></a>" : "") : "";
                    if (itemObj.Hygroscopic.HasValue && itemObj.Hygroscopic.Value)
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.TempSensitive.HasValue && itemObj.TempSensitive.Value)
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Lacrymatory.HasValue && itemObj.Lacrymatory.Value)
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-close'></i>";
                    }
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == itemObj.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    itemObj.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                }

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadProductDataQCAllInstock()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var fltapprovestatus = "";
                if (Request.Form.GetValues("fltapprovestatus") != null)
                {
                    fltapprovestatus = Request.Form.GetValues("fltapprovestatus")[0].ToString();
                }
                var scinameFilter = "";
                if (Request.Form.GetValues("sciname") != null)
                {
                    scinameFilter = Request.Form.GetValues("sciname")[0].ToString();
                }
                var subscinameFilter = "";
                if (Request.Form.GetValues("subsciname") != null)
                {
                    subscinameFilter = Request.Form.GetValues("subsciname")[0].ToString();
                }
                var fltprostatusItem = "";
                if (Request.Form.GetValues("fltprostatusItem") != null)
                {
                    fltprostatusItem = Request.Form.GetValues("fltprostatusItem")[0].ToString();
                }
                var fltactivity = "";
                if (Request.Form.GetValues("fltactivity") != null)
                {
                    fltactivity = Request.Form.GetValues("fltactivity")[0].ToString();
                }
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                string instocktype = Convert.ToString((int)EnumList.ProjectType.InStock);
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var quotationDetailsdata = db.SZ_QuotationDetail.AsNoTracking().AsQueryable();

                string correctionstatus = Convert.ToString((int)EnumList.ProStatusDDL.QCCorrection);
                string approvalstatus = Convert.ToString((int)EnumList.ProStatusDDL.QCApproval);
                // Getting all Customer data  
                //var model = (from quo in db.SZ_Quotation
                //             join q in db.SZ_QuotationDetail on quo.Id equals q.QuoteId
                //             join i in db.SZ_MasterCOA on q.AdditionalBatchNo equals i.BatchId
                //             join l in db.SZ_QuotationDetailLog on q.Id equals l.QuoteDetailsId
                //             where (q.MoveToProject == true) && string.IsNullOrEmpty(q.TrackingNo)
                //             && (q.IsOnHold == false || q.IsOnHold == null)
                //             && (q.ProjectType == instocktype)
                //             && (q.ProStatus == approvalstatus || q.ProStatus == correctionstatus)
                var model = (from quo in db.SZ_Quotation.AsNoTracking()
                             join q in db.SZ_QuotationDetail.AsNoTracking() on quo.Id equals q.QuoteId
                             join i in db.SZ_MasterCOA.AsNoTracking() on q.AdditionalBatchNo equals i.BatchId into gj
                             from ii in gj.DefaultIfEmpty()
                             join l in db.SZ_QuotationDetailLog.AsNoTracking() on q.Id equals l.QuoteDetailsId into gjl
                             from ll in gjl.DefaultIfEmpty()
                             where (q.MoveToProject == true) && string.IsNullOrEmpty(q.TrackingNo)
                             && (q.IsOnHold == false || q.IsOnHold == null)
                             && (q.ProjectType == instocktype)
                             && (q.ProStatus == approvalstatus || q.ProStatus == correctionstatus)
                             orderby q.MoveToProject descending
                             select new QCModel()
                             {
                                 QcApprovalDate = q.QcApprovalDate,
                                 CompanyName = quo.CompanyName,
                                 FormId = ii != null ? ii.Id : 0,
                                 QuoteDetailsId = q.Id,
                                 //ScientistName = i.CreatedBy,
                                 ScientistCustomerId = q.ScientistCustomerId,
                                 Chemist = "",
                                 Diff = q.DifficultyLevel,
                                 ProductName = q.ProductName,
                                 CASNo = q.CASNo,
                                 CATNo = q.CATNo,
                                 Qty = ii != null ? ii.QuantityAvailable : "",
                                 SubmittedQty = q.RequiredQty,
                                 SubmissionDate = ii != null ? ii.CreatedDate : (DateTime?)null,
                                 ReviewStatus = q.ReviewSciStatus,
                                 AssignDate = q.MoveToScientistDate,
                                 AdditionalBatchNo = q.AdditionalBatchNo,
                                 ProductId = q.ProductId,
                                 DataRemark = q.Remark,
                                 DraftSubmissionForm = "",
                                 RbAdditionalAnalysis = ii != null ? ii.Attachment : "",
                                 AvailableData = ii != null ? ii.Attachment : "",
                                 PhysicalState = ii != null ? ii.PhysicalState : "",
                                 Appearance = ii != null ? ii.AppearanceProduct : "",
                                 BatchNo = ii != null ? ii.BatchNo : "",
                                 //Hygroscopic = i.ChkHygroscopic,
                                 //TempSensitive = i.TempSensitive,
                                 //Lacrymatory = i.Lacrymatory,
                                 //StabilityRelatedComment = i.StabilityRelatedComment,
                                 //Stability = i.Stability,
                                 //SaltFreeBase = i.RbSaltMentionName,
                                 COA = "",
                                 //HPLC = i.HPLCPurity,
                                 //RbAdditionalAnalysis = i.RbAdditionalAnalysis,
                                 //IRAttachment = i.IRAttachment,
                                 //MassAttachment = i.MassAttachment,
                                 //HPLCGCELSDAttachment = i.PLCAttachment,
                                 //NMRAttachment = i.NMRAttchment,
                                 //qNMRAttachment = i.QNMRAttchment,
                                 //TGAAttachment = i.TGAAttachment,
                                 //CMRAttachment = i.CMRAttchment,
                                 //DEPTAttachment = i.DEPTAttachment,
                                 //HRMSAttachment = i.HRMSAttachment,
                                 //ROIAttachment = i.ROIAttachment,
                                 //ElementalAttachment = i.ElementralAttachment,
                                 //SERAttachment = i.SERAttachment,
                                 //GCAttachment = i.GCAttachment,
                                 //ELSDAttachment = i.ELSDAttachment,
                                 //ChairalAttachment = i.ChiralAttachmenrt,
                                 ProStatus = q.ProStatus,
                                 ApprovedStatus = q.ApprovalStatus,
                                 ApprovedAs = q.ApprovedAs,
                                 ApprovalComments = q.ApprovalComment,
                                 RecommondationRetest = q.RecommendedPeriod,
                                 QCApprovedDate = q.QCApprovedDate
                             }).Distinct().OrderByDescending(x => x.QcApprovalDate).ToList();

                //var listItems = new List<SelectListItem>();
                //var genericData = db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                //var scienList = db.GetScientistId().ToList();
                //scienList.ForEach(term =>
                //{
                //    string customerName = string.Empty;
                //    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                //    if (genericAttr.Count > 0)
                //    {
                //        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                //    }
                //    listItems.Add(new SelectListItem
                //    {
                //        Text = customerName,
                //        Value = term.ToString()
                //    });
                //});



                model.ForEach(x =>
                {
                    x.ApprovedAsText = GetApproveStatusList(x.QuoteDetailsId, x.ProStatus, true);
                });
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ApprovedAsText != null && m.ApprovedAsText.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        ).ToList();
                }
                if (!string.IsNullOrEmpty(fltapprovestatus))
                {
                    model = model.Where(x => x.ApprovedStatus == fltapprovestatus).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();

                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }

                }
                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                var categoryData = db.Categories.AsNoTracking().ToList();
                var productCategoryData = db.Product_Category_Mapping.AsNoTracking().ToList();
                var proIds = data.Select(x => x.ProductId).Distinct().ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var productsData = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                foreach (var itemObj in data)
                {
                    itemObj.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + itemObj.ProductId + ", " + itemObj.QuoteDetailsId + ")'></i>";
                    if (itemObj.QcApprovalDate.HasValue)
                    {
                        itemObj.QcApprovalStr = itemObj.QcApprovalDate.Value.ToShortDateString();
                    }
                    var invdataforbatch = inventoryData.Where(x => x.Id == itemObj.AdditionalBatchNo).FirstOrDefault();
                    if (invdataforbatch != null)
                    {
                        if (invdataforbatch.ApprovalDate.HasValue)
                        {
                            itemObj.QcLastApprovalStr = invdataforbatch.ApprovalDate.Value.ToShortDateString();
                        }
                    }
                    if (itemObj.QCApprovedDate.HasValue)
                    {
                        itemObj.QCApprovedDateStr = itemObj.QCApprovedDate.Value.ToShortDateString();
                    }
                    if (!string.IsNullOrEmpty(itemObj.Diff))
                    {
                        foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                        {
                            var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                            var test = r.ToString();
                            string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                            int val = (int)r;
                            if (Convert.ToString(val) == itemObj.Diff)
                            {
                                itemObj.Diff = text;
                            }
                        }
                    }
                    itemObj.AdditionalBatchNoText = "<select id='additionalBatch_" + itemObj.QuoteDetailsId + "' data-quotationdetailsid='" + itemObj.QuoteDetailsId + "' class='dddladditionalbatch'><option value=''>--Select--</option>";
                    if (itemObj.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == itemObj.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == itemObj.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            proBatchData.ForEach(r =>
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;

                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == itemObj.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    itemObj.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }

                                itemObj.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            });
                        }
                    }
                    itemObj.AdditionalBatchNoText += "</select>";
                    if (itemObj.AssignDate.HasValue)
                    {
                        itemObj.AssignDatestr = itemObj.AssignDate.Value.ToShortDateString();
                    }
                    if (itemObj.SubmissionDate != null && itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.SubmissionDatestr = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.APIName = GetApiNameOfProduct(itemObj.ProductId.Value, categoryData, productCategoryData);
                    //itemObj.CATNo = "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                    itemObj.ApprovedStatusText = GetApproveStatusList(itemObj.QuoteDetailsId, itemObj.ApprovedStatus);
                    itemObj.ApprovedAsText = GetApprovedAsList(itemObj.QuoteDetailsId, itemObj.ApprovedAs);
                    //itemObj.ApprovalCommentsText = "<input type='text' id='approvalcomment_" + itemObj.FormId + "' name='approvalcomment_" + itemObj.FormId + "' value='" + itemObj.ApprovalComments + "' />";
                    itemObj.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + itemObj.QuoteDetailsId + "\")' ></i>";
                    itemObj.RecommondationRetestText = "<input type='number' id='recommondationretest_" + itemObj.QuoteDetailsId + "' name='recommondationretest_" + itemObj.QuoteDetailsId + "' value='" + itemObj.RecommondationRetest + "' />";
                    itemObj.ChkSaveRow = "<input type='checkbox' value='" + itemObj.QuoteDetailsId + "' class='clsSaverow' />";
                    if (!string.IsNullOrEmpty(itemObj.RbAdditionalAnalysis))
                    {
                        itemObj.IR = itemObj.RbAdditionalAnalysis.Contains("IR") ? "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.Mass = itemObj.RbAdditionalAnalysis.Contains("Mass") ? "<i id='mass_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.HPLCGCELSD = itemObj.RbAdditionalAnalysis.Contains("HPLC/GC/ELSD") ? "<i id='hplc_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.NMR = itemObj.RbAdditionalAnalysis.Contains("NMR") ? "<i id='nmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.qNMR = itemObj.RbAdditionalAnalysis.Contains("qNMR") ? "<i id='qnmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.TGA = itemObj.RbAdditionalAnalysis.Contains("TGA") ? "<i id='tga_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.CMR = itemObj.RbAdditionalAnalysis.Contains("CMR") ? "<i id='cmr_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.DEPT = itemObj.RbAdditionalAnalysis.Contains("DEPT") ? "<i id='dept_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.HRMS = itemObj.RbAdditionalAnalysis.Contains("HRMS") ? "<i id='hrms_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.ROI = itemObj.RbAdditionalAnalysis.Contains("ROI") ? "<i id='roi_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.Elemental = itemObj.RbAdditionalAnalysis.Contains("Elemental") ? "<i id='elementral_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.SER = itemObj.RbAdditionalAnalysis.Contains("CMR Interpretaion") ? "<i id='ser_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='ir_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.APCIMass = itemObj.RbAdditionalAnalysis.Contains("APCI Mass") ? "<i id='apcimass_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='apcimass_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                        itemObj.NMRInterpretaion = itemObj.RbAdditionalAnalysis.Contains("NMR Interpretaion") ? "<i id='nmrinterpretaion_" + itemObj.QuoteDetailsId + "' class='fa fa-check'></i>" : "<i id='nmrinterpretaion_" + itemObj.QuoteDetailsId + "' class='fa fa-close'></i>";
                    }

                    if (itemObj.Hygroscopic.HasValue && itemObj.Hygroscopic.Value)
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextHygroscopic = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.TempSensitive.HasValue && itemObj.TempSensitive.Value)
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextTempSensitive = "<i class='fa fa-close'></i>";
                    }

                    if (itemObj.Lacrymatory.HasValue && itemObj.Lacrymatory.Value)
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        itemObj.TextLacrymatory = "<i class='fa fa-close'></i>";
                    }
                    if (itemObj.SubmissionDate.HasValue)
                    {
                        itemObj.DraftSubmissionForm = itemObj.SubmissionDate.Value.ToShortDateString();
                    }
                    itemObj.Qty = "<span id='availableqty_" + itemObj.QuoteDetailsId + "'>" + itemObj.Qty + "</span>";
                    itemObj.AvailableData = "<span id='availabledata_" + itemObj.QuoteDetailsId + "'>" + itemObj.AvailableData + "</span>";
                    itemObj.PhysicalState = "<span id='physicalstate_" + itemObj.QuoteDetailsId + "'>" + itemObj.PhysicalState + "</span>";
                    itemObj.Appearance = "<span id='appearance_" + itemObj.QuoteDetailsId + "'>" + itemObj.Appearance + "</span>";
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == itemObj.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                                     query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + itemObj.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    itemObj.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + itemObj.CATNo + "' target='_blank'>" + itemObj.CATNo + "</a>";
                }

                //total number of rows count   

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }

        }


        public JsonResult LoadProductCountData()
        {
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
            string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
            var quotationDetailsdata = db.SZ_QuotationDetail.AsQueryable();
            // Getting all Customer data  
            var companyList = (from i in db.SZ_Quotation.AsNoTracking()
                               join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                               where t2.MoveToProject == true
                               && string.IsNullOrEmpty(t2.TrackingNo)
                               && (t2.IsOnHold == false || t2.IsOnHold == null)
                               && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                               select i.CompanyId).Distinct().ToList();

            var datas = (from i in db.SZ_Quotation.AsNoTracking()
                         where companyList.Contains(i.CompanyId)
                         select new
                         {
                             Company = i.CompanyName,
                             Count = i.SZ_QuotationDetail.Where(t2 => t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo)
                                        && (t2.IsOnHold == false || t2.IsOnHold == null)
                                        && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)).Count()
                         }).ToList();

            var results = datas.GroupBy(n => new { n.Company })
                .Select(g => new
                {
                    Key = g.Key.Company,
                    Count = g.Sum(x => x.Count)
                }).OrderByDescending(x => x.Count).ToList();

            return Json(results.Where(x => x.Count != 0).ToList(), JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult LoadClientApprovedData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var scinameFilter = Request.Form.GetValues("sciname")[0].ToString();

                var subscinameFilter = Request.Form.GetValues("subsciname")[0].ToString();
                var fltprostatusItem = Request.Form.GetValues("fltprostatusItem")[0].ToString();
                var fltactivity = Request.Form.GetValues("fltactivity")[0].ToString();
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var quotationDetailsdata = db.SZ_QuotationDetail.AsNoTracking().AsQueryable();
                // Getting all Customer data  
                //var list = (from i in db.SZ_Quotation
                //            join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                //            where t2.MoveToProject == true
                //            && (t2.IsOnHold == false || t2.IsOnHold == null)
                //            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                //            orderby t2.MoveProjectDate descending
                //            select t2).Distinct().AsQueryable();

                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true
                            && string.IsNullOrEmpty(t2.TrackingNo)
                            && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct().AsQueryable();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                var subscilistItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                ViewBag.ScientistListItem = listItems;
                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });

                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                }
                ViewBag.SubScientistListItem = subscilistItems;
                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var masterCOAData = db.SZ_MasterCOA.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var masterCoaIds = masterCOAData.Select(x => x.Id).Distinct().ToList();
                var childcoadata = db.SZ_ChildCOA.AsNoTracking().Where(x => masterCoaIds.Contains(x.MasterCOAID.Value)).ToList();
                var productsData = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var catList = db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                var count = list.Count();
                list.ForEach(k =>
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ApprovedForClient.HasValue && k.ApprovedForClient.Value)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsClientApproved' checked/>";
                    }
                    else
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsClientApproved' />";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }

                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ActivityStatusText = "<select id='activitystatus_" + k.Id + "' class='clsActivityStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";

                    if (k.ActivityStatus == "Approval First")
                    {
                        subList.ActivityStatusText += "<option value='Approval First' selected>Approval First</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Approval First'>Approval First</option>";
                    }
                    if (k.ActivityStatus == "Immediate Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch' selected>Immediate Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch'>Immediate Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Short Qty Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch' selected>Short Qty Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch'>Short Qty Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Repeat Order")
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order' selected>Repeat Order</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order'>Repeat Order</option>";
                    }

                    if (k.ActivityStatus == "Data Approved")
                    {
                        subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    }


                    if (k.ActivityStatus == "Data Sent")
                    {
                        subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    }
                    if (k.ActivityStatus == "Data Correction")
                    {
                        subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    }
                    if (k.ActivityStatus == "Invoice Sent")
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent' selected>Invoice Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent'>Invoice Sent</option>";
                    }

                    subList.ActivityStatusText += "</select>";
                    //subList.APIName = GetApiNameOfProduct(k.ProductId.Value, proCat, catList);
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    listItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });

                    subList.ScientistName += "</select>";
                    if (!string.IsNullOrEmpty(k.SubScientistName))
                    {
                        var subsci = System.Text.RegularExpressions.Regex.IsMatch(k.SubScientistName, @"\d+");
                        if (subsci)
                        {
                            if (System.Text.RegularExpressions.Regex.Match(k.SubScientistName, @"\d+").Value == k.SubScientistName)
                            {
                                subList.SubScientistCustomerId = Convert.ToInt32(k.SubScientistName);
                            }
                        }
                    }

                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });

                    subList.SubScientistName += "</select>";

                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.QuoteId;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px; font-weight:bold' />";

                    if (!string.IsNullOrEmpty(k.ExplainationSecond))
                    {
                        subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond.Replace("'", "&#8242;") + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    }
                    else
                    {
                        subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    }

                    subList.ExplainationSecond = k.ExplainationSecond;
                    subList.LastWeekUpdate = k.LastWeekUpdate;
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == subList.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            proBatchData.ForEach(r =>
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;
                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }
                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            });
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.CompanyName;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == k.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    subList.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";

                    subList.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + k.ProductId + ", " + k.Id + ")'></i>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.IsPayment = k.IsPayment;
                    if (k.IsPayment.HasValue && k.IsPayment.Value)
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' />";
                    }

                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";

                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";

                    if (k.MoveToScientistDate.HasValue)
                    {
                        subList.MoveToScientistDateStr = k.MoveToScientistDate.Value.ToShortDateString();
                    }
                    subList.ClientChat = "<i class='fa fa-pencil' onclick='chatDetails(\"" + k.Id + "\")' ></i>";
                    subList.ExplainationText += "<i class='fa fa-pencil' onclick='explainationGenerate(\"" + k.Id + "\")' ></i>"; //<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.DifficultyLevel = k.DifficultyLevel;
                    subList.DifficultyLevelText = "<select id='difflevel_" + k.Id + "' class='clsDifficultyLevel' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.DifficultyLevel)
                        {
                            selected = "selected ";
                        }
                        subList.DifficultyLevelText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DifficultyLevelText += "</select>";

                    subList.IsPriority = k.IsPriority;
                    if (k.IsPriority.HasValue && k.IsPriority.Value)
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' />";
                    }
                    subList.ProStatus = k.ProStatus;
                    subList.ProStatusText = "<select id='prostatus_" + k.Id + "' class='clsProjStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedProStatus = text;
                        }
                        subList.ProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.ProStatusText += "</select>";
                    subList.COAId = k.COAId;
                    subList.COARefNumber = k.COARefNumber;
                    string coaText = "";

                    coaText = "<select id='coa_" + k.Id + "' class='addcoa'><option value=''>--Select--</option>";
                    int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
                    if (bId != 0)
                    {
                        var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                            if (listchildcoa != null && listchildcoa.Count > 0)
                            {
                                foreach (var ccoa in listchildcoa)
                                {
                                    if (k.COAId == ccoa.Id)
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                                    }
                                    else
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                                    }
                                }
                            }
                        }
                    }
                    subList.COAText = coaText;
                    subList.CompanyId = k.SZ_Quotation.CompanyId;
                    model.Add(subList);
                });

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                if (!string.IsNullOrEmpty(scinameFilter))
                {
                    int sciid = Convert.ToInt32(scinameFilter);
                    model = model.Where(x => x.ScientistCustomerId == sciid).ToList();
                }
                if (!string.IsNullOrEmpty(subscinameFilter))
                {
                    int subsciid = Convert.ToInt32(subscinameFilter);
                    model = model.Where(x => x.SubScientistCustomerId == subsciid).ToList();
                }
                if (!string.IsNullOrEmpty(fltprostatusItem))
                {
                    model = model.Where(x => x.ProStatus == fltprostatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(fltactivity))
                {
                    model = model.Where(x => x.ActivityStatus == fltactivity).ToList();
                }

                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }

                }

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                        || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadProductData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var scinameFilter = Request.Form.GetValues("sciname")[0].ToString();

                var subscinameFilter = Request.Form.GetValues("subsciname")[0].ToString();
                var fltprostatusItem = Request.Form.GetValues("fltprostatusItem")[0].ToString();
                var fltactivity = Request.Form.GetValues("fltactivity")[0].ToString();

                var fltprotypeItem = "";
                if (Request.Form.GetValues("fltprotypeItem") != null)
                {
                    fltprotypeItem = Request.Form.GetValues("fltprotypeItem")[0].ToString();
                }
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var quotationDetailsdata = db.SZ_QuotationDetail.AsNoTracking().AsQueryable();
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true
                            && string.IsNullOrEmpty(t2.TrackingNo)
                            && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct().AsQueryable();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                var subscilistItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                ViewBag.ScientistListItem = listItems;

                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                }
                ViewBag.SubScientistListItem = subscilistItems;

                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var productsData = objCache.Get("cache.productsdata", () =>
                {
                    return db.Products.AsNoTracking().ToList();
                });
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var inventoryData = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.AsNoTracking().ToList();
                });
                var catList = objCache.Get("cache.categorydata", () =>
                {
                    return db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                });

                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                // var masterCOAData = db.SZ_MasterCOA.Where(x => proIds.Contains(x.ProductId)).ToList();
                //var childcoadata = db.SZ_ChildCOA.Where(x => masterCoaIds.Contains(x.MasterCOAID.Value)).ToList();
                //var productsData = db.Products.Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                // var inventoryData = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
                // var catList = db.Categories.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                //var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                masterCOAData = masterCOAData.Where(x => proIds.Contains(x.ProductId)).ToList();
                var masterCoaIds = masterCOAData.Select(x => x.Id).Distinct().ToList();
                childcoadata = childcoadata.Where(x => masterCoaIds.Contains(x.MasterCOAID.Value)).ToList();
                productsData = productsData.Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                inventoryData = inventoryData.Where(x => proIds.Contains(x.ProductId)).ToList();


                var model = new List<ProjectListModel>();
                list.ForEach(k =>
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' style='outline: 4px solid #c00'/>";
                    }

                    if (k.IsCancel.HasValue && k.IsCancel.Value)
                    {
                        subList.ChkFirstRow = "";
                        subList.ChkSaveRow = "";
                    }

                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ActivityStatusText = "<select id='activitystatus_" + k.Id + "' class='clsActivityStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";

                    if (k.ActivityStatus == "Approval First")
                    {
                        subList.ActivityStatusText += "<option value='Approval First' selected>Approval First</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Approval First'>Approval First</option>";
                    }
                    if (k.ActivityStatus == "Immediate Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch' selected>Immediate Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch'>Immediate Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Short Qty Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch' selected>Short Qty Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch'>Short Qty Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Repeat Order")
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order' selected>Repeat Order</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order'>Repeat Order</option>";
                    }
                    if (k.ActivityStatus == "Data Approved")
                    {
                        subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    }
                    if (k.ActivityStatus == "Data Sent")
                    {
                        subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    }
                    if (k.ActivityStatus == "Data Correction")
                    {
                        subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    }
                    if (k.ActivityStatus == "Invoice Sent")
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent' selected>Invoice Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent'>Invoice Sent</option>";
                    }
                    subList.ActivityStatusText += "</select>";
                    //subList.APIName = GetApiNameOfProduct(k.ProductId.Value, proCat, catList);
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    listItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });

                    subList.ScientistName += "</select>";
                    if (!string.IsNullOrEmpty(k.SubScientistName))
                    {
                        var subsci = System.Text.RegularExpressions.Regex.IsMatch(k.SubScientistName, @"\d+");
                        if (subsci)
                        {
                            if (System.Text.RegularExpressions.Regex.Match(k.SubScientistName, @"\d+").Value == k.SubScientistName)
                            {
                                subList.SubScientistCustomerId = Convert.ToInt32(k.SubScientistName);
                            }
                        }
                    }

                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });

                    subList.SubScientistName += "</select>";

                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.QuoteId;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px; font-weight:bold' />";

                    if (!string.IsNullOrEmpty(k.ExplainationSecond))
                    {
                        subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond.Replace("'", "&#8242;") + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    }
                    else
                    {
                        subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    }

                    subList.ExplainationSecond = k.ExplainationSecond;
                    subList.LastWeekUpdate = k.LastWeekUpdate;
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == subList.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            proBatchData.ForEach(r =>
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;
                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }
                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            });
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.CompanyName;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == k.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    subList.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";

                    subList.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + k.ProductId + ", " + k.Id + ")'></i>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.IsPayment = k.IsPayment;
                    if (k.IsPayment.HasValue && k.IsPayment.Value)
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' />";
                    }

                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";

                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";

                    if (k.MoveToScientistDate.HasValue)
                    {
                        subList.MoveToScientistDateStr = k.MoveToScientistDate.Value.ToShortDateString();
                    }


                    subList.InhouseRemarkText = "<i class='fa fa-pencil' onclick='InhouseRemarkGenerate(\"" + k.Id + "\")' ></i>"; //<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.ExplainationText += "<i class='fa fa-pencil' onclick='explainationGenerate(\"" + k.Id + "\")' ></i>"; //<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.DifficultyLevel = k.DifficultyLevel;
                    subList.DifficultyLevelText = "<select id='difflevel_" + k.Id + "' class='clsDifficultyLevel' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.DifficultyLevel)
                        {
                            selected = "selected ";
                        }
                        subList.DifficultyLevelText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DifficultyLevelText += "</select>";

                    subList.IsPriority = k.IsPriority;
                    if (k.IsPriority.HasValue && k.IsPriority.Value)
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' />";
                    }
                    subList.ProStatus = k.ProStatus;
                    subList.ProStatusText = "<select id='prostatus_" + k.Id + "' class='clsProjStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedProStatus = text;
                        }
                        subList.ProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.ProStatusText += "</select>";
                    subList.COAId = k.COAId;
                    subList.COARefNumber = k.COARefNumber;
                    string coaText = "";

                    coaText = "<select id='coa_" + k.Id + "' class='addcoa'><option value=''>--Select--</option>";
                    int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
                    if (bId != 0)
                    {
                        var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                            if (listchildcoa != null && listchildcoa.Count > 0)
                            {
                                foreach (var ccoa in listchildcoa)
                                {
                                    if (k.COAId == ccoa.Id)
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                                    }
                                    else
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                                    }
                                }
                            }
                        }
                    }
                    subList.COAText = coaText;
                    subList.CompanyId = k.SZ_Quotation.CompanyId;
                    model.Add(subList);
                });

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                if (!string.IsNullOrEmpty(scinameFilter))
                {
                    int sciid = Convert.ToInt32(scinameFilter);
                    model = model.Where(x => x.ScientistCustomerId == sciid).ToList();
                }
                if (!string.IsNullOrEmpty(subscinameFilter))
                {
                    int subsciid = Convert.ToInt32(subscinameFilter);
                    model = model.Where(x => x.SubScientistCustomerId == subsciid).ToList();
                }
                if (!string.IsNullOrEmpty(fltprostatusItem))
                {
                    model = model.Where(x => x.ProStatus == fltprostatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(fltprotypeItem))
                {
                    model = model.Where(x => x.ProjectType == fltprotypeItem).ToList();
                }

                if (!string.IsNullOrEmpty(fltactivity))
                {
                    model = model.Where(x => x.ActivityStatus == fltactivity).ToList();
                }

                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchbyvalue.Contains("+"))
                    {
                        List<string> searchlist = searchbyvalue.Split('+').Select(p => p.Trim()).ToList();
                        //model = model.Where(x => searchlist.Any(z=> x.Ref.ToLower().Contains(z)) &&
                        //                        searchlist.Any(z => x.PONumber.ToLower().Contains(z)) &&
                        //                        searchlist.Any(z => x.CompanyName.ToLower().Contains(z)) &&
                        //                        searchlist.Any(z => x.ProductName.ToLower().Contains(z)) &&
                        //                        searchlist.Any(z => (x.CASNo != null ? x.CASNo.ToLower().Contains(z) : false)) &&
                        //                        searchlist.Any(z => (x.CATNo != null ? x.CATNo.ToLower().Contains(z) : false)) &&
                        //                        searchlist.Any(z => (x.BatchNo != null ? x.BatchNo.ToLower().Contains(z) : false))).ToList();

                        List<ProjectListModel> objmodel = new List<ProjectListModel>();
                        foreach (var item in searchlist)
                        {
                            var d = model.Where(x => x.CompanyName.Contains(item) ||
                                                x.PONumber.ToLower().Contains(item) ||
                                                x.CompanyName.ToLower().Contains(item) ||
                                                x.ProductName.ToLower().Contains(item) ||
                                                (x.CASNo != null ? x.CASNo.ToLower().Contains(item) : false) ||
                                                (x.CATNo != null ? x.CATNo.ToLower().Contains(item) : false) ||
                                               (x.BatchNo != null ? x.BatchNo.ToLower().Contains(item) : false)).ToList();
                            if (d != null && d.Count > 0)
                            {
                                objmodel.AddRange(d);
                            }
                        }
                        if (objmodel != null && objmodel.Count > 0)
                        {
                            model = objmodel;
                        }
                    }
                    else
                    {
                        if (searchby == "quoteid")
                        {
                            model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                        }
                        if (searchby == "ponumber")
                        {
                            model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                        }
                        if (searchby == "company")
                        {
                            model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                        }
                        if (searchby == "productname")
                        {
                            model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                        }
                        if (searchby == "cas")
                        {
                            model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                        }
                        if (searchby == "cat")
                        {
                            model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                        }
                        if (searchby == "batchno")
                        {
                            model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                        }
                    }
                }

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                        || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                //var data = model.Skip(skip).Take(pageSize).ToList();
                var data = model.Skip(skip).Take(pageSize).ToList();

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadProductCancelledData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var scinameFilter = Request.Form.GetValues("sciname")[0].ToString();

                var subscinameFilter = Request.Form.GetValues("subsciname")[0].ToString();
                var fltprostatusItem = Request.Form.GetValues("fltprostatusItem")[0].ToString();
                var fltactivity = Request.Form.GetValues("fltactivity")[0].ToString();
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var quotationDetailsdata = db.SZ_QuotationDetail.AsNoTracking().AsQueryable();
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true
                            && string.IsNullOrEmpty(t2.TrackingNo)
                            && t2.IsCancel == true
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct().AsQueryable();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                var subscilistItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                ViewBag.ScientistListItem = listItems;
                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                }
                ViewBag.SubScientistListItem = subscilistItems;
                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var productsData = objCache.Get("cache.productsdata", () =>
                {
                    return db.Products.AsNoTracking().ToList();
                });
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var inventoryData = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.AsNoTracking().ToList();
                });
                var catList = objCache.Get("cache.categorydata", () =>
                {
                    return db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                });

                // var masterCOAData = db.SZ_MasterCOA.Where(x => proIds.Contains(x.ProductId)).ToList();
                masterCOAData = masterCOAData.Where(x => proIds.Contains(x.ProductId)).ToList();
                var masterCoaIds = masterCOAData.Select(x => x.Id).Distinct().ToList();
                childcoadata = childcoadata.Where(x => masterCoaIds.Contains(x.MasterCOAID.Value)).ToList();
                productsData = productsData.Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                inventoryData = inventoryData.Where(x => proIds.Contains(x.ProductId)).ToList();
                //var childcoadata = db.SZ_ChildCOA.Where(x => masterCoaIds.Contains(x.MasterCOAID.Value)).ToList();
                //var productsData = db.Products.Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                //var inventoryData = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
                //var catList = db.Categories.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                //var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                list.ForEach(k =>
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' style='outline: 4px solid #c00'/>";
                    }

                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }

                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ActivityStatusText = "<select id='activitystatus_" + k.Id + "' class='clsActivityStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";

                    if (k.ActivityStatus == "Approval First")
                    {
                        subList.ActivityStatusText += "<option value='Approval First' selected>Approval First</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Approval First'>Approval First</option>";
                    }
                    if (k.ActivityStatus == "Immediate Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch' selected>Immediate Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch'>Immediate Dispatch</option>";
                    }

                    if (k.ActivityStatus == "Short Qty Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch' selected>Short Qty Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch'>Short Qty Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Repeat Order")
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order' selected>Repeat Order</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order'>Repeat Order</option>";
                    }
                    if (k.ActivityStatus == "Data Approved")
                    {
                        subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    }
                    if (k.ActivityStatus == "Data Sent")
                    {
                        subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    }
                    if (k.ActivityStatus == "Data Correction")
                    {
                        subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    }
                    if (k.ActivityStatus == "Invoice Sent")
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent' selected>Invoice Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent'>Invoice Sent</option>";
                    }
                    subList.ActivityStatusText += "</select>";
                    //subList.APIName = GetApiNameOfProduct(k.ProductId.Value, proCat, catList);
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    listItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });

                    subList.ScientistName += "</select>";
                    if (!string.IsNullOrEmpty(k.SubScientistName))
                    {
                        var subsci = System.Text.RegularExpressions.Regex.IsMatch(k.SubScientistName, @"\d+");
                        if (subsci)
                        {
                            if (System.Text.RegularExpressions.Regex.Match(k.SubScientistName, @"\d+").Value == k.SubScientistName)
                            {
                                subList.SubScientistCustomerId = Convert.ToInt32(k.SubScientistName);
                            }
                        }
                    }

                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });

                    subList.SubScientistName += "</select>";

                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.QuoteId;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px; font-weight:bold' />";

                    if (!string.IsNullOrEmpty(k.ExplainationSecond))
                    {
                        subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond.Replace("'", "&#8242;") + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    }
                    else
                    {
                        subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    }

                    subList.ExplainationSecond = k.ExplainationSecond;
                    subList.LastWeekUpdate = k.LastWeekUpdate;
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == subList.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            proBatchData.ForEach(r =>
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;
                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }
                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            });
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.CompanyName;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    var pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == k.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    subList.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";

                    subList.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + k.ProductId + ", " + k.Id + ")'></i>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.IsPayment = k.IsPayment;
                    if (k.IsPayment.HasValue && k.IsPayment.Value)
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' />";
                    }

                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";

                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";

                    if (k.MoveToScientistDate.HasValue)
                    {
                        subList.MoveToScientistDateStr = k.MoveToScientistDate.Value.ToShortDateString();
                    }

                    subList.ExplainationText += "<i class='fa fa-pencil' onclick='explainationGenerate(\"" + k.Id + "\")' ></i>"; //<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.DifficultyLevel = k.DifficultyLevel;
                    subList.DifficultyLevelText = "<select id='difflevel_" + k.Id + "' class='clsDifficultyLevel' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.DifficultyLevel)
                        {
                            selected = "selected ";
                        }
                        subList.DifficultyLevelText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DifficultyLevelText += "</select>";

                    subList.IsPriority = k.IsPriority;
                    if (k.IsPriority.HasValue && k.IsPriority.Value)
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' />";
                    }
                    subList.ProStatus = k.ProStatus;
                    subList.ProStatusText = "<select id='prostatus_" + k.Id + "' class='clsProjStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedProStatus = text;
                        }
                        subList.ProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.ProStatusText += "</select>";
                    subList.COAId = k.COAId;
                    subList.COARefNumber = k.COARefNumber;
                    string coaText = "";

                    coaText = "<select id='coa_" + k.Id + "' class='addcoa'><option value=''>--Select--</option>";
                    int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
                    if (bId != 0)
                    {
                        var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                            if (listchildcoa != null && listchildcoa.Count > 0)
                            {
                                foreach (var ccoa in listchildcoa)
                                {
                                    if (k.COAId == ccoa.Id)
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                                    }
                                    else
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                                    }
                                }
                            }
                        }
                    }
                    subList.COAText = coaText;
                    subList.CompanyId = k.SZ_Quotation.CompanyId;
                    model.Add(subList);
                });

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                if (!string.IsNullOrEmpty(scinameFilter))
                {
                    int sciid = Convert.ToInt32(scinameFilter);
                    model = model.Where(x => x.ScientistCustomerId == sciid).ToList();
                }
                if (!string.IsNullOrEmpty(subscinameFilter))
                {
                    int subsciid = Convert.ToInt32(subscinameFilter);
                    model = model.Where(x => x.SubScientistCustomerId == subsciid).ToList();
                }
                if (!string.IsNullOrEmpty(fltprostatusItem))
                {
                    model = model.Where(x => x.ProStatus == fltprostatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(fltactivity))
                {
                    model = model.Where(x => x.ActivityStatus == fltactivity).ToList();
                }

                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }

                }

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                        || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }


        [HttpPost]
        public ActionResult LoadPrepHPLCData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();


                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                string prostats = Convert.ToString((int)EnumList.ProStatusDDL.PrepHPLC);

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var queryData = db.SZ_QueryModule.AsQueryable();
                var quotationDetailsdata = db.SZ_QuotationDetail.AsNoTracking().AsQueryable();
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true
                            && t2.ProStatus == prostats
                            && string.IsNullOrEmpty(t2.TrackingNo)
                            && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct().AsQueryable();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                var subscilistItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                ViewBag.ScientistListItem = listItems;
                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });

                }
                ViewBag.SubScientistListItem = subscilistItems;

                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var productsData = objCache.Get("cache.productsdata", () =>
                {
                    return db.Products.AsNoTracking().ToList();
                });
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var inventoryData = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.AsNoTracking().ToList();
                });
                var catList = objCache.Get("cache.categorydata", () =>
                {
                    return db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                });
                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                masterCOAData = masterCOAData.Where(x => proIds.Contains(x.ProductId)).ToList();
                inventoryData = inventoryData.Where(x => proIds.Contains(x.ProductId)).ToList();
                productsData = productsData.Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                catList = catList.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                var model = new List<ProjectListModel>();
                var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
                childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();
                list.ForEach(k =>
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' style='outline: 4px solid #c00'/>";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }

                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ActivityStatusText = "<select id='activitystatus_" + k.Id + "' class='clsActivityStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";

                    if (k.ActivityStatus == "Approval First")
                    {
                        subList.ActivityStatusText += "<option value='Approval First' selected>Approval First</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Approval First'>Approval First</option>";
                    }
                    //if (k.ActivityStatus == "Data Sent")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    //}
                    //if (k.ActivityStatus == "Data Correction")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    //}
                    //if (k.ActivityStatus == "Data Approved")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    //}

                    if (k.ActivityStatus == "Immediate Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch' selected>Immediate Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch'>Immediate Dispatch</option>";
                    }

                    if (k.ActivityStatus == "Short Qty Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch' selected>Short Qty Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch'>Short Qty Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Repeat Order")
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order' selected>Repeat Order</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order'>Repeat Order</option>";
                    }

                    if (k.ActivityStatus == "Data Approved")
                    {
                        subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    }
                    if (k.ActivityStatus == "Data Sent")
                    {
                        subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    }
                    if (k.ActivityStatus == "Data Correction")
                    {
                        subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    }
                    if (k.ActivityStatus == "Invoice Sent")
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent' selected>Invoice Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent'>Invoice Sent</option>";
                    }
                    subList.ActivityStatusText += "</select>";
                    //subList.APIName = GetApiNameOfProduct(k.ProductId.Value, proCat, catList);
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    listItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });


                    subList.ScientistName += "</select>";
                    if (!string.IsNullOrEmpty(k.SubScientistName))
                    {
                        var subsci = System.Text.RegularExpressions.Regex.IsMatch(k.SubScientistName, @"\d+");
                        if (subsci)
                        {
                            if (System.Text.RegularExpressions.Regex.Match(k.SubScientistName, @"\d+").Value == k.SubScientistName)
                            {
                                subList.SubScientistCustomerId = Convert.ToInt32(k.SubScientistName);
                            }
                        }
                    }

                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });


                    subList.SubScientistName += "</select>";

                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px; font-weight:bold' />";
                    subList.ExplainationSecondText = k.ExplainationSecond;
                    //if (!string.IsNullOrEmpty(k.ExplainationSecond))
                    //{
                    //    subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond.Replace("'", "&#8242;") + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    //}
                    //else
                    //{
                    //    subList.ExplainationSecondText = "<input id='explainationsecond_" + k.Id + "' type='text' value='" + k.ExplainationSecond + "' title='" + k.ExplainationSecond + "' style='width: 200px; font-weight:bold' />";
                    //}

                    subList.ExplainationSecond = k.ExplainationSecond;
                    subList.LastWeekUpdate = k.LastWeekUpdate;
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == subList.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            proBatchData.ForEach(r =>
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;

                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            });
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    var pName = "";

                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == k.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    subList.CATNo = pName + "" + "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    //subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.RemarkText = k.Remark;
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";

                    subList.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + k.ProductId + ", " + k.Id + ")'></i>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.IsPayment = k.SZ_Quotation.IsPayment;
                    if (k.SZ_Quotation.IsPayment.HasValue && k.SZ_Quotation.IsPayment.Value)
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' />";
                    }

                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";

                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";

                    if (k.MoveToScientistDate.HasValue)
                    {
                        subList.MoveToScientistDateStr = k.MoveToScientistDate.Value.ToShortDateString();
                    }

                    subList.ExplainationText += "<i class='fa fa-pencil' onclick='explainationGenerate(\"" + k.Id + "\")' ></i>"; //<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.DifficultyLevel = k.DifficultyLevel;
                    subList.DifficultyLevelText = "<select id='difflevel_" + k.Id + "' class='clsDifficultyLevel' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.DifficultyLevel)
                        {
                            selected = "selected ";
                        }
                        subList.DifficultyLevelText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DifficultyLevelText += "</select>";

                    subList.IsPriority = k.IsPriority;
                    if (k.IsPriority.HasValue && k.IsPriority.Value)
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' />";
                    }
                    subList.ProStatus = k.ProStatus;
                    subList.ProStatusText = "<select id='prostatus_" + k.Id + "' class='clsProjStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedProStatus = text;
                        }
                        subList.ProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.ProStatusText += "</select>";
                    subList.COAId = k.COAId;
                    subList.COARefNumber = k.COARefNumber;
                    string coaText = "";

                    coaText = "<select id='coa_" + k.Id + "' class='addcoa'><option value=''>--Select--</option>";
                    int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
                    if (bId != 0)
                    {
                        var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                            if (listchildcoa != null && listchildcoa.Count > 0)
                            {
                                foreach (var ccoa in listchildcoa)
                                {
                                    if (k.COAId == ccoa.Id)
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                                    }
                                    else
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                                    }
                                }

                            }
                        }
                    }
                    subList.COAText = coaText;
                    model.Add(subList);
                });

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                        || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadProductSynthesisLogData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

                var quotationDetailsdata = db.SZ_QuotationDetail.AsEnumerable();
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                            where (t2.MoveToProject == false || t2.MoveToProject == null) && t2.ScientistCustomerId != null
                            && t2.IsSynthesisLog == true
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsData = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();

                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' style='outline: 4px solid #c00'/>";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }

                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px; font-weight:bold' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == subList.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(Convert.ToString(r.Qty), @"\d+").Value;

                                string text = r.BatchNo + " (" + qty + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + qty + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";

                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = k.SubScientistName;
                    subList.GetAllBatch = "<i class='fa fa-clone' title='View Batch No' onclick='GetAllBatchNo(" + k.ProductId + ", " + k.Id + ")'></i>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;

                    subList.IsPayment = k.SZ_Quotation.IsPayment;
                    if (k.SZ_Quotation.IsPayment.HasValue && k.SZ_Quotation.IsPayment.Value)
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' />";
                    }

                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";

                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";

                    if (k.MoveToScientistDate.HasValue)
                    {
                        subList.MoveToScientistDateStr = k.MoveToScientistDate.Value.ToShortDateString();
                    }

                    subList.ExplainationText += "<i class='fa fa-pencil' onclick='explainationGenerate(\"" + k.Id + "\")' ></i>"; //<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.DifficultyLevel = k.DifficultyLevel;
                    subList.DifficultyLevelText = "<select id='difflevel_" + k.Id + "' class='clsDifficultyLevel' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.DifficultyLevel)
                        {
                            selected = "selected ";
                        }
                        subList.DifficultyLevelText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DifficultyLevelText += "</select>";

                    subList.IsPriority = k.IsPriority;
                    if (k.IsPriority.HasValue && k.IsPriority.Value)
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' />";
                    }
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();

                if (!string.IsNullOrEmpty(searchValue))
                {


                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                         || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                          || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                           || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadProductExportData()
        {
            try
            {
                var extraSearch = Request.Form.GetValues("extra_search")[0].ToString();
                var instockother = Request.Form.GetValues("instockother")[0].ToString();
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var fltactivity = Request.Form.GetValues("fltactivity")[0].ToString();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var fltexportprostatusItem = Request.Form.GetValues("fltexportprostatusItem")[0].ToString();
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string instocktype = Convert.ToString((int)EnumList.ProjectType.InStock);
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            && i.CountryType == "Export"
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();
                var splitfilters = instockother.Split(',');
                if (splitfilters[0] == "true")
                {
                    list = list.Where(x => x.ProjectType == instocktype).Distinct();
                }
                if (splitfilters[1] == "true")
                {
                    list = list.Where(x => (x.ProjectType != instocktype && x.ProjectType != inhouseProjectType) || x.ProjectType == null).Distinct();
                }
                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);
                var subscilistItems = new List<SelectListItem>();
                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });

                }

                var proIds = list.Select(x => x.ProductId).Distinct().ToList();

                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var productsData = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' style='outline: 4px solid #c00'/>";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ActivityStatusText = "<select id='activitystatus_" + k.Id + "' class='clsActivityStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";

                    if (k.ActivityStatus == "Approval First")
                    {
                        subList.ActivityStatusText += "<option value='Approval First' selected>Approval First</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Approval First'>Approval First</option>";
                    }
                    //if (k.ActivityStatus == "Data Sent")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    //}
                    //if (k.ActivityStatus == "Data Correction")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    //}
                    //if (k.ActivityStatus == "Data Approved")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    //}
                    if (k.ActivityStatus == "Immediate Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch' selected>Immediate Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch'>Immediate Dispatch</option>";
                    }

                    if (k.ActivityStatus == "Short Qty Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch' selected>Short Qty Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch'>Short Qty Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Repeat Order")
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order' selected>Repeat Order</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order'>Repeat Order</option>";
                    }
                    if (k.ActivityStatus == "Data Approved")
                    {
                        subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    }
                    if (k.ActivityStatus == "Data Sent")
                    {
                        subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    }
                    if (k.ActivityStatus == "Data Correction")
                    {
                        subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    }
                    if (k.ActivityStatus == "Invoice Sent")
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent' selected>Invoice Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent'>Invoice Sent</option>";
                    }
                    subList.ActivityStatusText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";
                    subList.ProStatus = k.ProStatus;
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        // subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                        subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    }
                    //if (k.AdditionalBatchNo.HasValue)
                    //{
                    //    subList.AdditionalBatchNoText = db.SZ_Inventory.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    //}
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetailsexport(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });


                    subList.SubScientistName += "</select>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    if (k.SZ_Quotation.IsPayment.HasValue && k.SZ_Quotation.IsPayment.Value)
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' />";
                    }

                    subList.ReportInvoiceDateText = "<input id='reportinvoiceDate_" + k.Id + "' data-value='" + k.ReportInvoiceDate + "' type='text' class='datepicker'  style='width:80px' />";
                    if (k.ReportInvoiceDate.HasValue)
                    {
                        //   subList.ReportInvoiceDateText = k.ReportInvoiceDate.Value.ToShortDateString();
                        subList.ReportInvoiceDate = k.ReportInvoiceDate.Value;
                    }
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    subList.CountryType = k.SZ_Quotation.CountryType;

                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";
                    subList.COARefNumber = k.COARefNumber;
                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.OtherProStatusText = "<select id='otherprostatus_" + k.Id + "' class='clsotherprostatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProInstockexportStatusDDL r in Enum.GetValues(typeof(EnumList.ProInstockexportStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProInstockexportStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProInstockexportStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.OtherProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedOtherProStatus = text;
                        }
                        subList.OtherProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.OtherProStatusText += "</select>";
                    model.Add(subList);
                }

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                if (!string.IsNullOrEmpty(fltactivity))
                {
                    model = model.Where(x => x.ActivityStatus == fltactivity).ToList();
                }
                if (!string.IsNullOrEmpty(fltexportprostatusItem))
                {
                    model = model.Where(x => x.ProStatus == fltexportprostatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }

                }
                //Search
                if (!string.IsNullOrEmpty(extraSearch))
                {
                    extraSearch = extraSearch.ToLower().Trim();
                    if (extraSearch == "all" || extraSearch == "eurofarma" || extraSearch == "brainfarma" || extraSearch == "other")
                    {
                        if (extraSearch == "eurofarma" || extraSearch == "brainfarma")
                        {
                            model = model.Where(m => m.CompanyName != null && m.CompanyName.ToLower().Contains(extraSearch)).ToList();
                        }
                        else if (extraSearch == "other")
                        {
                            model = model.Where(m => m.CompanyName != null && !m.CompanyName.ToLower().Contains("eurofarma") && !m.CompanyName.ToLower().Contains("brainfarma")).ToList();
                        }
                        else
                        {

                        }
                    }
                    if (!string.IsNullOrEmpty(searchValue))
                    {
                        model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                            || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                            || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                            || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                            || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                            || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                            || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                            || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                            || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                            || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                            || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                            || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                            || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                            || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                            || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                            || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                                            || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                    }
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public ActionResult Resolvequery(int id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.IsQueryResolved = true;
                data.QueryResolvedDate = DateTime.Now;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();

                SZ_Log objLog = new SZ_Log();
                objLog.Id = Guid.NewGuid();
                objLog.Action = "Resolve Query";
                objLog.CreatedDate = DateTime.Now;
                objLog.Message = "Resolved query by " + SessionCookieManagement.UserEmail + " / Quote ref# " + data.SZ_Quotation.Ref + " / Quote Details Id " + data.Id;
                objLog.UserId = SessionCookieManagement.UserId;
                db.SZ_Log.Add(objLog);
                db.SaveChanges();
            }

            return Json("success", JsonRequestBehavior.AllowGet);
        }

        public ActionResult Resumequery(int id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.IsQueryResolved = false;
                data.QueryResolvedDate = null;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();

                SZ_Log objLog = new SZ_Log();
                objLog.Id = Guid.NewGuid();
                objLog.Action = "Resume Query";
                objLog.CreatedDate = DateTime.Now;
                objLog.Message = "Resume Query by " + SessionCookieManagement.UserEmail + " / Quote ref# " + data.SZ_Quotation.Ref + " / Quote Details Id " + data.Id;
                objLog.UserId = SessionCookieManagement.UserId;
                db.SZ_Log.Add(objLog);
                db.SaveChanges();
            }
            return Json("success", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult LoadProductQueryData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where !string.IsNullOrEmpty(t2.QueryText)
                            orderby t2.QueryDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                var proIds = list.Select(x => x.ProductId).Distinct().ToList();

                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();

                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<i class='fa fa-pencil' onclick='queryGenerate(" + k.Id + ")'></i>";
                    if (k.IsQueryResolved.HasValue && k.IsQueryResolved.Value)
                    {
                        subList.ResolvedQueryText = "<b><a style='color:#000' href='javascript:void(0)' onclick='Resumequery(" + k.Id + ")'>Resume</a></b>";
                    }
                    else
                    {
                        subList.ResolvedQueryText = "<b><a href='javascript:void(0)' onclick='Resolvequery(" + k.Id + ")'>Resolve</a></b>";
                    }

                    subList.ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    subList.ProjectType = k.ProjectType;

                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        // subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                        subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    }
                    //if (k.AdditionalBatchNo.HasValue)
                    //{
                    //    subList.AdditionalBatchNoText = db.SZ_Inventory.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    //}
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetailsexport(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = k.SubScientistName;
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    if (k.SZ_Quotation.IsPayment.HasValue && k.SZ_Quotation.IsPayment.Value)
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPaymentText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPayment' />";
                    }
                    subList.IsAssignProjectQuery = k.IsAssignProjectQuery;
                    subList.IsAssignScientistQuery = k.IsAssignScientistQuery;
                    subList.QueryDate = k.QueryDate;
                    subList.IsQueryResolved = k.IsQueryResolved;
                    model.Add(subList);
                }
                //Sorting  
                //if (!string.IsNullOrEmpty(sortColumn) && !string.IsNullOrEmpty(sortColumnDir))
                //{
                //    model = model.OrderBy(sortColumn + " " + sortColumnDir).ToList();
                //}
                //else
                //{
                model = model.OrderByDescending(x => x.QueryDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                // model = model.OrderBy(x => x.SrPo).ThenByDescending(x=>x.MoveProjectDate).ToList();
                //}

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                         || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                          || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                           || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        [HttpPost]
        public ActionResult LoadAllClientAdmindata(int id, bool isClientSection = false)
        {
            try
            {
                string companyName = db.SZ_CompanyList.AsNoTracking().Where(x => x.Id == id).Select(x => x.Name).FirstOrDefault();

                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            //&& i.CompanyName.ToLower() == companyName.ToLower()
                             && i.CompanyId == id
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });


                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    //  subList.ChkSaveRow = "<a href='javascript:void(0)' onclick='SaveInformation(\"" + k.Id + "\")'> Save </a>";

                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='svcheck'>";
                    subList.ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();

                    subList.ProjectType = k.ProjectType;

                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            subList.SelectedScientistName = r.Text;
                        }
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";

                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    if (subList.ProductId.HasValue)
                    {
                        var proData = db.Products.AsNoTracking().Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = db.SZ_Inventory.AsNoTracking().Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }
                            }
                        }
                    }
                    subList.RequiredQtyTxt = k.RequiredQty;

                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.AddDays(10).ToShortDateString();
                    }
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastStatus = k.LastStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock))
                    {
                        k.AdminScientistStatus = "Synthesis is completed and analytical recording in progress.";
                    }
                    if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.Purchase))
                    {
                        k.AdminScientistStatus = "We will deliver product as per quoted time-line.";
                    }
                    subList.ClientStatus = k.ClientStatus;
                    subList.LastStatusText = "<input id='lastStatus_" + k.Id + "' type='text' value='" + k.LastStatus + "' title='" + k.LastStatus + "' style='width:200px' />";

                    subList.ClientStatusText = "<select id='clientstatus_" + k.Id + "' class='clsClientStatus' data-quoteDetailsId='" + k.Id + "'>";
                    if (k.ClientStatus == "In Progress")
                    {
                        subList.ClientStatusText += "<option value='In Progress' selected>In Progress</option>";


                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='In Progress'>In Progress</option>";
                    }

                    if (k.ClientStatus == "COA/Data Sent")
                    {
                        k.AdminScientistStatus = "COA/Data Sent";
                        subList.ClientStatusText += "<option value='COA/Data Sent' selected>COA/Data Sent</option>";

                        //set est date blank
                        subList.EstimateCompleteDateText = string.Empty;
                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='COA/Data Sent' disabled>COA/Data Sent</option>";
                    }

                    if (k.ClientStatus == "COA/Data Approved")
                    {
                        k.AdminScientistStatus = "COA/Data Approved";
                        subList.ClientStatusText += "<option value='COA/Data Approved' selected>COA/Data Approved</option>";

                        //set est date blank
                        subList.EstimateCompleteDateText = string.Empty;
                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='COA/Data Approved'>COA/Data Approved</option>";
                    }

                    if (k.ClientStatus == "COA/Data Correction")
                    {
                        k.AdminScientistStatus = "COA/Data Correction";
                        subList.ClientStatusText += "<option value='COA/Data Correction' selected>COA/Data Correction</option>";
                        //set est date blank
                        subList.EstimateCompleteDateText = string.Empty;
                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='COA/Data Correction'>COA/Data Correction</option>";
                    }

                    //if (k.ClientStatus == "Dispatched")
                    //{
                    //    subList.ClientStatusText += "<option value='Dispatched' selected>Dispatched</option>";
                    //}
                    //else
                    //{
                    //    subList.ClientStatusText += "<option value='Dispatched'>Dispatched</option>";
                    //}
                    subList.ClientStatusText += "</select>";

                    if (!string.IsNullOrEmpty(k.COAPath))
                    {
                        subList.COADownloadLink = "<a href='" + k.COAPath.Replace("..", "") + "' download='COA-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    if (!string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.AnalyticalDataLink = "<a href='" + k.AnalyticalData.Replace("..", "") + "' download='AnalyticalData-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    subList.AttachedDataList = k.AttachedDataList;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "' style='width:200px' />";
                    //  subList.ClientRemarkText = "<input id='clientremark_" + k.Id + "' type='text' value='" + k.ClientRemark + "' title='" + k.ClientRemark + "'  style='width:200px' />";

                    subList.ClientRemarkText = "<i class='fa fa-pencil' onclick='Editclientremarks(" + k.Id + ")'></i>";
                    if (isClientSection)
                    {
                        subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=true'><i class='fa fa-pencil'></i></a>";
                    }
                    else
                    {
                        subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    }


                    subList.ClientAddressText = "<input id='clientaddress_" + k.Id + "' type='text' value='" + k.ClientAddress + "' title='" + k.ClientAddress + "' style='width:200px' />";
                    subList.ClientRemark = k.ClientRemark;
                    subList.ClientAddress = k.ClientAddress;
                    if (k.LastUploadDate.HasValue)
                    {
                        subList.LastUploadDateStr = k.LastUploadDate.Value.ToShortDateString();
                    }


                    if (string.IsNullOrEmpty(subList.ClientStatus))
                    {
                        subList.ClientStatus = "In Progress";
                    }

                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    if (searchValue == "In Progress" || searchValue == "COA/Data Sent" || searchValue == "COA/Data Approved" || searchValue == "COA/Data Correction")
                    {
                        searchValue = searchValue.ToLower().Trim();
                        model = model.Where(m => (m.ClientStatus != null && m.ClientStatus.ToLower().Contains(searchValue))).ToList();
                    }
                    else
                    {
                        searchValue = searchValue.ToLower().Trim();
                        model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                            || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                            || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                            || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                            || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                            || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                            || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                            || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                            || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                            || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                            || (m.ClientRemark != null && m.ClientRemark.ToLower().Contains(searchValue))
                                            | (m.ClientStatus != null && m.ClientStatus.ToLower().Contains(searchValue))
                                            || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                             || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                              || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                               || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                                || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                            || (m.ClientAddress != null && m.ClientAddress.ToLower().Contains(searchValue))).ToList();
                    }
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadClientOnHoldData(int id, bool isClientSection = false)
        {
            try
            {
                string companyName = db.SZ_CompanyList.AsNoTracking().Where(x => x.Id == id).Select(x => x.Name).FirstOrDefault();

                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == true)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            && i.CompanyName.ToLower() == companyName.ToLower()
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    //  subList.ChkSaveRow = "<a href='javascript:void(0)' onclick='SaveInformation(\"" + k.Id + "\")'> Save </a>";

                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='svcheck'>";
                    subList.ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();

                    subList.ProjectType = k.ProjectType;

                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            subList.SelectedScientistName = r.Text;
                        }
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";

                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    if (subList.ProductId.HasValue)
                    {
                        var proData = db.Products.AsNoTracking().Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = db.SZ_Inventory.AsNoTracking().Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }
                            }
                        }
                    }
                    subList.RequiredQtyTxt = k.RequiredQty;

                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.AddDays(10).ToShortDateString();
                    }
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastStatus = k.LastStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock))
                    {
                        k.AdminScientistStatus = "Synthesis is completed and analytical recording in progress.";
                    }
                    if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.Purchase))
                    {
                        k.AdminScientistStatus = "We will deliver product as per quoted time-line.";
                    }
                    subList.ClientStatus = k.ClientStatus;
                    subList.LastStatusText = "<input id='lastStatus_" + k.Id + "' type='text' value='" + k.LastStatus + "' title='" + k.LastStatus + "' style='width:200px' />";

                    subList.ClientStatusText = "<select id='clientstatus_" + k.Id + "' class='clsClientStatus' data-quoteDetailsId='" + k.Id + "'>";
                    if (k.ClientStatus == "In Progress")
                    {
                        subList.ClientStatusText += "<option value='In Progress' selected>In Progress</option>";


                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='In Progress'>In Progress</option>";
                    }

                    if (k.ClientStatus == "COA/Data Sent")
                    {
                        k.AdminScientistStatus = "COA/Data Sent";
                        subList.ClientStatusText += "<option value='COA/Data Sent' selected>COA/Data Sent</option>";

                        //set est date blank
                        subList.EstimateCompleteDateText = string.Empty;
                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='COA/Data Sent' disabled>COA/Data Sent</option>";
                    }

                    if (k.ClientStatus == "COA/Data Approved")
                    {
                        k.AdminScientistStatus = "COA/Data Approved";
                        subList.ClientStatusText += "<option value='COA/Data Approved' selected>COA/Data Approved</option>";

                        //set est date blank
                        subList.EstimateCompleteDateText = string.Empty;
                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='COA/Data Approved'>COA/Data Approved</option>";
                    }

                    if (k.ClientStatus == "COA/Data Correction")
                    {
                        k.AdminScientistStatus = "COA/Data Correction";
                        subList.ClientStatusText += "<option value='COA/Data Correction' selected>COA/Data Correction</option>";
                        //set est date blank
                        subList.EstimateCompleteDateText = string.Empty;
                    }
                    else
                    {
                        subList.ClientStatusText += "<option value='COA/Data Correction'>COA/Data Correction</option>";
                    }

                    //if (k.ClientStatus == "Dispatched")
                    //{
                    //    subList.ClientStatusText += "<option value='Dispatched' selected>Dispatched</option>";
                    //}
                    //else
                    //{
                    //    subList.ClientStatusText += "<option value='Dispatched'>Dispatched</option>";
                    //}
                    subList.ClientStatusText += "</select>";

                    if (!string.IsNullOrEmpty(k.COAPath))
                    {
                        subList.COADownloadLink = "<a href='" + k.COAPath.Replace("..", "") + "' download='COA-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    if (!string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.AnalyticalDataLink = "<a href='" + k.AnalyticalData.Replace("..", "") + "' download='AnalyticalData-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    subList.AttachedDataList = k.AttachedDataList;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "' style='width:200px' />";
                    //  subList.ClientRemarkText = "<input id='clientremark_" + k.Id + "' type='text' value='" + k.ClientRemark + "' title='" + k.ClientRemark + "'  style='width:200px' />";

                    subList.ClientRemarkText = "<i class='fa fa-pencil' onclick='Editclientremarks(" + k.Id + ")'></i>";
                    if (isClientSection)
                    {
                        subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=true'><i class='fa fa-pencil'></i></a>";
                    }
                    else
                    {
                        subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    }


                    subList.ClientAddressText = "<input id='clientaddress_" + k.Id + "' type='text' value='" + k.ClientAddress + "' title='" + k.ClientAddress + "' style='width:200px' />";
                    subList.ClientRemark = k.ClientRemark;
                    subList.ClientAddress = k.ClientAddress;
                    if (k.LastUploadDate.HasValue)
                    {
                        subList.LastUploadDateStr = k.LastUploadDate.Value.ToShortDateString();
                    }


                    if (string.IsNullOrEmpty(subList.ClientStatus))
                    {
                        subList.ClientStatus = "In Progress";
                    }

                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    if (searchValue == "In Progress" || searchValue == "COA/Data Sent" || searchValue == "COA/Data Approved" || searchValue == "COA/Data Correction")
                    {
                        searchValue = searchValue.ToLower().Trim();
                        model = model.Where(m => (m.ClientStatus != null && m.ClientStatus.ToLower().Contains(searchValue))).ToList();
                    }
                    else
                    {
                        searchValue = searchValue.ToLower().Trim();
                        model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                            || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                            || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                            || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                            || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                            || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                            || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                            || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                            || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                            || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                            || (m.ClientRemark != null && m.ClientRemark.ToLower().Contains(searchValue))
                                            | (m.ClientStatus != null && m.ClientStatus.ToLower().Contains(searchValue))
                                            || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                             || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                              || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                               || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                                || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                            || (m.ClientAddress != null && m.ClientAddress.ToLower().Contains(searchValue))).ToList();
                    }
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadAllClientDispatcheddata(int id)
        {
            try
            {
                string companyName = db.SZ_CompanyList.AsNoTracking().Where(x => x.Id == id).Select(x => x.Name).FirstOrDefault();

                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where !string.IsNullOrEmpty(t2.TrackingNo)
                            && i.CompanyName.ToLower() == companyName.ToLower()
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });


                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                    subList.ProjectType = k.ProjectType;
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";

                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    if (subList.ProductId.HasValue)
                    {
                        var proData = db.Products.AsNoTracking().Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = db.SZ_Inventory.AsNoTracking().Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }
                            }
                        }
                    }
                    subList.RequiredQtyTxt = k.RequiredQty;

                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.AddDays(10).ToShortDateString();
                    }
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastStatus = k.LastStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = k.AdminScientistStatus;
                    subList.ClientStatusText = k.ClientStatus;

                    if (!string.IsNullOrEmpty(k.COAPath))
                    {
                        subList.COADownloadLink = "<a href='" + k.COAPath.Replace("..", "") + "' download='COA-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    if (!string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.AnalyticalDataLink = "<a href='" + k.AnalyticalData.Replace("..", "") + "' download='AnalyticalData-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    subList.AttachedDataList = k.AttachedDataList;

                    subList.ClientRemarkText = k.ClientRemark;
                    subList.ClientAddressText = k.ClientAddress;
                    subList.ClientStatus = k.ClientStatus;
                    subList.ClientRemark = k.ClientRemark;
                    subList.ClientAddress = k.ClientAddress;
                    subList.TrackingNo = k.TrackingNo;
                    if (!string.IsNullOrEmpty(k.Courier))
                    {
                        try
                        {
                            int couid = Convert.ToInt32(k.Courier);
                            subList.Courier = db.SZ_Courier.AsNoTracking().Where(x => x.Id == couid).Select(x => x.Name).FirstOrDefault();
                        }
                        catch (Exception)
                        {
                            //return error message here...
                        }
                    }
                    subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=true'><i class='fa fa-pencil'></i></a>";

                    if (k.LastUploadDate.HasValue)
                    {
                        subList.LastUploadDateStr = k.LastUploadDate.Value.ToShortDateString();
                    }
                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                         || (m.ClientRemark != null && m.ClientRemark.ToLower().Contains(searchValue))
                                        | (m.ClientStatus != null && m.ClientStatus.ToLower().Contains(searchValue))
                                        || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                                         || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                          || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                           || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.ClientAddress != null && m.ClientAddress.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        [HttpPost]
        public ActionResult LoadAllDispatchdata()
        {
            try
            {
                db.Configuration.AutoDetectChangesEnabled = false;
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var type = Request.Form.GetValues("type").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var fltprostatusItem = "";
                var fltactivitystatusItem = "";
                if (Request.Form.GetValues("fltprostatusItem") != null)
                {
                    fltprostatusItem = Request.Form.GetValues("fltprostatusItem")[0].ToString();
                }
                if (Request.Form.GetValues("fltprostatusItem") != null)
                {
                    fltactivitystatusItem = Request.Form.GetValues("fltactivitystatusItem")[0].ToString();
                }
                var flttableName = "";
                if (Request.Form.GetValues("tableName") != null)
                {
                    flttableName = Request.Form.GetValues("tableName")[0].ToString();
                }
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string instockProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);
                var list = new List<SZ_QuotationDetail>();
                if (type == "all")
                {
                    // Getting all Customer data  
                    list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct().ToList();
                }
                else
                {
                    // Getting all Customer data  
                    list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                           // && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                           && t2.ProjectType == instockProjectType
                            && i.CountryType == type
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct().ToList();
                }

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ToList();

                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                var quotedetailids = list.Select(x => x.Id).ToList();
                var formids = db.SZ_QuoteDetails_Form.AsNoTracking().Where(x => quotedetailids.Contains(x.QuoteDetailsId)).Select(x => x.FormId).ToList();
                var qdsubmitformList = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => formids.Contains(x.Id)).ToList();

                var productids = list.Select(x => x.ProductId).ToList();
                var masterCOAData = db.SZ_MasterCOA.AsNoTracking().ToList();
                var childcoadata = db.SZ_ChildCOA.AsNoTracking().ToList();
                var productsData = db.Products.AsNoTracking().ToList();
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });

                var catList = db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();

                productsData = productsData.Where(x => productids.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                masterCOAData = masterCOAData.Where(x => productids.Contains(x.ProductId)).ToList();
                var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
                childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();
                var model = new List<ProjectListModel>();
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var proIds = list.Select(x => x.ProductId).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var filledFormList = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.IsDispatchedEntry.HasValue && x.IsDispatchedEntry.Value).ToList();
                foreach (var k in list)
                {

                    bool isApproveButton = k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value ? false : true;

                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clssavealltab' data-showapprovebutton='" + isApproveButton + "' />";

                    if (!string.IsNullOrEmpty(k.COAPath) || !string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.ChkSaveRow = "<a href='javascript:void(0)' style = 'color:darkgreen;font-weight: bold;' onclick='UploadDocumentOfProduct(\"" + k.Id + "\")'> Upload </a>";
                    }
                    else
                    {
                        subList.ChkSaveRow = "<a href='javascript:void(0)' onclick='UploadDocumentOfProduct(\"" + k.Id + "\")'> Upload </a>";
                    }

                    var form = filledFormList.Where(x => x.CATNo == k.CATNo).OrderByDescending(x => x.Id).FirstOrDefault();
                    if (form != null && k.ProStatus == Convert.ToString((int)EnumList.DispatchStatusDDl.QCApproved) && k.ProStatus == Convert.ToString((int)EnumList.DispatchStatusDDl.ReadyforDispatch))
                    {
                        subList.ChkSaveRow += " | <a href='/Form/SubmitForm/" + k.Id + "?formid=" + form.Id + "&isdispatch=true'>Edit Form</a>";
                        subList.ChkSaveRow += " | <a href='/Form/Printform/" + form.Id + "'>Submit & Print Form</a>";
                    }
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    subList.ProStatus = k.ProStatus;
                    subList.ProjectType = k.ProjectType;
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            subList.SelectedProjectType = text;
                        }
                    }
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            subList.SelectedScientistName = r.Text;
                        }
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-tablename='" + flttableName + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch addbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsData.Where(x => x.Id == subList.ProductId).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }
                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + k.Id + "\")' ></i>";
                    subList.DispatchStatusText = "<select id='dispatchstatus_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='adddispatchstatus'><option value=''>--Select--</option>";
                    foreach (EnumList.DispatchStatusDDl r in Enum.GetValues(typeof(EnumList.DispatchStatusDDl)))
                    {
                        string selected = "";
                        var item = Enum.GetName(typeof(EnumList.DispatchStatusDDl), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DispatchStatusDDl)(int)r);
                        int val = (int)r;
                        if (Convert.ToString(val) == k.ProStatus)
                        {
                            selected = "selected";
                            subList.SelectedDispatchStatus = text;
                        }
                        subList.DispatchStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";

                    }
                    subList.DispatchStatusText += "</select>";
                    subList.RequiredQtyTxt = k.RequiredQty;
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    string pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == k.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\", \"dispatch\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\", \"dispatch\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    subList.CATNo = k.CATNo + "" + pName;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    }
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastStatus = k.LastStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.ClientStatusText = "<select id='clientstatus_" + k.Id + "' class='clsClientStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    subList.ClientStatusText += "<option value='In progress'>In progress</option>";
                    subList.ClientStatusText += "<option value='COA/Data Sent'>COA/Data Sent</option>";
                    subList.ClientStatusText += "<option value='COA/Data Approved'>COA/Data Approved</option>";
                    subList.ClientStatusText += "<option value='COA/Data Correction'>COA/Data Correction</option>";
                    //subList.ClientStatusText += "<option value='Dispatched'>Dispatched</option>";
                    subList.ClientStatusText += "</select>";
                    subList.ClientStatus = k.ClientStatus;
                    subList.ClientRemark = k.ClientRemark;
                    subList.ClientAddress = k.ClientAddress;
                    if (!string.IsNullOrEmpty(k.COAPath))
                    {
                        subList.COADownloadLink = "<a href='" + k.COAPath.Replace("..", "") + "' download='COA-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    if (!string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.AnalyticalDataLink = "<a href='" + k.AnalyticalData.Replace("..", "") + "' download='AnalyticalData-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    subList.AttachedDataList = k.AttachedDataList;

                    string coaText = "";

                    coaText = "<select id='coa_" + k.Id + "' class='addcoa'><option value=''>--Select--</option>";
                    int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
                    if (bId != 0)
                    {
                        var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            subList.BatchNo = mastercoa.BatchNo;
                            var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                            if (listchildcoa != null && listchildcoa.Count > 0)
                            {
                                foreach (var ccoa in listchildcoa)
                                {
                                    if (k.COAId == ccoa.Id)
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                                    }
                                    else
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                                    }
                                }
                            }
                        }
                    }
                    subList.COAText = coaText;
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value)
                    {
                        subList.LastRowText = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        subList.LastRowText = "<i class='fa fa-remove'></i>";
                    }
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.Reason = k.Reason;
                    subList.SuggChemName = k.SZ_Quotation.SuggChemName;
                    if (k.LastUploadDate.HasValue)
                    {
                        subList.LastUploadDateStr = k.LastUploadDate.Value.ToShortDateString();
                    }
                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href='javascript: void(0)' onclick='attachment(" + k.QuoteId + ")'> <i class='fa fa-paperclip'></i></a>";
                    }
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    subList.CountryType = k.SZ_Quotation.CountryType;
                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    subList.ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.Id + ")' ></i>";
                    var formid = db.SZ_QuoteDetails_Form.AsNoTracking().Where(x => x.QuoteDetailsId == k.Id).Select(x => x.FormId).FirstOrDefault();
                    var qdsubmitform = qdsubmitformList.Where(x => x.Id == formid).FirstOrDefault();
                    if (qdsubmitform != null)
                    {
                        if (!string.IsNullOrEmpty(qdsubmitform.SpectralDataAttachment))
                        {
                            subList.SpectralData = "<a href='" + qdsubmitform.SpectralDataAttachment.Replace("..", "") + "' download='SpectralData-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                        }
                    }
                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ToList();
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.Reason != null && m.Reason.ToLower().Contains(searchValue))).ToList();
                }
                if (!string.IsNullOrEmpty(fltprostatusItem))
                {
                    model = model.Where(x => x.ProStatus == fltprostatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(fltactivitystatusItem))
                {
                    model = model.Where(x => x.ActivityStatus == fltactivitystatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "teamleader")
                    {
                        model = model.Where(x => !string.IsNullOrEmpty(x.SelectedScientistName) ? x.SelectedScientistName.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                }
                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadFormDataInDispatchedData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            join t4 in db.SZ_QuoteDetails_Form.AsNoTracking() on t2.Id equals t4.QuoteDetailsId
                            join t3 in db.SZ_QuoteDetailForm.AsNoTracking() on t4.FormId equals t3.Id
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            && t3.IsDispatchedEntry == true
                            orderby t3.CreatedDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });
                var productids = list.Select(x => x.ProductId).ToList();

                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var productsData = objCache.Get("cache.productsdata", () =>
                {
                    return db.Products.AsNoTracking().ToList();
                });
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var inventoryData = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.AsNoTracking().ToList();
                });
                var catList = objCache.Get("cache.categorydata", () =>
                {
                    return db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                });
                masterCOAData = masterCOAData.Where(x => productids.Contains(x.ProductId)).ToList();
                var productsdata = productsData.Where(x => productids.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();
                inventoryData = inventoryData.Where(x => productids.Contains(x.ProductId)).ToList();
                var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
                childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();
                var model = new List<ProjectListModel>();
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var filledFormList = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.IsDispatchedEntry.HasValue && x.IsDispatchedEntry.Value).ToList();
                foreach (var k in list)
                {

                    bool isApproveButton = k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value ? false : true;

                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clssavealltab' data-showapprovebutton='" + isApproveButton + "' />";
                    string correctionstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCCorrection);
                    string approvalstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproved);

                    var form = filledFormList.Where(x => x.CATNo == k.CATNo).OrderByDescending(x => x.Id).FirstOrDefault();
                    if (form != null)
                    {
                        subList.ApprovedFormStatus = form.ApprovalStatus;
                        subList.ChkSaveRow += " <a href='/Form/SubmitForm/" + k.Id + "?formid=" + form.Id + "&isdispatch=true'>Edit Form</a>";
                        if (form.ApprovalStatus == approvalstatus)
                        {
                            subList.ChkSaveRow += " | <a href='/Form/Printform/" + form.Id + "'>Submit & Print Form</a>";
                        }
                    }
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    subList.ProjectType = k.ProjectType;
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            subList.SelectedProjectType = text;
                        }
                    }
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            subList.SelectedScientistName = r.Text;
                        }
                    }
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch addbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }
                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.RequiredQtyTxt = k.RequiredQty;
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    string pName = "";
                    var query = queryData.Where(x => x.CATNo.Trim().ToLower() == k.CATNo.Trim().ToLower()).OrderByDescending(x => x.Id).ToList();
                    if (query != null && query.Count() > 0)
                    {
                        var qlist = query.Select(x => x.QueryNo).ToArray();
                        if (query.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                        query.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\", \"dispatch\")' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            pName = "<i class='clstooltip fa fa-info-circle' onclick='GetQueryDataFromCatNo(\"" + k.CATNo + "\", \"dispatch\")' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    subList.CATNo = k.CATNo + "" + pName;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    }
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastStatus = k.LastStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.ClientStatusText = "<select id='clientstatus_" + k.Id + "' class='clsClientStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    subList.ApprovalCommentsText = "<i class='fa fa-pencil' onclick='approCommentGenerate(\"" + k.Id + "\")' ></i>";
                    subList.ClientStatusText += "<option value='In progress'>In progress</option>";
                    subList.ClientStatusText += "<option value='COA/Data Sent'>COA/Data Sent</option>";
                    subList.ClientStatusText += "<option value='COA/Data Approved'>COA/Data Approved</option>";
                    subList.ClientStatusText += "<option value='COA/Data Correction'>COA/Data Correction</option>";
                    //subList.ClientStatusText += "<option value='Dispatched'>Dispatched</option>";
                    subList.ClientStatusText += "</select>";
                    subList.ClientStatus = k.ClientStatus;
                    subList.ClientRemark = k.ClientRemark;
                    subList.ClientAddress = k.ClientAddress;
                    if (!string.IsNullOrEmpty(k.COAPath))
                    {
                        subList.COADownloadLink = "<a href='" + k.COAPath.Replace("..", "") + "' download='COA-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    if (!string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.AnalyticalDataLink = "<a href='" + k.AnalyticalData.Replace("..", "") + "' download='AnalyticalData-" + subList.BatchNo + "'><i class='fa fa-download'></i></a>";
                    }
                    subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    subList.AttachedDataList = k.AttachedDataList;

                    string coaText = "";

                    coaText = "<select id='coa_" + k.Id + "' class='addcoa'><option value=''>--Select--</option>";
                    int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
                    if (bId != 0)
                    {
                        var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            subList.BatchNo = mastercoa.BatchNo;
                            var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                            if (listchildcoa != null && listchildcoa.Count > 0)
                            {
                                foreach (var ccoa in listchildcoa)
                                {
                                    if (k.COAId == ccoa.Id)
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                                    }
                                    else
                                    {
                                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                                    }
                                }

                            }
                        }
                    }
                    subList.COAText = coaText;

                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value)
                    {
                        subList.LastRowText = "<i class='fa fa-check'></i>";
                    }
                    else
                    {
                        subList.LastRowText = "<i class='fa fa-remove'></i>";
                    }
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.Reason = k.Reason;
                    subList.SuggChemName = k.SZ_Quotation.SuggChemName;
                    if (k.LastUploadDate.HasValue)
                    {
                        subList.LastUploadDateStr = k.LastUploadDate.Value.ToShortDateString();
                    }
                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href='javascript: void(0)' onclick='attachment(" + k.QuoteId + ")'> <i class='fa fa-paperclip'></i></a>";
                    }

                    subList.ReasonText = k.Reason;

                    //subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    subList.CountryType = k.SZ_Quotation.CountryType;

                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    //subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    subList.ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.Id + ")' ></i>";
                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadDispatchedExportData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                int sortQTY = (int)EnumList.DispatchStatus.SortQty;
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                var model = (from i in db.SZ_Quotation.AsNoTracking()
                             join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                             where t2.MoveToDispatch == true
                             && (t2.MoveToInvoice == false || t2.MoveToInvoice == null)
                             && (t2.IsOnHold == false || t2.IsOnHold == null)
                             && i.CountryType == "Export"
                             && (t2.DispatchedStatus != sortQTY || t2.DispatchedStatus == null)
                             orderby t2.MoveDispatchDate descending
                             select t2).ToList();

                var productids = model.Select(x => x.ProductId).ToList();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var productsData = objCache.Get("cache.productsdata", () =>
                {
                    return db.Products.AsNoTracking().ToList();
                });
                var inventoryData = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.ToList();
                });
                var catList = objCache.Get("cache.categorydata", () =>
                {
                    return db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                });
                masterCOAData = masterCOAData.Where(x => productids.Contains(x.ProductId)).ToList();
                var compData = db.SZ_CompanyList.AsNoTracking().ToList();
                productsData = productsData.Where(x => productids.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                inventoryData = inventoryData.Where(x => productids.Contains(x.ProductId)).ToList();
                var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
                childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();
                var queryLiveData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var list = new List<QuotationListModel>();
                foreach (var k in model)
                {
                    string queryString = "";
                    var queryData = new List<SZ_QueryModule>();
                    queryData = queryLiveData.Where(x => x.CATNo.Trim() == k.CATNo.Trim()).OrderByDescending(x => x.Id).ToList();
                    if (queryData != null && queryData.Count > 0)
                    {
                        var qlist = queryData.Select(x => x.QueryNo).ToArray();
                        if (queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                            queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                            queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            queryString = "<i class='clstooltip fa fa-info-circle' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            queryString = "<i class='clstooltip fa fa-info-circle' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    QuotationListModel subList = new QuotationListModel();
                    subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clssaveall' />";
                    subList.ActionRow = "";
                    if (k.DispatchedStatus.HasValue && k.DispatchedStatus.Value == (int)EnumList.DispatchStatus.Packed && k.MoveToInvoice != null && k.MoveToInvoice.Value)
                    {
                        subList.ActionRow = "<i class='fa fa-check-square' style='color:lightseagreen' ></i>";
                    }
                    else if (k.DispatchedStatus.HasValue && k.DispatchedStatus.Value == (int)EnumList.DispatchStatus.Packed)
                    {
                        subList.ActionRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }

                    if (!string.IsNullOrEmpty(k.COAPath) || !string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.ChkSaveRow = "<a href='javascript:void(0)' style = 'color:darkgreen;font-weight: bold;' onclick='UploadDocumentOfProduct(\"" + k.Id + "\")'> Upload </a>";
                    }
                    else
                    {
                        subList.ChkSaveRow = "<a href='javascript:void(0)' onclick='UploadDocumentOfProduct(\"" + k.Id + "\")'> Upload </a>";
                    }
                    subList.QuoteId = k.QuoteId;
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.MoveDispatchDateText = k.MoveDispatchDate.HasValue ? k.MoveDispatchDate.Value.ToShortDateString() : "";
                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.CountryType = k.SZ_Quotation.CountryType;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo + " " + queryString;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty + " mg";
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotedetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0/* && proData > 0*/)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (subList.AdditionalBatchNo.HasValue && r.Id == subList.AdditionalBatchNo.Value)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.Id + ")' ></i>";
                    subList.COAText = GetCOA(k, masterCOAData, childcoadata);
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.Remark = k.Remark;
                    subList.OrderRemark = k.OrderRemark;
                    if (k.DispatchedStatus == null)
                    {
                        k.DispatchedStatus = 0;
                    }
                    subList.DispatchStatusText = "<select id='dispatchstatus_" + k.Id + "' data-quotedetailsid='" + k.Id + "' class='clsDispatch'><option value=''>--Select--</option>";
                    foreach (EnumList.DispatchStatus r in Enum.GetValues(typeof(EnumList.DispatchStatus)))
                    {
                        string selected = "";
                        var item = Enum.GetName(typeof(EnumList.DispatchStatus), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DispatchStatus)(int)r);
                        int val = (int)r;
                        if (Convert.ToInt32(val) == k.DispatchedStatus)
                        {
                            selected = "selected";
                            subList.SelectedDispatchStatus = text;
                        }
                        subList.DispatchStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DispatchStatusText += "</select>";
                    subList.DispatchStatusText += "<input type='number' style='display: none; width: 50px; ' id ='sortqty_" + k.Id + "' name ='sortqty_" + k.Id + "' data-requiredqty='" + k.RequiredQty + "' />";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.MoveToProject = k.MoveToProject;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastUploadDateText = k.LastUploadDate.HasValue ? k.LastUploadDate.Value.ToShortDateString() : "";
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ClientRemark = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    list.Add(subList);
                }
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    list = list.Where(m => (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.SelectedDispatchStatus != null && m.SelectedDispatchStatus.ToLower().Contains(searchValue))).ToList();
                }
                var data = list.Skip(skip).Take(pageSize).ToList();
                int? recordsTotal = list.Count;
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public ActionResult LoadDispatchedLocalData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                int sortQTY = (int)EnumList.DispatchStatus.SortQty;
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                var model = (from i in db.SZ_Quotation.AsNoTracking()
                             join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                             where t2.MoveToDispatch == true
                             && (t2.MoveToInvoice == false || t2.MoveToInvoice == null)
                             && (t2.IsOnHold == false || t2.IsOnHold == null)
                             && (i.CountryType == "Domestic" || string.IsNullOrEmpty(i.CountryType))
                             && (t2.DispatchedStatus != sortQTY || t2.DispatchedStatus == null)
                             orderby t2.MoveDispatchDate descending
                             select t2).ToList();

                var productids = model.Select(x => x.ProductId).ToList();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var productsData = objCache.Get("cache.productsdata", () =>
                {
                    return db.Products.AsNoTracking().ToList();
                });
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var inventoryData = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.AsNoTracking().ToList();
                });
                var catList = objCache.Get("cache.categorydata", () =>
                {
                    return db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                });
                masterCOAData = masterCOAData.Where(x => productids.Contains(x.ProductId)).ToList();
                var compData = db.SZ_CompanyList.AsNoTracking().ToList();
                productsData = productsData.Where(x => productids.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                inventoryData = inventoryData.Where(x => productids.Contains(x.ProductId)).ToList();
                var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
                childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();
                var queryLiveData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var list = new List<QuotationListModel>();
                foreach (var k in model)
                {
                    string queryString = "";
                    var queryData = new List<SZ_QueryModule>();
                    queryData = queryLiveData.Where(x => x.CATNo.Trim() == k.CATNo.Trim()).OrderByDescending(x => x.Id).ToList();
                    if (queryData != null && queryData.Count > 0)
                    {
                        var qlist = queryData.Select(x => x.QueryNo).ToArray();
                        if (queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                            queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                            queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            queryString = "<i class='clstooltip fa fa-info-circle' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            queryString = "<i class='clstooltip fa fa-info-circle' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    QuotationListModel subList = new QuotationListModel();
                    subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clssaveall' />";
                    subList.ActionRow = "";
                    if (k.DispatchedStatus.HasValue && k.DispatchedStatus.Value == (int)EnumList.DispatchStatus.Packed && k.MoveToInvoice != null && k.MoveToInvoice.Value)
                    {
                        subList.ActionRow = "<i class='fa fa-check-square' style='color:lightseagreen' ></i>";
                    }
                    else if (k.DispatchedStatus.HasValue && k.DispatchedStatus.Value == (int)EnumList.DispatchStatus.Packed)
                    {
                        subList.ActionRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }


                    if (!string.IsNullOrEmpty(k.COAPath) || !string.IsNullOrEmpty(k.AnalyticalData))
                    {
                        subList.ChkSaveRow = "<a href='javascript:void(0)' style = 'color:darkgreen;font-weight: bold;' onclick='UploadDocumentOfProduct(\"" + k.Id + "\")'> Upload </a>";
                    }
                    else
                    {
                        subList.ChkSaveRow = "<a href='javascript:void(0)' onclick='UploadDocumentOfProduct(\"" + k.Id + "\")'> Upload </a>";
                    }
                    subList.QuoteId = k.QuoteId;
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.MoveDispatchDateText = k.MoveDispatchDate.HasValue ? k.MoveDispatchDate.Value.ToShortDateString() : "";
                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.CountryType = k.SZ_Quotation.CountryType;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo + " " + queryString;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty + " mg";
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotedetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0/* && proData > 0*/)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (subList.AdditionalBatchNo.HasValue && r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.Id + ")' ></i>";
                    subList.COAText = GetCOA(k, masterCOAData, childcoadata);
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.Remark = k.Remark;
                    subList.OrderRemark = k.OrderRemark;

                    if (k.DispatchedStatus == null)
                    {
                        k.DispatchedStatus = 0;
                    }

                    subList.DispatchStatusText = "<select id='dispatchstatus_" + k.Id + "' data-quotedetailsid='" + k.Id + "' class='clsDispatch'><option value=''>--Select--</option>";
                    foreach (EnumList.DispatchStatus r in Enum.GetValues(typeof(EnumList.DispatchStatus)))
                    {
                        string selected = "";
                        var item = Enum.GetName(typeof(EnumList.DispatchStatus), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DispatchStatus)(int)r);
                        int val = (int)r;
                        if (Convert.ToInt32(val) == k.DispatchedStatus)
                        {
                            selected = "selected";
                            subList.SelectedDispatchStatus = text;
                        }
                        subList.DispatchStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DispatchStatusText += "</select>";
                    subList.DispatchStatusText += "<input type='number' style='display: none; width: 50px; ' id ='sortqty_" + k.Id + "' name ='sortqty_" + k.Id + "' data-requiredqty='" + k.RequiredQty + "' />";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.MoveToProject = k.MoveToProject;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastUploadDateText = k.LastUploadDate.HasValue ? k.LastUploadDate.Value.ToShortDateString() : "";
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ClientRemark = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    list.Add(subList);
                }

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    list = list.Where(m => (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.SelectedDispatchStatus != null && m.SelectedDispatchStatus.ToLower().Contains(searchValue))).ToList();
                }
                var data = list.Skip(skip).Take(pageSize).ToList();
                int? recordsTotal = list.Count;
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadDispatchedShortQTYData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                int sortQTY = (int)EnumList.DispatchStatus.SortQty;
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                var model = (from i in db.SZ_Quotation.AsNoTracking()
                             join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                             where t2.MoveToDispatch == true
                             && (t2.MoveToInvoice == false || t2.MoveToInvoice == null)
                             && (t2.IsOnHold == false || t2.IsOnHold == null)
                             && t2.DispatchedStatus == sortQTY
                             orderby t2.MoveDispatchDate descending
                             select t2).ToList();

                var productids = model.Select(x => x.ProductId).ToList();

                MemoryCacheManager objCache = new MemoryCacheManager();

                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var productsData = objCache.Get("cache.productsdata", () =>
                {
                    return db.Products.AsNoTracking().ToList();
                });
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var inventoryData = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.AsNoTracking().ToList();
                });
                var catList = objCache.Get("cache.categorydata", () =>
                {
                    return db.Categories.AsNoTracking().Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published).ToList();
                });

                masterCOAData = masterCOAData.Where(x => productids.Contains(x.ProductId)).ToList();
                var compData = db.SZ_CompanyList.AsNoTracking().ToList();
                productsData = productsData.Where(x => productids.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                inventoryData = inventoryData.Where(x => productids.Contains(x.ProductId)).ToList();
                var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
                childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();
                var queryLiveData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var list = new List<QuotationListModel>();
                foreach (var k in model)
                {
                    string queryString = "";
                    var queryData = new List<SZ_QueryModule>();
                    queryData = queryLiveData.Where(x => x.CATNo.Trim() == k.CATNo.Trim()).OrderByDescending(x => x.Id).ToList();
                    if (queryData != null && queryData.Count > 0)
                    {
                        var qlist = queryData.Select(x => x.QueryNo).ToArray();
                        if (queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "solved" ||
                            queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "close" ||
                            queryData.Select(x => x.Status.ToLower()).FirstOrDefault() == "completed")
                        {
                            queryString = "<i class='clstooltip fa fa-info-circle' title='" + string.Join(", ", qlist) + "' style ='float:right; color: green' ></i>";
                        }
                        else
                        {
                            queryString = "<i class='clstooltip fa fa-info-circle' title='" + string.Join(", ", qlist) + "' style ='float:right' ></i>";
                        }
                    }
                    QuotationListModel subList = new QuotationListModel();
                    subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clssaveall' />";
                    subList.ActionRow = "";
                    if (k.DispatchedStatus.HasValue && k.DispatchedStatus.Value == (int)EnumList.DispatchStatus.Packed && k.MoveToInvoice != null && k.MoveToInvoice.Value)
                    {
                        subList.ActionRow = "<i class='fa fa-check-square' style='color:lightseagreen' ></i>";
                    }
                    else if (k.DispatchedStatus.HasValue && k.DispatchedStatus.Value == (int)EnumList.DispatchStatus.Packed)
                    {
                        subList.ActionRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    subList.LastRow = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveDispatchDetailsSort(" + k.Id + ")'> Save</a>";
                    subList.QuoteId = k.QuoteId;
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.MoveDispatchDateText = k.MoveDispatchDate.HasValue ? k.MoveDispatchDate.Value.ToShortDateString() : "";
                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.CountryType = k.SZ_Quotation.CountryType;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo + " " + queryString;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty + " mg";
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.AdditionalBatchNoText = "<select id='sortadditionalBatch_" + k.Id + "' data-quotedetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (subList.AdditionalBatchNo.HasValue && r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }
                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.Id + ")' ></i>";
                    subList.COAText = GetCOA(k, masterCOAData, childcoadata);
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.Remark = "<input id='sortremark_" + k.Id + "' type='text' value ='" + k.Remark + "' style ='width: 170px' title ='" + k.Remark + "' />";
                    subList.OrderRemark = k.OrderRemark;
                    if (k.DispatchedStatus == null)
                    {
                        k.DispatchedStatus = 0;
                    }
                    subList.DispatchStatusText = "<select id='sortdispatchstatus_" + k.Id + "' data-quotedetailsid='" + k.Id + "' class='clsDispatch'><option value=''>--Select--</option>";
                    foreach (EnumList.DispatchStatus r in Enum.GetValues(typeof(EnumList.DispatchStatus)))
                    {
                        string selected = "";
                        var item = Enum.GetName(typeof(EnumList.DispatchStatus), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DispatchStatus)(int)r);
                        int val = (int)r;
                        if (val == k.DispatchedStatus)
                        {
                            selected = "selected";
                            subList.SelectedDispatchStatus = text;
                        }
                        subList.DispatchStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DispatchStatusText += "</select>";
                    subList.DispatchStatusText += "<input type='number' style='display: none; width: 50px; ' id ='sortqty_" + k.Id + "' name ='sortqty_" + k.Id + "' data-requiredqty='" + k.RequiredQty + "' />";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.MoveToProject = k.MoveToProject;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.LastUploadDateText = k.LastUploadDate.HasValue ? k.LastUploadDate.Value.ToShortDateString() : "";
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ClientRemark = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.Id + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    list.Add(subList);
                }

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    list = list.Where(m => (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.SelectedDispatchStatus != null && m.SelectedDispatchStatus.ToLower().Contains(searchValue))).ToList();
                }
                var data = list.Skip(skip).Take(pageSize).ToList();
                int? recordsTotal = list.Count;
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public ActionResult LoadAllDelivereddata()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                // Getting all Customer data  
                //var listold = (from i in db.SZ_Quotation
                //               join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                //               where !string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                //               orderby t2.MoveDispatchDate descending
                //               select t2).Distinct();

                var list = db.DispatchedDeliveredList(searchValue, pageNo, pageSize).ToList();


                var genericData = db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                var listItems = new List<SelectListItem>();

                var scienList = db.GetScientistId().ToList();
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });
                MemoryCacheManager objCache = new MemoryCacheManager();
                var masterCOAData = objCache.Get("cache.mastercoadata", () =>
                {
                    return db.SZ_MasterCOA.AsNoTracking().ToList();
                });
                var childcoadata = objCache.Get("cache.childcoadata", () =>
                {
                    return db.SZ_ChildCOA.AsNoTracking().ToList();
                });
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var inventory = objCache.Get("cache.inventoryData", () =>
                {
                    return db.SZ_Inventory.AsNoTracking().ToList();
                });

                var productids = list.Select(x => x.ProductId).ToList();
                masterCOAData = masterCOAData.Where(x => productids.Contains(x.ProductId)).ToList();
                var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
                childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();

                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.TotalRecord = k.TotalRecord;
                    subList.ChkFirstRow = "<input type='checkbox' value='" + k.QuoteDetailsId + "' class='clsSaverow' />";
                    subList.ChkSaveRow = "<a href='javascript:void(0)' onclick='UploadDocumentOfProduct(\"" + k.QuoteDetailsId + "\")'> Upload </a>";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;

                    subList.ProjectType = k.ProjectType;
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            subList.SelectedScientistName = r.Text;
                        }
                    }
                    subList.InvoicedDateText = k.InvoicedDate.HasValue ? k.InvoicedDate.Value.ToShortDateString() : "";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.QuoteId;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.OrderRemark = k.OrderRemark;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.QuoteDetailsId + "' data-quotationdetailsid='" + k.QuoteDetailsId + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proBatchData = inventory.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                    subList.BatchNo = r.BatchNo;
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.RequiredQtyTxt = k.RequiredQty;
                    subList.COAText = GetCOA(k, masterCOAData, childcoadata);
                    subList.IsImageAttach = k.IsImageAttach;
                    subList.CompanyName = k.CompanyName;
                    subList.Email = k.EmailAddress;
                    subList.PONumber = k.PONo;
                    subList.Ref = k.Ref;
                    subList.Remark = k.QuotedetailsRemark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.QuoteDetailsId;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CreatedDate = k.CreatedDate.Value;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;
                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.ClientStatusText = "<select id='clientstatus_" + k.QuoteDetailsId + "' class='clsClientStatus' data-quoteDetailsId='" + k.QuoteDetailsId + "'><option value=''>--Select--</option>";
                    subList.ClientStatusText += "<option value='In progress'>In progress</option>";
                    subList.ClientStatusText += "<option value='COA/Data Sent'>COA/Data Sent</option>";
                    subList.ClientStatusText += "<option value='COA/Data Approved'>COA/Data Approved</option>";
                    subList.ClientStatusText += "<option value='COA/Data Correction'>COA/Data Correction</option>";
                    subList.ClientStatusText += "</select>";
                    subList.ClientRemarkText = "<a data-toggle='modal' data-target='#clientremarkModal' href='/Form/AddClientRemark/" + k.QuoteDetailsId + "?isClientSection=false'><i class='fa fa-pencil'></i></a>";
                    subList.ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.QuoteDetailsId + ")' ></i>";
                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();

                int? recordsTotal = model.Select(x => x.TotalRecord).FirstOrDefault();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadProductNoActionData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                string synthesis = Convert.ToString((int)EnumList.ProjectType.Synthesis);
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where (t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo)
                                    && (t2.IsOnHold == false || t2.IsOnHold == null)
                                    && (t2.ProjectType == null || t2.ProjectType == string.Empty || (t2.ProjectType == synthesis && !t2.ScientistCustomerId.HasValue)))
                                    || (string.IsNullOrEmpty(t2.RequiredQty) && t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo)
                                    && (t2.IsOnHold == false || t2.IsOnHold == null))
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();
                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);


                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                var queryData = db.SZ_QueryModule.AsNoTracking().AsQueryable();
                var quotationDetailsdata = db.SZ_QuotationDetail.AsNoTracking().AsQueryable();
                // Getting all Customer data  
                var listproductall = (from i in db.SZ_Quotation.AsNoTracking()
                                      join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                                      where t2.MoveToProject == true
                                      && string.IsNullOrEmpty(t2.TrackingNo)
                                      && (t2.IsOnHold == false || t2.IsOnHold == null)
                                      && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                                      orderby t2.MoveProjectDate descending
                                      select t2).Distinct().AsQueryable();

                var subscilistItems = new List<SelectListItem>();
                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    var pcount = listproductall.Where(x => x.ScientistCustomerId == term).Count();

                    listItems.Add(new SelectListItem
                    {
                        Text = customerName + " (" + pcount.ToString() + ")",
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                }

                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }

                    }
                    subList.ProjectTypeText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' data-cat='" + k.CATNo + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            int loopcnt = 1;
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }
                                if (loopcnt == proBatchData.Count && !subList.AdditionalBatchNo.HasValue)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }
                                loopcnt += 1;
                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    //if (k.EstimateCompleteDate.HasValue)
                    //{
                    //    // subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    //    subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    //}
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    //if (k.AdditionalBatchNo.HasValue)
                    //{
                    //    subList.AdditionalBatchNoText = db.SZ_Inventory.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    //}
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'   style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveNoActionProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });
                    subList.SubScientistName += "</select>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.DifficultyLevel = k.DifficultyLevel;
                    subList.DifficultyLevelText = "<select id='difflevel_" + k.Id + "' class='clsDifficultyLevel' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.DifficultyLevel)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        subList.DifficultyLevelText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.DifficultyLevelText += "</select>";
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.IsPriority = k.IsPriority;
                    if (k.IsPriority.HasValue && k.IsPriority.Value)
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' checked='checked'/>";
                    }
                    else
                    {
                        subList.IsPriorityText = "<input type='checkbox' value='" + k.Id + "' class='clsIsPriority' />";
                    }
                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";

                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";

                    subList.ExplainationText += "<i class='fa fa-pencil' onclick='explainationGenerate(\"" + k.Id + "\")' ></i>"; //<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";

                    model.Add(subList);
                }
                //Sorting  
                //if (!string.IsNullOrEmpty(sortColumn) && !string.IsNullOrEmpty(sortColumnDir))
                //{
                //    model = model.OrderBy(sortColumn + " " + sortColumnDir).ToList();
                //}
                //else
                //{
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                // model = model.OrderBy(x => x.SrPo).ThenByDescending(x=>x.MoveProjectDate).ToList();
                //}

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                         || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                          || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                           || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadProductSynthesisData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Synthesis);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where (t2.MoveToProject == true || t2.IsSynthesisLog == true)
                            && string.IsNullOrEmpty(t2.TrackingNo)
                            && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType == inhouseProjectType || t2.ProjectType == pursynthesisProjectType)
                            && (t2.IsSynthesisLog == false || t2.IsSynthesisLog == null)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);
                var subscilistItems = new List<SelectListItem>();
                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    }); subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });

                }
                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    //if (k.EstimateCompleteDate.HasValue)
                    //{
                    //    // subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    //    subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    //}
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    //if (k.AdditionalBatchNo.HasValue)
                    //{
                    //    subList.AdditionalBatchNoText = db.SZ_Inventory.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    //}
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'   style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveSynthesisProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });

                    subList.SubScientistName += "</select>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice; subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";
                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.ProStatus = k.ProStatus;
                    subList.ProStatusText = "<select id='prostatus_" + k.Id + "' class='clsProjStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedProStatus = text;
                        }
                        subList.ProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.ProStatusText += "</select>";
                    model.Add(subList);
                }
                //Sorting  
                //if (!string.IsNullOrEmpty(sortColumn) && !string.IsNullOrEmpty(sortColumnDir))
                //{
                //    model = model.OrderBy(sortColumn + " " + sortColumnDir).ToList();
                //}
                //else
                //{
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                // model = model.OrderBy(x => x.SrPo).ThenByDescending(x=>x.MoveProjectDate).ToList();
                //}

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                        || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                }
                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        [HttpPost]
        public ActionResult LoadDomesticInstockData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var fltactivity = Request.Form.GetValues("fltactivity")[0].ToString();
                var fltdomesticprostatusItem = Request.Form.GetValues("fltdomesticprostatusItem")[0].ToString();

                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string instockProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where (t2.MoveToProject == true) && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType == instockProjectType)
                            && i.CountryType == "Domestic"
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);
                var subscilistItems = new List<SelectListItem>();
                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });


                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });

                }
                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();

                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' style='outline: 4px solid #c00'/>";
                    }
                    subList.ProjectType = k.ProjectType;

                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ActivityStatusText = "<select id='activitystatus_" + k.Id + "' class='clsActivityStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";

                    if (k.ActivityStatus == "Approval First")
                    {
                        subList.ActivityStatusText += "<option value='Approval First' selected>Approval First</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Approval First'>Approval First</option>";
                    }
                    if (k.ActivityStatus == "Immediate Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch' selected>Immediate Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch'>Immediate Dispatch</option>";
                    }

                    if (k.ActivityStatus == "Short Qty Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch' selected>Short Qty Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch'>Short Qty Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Repeat Order")
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order' selected>Repeat Order</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order'>Repeat Order</option>";
                    }
                    if (k.ActivityStatus == "Data Approved")
                    {
                        subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    }
                    if (k.ActivityStatus == "Data Sent")
                    {
                        subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    }
                    if (k.ActivityStatus == "Data Correction")
                    {
                        subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    }
                    if (k.ActivityStatus == "Invoice Sent")
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent' selected>Invoice Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent'>Invoice Sent</option>";
                    }
                    subList.ActivityStatusText += "</select>";

                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'   style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveSynthesisProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });


                    subList.SubScientistName += "</select>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice; subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";
                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.COARefNumber = k.COARefNumber;
                    if (!string.IsNullOrEmpty(k.SZ_Quotation.Attachment))
                    {
                        subList.Attachment = "<a href = 'javascript:void(0)' onclick='attachment(" + k.QuoteId + ")'><i class='fa fa-paperclip'></i></a>";
                    }
                    subList.ProStatus = k.ProStatus;
                    subList.OtherProStatusText = "<select id='otherprostatus_" + k.Id + "' class='clsotherprostatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProInstockexportStatusDDL r in Enum.GetValues(typeof(EnumList.ProInstockexportStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProInstockexportStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProInstockexportStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.OtherProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedOtherProStatus = text;
                        }
                        subList.OtherProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.OtherProStatusText += "</select>";
                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                //Search
                if (!string.IsNullOrEmpty(fltactivity))
                {
                    model = model.Where(x => x.ActivityStatus == fltactivity).ToList();
                }
                if (!string.IsNullOrEmpty(fltdomesticprostatusItem))
                {
                    model = model.Where(x => x.ProStatus == fltdomesticprostatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                         || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                          || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                           || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                            || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }

                }
                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult DataApprovedDispatchData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Synthesis);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && t2.IsDataApproved == true
                             && (t2.DataApprovedStatus != "Approved" || t2.DataApprovedStatus == null)
                            orderby t2.DataApprovalDate descending
                            select t2).Distinct();

                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var model = new List<DataApprovedModel>();
                foreach (var k in list)
                {
                    DataApprovedModel subList = new DataApprovedModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.DataApprovedDateText = k.DataApprovalDate.HasValue ? k.DataApprovalDate.Value.ToShortDateString() : string.Empty;
                    subList.DataApprovalDate = k.DataApprovalDate;
                    subList.Id = k.Id;
                    subList.ProductId = k.ProductId;
                    subList.PODate = k.MoveProjectDate;
                    if (k.MoveProjectDate.HasValue)
                    {
                        subList.PODateText = k.MoveProjectDate.Value.ToShortDateString();
                    }
                    subList.ProductName = k.ProductName;
                    subList.Ref = k.SZ_Quotation.PONo;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.QTY = k.RequiredQty;
                    subList.Remark = k.Remark;
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;

                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.DataApprovedStatus = k.DataApprovedStatus;
                    subList.DataApprovedStatusText = "<select id='dataapproved_" + k.Id + "' class='clsDataapproved' data-quoteDetailsId='" + k.Id + "'><option value='Pending'>Pending</option><option value='Send'>Send</option><option value='Approved'>Approved</option></select>";
                    subList.ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.Id + ")' ></i>";
                    model.Add(subList);
                }
                //Sorting 
                model = model.OrderByDescending(x => x.DataApprovalDate).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.QTY != null && m.QTY.ToLower().Contains(searchValue))
                                        || (m.Ref != null && m.Ref.ToLower().Contains(searchValue))
                                        || (m.DataApprovedStatus != null && m.DataApprovedStatus.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                         || (m.PODateText != null && m.PODateText.ToLower().Contains(searchValue))
                                          || (m.DataApprovedDateText != null && m.DataApprovedDateText.ToLower().Contains(searchValue))
                                        ).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadPurchaseData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var purchasestatus = Request.Form.GetValues("purchasestatus")[0].ToString();
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where (t2.MoveToProject == true || t2.IsSynthesisLog == true)
                            && string.IsNullOrEmpty(t2.TrackingNo)
                            && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType == inhouseProjectType || t2.ProjectType == pursynthesisProjectType)
                            orderby t2.PurchaseDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.PurchaseDate);

                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var listItems = new List<SelectListItem>();

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                var PurchaseDDLStatusItems = new List<SelectListItem>();
                PurchaseDDLStatusItems.Add(new SelectListItem
                {
                    Text = "Select",
                    Value = ""
                });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "RFQ", Value = "RFQ" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Quotation", Value = "Quotation" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Need Approval", Value = "Need Approval" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Ordered", Value = "Ordered" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Submitted", Value = "Submitted" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "On Hold", Value = "On Hold" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Regret", Value = "Regret" });
                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }
                    subList.ProjectTypeText += "</select>";

                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";

                    subList.PurchaseDDLStatusText = "<select id='PurchaseDDLStatus_" + k.Id + "' class='clspurchasestatus'>";
                    foreach (var r in PurchaseDDLStatusItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.PurchaseDDLStatus))
                        {
                            selected = "selected ";
                            subList.PurchaseDDLStatus = r.Text;
                        }
                        subList.PurchaseDDLStatusText += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.PurchaseDDLStatusText += "</select>";
                    subList.PurchaseRemark = k.PurchaseRemark;
                    subList.PurchaseRemarkText = "<input id='purremark_" + k.Id + "' type='text' value='" + k.PurchaseRemark + "' title='" + k.PurchaseRemark + "'  style='width: 170px' />";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' title='" + k.ScientistRemark + "'  style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.PurchaseStatusText = "<input id='purchasestatus_" + k.Id + "' type='text' value='" + k.PurchaseStatus + "' title='" + k.PurchaseStatus + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    //if (k.EstimateCompleteDate.HasValue)
                    //{
                    //    // subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    //    subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    //}
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    //if (k.AdditionalBatchNo.HasValue)
                    //{
                    //    subList.AdditionalBatchNoText = db.SZ_Inventory.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    //}
                    subList.PurchaseDate = k.PurchaseDate;
                    if (k.PurchaseDate.HasValue)
                    {
                        // subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                        subList.PurchaseDateText = k.PurchaseDate.Value.ToShortDateString();
                    }

                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "' style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SavePurchaseProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = k.SubScientistName;
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";

                    model.Add(subList);
                }
                //Sorting  
                //if (!string.IsNullOrEmpty(sortColumn) && !string.IsNullOrEmpty(sortColumnDir))
                //{
                //    model = model.OrderBy(sortColumn + " " + sortColumnDir).ToList();
                //}
                //else
                //{

                // model = model.OrderBy(x => x.SrPo).ThenByDescending(x=>x.MoveProjectDate).ToList();
                //}
                if (!string.IsNullOrEmpty(purchasestatus))
                {
                    model = model.Where(m => m.PurchaseDDLStatus == purchasestatus).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();

                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }

                }
                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                         || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                          || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                           || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }
                model = model.OrderByDescending(x => x.PurchaseDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadPurchaseRFQData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var purchasestatus = Request.Form.GetValues("purchasestatus")[0].ToString();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                var list = (from i in db.SZ_PurchaseRFQ.AsNoTracking()
                            orderby i.CreatedDate descending
                            select i).Distinct();

                var PurchaseDDLStatusItems = new List<SelectListItem>();
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Select", Value = "" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "RFQ", Value = "RFQ" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Quotation", Value = "Quotation" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Need Approval", Value = "Need Approval" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Approved", Value = "Approved" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Ordered", Value = "Ordered" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Submitted", Value = "Submitted" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "On Hold", Value = "On Hold" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Regret", Value = "Regret" });

                var model = new List<PurchaseRFQModel>();
                foreach (var k in list)
                {
                    PurchaseRFQModel subList = new PurchaseRFQModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.PurchaseStatusText = "<select id='PurchaseStatus_" + k.Id + "' class='clspurchasestatus'>";
                    foreach (var r in PurchaseDDLStatusItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.PurchaseStatus))
                        {
                            selected = "selected ";
                            subList.PurchaseStatus = r.Text;
                        }
                        subList.PurchaseStatusText += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.PurchaseStatusText += "</select>";
                    subList.PurchaseRemark = k.PurchaseRemark;
                    subList.PurchaseRemarkText = "<input id='purremark_" + k.Id + "' type='text' value='" + k.PurchaseRemark + "' title='" + k.PurchaseRemark + "'  style='width: 100%' />";
                    subList.Summary = k.Summary;
                    subList.Comment = k.Comment;
                    subList.AssignedDate = k.AssignedDate;
                    if (k.AssignedDate.HasValue)
                    {
                        subList.AssignedDateText = k.AssignedDate.Value.ToShortDateString();
                    }
                    subList.CommentText = "<input id='comment_" + k.Id + "' type='text' value='" + k.Comment + "' title='" + k.Comment + "' style='width:100%' />";
                    subList.SummaryText = "<input id='summary_" + k.Id + "' type='text' value='" + k.Summary + "' title='" + k.Summary + "' style='width:100%' />";
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.ChemicalName = k.ChemicalName;

                    subList.ChemicalNameText = "<input id='chemicalName_" + k.Id + "' type='text' value='" + k.ChemicalName + "' title='" + k.ChemicalName + "' style='width:100%' />";
                    subList.CASNoText = "<input id='casno_" + k.Id + "' type='text' value='" + k.CASNo + "' title='" + k.CASNo + "' style='width:100%' />";
                    subList.CATNoText = "<input id='catno_" + k.Id + "' type='text' value='" + k.CATNo + "' title='" + k.CATNo + "' style='width:100%' />";
                    subList.RefBy = k.RefBy;
                    subList.CreatedDate = k.CreatedDate;
                    subList.Estdate = k.Estdate;
                    subList.EstdateText = "<input id='estDate_" + k.Id + "' data-value='" + k.Estdate + "' type='text' class='datepicker'  style='width:80px' />";
                    model.Add(subList);
                }

                model = model.Where(x => x.PurchaseStatus != "Submitted" && x.PurchaseStatus != "Regret").ToList();

                if (!string.IsNullOrEmpty(purchasestatus))
                {
                    purchasestatus = purchasestatus.ToLower();
                    model = model.Where(m => (m.PurchaseStatus != null && m.PurchaseStatus.ToLower().Contains(purchasestatus))).ToList();
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ChemicalName != null && m.ChemicalName.ToLower().Contains(searchValue))
                                        || (m.Summary != null && m.Summary.ToLower().Contains(searchValue))).ToList();
                }
                model = model.OrderByDescending(x => x.AssignedDate).ToList();
                recordsTotal = model.Count();
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public ActionResult ExportAllPurchaseRFQ()
        {
            var list = (from i in db.SZ_PurchaseRFQ.AsNoTracking()
                        where i.PurchaseStatus == null || i.PurchaseStatus != "Submitted" && i.PurchaseStatus != "Regret"
                        orderby i.CreatedDate descending
                        select i).Distinct();

            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet1");
            wsSheet1.DefaultColWidth = 11;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            int loopCount = 2;
            wsSheet1.Cells[loopCount, 1].Value = "Purchase Status";
            wsSheet1.Cells[loopCount, 2].Value = "RFQ No";
            wsSheet1.Cells[loopCount, 3].Value = "Ass. Date";
            wsSheet1.Cells[loopCount, 4].Value = "Chemical Name";
            wsSheet1.Cells[loopCount, 5].Value = "CAS No";
            wsSheet1.Cells[loopCount, 6].Value = "CAT No";
            wsSheet1.Cells[loopCount, 7].Value = "Comment";
            wsSheet1.Cells[loopCount, 8].Value = "Summary";
            wsSheet1.Cells[loopCount, 9].Value = "Est. Date";
            wsSheet1.Cells[loopCount, 10].Value = "Purchase Remark";
            wsSheet1.Cells[loopCount, 11].Value = "Ref By";
            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 11])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }

            loopCount = loopCount + 1;
            int srno = 1;
            foreach (var quote in list)
            {
                wsSheet1.Cells[loopCount, 1].Value = quote.PurchaseStatus;
                wsSheet1.Cells[loopCount, 2].Value = quote.RfqNo;
                wsSheet1.Cells[loopCount, 3].Value = quote.AssignedDate.HasValue ? quote.AssignedDate.Value.ToShortDateString() : "";
                wsSheet1.Cells[loopCount, 4].Value = quote.ChemicalName;
                wsSheet1.Cells[loopCount, 5].Value = quote.CASNo;
                wsSheet1.Cells[loopCount, 6].Value = quote.CATNo;
                wsSheet1.Cells[loopCount, 7].Value = quote.Comment;
                wsSheet1.Cells[loopCount, 8].Value = quote.Summary;
                wsSheet1.Cells[loopCount, 9].Value = quote.Estdate.HasValue ? quote.Estdate.Value.ToShortDateString() : "";
                wsSheet1.Cells[loopCount, 10].Value = quote.PurchaseRemark;
                wsSheet1.Cells[loopCount, 11].Value = quote.RefBy;
                srno += 1;
                loopCount += 1;
            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "PurchaseRFQ-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("PurchaseRFQ-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xls"));
        }


        [HttpPost]
        public ActionResult LoadPurchaseRFQSubmittedData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var purchasestatus = Request.Form.GetValues("purchasestatus")[0].ToString();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                var list = (from i in db.SZ_PurchaseRFQ.AsNoTracking()
                            where i.PurchaseStatus != "Submitted" && i.PurchaseStatus != "Regret"
                            orderby i.AssignedDate descending
                            select i).Distinct();

                var quotelist = (from i in db.SZ_QuotationDetail.AsNoTracking()
                                 where i.PurchaseDDLStatus != "Submitted" && i.PurchaseDDLStatus != "Regret"
                                 orderby i.PurchaseDate descending
                                 select i).Distinct();

                var model = new List<PurchaseRFQModel>();
                foreach (var k in list)
                {
                    PurchaseRFQModel subList = new PurchaseRFQModel();
                    subList.PurchaseStatus = k.PurchaseStatus;
                    subList.PurchaseRemark = k.PurchaseRemark;
                    subList.Summary = k.Summary;
                    subList.Comment = k.Comment;
                    subList.AssignedDate = k.AssignedDate;
                    if (k.AssignedDate.HasValue)
                    {
                        subList.AssignedDateText = k.AssignedDate.Value.ToShortDateString();
                    }
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.ChemicalName = k.ChemicalName;
                    subList.RefBy = k.RefBy;
                    subList.CreatedDate = k.CreatedDate;
                    if (k.Estdate.HasValue)
                    {
                        subList.EstdateText = k.Estdate.Value.ToShortDateString();
                    }
                    model.Add(subList);
                }
                foreach (var k in quotelist)
                {
                    PurchaseRFQModel subList = new PurchaseRFQModel();
                    subList.PurchaseStatus = k.PurchaseDDLStatus;
                    subList.PurchaseRemark = k.PurchaseRemark;
                    subList.Summary = k.PurchaseStatus;
                    subList.AssignedDate = k.PurchaseDate;
                    if (k.PurchaseDate.HasValue)
                    {
                        subList.AssignedDateText = k.PurchaseDate.Value.ToShortDateString();
                    }
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.ChemicalName = k.ProductName;
                    subList.CreatedDate = k.CreatedDate;
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        subList.EstdateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    }
                    model.Add(subList);
                }

                if (!string.IsNullOrEmpty(purchasestatus))
                {
                    model = model.Where(m => (m.PurchaseStatus != null && m.PurchaseStatus.ToLower().Contains(purchasestatus))).ToList();
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ChemicalName != null && m.ChemicalName.ToLower().Contains(searchValue))
                                        || (m.Summary != null && m.Summary.ToLower().Contains(searchValue))).ToList();
                }
                model = model.OrderByDescending(x => x.AssignedDate).ToList();
                recordsTotal = model.Count();
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadPurchaseLoginRFQData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var purchasestatus = Request.Form.GetValues("purchasestatus")[0].ToString();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                var list = (from i in db.SZ_PurchaseRFQ.AsNoTracking()
                            orderby i.CreatedDate descending
                            select i).Distinct();

                var PurchaseDDLStatusItems = new List<SelectListItem>();
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Select", Value = "" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "RFQ", Value = "RFQ" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Quotation", Value = "Quotation" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Need Approval", Value = "Need Approval" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Approved", Value = "Approved" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Ordered", Value = "Ordered" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Submitted", Value = "Submitted" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "On Hold", Value = "On Hold" });
                PurchaseDDLStatusItems.Add(new SelectListItem { Text = "Regret", Value = "Regret" });

                var model = new List<PurchaseRFQModel>();
                foreach (var k in list)
                {
                    PurchaseRFQModel subList = new PurchaseRFQModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.PurchaseStatusText = "<select id='PurchaseStatus_" + k.Id + "' class='clspurchasestatus'>";
                    foreach (var r in PurchaseDDLStatusItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.PurchaseStatus))
                        {
                            selected = "selected ";
                            subList.PurchaseStatus = r.Text;
                        }
                        subList.PurchaseStatusText += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.PurchaseStatusText += "</select>";
                    subList.PurchaseRemark = k.PurchaseRemark;
                    subList.PurchaseRemarkText = "<input id='purremark_" + k.Id + "' type='text' value='" + k.PurchaseRemark + "' title='" + k.PurchaseRemark + "'  style='width: 100%' />";
                    subList.Summary = k.Summary;
                    subList.Comment = k.Comment;
                    subList.RefBy = k.RefBy;
                    subList.AssignedDate = k.AssignedDate;
                    if (k.AssignedDate.HasValue)
                    {
                        subList.AssignedDateText = k.AssignedDate.Value.ToShortDateString();
                    }
                    subList.CommentText = "<input id='comment_" + k.Id + "' type='text' value='" + k.Comment + "' title='" + k.Comment + "' style='width:100%' />";
                    subList.SummaryText = "<input id='summary_" + k.Id + "' type='text' value='" + k.Summary + "' title='" + k.Summary + "' style='width:100%' />";
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.ChemicalName = k.ChemicalName;

                    subList.ChemicalNameText = "<input id='chemicalName_" + k.Id + "' type='text' value='" + k.ChemicalName + "' title='" + k.ChemicalName + "' style='width:100%' />";
                    subList.CASNoText = "<input id='casno_" + k.Id + "' type='text' value='" + k.CASNo + "' title='" + k.CASNo + "' style='width:100%' />";
                    subList.CATNoText = "<input id='catno_" + k.Id + "' type='text' value='" + k.CATNo + "' title='" + k.CATNo + "' style='width:100%' />";

                    subList.CreatedDate = k.CreatedDate;
                    subList.Estdate = k.Estdate;
                    subList.EstdateText = "<input id='estDate_" + k.Id + "' data-value='" + k.Estdate + "' type='text' class='datepicker'  style='width:100%' />";
                    model.Add(subList);
                }
                model = model.Where(x => x.PurchaseStatus != "Submitted" && x.PurchaseStatus != "Regret").ToList();

                if (!string.IsNullOrEmpty(purchasestatus))
                {
                    model = model.Where(m => m.PurchaseStatus == purchasestatus).ToList();
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.ChemicalName != null && m.ChemicalName.ToLower().Contains(searchValue))
                                        || (m.Summary != null && m.Summary.ToLower().Contains(searchValue))).ToList();
                }
                model = model.OrderByDescending(x => x.AssignedDate).ToList();
                recordsTotal = model.Count();
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadProductInstockData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var fltinstockprostatusItem = Request.Form.GetValues("fltinstockprostatusItem")[0].ToString();
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo)
                            && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType == inhouseProjectType)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);
                var subscilistItems = new List<SelectListItem>();

                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var subscienList = objCache.Get("cache.subscienList", () =>
                {
                    return db.Customers.AsNoTracking().Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
                });
                var listItems = new List<SelectListItem>();

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });


                foreach (var term in subscienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscilistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });

                }
                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    if (k.IsDispatchApprove.HasValue && k.IsDispatchApprove.Value && (k.MoveToDispatch == null || k.MoveToDispatch == false))
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' style='outline: 4px solid #c00'/>";
                    }
                    subList.ProjectType = k.ProjectType;
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.ActivityStatus = k.ActivityStatus;
                    subList.ActivityStatusText = "<select id='activitystatus_" + k.Id + "' class='clsActivityStatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    subList.ProStatus = k.ProStatus;
                    if (k.ActivityStatus == "Approval First")
                    {
                        subList.ActivityStatusText += "<option value='Approval First' selected>Approval First</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Approval First'>Approval First</option>";
                    }
                    //if (k.ActivityStatus == "Data Sent")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    //}
                    //if (k.ActivityStatus == "Data Correction")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    //}
                    //if (k.ActivityStatus == "Data Approved")
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    //}
                    //else
                    //{
                    //    subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    //}
                    if (k.ActivityStatus == "Immediate Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch' selected>Immediate Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Immediate Dispatch'>Immediate Dispatch</option>";
                    }

                    if (k.ActivityStatus == "Short Qty Dispatch")
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch' selected>Short Qty Dispatch</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Short Qty Dispatch'>Short Qty Dispatch</option>";
                    }
                    if (k.ActivityStatus == "Repeat Order")
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order' selected>Repeat Order</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Repeat Order'>Repeat Order</option>";
                    }
                    if (k.ActivityStatus == "Data Approved")
                    {
                        subList.ActivityStatusText += "<option value='Data Approved' selected>Data Approved</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Approved'>Data Approved</option>";
                    }
                    if (k.ActivityStatus == "Data Sent")
                    {
                        subList.ActivityStatusText += "<option value='Data Sent' selected>Data Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Sent'>Data Sent</option>";
                    }
                    if (k.ActivityStatus == "Data Correction")
                    {
                        subList.ActivityStatusText += "<option value='Data Correction' selected>Data Correction</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Data Correction'>Data Correction</option>";
                    }
                    if (k.ActivityStatus == "Invoice Sent")
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent' selected>Invoice Sent</option>";
                    }
                    else
                    {
                        subList.ActivityStatusText += "<option value='Invoice Sent'>Invoice Sent</option>";
                    }
                    subList.ActivityStatusText += "</select>";

                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        if (text != "In-House")
                        {
                            subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                        }
                    }

                    subList.ProjectTypeText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistName += "</select>";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' data-quotationdetailsid='" + k.Id + "' class='ddladditionalbatch'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.BatchNo = r.BatchNo;
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;
                    subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";

                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'   style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveInstockProjectDetails(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = "<select id='SubScientistId_" + k.Id + "' class='subscientist' subscientistId='" + k.SubScientistName + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    subscilistItems.ForEach(r =>
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.SubScientistName))
                        {
                            selected = "selected ";
                            subList.SelectedSubScientistName = r.Text;
                        }
                        subList.SubScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    });


                    subList.SubScientistName += "</select>";
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    subList.Reason = k.Reason;
                    subList.ReasonText = "<input id='reason_" + k.Id + "' type='text' value='" + k.Reason + "' title='" + k.Reason + "'  style='width:200px' />";
                    subList.OrderRemark = k.OrderRemark;
                    subList.OrderRemarkText = "<input id='orderremark_" + k.Id + "' type='text' value='" + k.OrderRemark + "' title='" + k.OrderRemark + "'  style='width:200px' />";
                    subList.COARefNumber = k.COARefNumber;
                    subList.OtherProStatusText = "<select id='otherprostatus_" + k.Id + "' class='clsotherprostatus' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProInstockexportStatusDDL r in Enum.GetValues(typeof(EnumList.ProInstockexportStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProInstockexportStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProInstockexportStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.OtherProStatus)
                        {
                            selected = "selected ";
                            subList.SelectedOtherProStatus = text;
                        }
                        subList.OtherProStatusText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.OtherProStatusText += "</select>";
                    model.Add(subList);
                }
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();

                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                    || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                         || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                          || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                           || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                            || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                            || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }
                if (!string.IsNullOrEmpty(fltinstockprostatusItem))
                {
                    model = model.Where(x => x.ProStatus == fltinstockprostatusItem).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();

                    if (searchby == "quoteid")
                    {
                        model = model.Where(x => x.Ref.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        model = model.Where(x => x.PONumber.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "company")
                    {
                        model = model.Where(x => x.CompanyName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "productname")
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        model = model.Where(x => x.CASNo != null ? x.CASNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        model = model.Where(x => x.CATNo != null ? x.CATNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        model = model.Where(x => x.BatchNo != null ? x.BatchNo.ToLower().Contains(searchbyvalue) : false).ToList();
                    }

                }
                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadProductInHouseData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation.AsNoTracking()
                            join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType == inhouseProjectType)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);

                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var listItems = new List<SelectListItem>();

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                var proIds = list.Select(x => x.ProductId).Distinct().ToList();
                var productsdata = db.Products.AsNoTracking().Where(x => proIds.Contains(x.Id) && x.Deleted == false && x.Published == true).ToList();
                var inventoryData = db.SZ_Inventory.AsNoTracking().Where(x => proIds.Contains(x.ProductId)).ToList();
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.AsNoTracking().Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                var model = new List<ProjectListModel>();
                foreach (var k in list)
                {
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkSaveRow = "<input type='checkbox' value='" + k.Id + "' class='clsSaverow' />";
                    subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                    if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    else if (k.ScientistStatus.HasValue && k.ScientistStatus.Value == subList.ReadyToDeliverScientistStatusId)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch == null)
                    {
                        subList.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsMoveDispatch' />";
                    }
                    else if (k.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && k.MoveToDispatch != null && k.MoveToDispatch.Value)
                    {
                        subList.ChkFirstRow = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                    }
                    subList.PaymentTerms = k.SZ_Quotation.PaymentTerm;
                    subList.ProjectType = k.ProjectType;
                    subList.ProjectTypeText = "<select id='projecttype_" + k.Id + "' class='clsProjType' data-quoteDetailsId='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            subList.SelectedProjectType = text;
                        }
                        subList.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    subList.ProjectTypeText += "</select>";
                    subList.ScientistName = "<select id='ScientistId_" + k.Id + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.Id + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            subList.SelectedScientistName = r.Text;
                        }
                        subList.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    subList.ScientistRemark = "<input id='sciremark_" + k.Id + "' type='text' value='" + k.ScientistRemark + "' style='width: 170px' />";
                    subList.ScientistName += "</select>";
                    subList.AdditionalBatchNo = k.AdditionalBatchNo;
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.ProductId = k.ProductId;
                    subList.ProductName = k.ProductName;
                    subList.RequiredQtyTxt = "<input id='qty_" + k.Id + "' type='text' value='" + k.RequiredQty + "' style='width: 50px' />";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "'><option value=''>--Select--</option>";
                    if (subList.ProductId.HasValue)
                    {
                        var proData = productsdata.Where(x => x.Id == subList.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventoryData.Where(x => x.ProductId == subList.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                string selected = string.Empty;
                                if (r.Id == subList.AdditionalBatchNo)
                                {
                                    selected = "selected ";
                                    subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                }

                                subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + text + "</option>";
                            }
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    //subList.BatchNo = k.BatchNo;
                    subList.BatchNoText = "<input id='batchno_" + k.Id + "' type='text' value='" + k.BatchNo + "' style='width:120px' />";
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CreatedDate = k.CreatedDate;
                    subList.ImagePath = k.ImagePath;
                    subList.IsUploadServer = k.IsUploadServer;
                    subList.LeadTime = k.LeadTime;
                    subList.Price = k.Price;

                    subList.QuoteId = k.QuoteId;
                    subList.ProjectType = k.ProjectType;
                    subList.ScientistCustomerId = k.ScientistCustomerId;

                    subList.RequiredQty = k.RequiredQty;
                    subList.ProjectStatus = k.ProjectStatus;
                    subList.IsOnHold = k.IsOnHold;
                    if (k.ProjectStatus != null)
                    {
                        subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.ScientistStatus = k.ScientistStatus;
                    subList.BatchCode1 = k.BatchCode1;
                    subList.BatchCode2 = k.BatchCode2;
                    subList.Qty1 = k.Qty1;
                    subList.Qty2 = k.Qty2;
                    subList.EstimateCompleteDate = k.EstimateCompleteDate;
                    //if (k.EstimateCompleteDate.HasValue)
                    //{
                    //    subList.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
                    //}
                    subList.EstimateCompleteDateText = "<input id='esticompleteDate_" + k.Id + "' data-value='" + k.EstimateCompleteDate + "' type='text' class='datepicker'  style='width:80px' />";
                    //if (k.AdditionalBatchNo.HasValue)
                    //{
                    //    subList.AdditionalBatchNoText = db.SZ_Inventory.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    //}
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToProject = k.MoveToProject;
                    subList.Remark = k.Remark;
                    subList.SrPo = k.SrPo;
                    subList.AdminScientistStatus = k.AdminScientistStatus;
                    subList.InvoiceNo = k.InvoiceNo;
                    subList.InvoiceRemark = k.InvoiceRemark;

                    subList.MoveProjectDate = k.MoveProjectDate;

                    subList.ScientistStatustext = "<input id='scientistStatus_" + k.Id + "' type='text' value='" + k.AdminScientistStatus + "' title='" + k.AdminScientistStatus + "'  style='width:200px' />";
                    subList.RemarkText = "<input id='remark_" + k.Id + "' type='text' value='" + k.Remark + "' title='" + k.Remark + "' style='width: 170px' />";
                    subList.LastRowText = "<a href='javascript: void(0)' id='save_" + k.Id + "' onclick='SaveProjectDetailsInhouse(\"" + k.Id + "\")'> Save</a> ";
                    subList.LastRowText += "<a href='javascript:void(0)' id='onhold_" + k.Id + "' onclick='SetOnHold(\"" + k.Id + "\")'>Hold</a>";
                    subList.SubScientistName = k.SubScientistName;
                    subList.DispatchedStatus = k.DispatchedStatus;
                    subList.MoveToDispatch = k.MoveToDispatch;
                    subList.MoveToInvoice = k.MoveToInvoice;
                    subList.IsDispatchApprove = k.IsDispatchApprove;
                    model.Add(subList);
                }
                //Sorting  
                //if (!string.IsNullOrEmpty(sortColumn) && !string.IsNullOrEmpty(sortColumnDir))
                //{
                //    model = model.OrderBy(sortColumn + " " + sortColumnDir).ToList();
                //}
                //else
                //{
                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo).ThenBy(x => x.SrPo).ToList();
                // model = model.OrderBy(x => x.SrPo).ThenByDescending(x=>x.MoveProjectDate).ToList();
                //}

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                                        || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                                        || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public string GetCatalog(QuotationList_Result k)
        {
            string extraCatNoText = string.Empty;
            if (!string.IsNullOrEmpty(k.CATNo))
            {
                extraCatNoText = "<i class='clstooltip fa fa-pencil' onclick='AllQuotePrice(" + k.ProductId + ")'></i>";
            }
            return "<label>" + "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>" + "" + extraCatNoText + "</label><input type='text' id='catno_" + k.QuoteDetailsId + "'  value = '" + k.CATNo + "' style = 'display:none;' /> ";
        }

        public string GetMoveToProjectText(QuotationList_Result k, List<CompanyList_Result> companyData)
        {
            string MoveToProjectText = "";
            if (!string.IsNullOrEmpty(k.PONo))
            {
                var branchName = companyData.Where(x => x.Id == k.CompanyId).Select(x => x.Branch).FirstOrDefault();
                if (k.MoveToProject.HasValue && k.MoveToProject.Value)
                {
                    MoveToProjectText = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                }
                else
                {
                    MoveToProjectText = "<input type='checkbox' data-branchname='" + branchName + "' value='" + k.QuoteDetailsId + "' class='clsMoveProject' data-export='" + k.CountryType + "' data-alreadyInProjectScreen='" + (k.AlreadyInPoCount > 0 ? true : false) + "'  data-alreadyInInvoiceScreen='" + (k.AlreadyInvoicePoCount > 0 ? true : false) + "'/>";
                }
            }
            return MoveToProjectText;
        }

        public string GetQuoteListActionRow(QuotationList_Result k)
        {
            string ActionRow = "";
            if (Convert.ToString(TempData["tabname"]) == "followup")
            {
                ActionRow = "<a href='javascript:void(0)' id='edit_" + k.QuoteDetailsId + "' onclick='EditProductDetails(\"" + k.QuoteDetailsId + "\")'>Edit</a>";
                ActionRow += "<a href='javascript:void(0)' id='save_" + k.QuoteDetailsId + "' onclick='SaveProductDetails(\"" + k.QuoteDetailsId + "\")' style='display:none' >Save</a> ";
            }
            else if (Convert.ToString(TempData["tabname"]) == "park")
            {
                ActionRow = "<a href='javascript:void(0)' id='edit_" + k.QuoteDetailsId + "' onclick='EditProductDetails(\"" + k.QuoteDetailsId + "\")'>Edit</a>";
                ActionRow += "<a href='javascript:void(0)' id='save_" + k.QuoteDetailsId + "' onclick='SaveProductDetails(\"" + k.QuoteDetailsId + "\")' style='display:none' >Save</a>";
                //ActionRow += "<a href='../Form/Quote/" + k.QuoteId + "' > Update</a>";
            }
            else
            {
                ActionRow = "<a href='javascript:void(0)' id='edit_" + k.QuoteDetailsId + "' onclick='EditProductDetails(\"" + k.QuoteDetailsId + "\")'>Edit</a>";
                ActionRow += "<a href='javascript:void(0)' id='save_" + k.QuoteDetailsId + "' onclick='SaveProductDetails(\"" + k.QuoteDetailsId + "\")' style='display:none' >Save</a>";
                //ActionRow += "<a href='../Form/Quote/" + k.QuoteId + "' > Update</a>";
            }
            return ActionRow;
        }

        [HttpGet]
        public JsonResult GetCOADetailsFromBatchId(int batchId)
        {
            string coaText = "";
            coaText = "<option value=''>--Select--</option>";
            var mastercoa = db.SZ_MasterCOA.AsNoTracking().Where(x => x.BatchId == batchId).FirstOrDefault();
            if (mastercoa != null)
            {
                var listchildcoa = db.SZ_ChildCOA.AsNoTracking().Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                if (listchildcoa != null && listchildcoa.Count > 0)
                {
                    foreach (var ccoa in listchildcoa)
                    {
                        coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + batchId + "'>" + ccoa.RefNo + "</option>";
                    }
                }
            }
            return Json(coaText, JsonRequestBehavior.AllowGet);
        }

        public string GetCOA(QuotationList_Result k, List<SZ_MasterCOA> masterCOAData, List<SZ_ChildCOA> childcoadata)
        {
            string coaText = "";
            coaText = "<select id='coa_" + k.QuoteDetailsId + "' class='addcoa'><option value=''>--Select--</option>";
            int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
            if (bId != 0)
            {
                var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                if (mastercoa != null)
                {
                    var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                    if (listchildcoa != null && listchildcoa.Count > 0)
                    {
                        foreach (var ccoa in listchildcoa)
                        {
                            if (k.COAId == ccoa.Id)
                            {
                                coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                            }
                            else
                            {
                                coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                            }
                        }

                    }
                }
            }
            return coaText;
        }

        public string GetCOA(DispatchedDeliveredList_Result k, List<SZ_MasterCOA> masterCOAData, List<SZ_ChildCOA> childcoadata)
        {
            string coaText = "";
            coaText = "<select id='coa_" + k.QuoteDetailsId + "' class='addcoa'><option value=''>--Select--</option>";
            int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
            if (bId != 0)
            {
                var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                if (mastercoa != null)
                {
                    var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                    if (listchildcoa != null && listchildcoa.Count > 0)
                    {
                        foreach (var ccoa in listchildcoa)
                        {
                            if (k.COAId == ccoa.Id)
                            {
                                coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                            }
                            else
                            {
                                coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                            }
                        }

                    }
                }
            }
            return coaText;
        }
        public string GetCOA(SZ_QuotationDetail k, List<SZ_MasterCOA> masterCOAData, List<SZ_ChildCOA> childcoadata)
        {
            string coaText = "";
            coaText = "<select id='coa_" + k.Id + "' class='addcoa'><option value=''>--Select--</option>";
            int bId = k.AdditionalBatchNo.HasValue ? k.AdditionalBatchNo.Value : 0;
            if (bId != 0)
            {
                var mastercoa = masterCOAData.Where(x => x.BatchId == bId).FirstOrDefault();
                if (mastercoa != null)
                {
                    var listchildcoa = childcoadata.Where(x => x.MasterCOAID == mastercoa.Id).ToList();
                    if (listchildcoa != null && listchildcoa.Count > 0)
                    {
                        foreach (var ccoa in listchildcoa)
                        {
                            if (k.COAId == ccoa.Id)
                            {
                                coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "' selected>" + ccoa.RefNo + "</option>";
                            }
                            else
                            {
                                coaText += "<option value='" + ccoa.Id.ToString() + "' data-value='" + k.AdditionalBatchNo + "'>" + ccoa.RefNo + "</option>";
                            }
                        }

                    }
                }
            }
            return coaText;
        }

        public string GetAdditionalBatchNo(QuotationList_Result k, List<InventoryList_Result> inventoryList, bool isDispatch = false, string tablename = null)
        {
            string AdditionalBatchNoText = "";
            if (k.ProductId.HasValue)
            {
                AdditionalBatchNoText = "<select id='additionalBatch_" + k.QuoteDetailsId + "' data-tablename='" + tablename + "' data-quotationdetailsid='" + k.QuoteDetailsId + "' class='ddladditionalbatch addbatch'><option value=''>--Select--</option>";
                var proBatchData = inventoryList.Where(x => x.ProductId == k.ProductId).OrderBy(x => x.Id).ToList();
                if (proBatchData.Count > 0)
                {
                    int probatchcount = 1;
                    foreach (var r in proBatchData)
                    {
                        string text = r.BatchNo + " (" /*+ Convert.ToInt32(r.Qty)*/;
                        if (r.AvailableQty.HasValue)
                        {
                            int availQty = Convert.ToInt32(r.AvailableQty.Value);
                            if (availQty < 0)
                            {
                                availQty = 0;
                            }
                            text += /*"/ " +*/ availQty;
                        }

                        text += ")";
                        if (r.IsApproved == false)
                        {
                            text = "*" + text;
                        }
                        string selected = "";
                        if (r.Id == k.AdditionalBatchNo)
                        {
                            selected = "selected ";
                        }
                        AdditionalBatchNoText += "<option " + selected + " value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "'>" + text + "</option>";
                        probatchcount += 1;
                    }
                }
                AdditionalBatchNoText += "</select>";
            }

            return AdditionalBatchNoText;
        }

        public string GetFollowUpDescText(QuotationList_Result k)
        {
            string FollowUpDescText = "";
            if (k.IsFollowupChange.HasValue && k.IsFollowupChange.Value)
            {
                FollowUpDescText += "<i class='fa fa-pencil' style='color:red' onclick='followupdescgenerate(\"" + k.QuoteDetailsId + "\")' ></i>";
            }
            else
            {
                FollowUpDescText += "<i class='fa fa-pencil' onclick='followupdescgenerate(\"" + k.QuoteDetailsId + "\")' ></i>";
            }
            return FollowUpDescText;
        }

        public IEnumerable<QuotationListModel> PrepareQuotationListModel(List<QuotationList_Result> data, bool isDispatch = false, string tablename = null)
        {
            bool isMiniAdmin = SessionCookieManagement.IsMiniAdmin;

            string synthesis = Convert.ToString((int)Synzeal_Inventory.Models.EnumList.ProjectType.Synthesis);
            string pursynthesis = Convert.ToString((int)Synzeal_Inventory.Models.EnumList.ProjectType.PurSynthesis);
            string purchase = Convert.ToString((int)Synzeal_Inventory.Models.EnumList.ProjectType.Purchase);

            var productids = data.Select(x => x.ProductId).ToList();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var masterCOAData = objCache.Get("cache.mastercoadata", () =>
            {
                return db.SZ_MasterCOA.AsNoTracking().ToList();
            });
            var childcoadata = objCache.Get("cache.childcoadata", () =>
            {
                return db.SZ_ChildCOA.AsNoTracking().ToList();
            });
            var inventoryList = objCache.Get("cache.sp.inventoryList", () =>
            {
                return db.InventoryList().ToList();
            });
            masterCOAData = masterCOAData.Where(x => x.ProductId.HasValue && productids.Contains(x.ProductId)).ToList();

            var mastercoaids = masterCOAData.Select(x => x.Id).ToList();
            childcoadata = childcoadata.Where(x => mastercoaids.Contains(x.MasterCOAID.Value)).ToList();

            var compList = db.CompanyList().ToList();
            var model = new List<QuotationListModel>();
            if (data.Count() > 0)
            {
                model = (from k in data
                         select new QuotationListModel
                         {
                             IsAlreadInProjectScreen = k.AlreadyInPoCount > 0 ? true : false,
                             IsAlreadInInvoiceScreen = k.AlreadyInvoicePoCount > 0 ? true : false,
                             PODate = k.PODate,
                             IsImportedQuote = k.IsImportedQuote,
                             EmailAddress = k.EmailAddress,
                             CreatedDate = k.CreatedDate,
                             QuoteDetailsId = k.QuoteDetailsId,
                             QuoteId = k.Id,
                             PONumber = k.PONo,
                             MoveToProject = k.MoveToProject,
                             Ref = k.Ref,
                             CompanyName = k.CompanyName,
                             ProductName = k.ProductName,
                             Price = k.Price,
                             FinalPrice = k.FinalPrice,
                             CASNo = k.CASNo,
                             CATNo = k.CATNo,
                             CATNoLink = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>",
                             LeadTime = k.LeadTime,
                             ChkFirstRow = "<input type='checkbox' value='" + k.QuoteDetailsId + "' data-refno='" + k.Ref + "' class='clsclubQuote' />",
                             PONumberText = "<label>" + k.PONo + "</label><input type='text' id='ponumber_" + k.QuoteDetailsId + "' value='" + k.PONo + "' style='display:none' />",
                             ProductNameText = "<label>" + k.ProductName + " </label><input type='text' id='productname_" + k.QuoteDetailsId + "' value='" + k.ProductName.Replace("\'", @"\u0027") + "' style='display:none' />",
                             //PriceText = "<label>" + k.Price + " </label><input type='text' id='price_" + k.QuoteDetailsId + "' value='" + k.Price + "' style='display:none' /> ",
                             //FinalPriceText = "<label>" + k.FinalPrice + " </label><input type='text' id='finalprice_" + k.QuoteDetailsId + "' value='" + k.FinalPrice + "' style='display:none' /> ",
                             PriceText = k.Price + "<input type='hidden' id='price_" + k.QuoteDetailsId + "' value='" + k.Price + "' style='display:none' /> ",
                             FinalPriceText = k.FinalPrice + "<input type='hidden' id='finalprice_" + k.QuoteDetailsId + "' value='" + k.FinalPrice + "' style='display:none' /> ",
                             CASNoText = "<label>" + k.CASNo + "</label><input type='text' id='casno_" + k.QuoteDetailsId + "'  value = '" + k.CASNo + "' style = 'display:none' /> ",
                             LeadTimeText = "<label>" + k.LeadTime + "</label><input type='text' id='leadtime_" + k.QuoteDetailsId + "'  value = '" + k.LeadTime + "' style = 'display:none;' /> ",
                             ProductRemark = "<label>" + k.ProductRemark + "</label><input type='text' id='ProductRemark_" + k.QuoteDetailsId + "'  value = '" + k.ProductRemark + "' style = 'display:none;' /> ",
                             FollowUpRemark = "<label>" + k.FollowUpRemark + "</label><input type='text' id='followUpRemark_" + k.QuoteDetailsId + "'  value = '" + k.FollowUpRemark + "' style = 'display:none;' /> ",
                             FollowUpRemarkSecond = "<label>" + k.FollowUpRemarkSecond + "</label><input type='text' id='followUpRemarkSecond_" + k.QuoteDetailsId + "'  value = '" + k.FollowUpRemarkSecond + "' style = 'display:none;' /> ",
                             TabName = Convert.ToString(TempData["tabname"]),
                             DownloadRow = "<a href='../Form/DownloadQuote/" + k.Id + "'> <i class='fa fa-download'></i></a>",
                             DownloadSampleRow = "<a href='../Form/DownloadSampleQuote/" + k.Id + "'> <i class='fa fa-download'></i></a>",
                             ProductId = k.ProductId,
                             FollowupDescription = k.FollowupDescription,
                             ContactDetail = "<label>" + k.ContactDetail + "</label><input type='text' id='contactdetail_" + k.QuoteDetailsId + "'  value = '" + k.ContactDetail + "' title= '" + k.ContactDetail + "' style = 'display:none;' /> ",
                             IsFollowUpAdminChange = k.IsFollowUpAdminChange,
                             IsFollowupChange = k.IsFollowupChange,
                             CountryType = k.CountryType,
                             CATNoText = GetCatalog(k),
                             MoveToProjectText = GetMoveToProjectText(k, compList),
                             ActionRow = GetQuoteListActionRow(k),
                             AdditionalBatchNoText = GetAdditionalBatchNo(k, inventoryList, isDispatch, tablename),
                             // COAId = k.coaid,
                             DownloadCOAText = !string.IsNullOrEmpty(k.QuoteBatchNo) && k.QuoteBatchNo != "0" ? "<a href='../Form/DownloadMasterCOAFromQuoteDetailsId/" + k.QuoteDetailsId + "'> <i class='fa fa-download'></i></a>" : "",
                             COAText = GetCOA(k, masterCOAData, childcoadata),
                             FollowUpDescText = GetFollowUpDescText(k),
                             ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + k.ProductId + "," + k.QuoteDetailsId + ")' ></i>"
                         }).ToList();
            }
            return model;
        }

        public IEnumerable<QuotationListModel> PrepareSynthesisLogModel(List<SynthesisLog_Result> data, bool issynthesispage = false)
        {
            var listItems = new List<SelectListItem>();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
            });

            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });

            var proids = data.Select(x => x.ProductId).ToList();
            var inventorydata = db.SZ_Inventory.AsNoTracking().Where(x => proids.Contains(x.ProductId)).ToList();
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });

            var model = new List<QuotationListModel>();
            if (data.Count() > 0)
            {
                foreach (var k in data)
                {
                    var objModel = new QuotationListModel();
                    objModel.IsAlreadInProjectScreen = k.AlreadyInPoCount > 0 ? true : false;
                    objModel.IsAlreadInInvoiceScreen = k.AlreadyInvoicePoCount > 0 ? true : false;
                    objModel.PODate = k.PODate;
                    objModel.IsImportedQuote = k.IsImportedQuote;
                    objModel.EmailAddress = k.EmailAddress;
                    objModel.CreatedDate = k.CreatedDate;
                    objModel.QuoteDetailsId = k.QuoteDetailsId;
                    objModel.QuoteId = k.QuoteId;
                    objModel.PONumber = k.PONo;
                    objModel.MoveToProject = k.MoveToProject;
                    objModel.ScientistCustomerId = k.ScientistCustomerId;
                    objModel.Ref = k.Ref;
                    objModel.CompanyName = k.CompanyName;
                    objModel.ProductName = k.ProductName;
                    objModel.Price = k.Price;
                    objModel.CASNo = k.CASNo;
                    objModel.CATNo = k.CATNo;
                    objModel.LeadTime = k.LeadTime;
                    objModel.ChkFirstRow = "<input type='checkbox' value='" + k.QuoteDetailsId + "' data-refno='" + k.Ref + "' class='clsclubQuote' />";
                    objModel.PONumberText = "<label>" + k.PONo + "</label><input type='text' id='ponumber_" + k.QuoteDetailsId + "' value='" + k.PONo + "' style='display:none;' />";
                    objModel.ProductNameText = "<label>" + k.ProductName + " </label><input type='text' id='productname_" + k.QuoteDetailsId + "' value='" + k.ProductName + "' style='display:none;' />";
                    objModel.PriceText = "<label>" + k.Price + " </label><input type='text' id='price_" + k.QuoteDetailsId + "' value='" + k.Price + "' style='display:none;' /> ";
                    objModel.CASNoText = "<label>" + k.CASNo + "</label><input type='text' id='casno_" + k.QuoteDetailsId + "'  value = '" + k.CASNo + "' style = 'display:none;' /> ";
                    objModel.CATNoText = "<label>" + k.CATNo + "</label><input type='text' id='catno_" + k.QuoteDetailsId + "'  value = '" + k.CATNo + "' style = 'display:none;' /> ";
                    objModel.LeadTimeText = "<label>" + k.LeadTime + "</label><input type='text' id='leadtime_" + k.QuoteDetailsId + "'  value = '" + k.LeadTime + "' style = 'display:none;' /> ";
                    objModel.ProductRemark = "<label>" + k.ProductRemark + "</label><input type='text' id='ProductRemark_" + k.QuoteDetailsId + "'  value = '" + k.ProductRemark + "' style = 'display:none;' /> ";
                    objModel.FollowUpRemark = "<label>" + k.FollowUpRemark + "</label><input type='text' id='followUpRemark_" + k.QuoteDetailsId + "'  value = '" + k.FollowUpRemark + "' style = 'display:none;' /> ";
                    objModel.FollowUpRemarkSecond = "<label>" + k.FollowUpRemarkSecond + "</label><input type='text' id='followUpRemarkSecond_" + k.QuoteDetailsId + "'  value = '" + k.FollowUpRemarkSecond + "' style = 'display:none;' /> ";
                    if (!string.IsNullOrEmpty(k.PONo))
                    {
                        if (k.MoveToProject.HasValue && k.MoveToProject.Value)
                        {
                            objModel.MoveToProjectText = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                        }
                        else
                        {
                            objModel.MoveToProjectText = "<input type='checkbox' value='" + k.QuoteDetailsId + "' class='clsMoveProject' data-export='" + k.CountryType + "' data-alreadyInProjectScreen='" + objModel.IsAlreadInProjectScreen + "' data-alreadyInInvoiceScreen='" + objModel.IsAlreadInInvoiceScreen + "'/>";
                        }
                    }
                    objModel.DownloadRow = "<a href='../Form/DownloadQuote/" + k.QuoteId + "'> <i class='fa fa-download'></i></a>";
                    objModel.DownloadSampleRow = "<a href='../Form/DownloadSampleQuote/" + k.QuoteId + "'> <i class='fa fa-download'></i></a>";
                    if (Convert.ToString(TempData["tabname"]) == "followup")
                    {
                        objModel.ActionRow = "<a href='javascript:void(0)' id='edit_" + k.QuoteDetailsId + "' onclick='EditProductDetails(\"" + k.QuoteDetailsId + "\")'>Edit</a>";
                        objModel.ActionRow += "<a href='javascript:void(0)' id='save_" + k.QuoteDetailsId + "' onclick='SaveProductDetails(\"" + k.QuoteDetailsId + "\")' style='display:none' >Save</a> ";
                    }
                    else
                    {
                        objModel.ActionRow = "<a href='javascript:void(0)' id='edit_" + k.QuoteDetailsId + "' onclick='EditProductDetails(\"" + k.QuoteDetailsId + "\")'>Edit</a>";
                        objModel.ActionRow += "<a href='javascript:void(0)' id='save_" + k.QuoteDetailsId + "' onclick='SaveProductDetails(\"" + k.QuoteDetailsId + "\")' style='display:none' >Save</a> | ";
                        objModel.ActionRow += "<a href='../Form/Quote/" + k.QuoteId + "' > Update</a> | ";
                        if (issynthesispage)
                        {
                            objModel.ActionRow += "<a href='javascript:void(0)' onclick='Quote.RemoveSynthesisLog(\"" + k.QuoteDetailsId + "\")' >Remove </a>";
                        }
                        else
                        {
                            objModel.ActionRow += "<a href='javascript:void(0)' onclick='Quote.deleteQuote(\"" + k.QuoteId + "\")' >Delete </a>";
                        }

                    }
                    objModel.ProductId = k.ProductId;
                    if (k.ProductId.HasValue)
                    {
                        objModel.AdditionalBatchNoText = "<select id='additionalBatch_" + k.ProductId + "' class='addbatch'><option value=''>--Select--</option>";
                        var proBatchData = inventorydata.Where(x => x.ProductId == k.ProductId).OrderBy(x => x.Id).ToList();
                        if (proBatchData.Count > 0)
                        {
                            int probatchcount = 1;
                            foreach (var r in proBatchData)
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                objModel.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "'>" + text + "</option>";
                                probatchcount += 1;
                            }
                        }
                        objModel.AdditionalBatchNoText += "</select>";
                    }
                    objModel.ProjectTypeText = "<select id='projecttype_" + k.QuoteDetailsId + "' class='clsProjType' data-quoteDetailsId='" + k.QuoteDetailsId + "'><option value=''>--Select--</option>";
                    foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == k.ProjectType)
                        {
                            selected = "selected ";
                            objModel.SelectedProjectType = text;
                        }
                        objModel.ProjectTypeText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    objModel.ProjectTypeText += "</select>";
                    objModel.ScientistName = "<select id='ScientistId_" + k.QuoteDetailsId + "' class='scientist' scientistId='" + k.ScientistCustomerId + "' quotedetailsid='" + k.QuoteDetailsId + "'><option value=''>--Select--</option>";
                    foreach (var r in listItems)
                    {
                        string selected = string.Empty;
                        if (r.Value == Convert.ToString(k.ScientistCustomerId))
                        {
                            selected = "selected ";
                            objModel.SelectedScientistName = r.Text;
                        }
                        objModel.ScientistName += "<option value='" + r.Value + "' " + selected + ">" + r.Text + "</option>";
                    }
                    objModel.ScientistName += "</select>";
                    model.Add(objModel);
                }
            }
            return model;
        }

        public IEnumerable<QuotationListModel> PrepareQuotationListModel(IEnumerable<SZ_Quotation> data)
        {
            var model = new List<QuotationListModel>();
            if (data.Count() > 0)
            {
                foreach (var i in data)
                {
                    foreach (var k in i.SZ_QuotationDetail)
                    {
                        var objModel = new QuotationListModel();
                        objModel.PODate = i.PODate;
                        objModel.IsImportedQuote = i.IsImportedQuote;
                        objModel.EmailAddress = i.EmailAddress;
                        objModel.CreatedDate = i.CreatedDate;
                        objModel.QuoteDetailsId = k.Id;
                        objModel.QuoteId = k.QuoteId;
                        objModel.PONumber = i.PONo;
                        objModel.MoveToProject = k.MoveToProject;
                        objModel.Ref = i.Ref;
                        objModel.CompanyName = i.CompanyName;
                        objModel.ProductName = k.ProductName;
                        objModel.Price = k.Price;
                        objModel.CASNo = k.CASNo;
                        objModel.CATNo = k.CATNo;
                        objModel.LeadTime = k.LeadTime;
                        objModel.ChkFirstRow = "<input type='checkbox' value='" + k.Id + "' class='clsclubQuote' />";
                        objModel.PONumberText = "<label>" + i.PONo + "</label><input type='text' id='ponumber_" + k.Id + "' value='" + i.PONo + "' style='display:none;' />";
                        objModel.ProductNameText = "<label>" + k.ProductName + " </label><input type='text' id='productname_" + k.Id + "' value='" + k.ProductName + "' style='display:none;' />";
                        objModel.PriceText = "<label>" + k.Price + " </label><input type='text' id='price_" + k.Id + "' value='" + k.Price + "' style='display:none;' /> ";

                        objModel.CASNoText = "<label>" + k.CASNo + "</label><input type='text' id='casno_" + k.Id + "'  value = '" + k.CASNo + "' style = 'display:none;' /> ";
                        objModel.CATNoText = "<label>" + k.CATNo + "</label><input type='text' id='catno_" + k.Id + "'  value = '" + k.CATNo + "' style = 'display:none;' /> ";
                        objModel.LeadTimeText = "<label>" + k.LeadTime + "</label><input type='text' id='leadtime_" + k.Id + "'  value = '" + k.LeadTime + "' style = 'display:none;' /> ";
                        objModel.ProductRemark = "<label>" + k.ProductRemark + "</label><input type='text' id='ProductRemark_" + k.Id + "'  value = '" + k.ProductRemark + "' style = 'display:none;' /> ";
                        if (!string.IsNullOrEmpty(i.PONo))
                        {
                            if (k.MoveToProject.HasValue && k.MoveToProject.Value)
                            {
                                objModel.MoveToProjectText = "<i class='fa fa-check-square' style='color:lightseagreen'></i>";
                            }
                            else
                            {
                                objModel.MoveToProjectText = "<input type='checkbox' value='" + k.Id + "' class='clsMoveProject' />";
                            }
                        }
                        objModel.DownloadRow = "<a href='../Form/DownloadQuote/" + i.Id + "'> <i class='fa fa-download'></i></a>";
                        objModel.DownloadSampleRow = "<a href='../Form/DownloadSampleQuote/" + i.Id + "'> <i class='fa fa-download'></i></a>";
                        objModel.ActionRow = "<a href='javascript:void(0)' id='edit_" + k.Id + "' onclick='EditProductDetails(\"" + k.Id + "\")'>Edit</a>";
                        objModel.ActionRow += "<a href='javascript:void(0)' id='save_" + k.Id + "' onclick='SaveProductDetails(\"" + k.Id + "\")' style='display:none' >Save</a>|";
                        objModel.ActionRow += "<a href='../Form/Quote/" + i.Id + "' > Update </a> |";
                        objModel.ActionRow += "<a href='javascript:void(0)' onclick='Quote.deleteQuote(\"" + i.Id + "\")' > Delete </a>";

                        model.Add(objModel);
                    }
                }
            }
            return model;
        }

        public ActionResult GetCountQuotationList()
        {
            int noactionstatus = (int)EnumList.ProjectStatus.NoAction;
            string synthesis = Convert.ToString((int)EnumList.ProjectType.Synthesis);

            var all = db.QuotationList("", "", "", "", "all", "", "", 1, 200).ToList();
            ViewBag.AllCount = all.Select(x => x.TotalRecord).FirstOrDefault();
            int AllCount = 0;
            if (ViewBag.AllCount == null)
            {
                AllCount = 0;
            }
            else
            {
                AllCount = ViewBag.AllCount;
            }
            var tobe = db.QuotationList("", "", "", "", "tobe", "", "", 1, 200).ToList();
            ViewBag.TobeCount = tobe.Select(x => x.TotalRecord).FirstOrDefault();
            int TobeCount = 0;
            if (ViewBag.TobeCount == null)
            {
                TobeCount = 0;
            }
            else
            {
                TobeCount = ViewBag.TobeCount;
            }
            var tobedist = db.QuotationList("", "", "", "", "tobedistributor", "", "", 1, 200).ToList();
            ViewBag.TobeDistCount = tobedist.Select(x => x.TotalRecord).FirstOrDefault();
            int TobeDistCount = 0;
            if (ViewBag.TobeDistCount == null)
            {
                TobeDistCount = 0;
            }
            else
            {
                TobeDistCount = ViewBag.TobeDistCount;
            }

            var inhouse = db.QuotationList("", "", "", "", "inhouse", "", "", 1, 200).ToList();
            ViewBag.InhouseCount = inhouse.Select(x => x.TotalRecord).FirstOrDefault();
            int InhouseCount = 0;
            int FollowupCount = 0;
            int AuctionCount = 0;

            if (ViewBag.InhouseCount == null)
            {
                InhouseCount = 0;
            }
            else
            {
                InhouseCount = ViewBag.InhouseCount;
            }
            var followup = db.QuotationList("", "", "", "", "followup", "", "", 1, 200).ToList();
            ViewBag.FollowupCount = followup.Select(x => x.TotalRecord).FirstOrDefault();
            if (ViewBag.FollowupCount == null)
            {
                FollowupCount = 0;
            }
            else
            {
                FollowupCount = ViewBag.FollowupCount;
            }
            var auction = db.QuotationList("", "", "", "", "auction", "", "", 1, 200).ToList();
            ViewBag.AuctionCount = auction.Select(x => x.TotalRecord).FirstOrDefault();

            if (ViewBag.AuctionCount == null)
            {
                AuctionCount = 0;
            }
            else
            {
                AuctionCount = ViewBag.AuctionCount;
            }

            var approved = db.QuotationList("", "", "", "", "approved", "", "", 1, 200).ToList();
            ViewBag.ApprovedCount = approved.Select(x => x.TotalRecord).FirstOrDefault();
            int ApprovedCount = 0;
            if (ViewBag.ApprovedCount == null)
            {
                ApprovedCount = 0;
            }
            else
            {
                ApprovedCount = ViewBag.ApprovedCount;
            }
            int RFQCount = db.SZ_Query.AsNoTracking().Count();

            return Json(new { RFQCount = RFQCount, AllCount = AllCount, TobeCount = TobeCount, TobeDistCount = TobeDistCount, InhouseCount = InhouseCount, FollowupCount = FollowupCount, AuctionCount = AuctionCount, ApprovedCount = ApprovedCount }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult QuotationList()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsFollowUp && !SessionCookieManagement.IsMiniAdmin)
            {
                return RedirectToAction("Index", "Home");
            }

            var list = new List<SZ_QuotationModel>();
            return View(list);
        }


        [HttpPost]
        public JsonResult CopyMasterCOATOChildCOA(int id)
        {
            var masterrecord = db.SZ_MasterCOA.AsNoTracking().Where(x => x.BatchId == id).FirstOrDefault();
            if (masterrecord != null)
            {
                SZ_ChildCOA objchild = new SZ_ChildCOA();
                objchild.MasterCOAID = masterrecord.Id;
                objchild.ProductName = masterrecord.ProductName;
                objchild.BatchNo = masterrecord.BatchNo;
                objchild.QuantityAvailable = masterrecord.QuantityAvailable;
                objchild.AnalysisDate = masterrecord.AnalysisDate;
                objchild.HPLCGCELSD = masterrecord.HPLCGCELSD;
                objchild.TGALoss = masterrecord.TGALoss;
                objchild.ResidueOnIgnition = masterrecord.ResidueOnIgnition;
                objchild.Potency = masterrecord.Potency;
                objchild.PhysicalState = masterrecord.PhysicalState;
                objchild.SOLUBILITY = masterrecord.SOLUBILITY;
                objchild.IR = masterrecord.IR;
                objchild.Mass = masterrecord.Mass;
                objchild.HPLC = masterrecord.HPLC;
                objchild.NMR = masterrecord.NMR;
                objchild.CMR = masterrecord.CMR;
                objchild.Dept = masterrecord.Dept;
                objchild.TGA = masterrecord.TGA;
                objchild.StorageCon = masterrecord.StorageCon;
                objchild.ReTestDate = masterrecord.ReTestDate;
                objchild.SpecialInstruction = masterrecord.SpecialInstruction;
                objchild.Remark1 = masterrecord.Remark1;
                objchild.Remark2 = masterrecord.Remark2;
                objchild.CreatedDate = DateTime.Now;
                objchild.UpdatedDate = DateTime.Now;
                objchild.IsRepresentative = false;
                objchild.Purity = masterrecord.Purity;

                db.SZ_ChildCOA.Add(objchild);
                db.SaveChanges();

                return Json(new
                {
                    success = true,
                    message = "Successfully copied this COA."
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(new
            {
                success = false,
                message = "Please fill up all fields and after that try to copy this COA."
            }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Fetch master and child records
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult FetchProductInformation(string value)
        {
            value = value.Trim().ToLower();

            var data = (from i in db.Products.AsNoTracking()
                        join t2 in db.SZ_Inventory.AsNoTracking() on i.Id equals t2.ProductId
                        join t3 in db.SZ_MasterCOA.AsNoTracking() on t2.Id equals t3.BatchId into gj
                        from subpet in gj.DefaultIfEmpty()
                        where (i.Sku.Trim().ToLower() == value.Trim().ToLower() || i.ManufacturerPartNumber.Trim().ToLower() == value.Trim().ToLower() || t2.BatchNo.ToLower().Trim() == value || subpet.RefNo.Trim().ToLower() == value)
                        && i.Deleted == false && i.Published == true
                        select i).FirstOrDefault();

            var masterCOAIds = new List<int>();

            if (data != null)
            {
                var list = new List<MasterCOAModel>();
                var batchlist = db.SZ_Inventory.AsNoTracking().Where(x => x.ProductId == data.Id).ToList();
                if (batchlist.Count > 0)
                {
                    var bids = batchlist.Select(x => x.Id).ToList();
                    var masterCOAData = db.SZ_MasterCOA.AsNoTracking().Where(x => bids.Contains(x.BatchId)).ToList();
                    batchlist.ForEach(item =>
                    {
                        MasterCOAModel objmodel = new MasterCOAModel();
                        objmodel.Id = item.Id;
                        objmodel.ProductName = data.Name;
                        objmodel.CASNO = data.ManufacturerPartNumber;
                        objmodel.CATNO = data.Sku;
                        objmodel.BatchNo = item.BatchNo;
                        objmodel.QuantityAvailable = Convert.ToString(item.Qty);
                        var masterrecord = masterCOAData.Where(x => x.BatchId == item.Id).FirstOrDefault();
                        if (masterrecord != null)
                        {
                            objmodel.COAId = masterrecord.Id;
                        }
                        else
                        {
                            objmodel.COAId = 0;
                        }
                        list.Add(objmodel);
                    });
                }
                return Json(new
                {
                    success = true,
                    data = PartialViewdata(this, "_PartialCOAPrdouctInformation", list)
                    //childHtml = PartialViewdata(this, "_PartialSearchChildCOA", childlist)
                }, JsonRequestBehavior.AllowGet);
            }

            return Json(new
            {
                success = false,
                message = "This catalog number is not available."
            }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public JsonResult ShowCOAInformation(int szInventoryId, string batchNo, int masterCoaId)
        {
            var masterCOAIds = new List<int>();

            var list = new List<MasterCOAModel>();
            var batchlist = db.SZ_Inventory.AsNoTracking().Where(x => x.Id == szInventoryId).FirstOrDefault();
            if (batchlist != null)
            {
                MasterCOAModel objmodel = new MasterCOAModel();
                objmodel.BatchId = batchlist.Id;
                objmodel.ProductId = batchlist.ProductId;
                string uri = Domain + "api/RestAPI/ProductDetails?productId=" + batchlist.ProductId;
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var productRecord = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                    if (productRecord != null)
                    {
                        objmodel.CASNO = productRecord.ManufacturerPartNumber;
                        objmodel.CATNO = productRecord.Sku;
                        objmodel.ProductName = productRecord.Name;
                        ViewBag.ImagePath = productRecord.DefaultPictureModel.FullSizeImageUrl;
                        ViewBag.CATNo = productRecord.Sku;
                        ViewBag.CASNo = productRecord.ManufacturerPartNumber;
                        ViewBag.MolFormula = productRecord.Gtin;
                        ViewBag.MolecularWeight = productRecord.MolecularWeight;
                        ViewBag.Synonym = productRecord.Synonym;
                        ViewBag.ChemicalName = productRecord.ChemicalName;
                    }
                }

                var masterrecord = db.SZ_MasterCOA.AsNoTracking().Where(x => x.Id == masterCoaId).FirstOrDefault();
                if (masterrecord != null)
                {
                    masterCOAIds.Add(masterrecord.Id);
                    objmodel.IsEquation = masterrecord.IsEquation.HasValue ? masterrecord.IsEquation.Value : false;
                    objmodel.RefNo = masterrecord.RefNo;
                    objmodel.COAId = masterrecord.Id;
                    objmodel.AnalysisDate = masterrecord.AnalysisDate;
                    objmodel.BatchNo = masterrecord.BatchNo;
                    objmodel.ProductName = masterrecord.ProductName;
                    objmodel.CMR = masterrecord.CMR;
                    objmodel.Dept = masterrecord.Dept;
                    objmodel.HPLC = masterrecord.HPLC;
                    objmodel.HPLCGCELSD = masterrecord.HPLCGCELSD;
                    objmodel.IR = masterrecord.IR;
                    objmodel.Mass = masterrecord.Mass;
                    objmodel.NMR = masterrecord.NMR;
                    objmodel.PhysicalState = masterrecord.PhysicalState;
                    objmodel.Potency = masterrecord.Potency;
                    objmodel.QuantityAvailable = masterrecord.QuantityAvailable;
                    objmodel.Remark1 = masterrecord.Remark1;
                    objmodel.Remark2 = masterrecord.Remark2;
                    objmodel.ResidueOnIgnition = masterrecord.ResidueOnIgnition;
                    objmodel.ReTestDate = masterrecord.ReTestDate;
                    objmodel.SOLUBILITY = masterrecord.SOLUBILITY;
                    objmodel.SpecialInstruction = masterrecord.SpecialInstruction;
                    objmodel.StorageCon = masterrecord.StorageCon;
                    objmodel.TGA = masterrecord.TGA;
                    objmodel.TGALoss = masterrecord.TGALoss;
                    objmodel.Purity = masterrecord.Purity;
                    objmodel.Chemicalname = masterrecord.Chemicalname;
                    ViewBag.ChemicalName = masterrecord.Chemicalname;
                    ViewBag.MolFormula = masterrecord.MolFormula;
                    ViewBag.MolecularWeight = masterrecord.MolecularWeight;
                    ViewBag.Synonym = masterrecord.Synonym;
                    objmodel.Attachment = masterrecord.Attachment;
                    objmodel.AppearanceProduct = masterrecord.AppearanceProduct;
                    objmodel.Purity = masterrecord.Purity;
                    objmodel.AdditionalInfor = masterrecord.AdditionalInfor;
                    objmodel.EquationType = masterrecord.EquationType;
                    objmodel.IsLogoAttached = masterrecord.IsLogoAttached;
                    objmodel.IsManufacture = masterrecord.IsManufacture.HasValue ? masterrecord.IsManufacture.Value : false;
                    objmodel.ManufactureDate = masterrecord.ManufactureDate;
                    objmodel.OtherValue = masterrecord.OtherValue;
                    objmodel.IsShipping = masterrecord.IsShipping;
                    objmodel.CTheroretical = masterrecord.CTheroretical;
                    objmodel.HTheroretical = masterrecord.HTheroretical;
                    objmodel.NTheroretical = masterrecord.NTheroretical;
                    objmodel.STheroretical = masterrecord.STheroretical;
                    objmodel.CPractical = masterrecord.CPractical;
                    objmodel.HPractical = masterrecord.HPractical;
                    objmodel.NPractical = masterrecord.NPractical;
                    objmodel.SPractical = masterrecord.SPractical;
                    objmodel.CreatedBY = masterrecord.CreatedBy;
                    objmodel.UpdatedBY = masterrecord.UpdatedBy;
                    objmodel.WegithLossBy = masterrecord.WegithLossBy;
                }
                else
                {
                    objmodel.COAId = 0;
                    objmodel.BatchNo = batchlist.BatchNo;
                    objmodel.Mass = "Confirm";
                    objmodel.NMR = "Confirm";
                    objmodel.IR = "Confirm";
                    objmodel.EquationType = "Full";
                    objmodel.Purity = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.BatchCode == batchlist.BatchNo).Select(x => x.HPLCPurity).FirstOrDefault();
                }
                if (string.IsNullOrEmpty(objmodel.StorageCon))
                {
                    objmodel.StorageCon = "2-8 °C for long term storage";
                }
                list.Add(objmodel);

            }
            var childlist = new List<MasterCOAModel>();
            if (masterCOAIds.Count > 0)
            {

                var childrecords = db.SZ_ChildCOA.AsNoTracking().Where(x => masterCOAIds.Contains(x.MasterCOAID.Value)).ToList();


                childrecords.ForEach(masterrecord =>
                {
                    //foreach (var masterrecord in childrecords)
                    //{
                    MasterCOAModel objmodel = new MasterCOAModel();
                    objmodel.Id = masterrecord.Id;
                    objmodel.RefNo = masterrecord.RefNo;
                    objmodel.COAId = masterrecord.Id;
                    masterCOAIds.Add(masterrecord.Id);
                    objmodel.AnalysisDate = masterrecord.AnalysisDate;
                    objmodel.BatchNo = masterrecord.BatchNo;
                    objmodel.ProductName = masterrecord.ProductName;
                    objmodel.CMR = masterrecord.CMR;
                    objmodel.Dept = masterrecord.Dept;
                    objmodel.HPLC = masterrecord.HPLC;
                    objmodel.HPLCGCELSD = masterrecord.HPLCGCELSD;
                    objmodel.IR = masterrecord.IR;
                    objmodel.Mass = masterrecord.Mass;
                    objmodel.NMR = masterrecord.NMR;
                    objmodel.PhysicalState = masterrecord.PhysicalState;
                    objmodel.Potency = masterrecord.Potency;
                    objmodel.QuantityAvailable = masterrecord.QuantityAvailable;
                    objmodel.Remark1 = masterrecord.Remark1;
                    objmodel.Remark2 = masterrecord.Remark2;
                    objmodel.ResidueOnIgnition = masterrecord.ResidueOnIgnition;
                    objmodel.ReTestDate = masterrecord.ReTestDate;
                    objmodel.SOLUBILITY = masterrecord.SOLUBILITY;
                    objmodel.SpecialInstruction = masterrecord.SpecialInstruction;
                    objmodel.StorageCon = masterrecord.StorageCon;
                    objmodel.TGA = masterrecord.TGA;
                    objmodel.TGALoss = masterrecord.TGALoss;
                    objmodel.Purity = masterrecord.Purity;
                    objmodel.IsLogoAttached = masterrecord.IsLogoAttached;
                    if (string.IsNullOrEmpty(masterrecord.StorageCon))
                    {
                        objmodel.StorageCon = "2-8 °C for long term storage";
                    }
                    objmodel.IsManufacture = masterrecord.IsManufacture.HasValue ? masterrecord.IsManufacture.Value : false;
                    objmodel.ManufactureDate = masterrecord.ManufactureDate;
                    objmodel.EquationType = masterrecord.EquationType;
                    objmodel.OtherValue = masterrecord.OtherValue;
                    objmodel.IsShipping = masterrecord.IsShipping;

                    objmodel.CreatedBY = masterrecord.CreatedBy;
                    objmodel.UpdatedBY = masterrecord.UpdatedBy;

                    objmodel.CTheroretical = masterrecord.CTheroretical;
                    objmodel.HTheroretical = masterrecord.HTheroretical;
                    objmodel.NTheroretical = masterrecord.NTheroretical;
                    objmodel.STheroretical = masterrecord.STheroretical;
                    objmodel.CPractical = masterrecord.CPractical;
                    objmodel.HPractical = masterrecord.HPractical;
                    objmodel.NPractical = masterrecord.NPractical;
                    objmodel.SPractical = masterrecord.SPractical;
                    objmodel.WegithLossBy = masterrecord.WegithLossBy;
                    childlist.Add(objmodel);
                    //}
                });
            }

            ViewBag.COAName = "Master";

            return Json(new
            {
                success = true,
                data = PartialViewdata(this, "_RightSideCOAInformation", list.Count > 0 ? list.FirstOrDefault() : new MasterCOAModel()),
                childHtml = PartialViewdata(this, "_PartialSearchChildCOA", childlist)
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult ShowChildCOAInformation(int childCOAId)
        {
            var model = new MasterCOAModel();
            var masterrecord = db.SZ_ChildCOA.AsNoTracking().Where(x => x.Id == childCOAId).FirstOrDefault();
            if (masterrecord != null)
            {
                MasterCOAModel objmodel = new MasterCOAModel();
                string uri = Domain + "api/RestAPI/ProductDetails?productId=" + masterrecord.SZ_MasterCOA.ProductId;
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var productRecord = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                    if (productRecord != null)
                    {
                        objmodel.CASNO = productRecord.ManufacturerPartNumber;
                        objmodel.CATNO = productRecord.Sku;
                        objmodel.ProductName = productRecord.Name;
                        ViewBag.ImagePath = productRecord.DefaultPictureModel.FullSizeImageUrl;
                        ViewBag.CATNo = productRecord.Sku;
                        ViewBag.CASNo = productRecord.ManufacturerPartNumber;
                        ViewBag.MolFormula = productRecord.Gtin;
                        ViewBag.MolecularWeight = productRecord.MolecularWeight;
                        ViewBag.Synonym = productRecord.Synonym;
                        ViewBag.ChemicalName = productRecord.ChemicalName;
                    }
                }
                objmodel.ProductId = masterrecord.SZ_MasterCOA.ProductId.HasValue ? masterrecord.SZ_MasterCOA.ProductId.Value : 0;
                objmodel.Id = masterrecord.Id;
                objmodel.RefNo = masterrecord.RefNo;
                objmodel.COAId = masterrecord.MasterCOAID.HasValue ? masterrecord.MasterCOAID.Value : 0;
                objmodel.AnalysisDate = masterrecord.AnalysisDate;
                objmodel.BatchNo = masterrecord.BatchNo;
                objmodel.ProductName = masterrecord.ProductName;
                objmodel.CMR = masterrecord.CMR;
                objmodel.Dept = masterrecord.Dept;
                objmodel.HPLC = masterrecord.HPLC;
                objmodel.HPLCGCELSD = masterrecord.HPLCGCELSD;
                objmodel.IR = masterrecord.IR;
                objmodel.Mass = masterrecord.Mass;
                objmodel.NMR = masterrecord.NMR;
                objmodel.PhysicalState = masterrecord.PhysicalState;
                objmodel.Potency = masterrecord.Potency;
                objmodel.QuantityAvailable = masterrecord.QuantityAvailable;
                objmodel.Remark1 = masterrecord.Remark1;
                objmodel.Remark2 = masterrecord.Remark2;
                objmodel.ResidueOnIgnition = masterrecord.ResidueOnIgnition;
                objmodel.ReTestDate = masterrecord.ReTestDate;
                objmodel.SOLUBILITY = masterrecord.SOLUBILITY;
                objmodel.SpecialInstruction = masterrecord.SpecialInstruction;
                objmodel.StorageCon = masterrecord.StorageCon;
                objmodel.TGA = masterrecord.TGA;
                objmodel.TGALoss = masterrecord.TGALoss;
                objmodel.Purity = masterrecord.Purity;
                objmodel.Chemicalname = masterrecord.Chemicalname;
                ViewBag.MolFormula = masterrecord.MolFormula;
                ViewBag.MolecularWeight = masterrecord.MolecularWeight;
                ViewBag.Synonym = masterrecord.Synonym;
                ViewBag.ChemicalName = masterrecord.Chemicalname;
                objmodel.Attachment = masterrecord.Attachment;
                objmodel.AppearanceProduct = masterrecord.AppearanceProduct;
                objmodel.AdditionalInfor = masterrecord.AdditionalInfor;
                objmodel.BatchId = masterrecord.SZ_MasterCOA.BatchId;
                objmodel.IsLogoAttached = masterrecord.IsLogoAttached;
                if (string.IsNullOrEmpty(masterrecord.StorageCon))
                {
                    objmodel.StorageCon = "2-8 °C for long term storage";
                }
                if (!string.IsNullOrEmpty(masterrecord.ImagePath))
                {
                    ViewBag.ImagePath = masterrecord.ImagePath.Replace("~", "..");
                }
                objmodel.IsEquation = masterrecord.IsEquation.HasValue ? masterrecord.IsEquation.Value : false;
                objmodel.EquationType = masterrecord.EquationType;
                objmodel.OtherValue = masterrecord.OtherValue;
                objmodel.IsManufacture = masterrecord.IsManufacture.HasValue ? masterrecord.IsManufacture.Value : false;
                objmodel.ManufactureDate = masterrecord.ManufactureDate;
                objmodel.IsShipping = masterrecord.IsShipping;
                objmodel.CreatedBY = masterrecord.CreatedBy;
                objmodel.UpdatedBY = masterrecord.UpdatedBy;
                objmodel.CTheroretical = masterrecord.CTheroretical;
                objmodel.HTheroretical = masterrecord.HTheroretical;
                objmodel.NTheroretical = masterrecord.NTheroretical;
                objmodel.STheroretical = masterrecord.STheroretical;
                objmodel.CPractical = masterrecord.CPractical;
                objmodel.HPractical = masterrecord.HPractical;
                objmodel.NPractical = masterrecord.NPractical;
                objmodel.SPractical = masterrecord.SPractical;
                objmodel.WegithLossBy = masterrecord.WegithLossBy;
                model = objmodel;
            }

            ViewBag.COAName = "Child";
            return Json(new
            {
                success = true,
                childHtml = PartialViewdata(this, "_RightSideCOAInformation", model)
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult ReloadChild(string value)
        {
            var data = (from i in db.Products.AsNoTracking()
                            //join t2 in db.SZ_Inventory on i.Id equals t2.ProductId
                            //join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                        where i.Sku.ToLower() == value.Trim().ToLower()
                        select i).FirstOrDefault();

            var masterCOAIds = new List<int>();

            if (data != null)
            {
                var batchlist = db.SZ_Inventory.AsNoTracking().Where(x => x.ProductId == data.Id).ToList();
                if (batchlist.Count > 0)
                {
                    foreach (var item in batchlist)
                    {
                        var masterrecord = db.SZ_MasterCOA.AsNoTracking().Where(x => x.BatchId == item.Id).FirstOrDefault();
                        if (masterrecord != null)
                        {
                            masterCOAIds.Add(masterrecord.Id);
                        }
                    }
                }
                var childlist = new List<MasterCOAModel>();
                if (masterCOAIds.Count > 0)
                {

                    var childrecords = db.SZ_ChildCOA.AsNoTracking().Where(x => masterCOAIds.Contains(x.MasterCOAID.Value)).ToList();
                    foreach (var masterrecord in childrecords)
                    {

                        MasterCOAModel objmodel = new MasterCOAModel();
                        objmodel.Id = masterrecord.Id;
                        masterCOAIds.Add(masterrecord.Id);
                        objmodel.AnalysisDate = masterrecord.AnalysisDate;
                        objmodel.BatchNo = masterrecord.BatchNo;
                        objmodel.ProductName = masterrecord.ProductName;
                        objmodel.CMR = masterrecord.CMR;
                        objmodel.Dept = masterrecord.Dept;
                        objmodel.HPLC = masterrecord.HPLC;
                        objmodel.HPLCGCELSD = masterrecord.HPLCGCELSD;
                        objmodel.IR = masterrecord.IR;
                        objmodel.Mass = masterrecord.Mass;
                        objmodel.NMR = masterrecord.NMR;
                        objmodel.PhysicalState = masterrecord.PhysicalState;
                        objmodel.Potency = masterrecord.Potency;
                        objmodel.QuantityAvailable = masterrecord.QuantityAvailable;
                        objmodel.Remark1 = masterrecord.Remark1;
                        objmodel.Remark2 = masterrecord.Remark2;
                        objmodel.ResidueOnIgnition = masterrecord.ResidueOnIgnition;
                        objmodel.ReTestDate = masterrecord.ReTestDate;
                        objmodel.SOLUBILITY = masterrecord.SOLUBILITY;
                        objmodel.SpecialInstruction = masterrecord.SpecialInstruction;
                        objmodel.StorageCon = masterrecord.StorageCon;
                        objmodel.TGA = masterrecord.TGA;
                        objmodel.TGALoss = masterrecord.TGALoss;
                        objmodel.EquationType = masterrecord.EquationType;
                        if (string.IsNullOrEmpty(masterrecord.StorageCon))
                        {
                            objmodel.StorageCon = "2-8 °C for long term storage";
                        }
                        childlist.Add(objmodel);
                    }
                }

                return Json(new
                {
                    success = true,
                    childHtml = PartialViewdata(this, "_PartialSearchChildCOA", childlist)
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(new
            {
                success = false,
                message = "This catalog number is not available."
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult AddClientRemark(int id, bool isClientSection = false)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            ViewBag.isClientSection = isClientSection;
            return View("_PartialAddClientRemark", data);
        }

        public ActionResult showpopupInfo(int id, int quoteDetailsId)
        {
            string synthesis = Convert.ToString((int)Synzeal_Inventory.Models.EnumList.ProjectType.Synthesis);
            string pursynthesis = Convert.ToString((int)Synzeal_Inventory.Models.EnumList.ProjectType.PurSynthesis);
            string purchase = Convert.ToString((int)Synzeal_Inventory.Models.EnumList.ProjectType.Purchase);
            var quoteDetail = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == quoteDetailsId).FirstOrDefault();

            var quotePrice = db.Products.AsNoTracking().Where(x => x.Id == quoteDetail.ProductId).Select(x => x.QuotePrice).FirstOrDefault();
            var isAvailableProductDetails = new List<SZ_QuotationDetail>();
            if (!string.IsNullOrEmpty(quoteDetail.CATNo) && quoteDetail.CATNo != "na" && quoteDetail.CATNo != "NA" && quoteDetail.CATNo != "N/A")
            {
                isAvailableProductDetails = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.ProductId == quoteDetail.ProductId && x.Id != quoteDetail.Id
                && x.MoveToProject == true && (x.MoveToDispatch == false || x.MoveToDispatch == null) && string.IsNullOrEmpty(x.TrackingNo)
                && (x.ProjectType == synthesis || x.ProjectType == pursynthesis || x.ProjectType == purchase)).ToList();
            }

            string htmlstring = PartialViewdata(this, "_PartialshowpopupInfo", isAvailableProductDetails);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }


        public ActionResult AllQuotePrice(int id)
        {
            var product = db.Products.AsNoTracking().Where(x => x.Id == id && x.Published == true && x.Deleted == false).FirstOrDefault();

            string htmlstring = PartialViewdata(this, "_PartialQuotePrice", product);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetAllBatchNo(int id, string actiontxt, int quoteDetailsId = 0)
        {
            var InventoryData = db.SZ_Inventory.AsNoTracking().Where(x => x.ProductId == id).ToList();
            var product = db.Products.AsNoTracking().Where(x => x.Id == id && x.Published == true && x.Deleted == false).FirstOrDefault();
            ViewBag.CatNo = product.Sku;
            ViewBag.action = actiontxt;
            ViewBag.QuoteDetailsId = quoteDetailsId;
            string htmlstring = PartialViewdata(this, "_PartialBatchNoForretest", InventoryData);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetQueryDataFromCatNo(string catNo, string pagename = "")
        {
            ViewBag.CatNo = catNo;
            ViewBag.pagename = pagename;
            var InventoryData = db.SZ_QueryModule.AsNoTracking().Where(x => x.CATNo == catNo).ToList();
            string htmlstring = PartialViewdata(this, "_PartialQueryDataByCatNo", InventoryData);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetAuditLogForQuoteDetail(int id)
        {
            var model = db.SZ_QuotationDetailLog.AsNoTracking().Where(x => x.QuoteDetailsId == id).OrderByDescending(x => x.Datetime).ToList();
            string htmlstring = PartialViewdata(this, "_PartialQuoteDetailAuditLog", model);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult chatDetails(int id)
        {
            var data = db.SZ_Clientremark.AsNoTracking().Where(x => x.QuoteDetailsId == id).ToList();
            string htmlstring = PartialViewdata(this, "_PartialChatDetails", data);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult Addexplaination(int id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            string htmlstring = PartialViewdata(this, "_PartialExplaination", data);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AddInhouseRemark(int id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            string htmlstring = PartialViewdata(this, "_PartialInhouseRemark", data);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AddApprovComment(int id, bool isScientist = false)
        {
            ViewBag.isScientist = isScientist;
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            ViewBag.QuoteDetailsComment = db.SZ_QuoteDetailsComment.AsNoTracking().Where(x => x.QuotationDetailsId == id).OrderBy(x => x.CreatedDate).ToList();
            var formid = db.SZ_QuoteDetails_Form.AsNoTracking().Where(x => x.QuoteDetailsId == id).Select(x => x.FormId).FirstOrDefault();
            var quoteform = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.Id == formid).OrderByDescending(x => x.Id).FirstOrDefault();
            if (quoteform != null)
            {
                ViewBag.FormRemark = quoteform.OtherAnalysis;
            }


            string htmlstring = PartialViewdata(this, "_PartialApprovedComment", data);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult ChangeAvailableData(int id)
        {
            var data = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            string htmlstring = PartialViewdata(this, "_PartialAvailableChangeData", data);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AddNewRfq()
        {
            string htmlstring = PartialViewdata(this, "_PartialAddNewRfq", new SZ_PurchaseRFQ());

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult OpenBatchNoFromCat(int quotedetailsid)
        {
            ViewBag.QuoteDetailsId = quotedetailsid;
            var catno = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == quotedetailsid).Select(x => x.CATNo).FirstOrDefault();
            catno = catno.Trim().ToLower();
            var forminventorydata = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.CATNo.Trim().ToLower() == catno).OrderByDescending(x => x.Id).ToList();
            string htmlstring = PartialViewdata(this, "_PartialBachnoList", forminventorydata);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AddFollowpDescription(int id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            string htmlstring = PartialViewdata(this, "_PartialFollowpDescription", data);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult AddQuery(string ids, string sectionName)
        {
            ViewBag.ids = ids;
            int id = Convert.ToInt32(ids.Split(',')[0]);

            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            ViewBag.sectionName = sectionName;

            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
            });

            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });

            var listItems = new List<SelectListItem>();

            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });

            ViewBag.ScientistList = listItems;

            if ("project" == sectionName)
            {
                data.IsAssignProjectQuery = false;
            }
            else
            {
                data.IsAssignScientistQuery = false;
            }
            db.Entry(data).State = EntityState.Modified;
            db.SaveChanges();

            string htmlstring = PartialViewdata(this, "_PartialQuery", data);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetAllCategoryPricePopup(string mg = null, string value = null, string type = null)
        {
            ViewBag.mg = mg != "undefined" ? mg : null;
            ViewBag.value = value != "undefined" ? value : null;
            ViewBag.type = type != "undefined" ? type : null;
            var model = db.SZ_CategoryMaster.AsNoTracking().OrderBy(x => x.Name).ToList();
            string htmlstring = PartialViewdata(this, "_PartialCategoryPriceMaster", model);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddQuotePriceData(string QuotePrice, int Id)
        {
            var data = db.Products.AsNoTracking().Where(x => x.Id == Id).FirstOrDefault();
            if (data != null)
            {
                data.QuotePrice = QuotePrice;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddApprovedCommentData(string CommentText, int Id, bool isSCientist = false)
        {
            string correctionstatus = Convert.ToString((int)EnumList.ApprovedStatus.QCCorrection);

            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == Id).FirstOrDefault();
            if (data != null)
            {
                SZ_QuoteDetailsComment objcomment = new SZ_QuoteDetailsComment();
                objcomment.QuotationDetailsId = data.Id;
                objcomment.ApprovedComment = CommentText.Replace("\n", "<br>");
                objcomment.CreatedDate = DateTime.Now;
                objcomment.GeneratedUserid = SessionCookieManagement.UserId;
                objcomment.GeneratedUserName = SessionCookieManagement.UserName;
                if (isSCientist)
                {
                    objcomment.IsQcView = false;
                    objcomment.IsScientistView = true;
                }
                else
                {
                    objcomment.IsQcView = true;
                    objcomment.IsScientistView = false;
                }
                db.SZ_QuoteDetailsComment.Add(objcomment);

                var invData = db.SZ_Inventory.AsNoTracking().Where(x => x.Id == data.AdditionalBatchNo).FirstOrDefault();
                if (invData != null)
                {
                    invData.QCRemark = CommentText.Replace("\n", "<br>");
                    db.Entry(invData).State = EntityState.Modified;
                }

                db.SaveChanges();

                if (data.ApprovalStatus == correctionstatus && !isSCientist)
                {
                    var customeremail = db.Customers.AsNoTracking().Where(x => x.Id == data.ScientistCustomerId).Select(x => x.Email).FirstOrDefault();

                    //Email send to QC team
                    MailMessage mail = new MailMessage();

                    SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                    mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.SynthesisUsername"], "SynZeal Standards");

                    var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                    if (isDevelopment.ToLower().Contains("true"))
                    {
                        mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                    }
                    else
                    {
                        mail.To.Add(customeremail);
                        mail.CC.Add("standards@synzeal.com");
                    }
                    var formid = db.SZ_QuoteDetails_Form.AsNoTracking().Where(x => x.QuoteDetailsId == Id).Select(x => x.FormId).FirstOrDefault();
                    var qdsubmitform = db.SZ_QuoteDetailForm.AsNoTracking().Where(x => x.Id == formid).FirstOrDefault();
                    if (qdsubmitform != null)
                    {
                        if (!string.IsNullOrEmpty(qdsubmitform.SpectralDataAttachment))
                        {
                            mail.Attachments.Add(new Attachment(Server.MapPath("~/" + qdsubmitform.SpectralDataAttachment.Replace("..", ""))));
                        }
                    }

                    mail.Subject = "QC added comment for correction / CAT NO: " + data.CATNo;
                    mail.IsBodyHtml = true;
                    SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                    SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.SynthesisUsername"], ConfigurationManager.AppSettings["Email.SynthesisPassword"]);
                    mail.Body = "Dear Scientist, <br> Following product is submitted for correction. Kindly check and let us know the update. <br><br><br>";
                    //mail.Body += bodyStr;
                    mail.Body += "Comments:" + CommentText;
                    mail.Body += "<br><br>Let me know if you have any comments/suggestions.<br><br> <br>Kind  Regards,<br> QC Team <br> SynZeal Research PVT. LTD";
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mail);
                }

                if (data.ApprovalStatus == correctionstatus && isSCientist)
                {
                    var customeremail = db.Customers.AsNoTracking().Where(x => x.Id == data.ScientistCustomerId).Select(x => x.Email).FirstOrDefault();

                    //Email send to QC team
                    MailMessage mail = new MailMessage();

                    SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                    mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.SynthesisUsername"], "SynZeal Standards");

                    var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                    if (isDevelopment.ToLower().Contains("true"))
                    {
                        mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                    }
                    else
                    {
                        mail.To.Add("qc@synzeal.com");
                        mail.CC.Add("standards@synzeal.com");
                    }

                    mail.Subject = "Scientist added comment for correction / CAT NO: " + data.CATNo;

                    mail.IsBodyHtml = true;
                    SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                    SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.SynthesisUsername"], ConfigurationManager.AppSettings["Email.SynthesisPassword"]);
                    mail.Body = "Dear QC Team, <br> Following product is submitted for correction. Kindly check and let us know the update. <br><br><br>";

                    //mail.Body += bodyStr;
                    mail.Body += "Comments:" + CommentText;

                    mail.Body += "<br><br>Let me know if you have any comments/suggestions.<br><br> <br>Kind  Regards,<br> QC Team <br> SynZeal Research PVT. LTD";
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mail);
                }
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddExplainationData(string ExplanationText, int Id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == Id).FirstOrDefault();
            if (data != null)
            {
                data.Explanation = ExplanationText;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddInhouseRemarkData(string InhouseRemarkText, int Id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == Id).FirstOrDefault();
            if (data != null)
            {
                data.InhouseRemark = InhouseRemarkText;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult RemoveFollowup(int id)
        {
            var data = db.SZ_Quotation.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.IsRemoveFollowup = true;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddFollowupDescriptionData(string FollowupDescription, int Id)
        {
            var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == Id).FirstOrDefault();
            if (data != null)
            {
                if (data.FollowupDescription != FollowupDescription)
                {
                    data.IsFollowupChange = true;
                }
                data.FollowupDescription = FollowupDescription;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddQueryData(AddQueryDataModel model)
        {
            int refNo = 1;
            string value = string.Empty;
            string matchingstring = "SZ-Q-";
            var SZ_Quotationdata = (from i in db.SZ_QueryModule.AsNoTracking()
                                    where i.QueryNo.StartsWith(matchingstring)
                                    select i).ToList();
            if (SZ_Quotationdata.Count > 0)
            {
                refNo = SZ_Quotationdata.Select(x => ExtractQueryModukeRefNumber(x.QueryNo)).Max(w => w);
                int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                value = "SZ-Q-" + newbrokerrewf.ToString().PadLeft(3, '0');
            }
            else
            {
                value = "SZ-Q-001";
            }

            var inventorydata = db.SZ_Inventory.AsNoTracking().AsQueryable();
            var queryModuleData = db.SZ_QueryModule.AsNoTracking().Where(x => x.Status != "Solved" && x.Status != "Completed").ToList();
            string[] ids = model.Id.Split(',');
            foreach (var id in ids)
            {
                int qdid = Convert.ToInt32(id);
                var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == qdid).FirstOrDefault();
                if (data != null)
                {
                    var poNumber = data.SZ_Quotation.PONo;
                    var catN = data.CATNo;
                    var isChecked = queryModuleData.Where(x => x.PONo == poNumber && x.CATNo == catN && x.Status != "Solved" && x.Status != "Completed").Any();
                    if (!isChecked)
                    {
                        SZ_QueryModule sZ_QueryModule = new SZ_QueryModule();
                        sZ_QueryModule.QuerySubject = model.QuerySubject;
                        sZ_QueryModule.QueryNo = value;
                        sZ_QueryModule.Email = model.Email;
                        sZ_QueryModule.PrimaryEmail = model.Email;
                        sZ_QueryModule.PoDate = data.SZ_Quotation.PODate;
                        sZ_QueryModule.PONo = data.SZ_Quotation.PONo;
                        sZ_QueryModule.ProductName = data.ProductName;
                        sZ_QueryModule.CASNo = data.CASNo;
                        sZ_QueryModule.CATNo = data.CATNo;
                        if (data.AdditionalBatchNo.HasValue)
                        {
                            var szinventory = inventorydata.Where(x => x.Id == data.AdditionalBatchNo).FirstOrDefault();
                            if (szinventory != null)
                            {
                                sZ_QueryModule.BatchNo = szinventory.BatchNo;
                            }
                        }
                        sZ_QueryModule.Qty = data.RequiredQty;
                        sZ_QueryModule.Status = "Open";
                        sZ_QueryModule.QuoteDetailsId = qdid;
                        sZ_QueryModule.ClientRemark = model.QueryText;
                        sZ_QueryModule.Origin = model.Origin;
                        sZ_QueryModule.QueryType = model.Type;
                        sZ_QueryModule.IsScientistResolved = false;
                        sZ_QueryModule.CreatedDate = DateTime.Now;
                        db.SZ_QueryModule.Add(sZ_QueryModule);
                        db.SaveChanges();
                    }
                }
            }

            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddClientRemarks(ClientRemarkModel model)
        {
            string remark = model.Remark;
            int id = model.Id;

            try
            {

                var data = db.SZ_QuotationDetail.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {
                    if (string.IsNullOrEmpty(data.ClientRemark) && !string.IsNullOrEmpty(model.Remark))
                    {
                        data.ClientStatus = "COA/Data Correction";
                    }
                    if (data.ClientRemark != remark && model.isClientSection)
                    {
                        string adminemail = ConfigurationManager.AppSettings["EmailAddress"];
                        if (adminemail != null)
                        {
                            try
                            {
                                MailMessage mail = new MailMessage();
                                SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                                mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");
                                string[] emails = adminemail.Split(';');
                                foreach (var i in emails)
                                {
                                    mail.To.Add(i);
                                }

                                //mail.To. = adminemail;
                                string logCompName = Request.Cookies["LoginCompanyName"].Value;
                                mail.Subject = logCompName + " / PO NUmber : " + data.SZ_Quotation.PONo + " / Product name : " + data.ProductName;
                                mail.Body = "Dear Admin, <br> " + logCompName + " has updated client remark. Kindly correct it and upload corrected document. Please have a look on it.  <br> Thanks";
                                mail.IsBodyHtml = true;
                                SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                                SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                                SmtpServer.EnableSsl = true;

                                SmtpServer.Send(mail);
                            }
                            catch (Exception ex)
                            {
                                sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                            }
                        }
                    }
                    if (data.ClientRemark != remark && !model.isClientSection)
                    {
                        var notification = new SZ_Notification();
                        notification.CompanyId = data.SZ_Quotation.CompanyId.Value;
                        notification.CreatedDate = DateTime.Now;
                        notification.IsRead = false;
                        notification.Message = "Synzeal has changed remark of " + data.SZ_Quotation.PONo + " purchase number. Product name is " + data.ProductName;
                        db.SZ_Notification.Add(notification);
                        db.SaveChanges();

                    }

                    if (!model.isClientSection && data.ClientRemark != remark)
                    {
                        data.ResponseClientRemarkDate = DateTime.Now;
                    }

                    data.ClientRemark = remark;
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ExportQueryPDF(string id)
        {
            var dataCATNo = ""; var dataQueryNo = "";
            var filearray = new List<string>();
            string[] ids = id.Split(',');
            foreach (var item in ids)
            {
                var i = Convert.ToInt32(item);
                var data = db.SZ_QueryModule.AsNoTracking().Where(x => x.Id == i).FirstOrDefault();
                dataCATNo = data.CATNo;
                dataQueryNo = data.QueryNo;
                var htmlstring = PartialViewdata(this, "_PartialQueryPDF", data);
                htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
                string path = printpdf(htmlstring, data.QueryNo, true);
                filearray.Add(path);
            }

            if (filearray.Count > 1)
            {
                string specdatafilename = Guid.NewGuid().ToString() + ".pdf";
                string outputPdfPath = Server.MapPath("~/Content/NewProducts/" + specdatafilename);
                var output = new FileStream(outputPdfPath, FileMode.Create);
                PdfReader reader = null;
                Document sourceDocument = null;
                PdfCopy pdfCopyProvider = null;
                PdfImportedPage importedPage;
                sourceDocument = new Document();
                pdfCopyProvider = new PdfCopy(sourceDocument, output);
                //output file Open  
                sourceDocument.Open();

                foreach (var item in filearray)
                {
                    var fPath = Server.MapPath(item.Replace("..", "~"));
                    int pages = Common.TotalPageCount(fPath);

                    reader = new PdfReader(fPath);
                    //Add pages in new file  
                    for (int i = 1; i <= pages; i++)
                    {
                        try
                        {
                            importedPage = pdfCopyProvider.GetImportedPage(reader, i);
                            pdfCopyProvider.AddPage(importedPage);
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                    reader.Close();
                }
                sourceDocument.Close();
                string dataoutputfile = "/content/NewProducts/" + specdatafilename;
                return File(dataoutputfile, "application/pdf", Server.UrlEncode(dataCATNo.Replace(" ", "-") + "-" + dataQueryNo + ".pdf"));
            }

            return File(Server.MapPath("~/" + filearray[0]), "application/pdf", Server.UrlEncode(dataCATNo.Replace(" ", "-") + "-" + dataQueryNo + ".pdf"));
        }



        public ActionResult DownloadQuote(int id)
        {
            var data = db.SZ_Quotation.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            var htmlstring = PartialViewdata(this, "_PartialQuotationPDF", data);
            htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
            string path = printpdf(htmlstring, data.Ref);
            return File(path, "application/pdf", Server.UrlEncode(data.CompanyName.Replace(" ", "-") + "-" + data.Ref + ".pdf"));
        }

        public ActionResult DownloadSampleQuote(int id, bool isdispatchquotelog = false)
        {
            var data = db.SZ_Quotation.AsNoTracking().Where(x => x.Id == id).FirstOrDefault();
            var htmlstring = PartialViewdata(this, "_PartialSampleQuotationPDF", data);
            htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
            // string path = ConvertHTMLToPDF(htmlstring, data.Ref);
            string path = printpdf(htmlstring, data.Ref);

            //var bytes = PDFNopcomemrce(data);
            //return File(bytes, "application/pdf", string.Format("QuotationNo_{0}.pdf", data.Ref));
            if (isdispatchquotelog)
            {
                return File(path, "application/pdf", Server.UrlEncode(data.Ref + "_sample.pdf"));
            }
            return File(path, "application/pdf", Server.UrlEncode(data.CompanyName.Replace(" ", "-") + "-" + data.Ref + "_sample.pdf"));
        }

        public ActionResult GenerateReportExcel(int companyId)
        {
            var data = (from i in db.SZ_Quotation.AsNoTracking()
                        join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                        where !string.IsNullOrEmpty(i.PONo) && i.CompanyId == companyId
                        orderby t2.MoveProjectDate descending
                        //&& t2.MoveToInvoice == true
                        select i).ToList();

            var model = new List<SZ_Quotation>();
            foreach (var item in data)
            {
                var isCheck = item.SZ_QuotationDetail.Where(x => string.IsNullOrEmpty(x.TrackingNo)).ToList();
                if (isCheck.Count > 0)
                {
                    model.Add(item);
                }
                else
                {
                    var maxDate = item.SZ_QuotationDetail.Max(x => x.TrackingNoDate.Value);
                    var record = item.SZ_QuotationDetail.Where(x => x.TrackingNoDate.Value == maxDate).ToList();
                    if (record != null)
                    {
                        var addInList = record.Where(x => x.TrackingNoDate.Value.AddDays(14).Date >= DateTime.Now.Date).ToList();
                        if (addInList.Count > 0)
                        {
                            model.Add(item);
                        }
                    }
                }
            }

            var result = (from i in model
                          select i).Distinct().ToList();

            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet1");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            using (ExcelRange Rng = wsSheet1.Cells[1, 1, 2, 16])
            {
                Rng.Value = "SynZeal Research Pvt Ltd";
                Rng.Merge = true;
                Rng.Style.Font.Bold = true;
                Rng.Style.Font.Size = 22;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            }

            using (ExcelRange Rng = wsSheet1.Cells[3, 1, 4, 16])
            {
                Rng.Value = "Purchase Order Status as on " + DateTime.Now.Day + "" + GetDaySuffix(DateTime.Now.Day) + " " + DateTime.Now.ToString("MMMM yy") + " / Company Name : " + data.Select(x => x.CompanyName).FirstOrDefault();
                Rng.Merge = true;
                Rng.Style.Font.Bold = true;
                Rng.Style.Font.Size = 16;
                Rng.Style.Font.Color.SetColor(Color.Black);
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d0cece");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            }
            int loopCount = 5;

            wsSheet1.Cells[loopCount, 1].Value = "Sr No";
            wsSheet1.Cells[loopCount, 2].Value = "PO No";
            //wsSheet1.Cells[loopCount, 2].Value = "PO No";
            wsSheet1.Cells[loopCount, 3].Value = "PO Date";
            wsSheet1.Cells[loopCount, 4].Value = "Product Name";
            wsSheet1.Cells[loopCount, 5].Value = "Qty. (mg)";
            wsSheet1.Cells[loopCount, 6].Value = "Quote Lead Time";
            wsSheet1.Cells[loopCount, 7].Value = "CAS No";
            wsSheet1.Cells[loopCount, 8].Value = "CAT No";
            wsSheet1.Cells[loopCount, 9].Value = "Batch No";
            wsSheet1.Cells[loopCount, 10].Value = "Current Status";
            wsSheet1.Cells[loopCount, 11].Value = "Explanation";
            wsSheet1.Cells[loopCount, 12].Value = "Reason";
            wsSheet1.Cells[loopCount, 13].Value = "Estimated Completation Date";
            wsSheet1.Cells[loopCount, 14].Value = "Invoice Date";
            wsSheet1.Cells[loopCount, 15].Value = "COA Data Approved";
            wsSheet1.Cells[loopCount, 16].Value = "Dispatch Details";
            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 16])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }
            loopCount = loopCount + 1;
            int srno = 1;
            foreach (var quote in result)
            {
                foreach (var item in quote.SZ_QuotationDetail.Where(x => x.MoveToProject == true).OrderByDescending(x => x.MoveProjectDate).ToList())
                {
                    wsSheet1.Cells[loopCount, 1].Value = srno;
                    wsSheet1.Cells[loopCount, 2].Value = quote.PONo;
                    wsSheet1.Cells[loopCount, 3].Value = quote.PODate.HasValue ? quote.PODate.Value.ToShortDateString() : "";
                    wsSheet1.Cells[loopCount, 4].Value = item.ProductName;
                    wsSheet1.Cells[loopCount, 5].Value = item.RequiredQty;
                    wsSheet1.Cells[loopCount, 6].Value = item.LeadTime;
                    wsSheet1.Cells[loopCount, 7].Value = item.CASNo;
                    wsSheet1.Cells[loopCount, 8].Value = item.CATNo;
                    wsSheet1.Cells[loopCount, 9].Value = item.BatchNo;
                    if (string.IsNullOrEmpty(item.BatchNo) && item.AdditionalBatchNo.HasValue)
                    {
                        wsSheet1.Cells[loopCount, 9].Value = db.SZ_Inventory.Where(x => x.Id == item.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    }

                    wsSheet1.Cells[loopCount, 10].Value = item.AdminScientistStatus;
                    wsSheet1.Cells[loopCount, 11].Value = item.Explanation;
                    wsSheet1.Cells[loopCount, 12].Value = item.Reason;
                    wsSheet1.Cells[loopCount, 13].Value = item.EstimateCompleteDate.HasValue ? item.EstimateCompleteDate.Value.ToShortDateString() : "";
                    wsSheet1.Cells[loopCount, 14].Value = item.ReportInvoiceDate;
                    wsSheet1.Cells[loopCount, 15].Value = item.COAApprovedDate.HasValue ? item.COAApprovedDate.Value.ToShortDateString() : "";
                    wsSheet1.Cells[loopCount, 16].Value = item.TrackingNo;
                    srno += 1;
                    loopCount += 1;
                }
            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "Report-" + companyId.ToString() + "-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("Report_" + companyId.ToString().Replace("#", "_") + ".xls"));

        }

        public ActionResult PrintReportPDF(int companyId)
        {
            var data = (from i in db.SZ_Quotation.AsNoTracking()
                        join t2 in db.SZ_QuotationDetail.AsNoTracking() on i.Id equals t2.QuoteId
                        where !string.IsNullOrEmpty(i.PONo) && i.CompanyId == companyId
                        orderby t2.MoveProjectDate descending
                        //where !string.IsNullOrEmpty(i.PONo) && i.CompanyId == companyId
                        select i).ToList();

            var model = new List<SZ_Quotation>();
            foreach (var item in data.OrderByDescending(x => x.SZ_QuotationDetail.Select(y => y.MoveProjectDate)))
            {
                var isCheck = item.SZ_QuotationDetail.Where(x => string.IsNullOrEmpty(x.TrackingNo)).ToList();
                if (isCheck.Count > 0)
                {
                    model.Add(item);
                }
                else
                {

                    var maxDate = item.SZ_QuotationDetail.Max(x => x.TrackingNoDate.Value);
                    var record = item.SZ_QuotationDetail.Where(x => x.TrackingNoDate.Value == maxDate).ToList();
                    if (record != null)
                    {
                        var addInList = record.Where(x => x.TrackingNoDate.Value.AddDays(14).Date >= DateTime.Now.Date).ToList();
                        if (addInList.Count > 0)
                        {
                            model.Add(item);
                        }
                    }
                }
            }

            var result = (from i in model
                          select i).Distinct().ToList();

            var htmlstring = PartialViewdata(this, "_PartialPrintReport", result);
            string filename = "Report_" + DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss");
            htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";

            string path = printpdf(htmlstring, filename);
            return File(path, "application/pdf", Server.UrlEncode(filename + ".pdf"));
        }
        public ActionResult PrintExportPendingReportExcel(string Startdate, string Enddate)
        {
            var model = (from i in db.Products.AsNoTracking()
                         select i).AsQueryable();
            string madeby = string.Empty;
            if (!string.IsNullOrEmpty(Startdate))
            {
                DateTime sd = Convert.ToDateTime(Startdate);
                model = model.Where(x => x.CreatedOnUtc >= sd).AsQueryable();
            }
            if (!string.IsNullOrEmpty(Enddate))
            {
                DateTime ed = Convert.ToDateTime(Enddate);
                model = model.Where(x => x.CreatedOnUtc <= ed).AsQueryable();
            }
            var outputmodel = model.ToList();
            var result = (from i in outputmodel
                          select i).Distinct().ToList();

            //if(result != null && result.Count > 0)
            //{
            //    result.ForEach(x => { 
            //        x.
            //    });
            //}

            ExcelPackage ExcelPkg = new ExcelPackage();

            var types = new List<string>();
            types.Add("All");
            types.Add("Miscellaneous");
            foreach (var itemss in types)
            {
                var newresult = new List<Product>();
                if (itemss == "All")
                {
                    newresult = result.Where(x => x.MainCatName != null && x.MainCatName.ToLower() != "miscellaneous").ToList();
                }
                else
                {
                    newresult = result.Where(x => x.MainCatName != null && x.MainCatName.ToLower() == "miscellaneous").ToList();
                }
                ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add(itemss);
                wsSheet1.DefaultColWidth = 16;
                wsSheet1.Protection.IsProtected = false;
                wsSheet1.Protection.AllowSelectLockedCells = false;
                wsSheet1.Cells.AutoFitColumns(14, 40);
                wsSheet1.Column(3).Width = 40;
                wsSheet1.Column(3).Style.WrapText = true;

                int loopCount = 1;

                wsSheet1.Cells[loopCount, 1].Value = "Sr No";
                wsSheet1.Cells[loopCount, 2].Value = "Product Name";
                wsSheet1.Cells[loopCount, 3].Value = "CAT No";
                wsSheet1.Cells[loopCount, 4].Value = "CAS No";
                using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 4])
                {
                    Rng.Style.Font.Bold = true;
                    Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                    Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                    Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    Rng.Style.Font.Color.SetColor(Color.White);
                    Rng.Style.WrapText = true;
                }
                loopCount = loopCount + 1;
                int srno = 1;
                foreach (var item in newresult)
                {
                    wsSheet1.Cells[loopCount, 1].Value = srno;
                    wsSheet1.Cells[loopCount, 2].Value = item.Name;
                    wsSheet1.Cells[loopCount, 3].Value = item.Sku;
                    wsSheet1.Cells[loopCount, 4].Value = item.ManufacturerPartNumber;

                    srno += 1;
                    loopCount += 1;

                }
            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "UploadReport-" + DateTime.Now.ToShortDateString().Replace("/", "_") + "-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("UploadReport_" + DateTime.Now.ToShortDateString().Replace("#", "_") + ".xls"));

        }

        public ActionResult PrintQuotedailyReportExcel(int? CreatedBy, string Startdate, string Enddate)
        {
            var model = (from i in db.SZ_Quotation.AsNoTracking()
                         select i).ToList();
            string madeby = string.Empty;
            if (CreatedBy.HasValue)
            {
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var sid = scienList.Where(x => x == CreatedBy).FirstOrDefault();
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == CreatedBy.Value).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                customerName = customerName.ToLower().Trim();
                model = model.Where(x => !string.IsNullOrEmpty(x.CreatedBy) && x.CreatedBy.ToLower().Trim() == customerName.ToLower().Trim()).ToList();
            }
            if (!string.IsNullOrEmpty(Startdate))
            {
                DateTime sd = Convert.ToDateTime(Startdate);
                model = model.Where(x => x.CreatedDate.Value.Date >= sd).ToList();
            }
            if (!string.IsNullOrEmpty(Enddate))
            {
                DateTime ed = Convert.ToDateTime(Enddate);
                model = model.Where(x => x.CreatedDate.Value.Date <= ed).ToList();
            }

            var result = (from i in model
                          select i).Distinct().ToList();

            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet1");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            //using (ExcelRange Rng = wsSheet1.Cells[1, 1, 2, 9])
            //{
            //    Rng.Value = "SynZeal Research Pvt Ltd";
            //    Rng.Merge = true;
            //    Rng.Style.Font.Bold = true;
            //    Rng.Style.Font.Size = 22;
            //    Rng.Style.Font.Color.SetColor(Color.White);
            //    Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
            //    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
            //    Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
            //    Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //}

            //using (ExcelRange Rng = wsSheet1.Cells[3, 1, 4, 9])
            //{
            //    Rng.Value = "Quote Report";
            //    Rng.Merge = true;
            //    Rng.Style.Font.Bold = true;
            //    Rng.Style.Font.Size = 16;
            //    Rng.Style.Font.Color.SetColor(Color.Black);
            //    Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
            //    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d0cece");
            //    Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
            //    Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //}
            int loopCount = 1;

            wsSheet1.Cells[loopCount, 1].Value = "Sr No";
            wsSheet1.Cells[loopCount, 2].Value = "Date";
            wsSheet1.Cells[loopCount, 3].Value = "Quote #";
            wsSheet1.Cells[loopCount, 4].Value = "Location";
            wsSheet1.Cells[loopCount, 5].Value = "Company Name";
            wsSheet1.Cells[loopCount, 6].Value = "Email";
            wsSheet1.Cells[loopCount, 7].Value = "Subject";
            wsSheet1.Cells[loopCount, 8].Value = "Product Name";
            wsSheet1.Cells[loopCount, 9].Value = "Made By";
            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 9])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }
            loopCount = loopCount + 1;
            int srno = 1;
            foreach (var item in result)
            {
                wsSheet1.Cells[loopCount, 1].Value = srno;
                wsSheet1.Cells[loopCount, 2].Value = item.CreatedDate.HasValue ? item.CreatedDate.Value.ToShortDateString() : string.Empty;
                wsSheet1.Cells[loopCount, 3].Value = item.Ref;
                wsSheet1.Cells[loopCount, 4].Value = GetQuotePlace(item, item.SZ_QuotationDetail.OrderBy(x => x.DisplayOrder).FirstOrDefault());
                wsSheet1.Cells[loopCount, 5].Value = item.CompanyName;
                wsSheet1.Cells[loopCount, 6].Value = item.EmailAddress;
                wsSheet1.Cells[loopCount, 7].Value = item.ClientRef;
                wsSheet1.Cells[loopCount, 8].Value = item.SZ_QuotationDetail.OrderBy(x => x.DisplayOrder).Select(x => x.ProductName).FirstOrDefault();
                wsSheet1.Cells[loopCount, 9].Value = item.CreatedBy;

                srno += 1;
                loopCount += 1;

            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "QuoteDailyReport-" + DateTime.Now.ToShortDateString().Replace("/", "_") + "-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("QuoteDailyReport_" + DateTime.Now.ToShortDateString().Replace("#", "_") + ".xls"));

        }
        public ActionResult PrintQuotedailyReportPDF(int? CreatedBy, string Startdate, string Enddate)
        {
            var model = (from i in db.SZ_Quotation.AsNoTracking()
                         select i).ToList();
            string madeby = string.Empty;
            if (CreatedBy.HasValue)
            {
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.AsNoTracking().Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var sid = scienList.Where(x => x == CreatedBy).FirstOrDefault();
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == sid).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                model = model.Where(x => x.CreatedBy == customerName).ToList();
            }
            if (!string.IsNullOrEmpty(Startdate))
            {
                DateTime sd = Convert.ToDateTime(Startdate);
                model = model.Where(x => x.CreatedDate.Value.Date >= sd).ToList();
            }
            if (!string.IsNullOrEmpty(Enddate))
            {
                DateTime ed = Convert.ToDateTime(Enddate);
                model = model.Where(x => x.CreatedDate.Value.Date <= ed).ToList();
            }

            var result = (from i in model
                          select i).Distinct().ToList();

            var htmlstring = PartialViewdata(this, "_PartialQuoteDailyReport", result);
            string filename = "QuoteDailyReport_" + DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss");
            htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";

            string path = printpdf(htmlstring, filename, false, true);
            return File(path, "application/pdf", Server.UrlEncode(filename + ".pdf"));
        }


        public ActionResult PrintFollowupReportExcel(int? CreatedBy, string Startdate, string Enddate)
        {

            ExcelPackage ExcelPkg = new ExcelPackage();
            List<string> countryTypeList = new List<string>();
            countryTypeList.Add("Domestic");
            countryTypeList.Add("Export");
            foreach (var countryType in countryTypeList)
            {
                var model = (from i in db.SZ_Quotation
                             join qd in db.SZ_QuotationDetail on i.Id equals qd.QuoteId
                             where i.IsFollowupRequired.HasValue && i.IsFollowupRequired == true
                              && (i.IsToBe == null || i.IsToBe == false) && (i.IsPark == false || i.IsPark == null) && !i.CompanyName.Contains("synzeal") && (i.IsRemoveFollowup == null || i.IsRemoveFollowup == false)
                              //&& string.IsNullOrEmpty(i.PONo)
                              && i.CountryType == countryType
                             select qd).ToList();
                string madeby = string.Empty;
                if (CreatedBy.HasValue)
                {
                    model = model.Where(x => x.SZ_Quotation.CompanyId == CreatedBy).ToList();
                }
                if (!string.IsNullOrEmpty(Startdate))
                {
                    DateTime sd = Convert.ToDateTime(Startdate);
                    model = model.Where(x => x.CreatedDate.Date >= sd).ToList();
                }
                if (!string.IsNullOrEmpty(Enddate))
                {
                    DateTime ed = Convert.ToDateTime(Enddate);
                    model = model.Where(x => x.CreatedDate.Date <= ed).ToList();
                }

                var result = (from i in model
                              select i).Distinct().ToList();


                ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add(countryType);
                wsSheet1.DefaultColWidth = 16;
                wsSheet1.Protection.IsProtected = false;
                wsSheet1.Protection.AllowSelectLockedCells = false;
                wsSheet1.Cells.AutoFitColumns(14, 40);
                wsSheet1.Column(3).Width = 40;
                wsSheet1.Column(3).Style.WrapText = true;

                int loopCount = 1;

                wsSheet1.Cells[loopCount, 1].Value = "Sr No";
                wsSheet1.Cells[loopCount, 2].Value = "Date";
                wsSheet1.Cells[loopCount, 3].Value = "Quote #";
                wsSheet1.Cells[loopCount, 4].Value = "Type";
                wsSheet1.Cells[loopCount, 5].Value = "Company Name";
                wsSheet1.Cells[loopCount, 6].Value = "Email";
                wsSheet1.Cells[loopCount, 7].Value = "Subject";
                wsSheet1.Cells[loopCount, 8].Value = "Product Name";
                wsSheet1.Cells[loopCount, 9].Value = "CAT No";
                wsSheet1.Cells[loopCount, 10].Value = "CAS No";
                wsSheet1.Cells[loopCount, 11].Value = "Price 1";
                wsSheet1.Cells[loopCount, 12].Value = "Price 2";
                wsSheet1.Cells[loopCount, 13].Value = "Price 3";
                wsSheet1.Cells[loopCount, 14].Value = "Price 4";
                wsSheet1.Cells[loopCount, 15].Value = "Lead Time";
                using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 15])
                {
                    Rng.Style.Font.Bold = true;
                    Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                    Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                    Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    Rng.Style.Font.Color.SetColor(Color.White);
                    Rng.Style.WrapText = true;
                }
                loopCount = loopCount + 1;
                int srno = 1;
                List<int> quoteids = result.Select(x => x.QuoteId).Distinct().ToList();

                foreach (var qid in quoteids)
                {
                    int price1total = 0;
                    int price2total = 0;
                    int price3total = 0;
                    int price4total = 0;
                    var filteritem = result.Where(x => x.QuoteId == qid).ToList();
                    foreach (var item in filteritem)
                    {
                        if (item.MoveToProject.HasValue && item.MoveToProject.Value)
                        {
                            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 15])
                            {
                                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#43F7EF");
                                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                            }
                        }
                        List<string> pricedata = new List<string>();
                        if (!string.IsNullOrEmpty(item.Price))
                        {
                            pricedata = item.Price.Split(',').ToList();
                        }
                        wsSheet1.Cells[loopCount, 1].Value = srno;
                        wsSheet1.Cells[loopCount, 2].Value = item.CreatedDate.ToShortDateString();
                        wsSheet1.Cells[loopCount, 3].Value = item.SZ_Quotation.Ref;
                        wsSheet1.Cells[loopCount, 4].Value = item.SZ_Quotation.CountryType;
                        wsSheet1.Cells[loopCount, 5].Value = item.SZ_Quotation.CompanyName;
                        wsSheet1.Cells[loopCount, 6].Value = item.SZ_Quotation.EmailAddress;
                        wsSheet1.Cells[loopCount, 7].Value = item.SZ_Quotation.ClientRef;
                        wsSheet1.Cells[loopCount, 8].Value = item.ProductName;
                        wsSheet1.Cells[loopCount, 9].Value = item.CATNo;
                        wsSheet1.Cells[loopCount, 10].Value = item.CASNo;
                        if (pricedata != null && pricedata.Count > 0)
                        {
                            wsSheet1.Cells[loopCount, 11].Value = pricedata[0];
                            var price1str = pricedata[0].GetPriceFromPriceString();
                            if (!string.IsNullOrEmpty(price1str))
                            {
                                price1total += Convert.ToInt32(price1str);
                            }
                        }
                        else
                        {
                            wsSheet1.Cells[loopCount, 11].Value = "";
                        }
                        if (pricedata != null && pricedata.Count > 1)
                        {
                            wsSheet1.Cells[loopCount, 12].Value = pricedata[1];
                            var price2str = pricedata[1].GetPriceFromPriceString();
                            if (!string.IsNullOrEmpty(price2str))
                            {
                                price2total += Convert.ToInt32(price2str);
                            }
                        }
                        else
                        {
                            wsSheet1.Cells[loopCount, 12].Value = "";
                        }
                        if (pricedata != null && pricedata.Count > 2)
                        {
                            wsSheet1.Cells[loopCount, 13].Value = pricedata[2];
                            var price3str = pricedata[2].GetPriceFromPriceString();
                            if (!string.IsNullOrEmpty(price3str))
                            {
                                price3total += Convert.ToInt32(price3str);
                            }
                        }
                        else
                        {
                            wsSheet1.Cells[loopCount, 13].Value = "";
                        }
                        if (pricedata != null && pricedata.Count > 3)
                        {
                            wsSheet1.Cells[loopCount, 14].Value = pricedata[3];
                            var price4str = pricedata[3].GetPriceFromPriceString();
                            if (!string.IsNullOrEmpty(price4str))
                            {
                                price4total += Convert.ToInt32(price4str);
                            }
                        }
                        else
                        {
                            wsSheet1.Cells[loopCount, 14].Value = "";
                        }

                        wsSheet1.Cells[loopCount, 15].Value = item.LeadTime;

                        srno += 1;
                        loopCount += 1;
                    }

                    using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 15])
                    {
                        Rng.Style.Font.Bold = true;
                        Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                        Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                        Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        Rng.Style.Font.Color.SetColor(Color.White);
                    }
                    wsSheet1.Cells[loopCount, 1].Value = srno;
                    wsSheet1.Cells[loopCount, 2].Value = filteritem[0].SZ_Quotation.CreatedDate.Value.ToShortDateString();
                    wsSheet1.Cells[loopCount, 3].Value = filteritem[0].SZ_Quotation.Ref;
                    wsSheet1.Cells[loopCount, 4].Value = filteritem[0].SZ_Quotation.CountryType;
                    wsSheet1.Cells[loopCount, 5].Value = filteritem[0].SZ_Quotation.CompanyName;
                    wsSheet1.Cells[loopCount, 6].Value = filteritem[0].SZ_Quotation.EmailAddress;
                    wsSheet1.Cells[loopCount, 7].Value = filteritem[0].SZ_Quotation.ClientRef;
                    wsSheet1.Cells[loopCount, 8].Value = "-";
                    wsSheet1.Cells[loopCount, 9].Value = "-";
                    wsSheet1.Cells[loopCount, 10].Value = "-";
                    wsSheet1.Cells[loopCount, 11].Value = price1total;
                    wsSheet1.Cells[loopCount, 12].Value = price2total;
                    wsSheet1.Cells[loopCount, 13].Value = price3total;
                    wsSheet1.Cells[loopCount, 14].Value = price4total;
                    wsSheet1.Cells[loopCount, 15].Value = "-";
                    loopCount += 1;
                    srno += 1;
                }
            }

            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "FollowupReport-" + DateTime.Now.ToShortDateString().Replace("/", "_") + "-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("FollowupReport_" + DateTime.Now.ToShortDateString().Replace("#", "_") + ".xls"));

        }

        public ActionResult PrintFollowupReportPDF(int? CreatedBy, string Startdate, string Enddate)
        {
            var model = (from i in db.SZ_Quotation
                         join qd in db.SZ_QuotationDetail on i.Id equals qd.QuoteId
                         where i.IsFollowupRequired.HasValue && i.IsFollowupRequired == true
                          && (i.IsToBe == null || i.IsToBe == false) && (i.IsPark == false || i.IsPark == null) && !i.CompanyName.Contains("synzeal") && (i.IsRemoveFollowup == null || i.IsRemoveFollowup == false)
                          && string.IsNullOrEmpty(i.PONo)
                         select qd).ToList();
            string madeby = string.Empty;
            if (CreatedBy.HasValue)
            {
                model = model.Where(x => x.SZ_Quotation.CompanyId == CreatedBy).ToList();
            }
            if (!string.IsNullOrEmpty(Startdate))
            {
                DateTime sd = Convert.ToDateTime(Startdate);
                model = model.Where(x => x.CreatedDate.Date >= sd).ToList();
            }
            if (!string.IsNullOrEmpty(Enddate))
            {
                DateTime ed = Convert.ToDateTime(Enddate);
                model = model.Where(x => x.CreatedDate.Date <= ed).ToList();
            }

            var result = (from i in model
                          select i).Distinct().ToList();

            var htmlstring = PartialViewdata(this, "_PartialFollowupReport", result);
            string filename = "FollowupReport_" + DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss");
            htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";

            string path = printpdf(htmlstring, filename, false, true);
            return File(path, "application/pdf", Server.UrlEncode(filename + ".pdf"));
        }

        public string GetDaySuffix(int day)
        {
            switch (day)
            {
                case 1:
                case 21:
                case 31:
                    return "st";
                case 2:
                case 22:
                    return "nd";
                case 3:
                case 23:
                    return "rd";
                default:
                    return "th";
            }
        }
        public string printpdf(string html, string LessonOrder_id, bool isReturnPath = false, bool isLandscap = false)
        {
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/");

            //Create a new stylesheet
            iTextSharp.text.html.simpleparser.StyleSheet ST = new iTextSharp.text.html.simpleparser.StyleSheet();
            //Set the default body font to our registered font's internal name
            ST.LoadTagStyle(iTextSharp.text.html.HtmlTags.LI, iTextSharp.text.html.HtmlTags.FACE, "Verdana");
            ST.LoadTagStyle(iTextSharp.text.html.HtmlTags.LI, iTextSharp.text.html.HtmlTags.COLOR, "5c5c5c");
            ST.LoadTagStyle(iTextSharp.text.html.HtmlTags.LI, iTextSharp.text.html.HtmlTags.SIZE, "2");

            ST.LoadTagStyle(iTextSharp.text.html.HtmlTags.TABLE, iTextSharp.text.html.HtmlTags.FACE, "Verdana");
            ST.LoadTagStyle(iTextSharp.text.html.HtmlTags.TABLE, iTextSharp.text.html.HtmlTags.COLOR, "5c5c5c");
            ST.LoadTagStyle(iTextSharp.text.html.HtmlTags.TABLE, iTextSharp.text.html.HtmlTags.SIZE, "2");
            ST.LoadStyle("innertbl > table", "border", "1px solid #5c5c5c");
            ST.LoadStyle("innertbl > table", "margin", "0 0 0 20px");

            if (System.IO.File.Exists(filePath + "\\" + LessonOrder_id + ".pdf"))
            {
                try
                {
                    System.IO.File.Delete(filePath + "\\" + LessonOrder_id + ".pdf");
                }
                catch (Exception)
                {
                    if (isReturnPath)
                    {
                        return "/Content/Quotation/" + LessonOrder_id + ".pdf";
                    }
                    return filePath + "\\" + LessonOrder_id + ".pdf";
                }
            }

            string htmlText = html.ToString().Replace("\"", "'").Replace("<hr style='height: 3px; border: none; background-color: #6AACE1;' />", "").Replace("<hr style='padding-left: 15px;' />", "");
            Document document = new Document();
            document = new Document(iTextSharp.text.PageSize.A4, 15, 15, 15, 15);

            if (isLandscap)
            {
                document.SetPageSize(iTextSharp.text.PageSize.A4.Rotate());
            }
            FontFactory.GetFont("Verdana", 50, iTextSharp.text.BaseColor.BLUE);
            if (System.IO.File.Exists(filePath + "\\" + LessonOrder_id + ".pdf"))
            {
                System.IO.File.Delete(filePath + "\\" + LessonOrder_id + ".pdf");
            }

            PdfWriter.GetInstance(document, new FileStream(filePath + "\\" + LessonOrder_id + ".pdf", FileMode.Create));

            document.Open();

            using (TextReader htmlViewReader = new StringReader(htmlText))
            {
                using (var htmlWorker = new HTMLWorkerExtended(document))
                {
                    htmlWorker.Open();
                    htmlWorker.Parse(htmlViewReader);
                }
            }

            document.Close();

            if (isReturnPath)
            {
                return "/Content/Quotation/" + LessonOrder_id + ".pdf";
            }
            return filePath + "\\" + LessonOrder_id + ".pdf";

        }

        public string printpdfsecondway(string html, string LessonOrder_id)
        {
            //Create a byte array that will eventually hold our final PDF
            Byte[] bytes;
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/");

            //Boilerplate iTextSharp setup here
            //Create a stream that we can write to, in this case a MemoryStream
            using (var ms = new MemoryStream())
            {

                //Create an iTextSharp Document which is an abstraction of a PDF but **NOT** a PDF

                using (var doc = new Document())
                {

                    //Create a writer that's bound to our PDF abstraction and our stream
                    using (var writer = PdfWriter.GetInstance(doc, new FileStream(filePath + "\\" + LessonOrder_id + ".pdf", FileMode.Create)))
                    {

                        //Open the document for writing
                        doc.Open();

                        //Our sample HTML and CSS
                        var example_html = html;
                        var example_css = @"#page_1 #p1dimg1,#page_1 #p1dimg1 #p1img1{width:816px;height:529px}#page_1,#page_1 #id_1,#page_1 #id_1 #id_1_1,#page_1 #id_1 #id_1_2,#page_1 #id_2,#page_1 #id_3,.dclr{padding:0;overflow:hidden}.ft0,.ft14,.ft15,.ft4{text-decoration:underline}.td0,.td1,.td2,.td3,.td4,.td5{vertical-align:bottom}body{margin-top:0;margin-left:0}#page_1{position:relative;margin:10px 0 105px;border:none;width:816px}#page_1 #id_1{margin:5px 0 0 238px;border:none;width:578px}#page_1 #id_1 #id_1_1{float:left;margin:0;border:none;width:398px}#page_1 #id_1 #id_1_2{float:left;margin:30px 0 0;border:none;width:180px}#page_1 #id_2{margin:14px 0 0 13px;border:none;width:803px}#page_1 #id_3{margin:43px 0 0 47px;border:none;width:696px}.p0,.p1,.p2,.p3,.p4,.p5,.p6,.p7{margin-bottom:0;text-align:left}.td10,.td23{border-bottom:#000 1px solid}#page_1 #p1dimg1{position:absolute;top:0;left:0;z-index:-1}.dclr{clear:both;float:none;height:1px;margin:0}.ft0{font:37px Calibri;line-height:42px}.ft1{font:19px Calibri;line-height:23px}.ft2{font:9px Calibri;line-height:11px;position:relative;bottom:5px}.ft3{font:15px Calibri;line-height:18px}.ft4{font:700 19px Calibri;line-height:23px}.ft5{font:16px Calibri;line-height:19px}.ft6{font:700 15px Calibri;line-height:18px}.ft7{font:1px Calibri;line-height:1px}.ft14,.ft8{font:700 15px Calibri}.ft8{line-height:16px}.ft9{font:1px Calibri;line-height:8px}.ft10{font:700 27px Calibri;line-height:33px}.ft11,.ft17{font:1px Calibri}.ft11{line-height:9px}.ft12{font:700 14px Calibri;line-height:17px}.ft13{font:15px Wingdings;line-height:16px}.ft14{margin-left:11px;line-height:18px}.ft15{font:700 15px Calibri;line-height:18px}.ft16{font:15px 'Times New Roman';line-height:17px}.ft17{line-height:10px}.ft18{font:1px Calibri;line-height:11px}.p0{margin-top:0}.p1{padding-left:46px;margin-top:10px}.p2{padding-left:45px;margin-top:0}.p3{margin-top:6px}.p4{padding-left:294px;margin-top:0}.p5{padding-left:312px;margin-top:1px}.p6{padding-left:59px;margin-top:43px}.p7{margin-top:0;white-space:nowrap}.p8{text-align:left;padding-left:105px;margin-top:0;margin-bottom:0;white-space:nowrap}.p10,.p9{text-align:right;margin-top:0;white-space:nowrap;margin-bottom:0}.p9{padding-right:18px}.p10{padding-right:20px}.p11{text-align:left;padding-left:174px;margin-top:0;margin-bottom:0;white-space:nowrap}.p12{text-align:right;padding-right:17px;margin-top:0;margin-bottom:0;white-space:nowrap}.p13,.p14{text-align:center;margin-top:0;white-space:nowrap}.p13{padding-left:18px;margin-bottom:0}.p14{padding-left:17px;margin-bottom:0}.p15,.p16,.p17{text-align:left;margin-bottom:0}.p15{padding-left:35px;margin-top:47px}.p16{padding-left:1px;margin-top:0;white-space:nowrap}.p17{padding-left:35px;margin-top:18px}.p18,.p19{text-align:left;padding-left:83px}.p18{margin-top:1px;margin-bottom:0}.p19{margin-top:3px;margin-bottom:0}.p20,.p21,.p22{text-align:left;margin-top:0;margin-bottom:0;white-space:nowrap}.p20{padding-left:43px}.p21{padding-left:66px}.p22{padding-left:59px}.td0,.td1,.td2,.td3,.td4,.td5,.td6{padding:0;margin:0}.td0{width:0}.td1{width:85px}.td2{width:49px}.td3{width:652px}.td4{width:141px}.td5{width:511px}.td6{border-right:#000 1px solid;width:140px;vertical-align:bottom}.td7,.td8{width:510px;border-right:#000 1px solid;padding:0;margin:0;vertical-align:bottom}.td7{border-top:#000 1px solid}.td9{padding:0;margin:0;width:134px;vertical-align:bottom}.td10{border-right:#000 1px solid;padding:0;margin:0;width:510px;vertical-align:bottom}.td11{padding:0;margin:0;width:87px;vertical-align:bottom}.td12{padding:0;margin:0;width:47px;vertical-align:bottom}.td13{padding:0;margin:0;width:630px;vertical-align:bottom}.td14{padding:0;margin:0;width:24px;vertical-align:bottom}.td15{padding:0;margin:0;width:168px;vertical-align:bottom}.td16{padding:0;margin:0;width:9px;vertical-align:bottom}.td17{padding:0;margin:0;width:189px;vertical-align:bottom}.td18{padding:0;margin:0;width:8px;vertical-align:bottom}.td19{padding:0;margin:0;width:165px;vertical-align:bottom}.td20{padding:0;margin:0;width:184px;vertical-align:bottom}.td21{padding:0;margin:0;width:81px;vertical-align:bottom}.td22{padding:0;margin:0;width:63px;vertical-align:bottom}.td23{padding:0;margin:0;width:184px;vertical-align:bottom}.tr0{height:16px}.tr1{height:8px}.tr2{height:34px}.tr3{height:35px}.tr4{height:37px}.tr5{height:28px}.tr6{height:54px}.tr7{height:26px}.tr8{height:9px}.tr9{height:30px}.tr10{height:33px}.tr11{height:18px}.tr12{height:20px}.tr13{height:19px}.tr14{height:24px}.tr15{height:10px}.tr16{height:11px}.t0{width:786px;margin-left:4px;font:700 15px Calibri}.t2,.t3{margin-left:83px}.t1{width:764px;margin-top:13px;font:700 14px Calibri}.t2,.t3,.t4{font:15px Calibri}.t2{width:201px}.t3{width:197px}.t4{width:696px}";

                        /**************************************************
                         * Example #1                                     *
                         *                                                *
                         * Use the built-in HTMLWorker to parse the HTML. *
                         * Only inline CSS is supported.                  *
                         * ************************************************/

                        //Create a new HTMLWorker bound to our document
                        using (var htmlWorker = new iTextSharp.text.html.simpleparser.HTMLWorker(doc))
                        {

                            //HTMLWorker doesn't read a string directly but instead needs a TextReader (which StringReader subclasses)
                            using (var sr = new StringReader(example_html))
                            {

                                //Parse the HTML
                                htmlWorker.Parse(sr);
                            }
                        }

                        /**************************************************
                         * Example #2                                     *
                         *                                                *
                         * Use the XMLWorker to parse the HTML.           *
                         * Only inline CSS and absolutely linked          *
                         * CSS is supported                               *
                         * ************************************************/

                        //XMLWorker also reads from a TextReader and not directly from a string
                        using (var srHtml = new StringReader(example_html))
                        {

                            //Parse the HTML
                            iTextSharp.tool.xml.XMLWorkerHelper.GetInstance().ParseXHtml(writer, doc, srHtml);
                        }

                        /**************************************************
                         * Example #3                                     *
                         *                                                *
                         * Use the XMLWorker to parse HTML and CSS        *
                         * ************************************************/

                        //In order to read CSS as a string we need to switch to a different constructor
                        //that takes Streams instead of TextReaders.
                        //Below we convert the strings into UTF8 byte array and wrap those in MemoryStreams
                        using (var msCss = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(example_css)))
                        {
                            using (var msHtml = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(example_html)))
                            {

                                //Parse the HTML
                                iTextSharp.tool.xml.XMLWorkerHelper.GetInstance().ParseXHtml(writer, doc, msHtml, msCss);
                            }
                        }


                        doc.Close();
                    }
                }

                //After all of the PDF "stuff" above is done and closed but **before** we
                //close the MemoryStream, grab all of the active bytes from the stream
                bytes = ms.ToArray();
            }

            //Now we just need to do something with those bytes.
            //Here I'm writing them to disk but if you were in ASP.Net you might Response.BinaryWrite() them.
            //You could also write the bytes to a database in a varbinary() column (but please don't) or you
            //could pass them to another function for further PDF processing.
            // var testFile = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "test.pdf");
            System.IO.File.WriteAllBytes(filePath + "\\" + LessonOrder_id + ".pdf", bytes);
            return filePath + "\\" + LessonOrder_id + ".pdf";
        }

        public string PartialViewdata(Controller controller, string viewName, object model)
        {
            controller.ViewData.Model = model;

            using (var sw = new StringWriter())
            {
                var viewResult = ViewEngines.Engines.FindPartialView(controller.ControllerContext, viewName);
                var viewContext = new ViewContext(controller.ControllerContext, viewResult.View, controller.ViewData, controller.TempData, sw);

                viewResult.View.Render(viewContext, sw);
                viewResult.ViewEngine.ReleaseView(controller.ControllerContext, viewResult.View);

                return sw.ToString();
            }
        }

        public ActionResult Quotation(int id = 0, bool isclubquote = false)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }

            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_Terms.ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.termsList = listItems;

            var listCompItems = new List<SelectListItem>();
            listCompItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var compData = db.SZ_CompanyList.OrderBy(x => x.Name).ToList();
            foreach (var term in compData)
            {
                listCompItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.listCompItems = listCompItems;

            var model = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
            {
                model = new SZ_Quotation();
                model.PODate = DateTime.Now;
            }

            ViewBag.IsClubQuote = isclubquote;
            ViewBag.QuoteId = id;

            return View(model);
        }

        public ActionResult CompanyDetailDashboard(int id)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsQuote)
            {
                return RedirectToAction("Index", "Home");
            }

            ViewBag.CompanyId = id;
            ViewBag.CompanyName = db.SZ_CompanyList.Where(x => x.Id == id).Select(x => x.Name).FirstOrDefault();
            var categorylist = db.Categories.Where(x => x.ParentCategoryId == 0).ToList();
            var allProList = (from c in db.Categories
                              join cp in db.Product_Category_Mapping on c.Id equals cp.CategoryId
                              join p in db.Products on cp.ProductId equals p.Id
                              join i in db.SZ_Inventory on p.Id equals i.ProductId
                              join qd in db.SZ_QuoteDetailForm on i.BatchNo equals qd.BatchCode
                              join t3 in db.SZ_QuoteDetails_Form on qd.Id equals t3.FormId
                              join qdd in db.SZ_QuotationDetail on t3.QuoteDetailsId equals qdd.Id
                              join q in db.SZ_Quotation on qdd.QuoteId equals q.Id
                              where q.CompanyId == id
                              orderby qdd.CreatedDate descending
                              select new ScientistDetailDashboardModel()
                              {
                                  ScientistName = qd.ScientistName,
                                  ParentCategoryId = c.ParentCategoryId,
                                  DiffLevel = p.DifficultyLevel,
                                  ProductName = qd.ProductName,
                                  QuantityDemand = qdd.RequiredQty,
                                  Quantity = qd.Qty,
                                  SubmitedDate = qd.CreatedDate,
                                  ScientistDate = qdd.MoveToScientistDate,
                                  //Duration = SZ_Helper.GetStringDateDiffrance(qdd.MoveToScientistDate.Value, qd.CreatedDate),
                                  QuotedLeadTime = qdd.LeadTime,
                                  PONumber = qdd.SZ_Quotation.PONo,
                                  FinalRoute = qd.NoOfFinalStep,
                                  EarlierSynthesized = qd.EarlierSynthesized,
                                  PurificationBy = qd.PurificationBy,
                                  APIcategory = c.Name,
                                  SpeDataAttachment = qd.SpectralDataAttachment
                              }).ToList();

            foreach (var item in allProList)
            {
                if (item.ScientistDate.HasValue)
                {
                    item.Duration = SZ_Helper.GetStringDateDiffrance(item.ScientistDate.Value, item.SubmitedDate);
                }
                item.APIcategory = categorylist.Where(x => x.Id == item.ParentCategoryId).Select(x => x.Name).FirstOrDefault();
                if (item.SpeDataAttachment != null)
                {
                    item.SpeDataAttachment = "<a download href='" + item.SpeDataAttachment.Replace("..", "") + "' ><i class='fa fa-download'></i></a>";
                }
            }

            return View(allProList);
        }

        public ActionResult LoadCompanyDetailDashboard(int id)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                int? recordsTotal = 0;
                var categorylist = db.Categories.Where(x => x.ParentCategoryId == 0).ToList();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var sid = scienList.Where(x => x == id).FirstOrDefault();
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == sid).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                ViewBag.ScientistName = customerName;

                customerName = customerName.ToLower().Trim();
                var allProList = (from c in db.Categories
                                  join cp in db.Product_Category_Mapping on c.Id equals cp.CategoryId
                                  join p in db.Products on cp.ProductId equals p.Id
                                  join i in db.SZ_Inventory on p.Id equals i.ProductId
                                  join qd in db.SZ_QuoteDetailForm on i.BatchNo equals qd.BatchCode
                                  join t3 in db.SZ_QuoteDetails_Form on qd.Id equals t3.FormId
                                  join qdd in db.SZ_QuotationDetail on t3.QuoteDetailsId equals qdd.Id
                                  join q in db.SZ_Quotation on qdd.QuoteId equals q.Id
                                  where q.CompanyId == id
                                  orderby qdd.CreatedDate descending
                                  select new ScientistDetailDashboardModel()
                                  {
                                      ScientistName = qd.ScientistName,
                                      DiffLevel = qdd.DifficultyLevel,
                                      ProductName = qd.ProductName,
                                      QuantityDemand = qdd.RequiredQty,
                                      Quantity = qd.Qty,
                                      SubmitedDate = qd.CreatedDate,
                                      ScientistDate = qdd.MoveToScientistDate,
                                      //Duration = SZ_Helper.GetStringDateDiffrance(qdd.MoveToScientistDate.Value, qd.CreatedDate),
                                      QuotedLeadTime = qdd.LeadTime,
                                      PONumber = qdd.SZ_Quotation.PONo,
                                      FinalRoute = qd.NoOfFinalStep,
                                      EarlierSynthesized = qd.EarlierSynthesized,
                                      PurificationBy = qd.PurificationBy,
                                      APIcategory = c.Name,
                                      SpeDataAttachment = qd.SpectralDataAttachment,
                                  }).ToList();


                foreach (var item in allProList)
                {
                    if (item.ScientistDate.HasValue)
                    {
                        item.Duration = SZ_Helper.GetStringDateDiffrance(item.ScientistDate.Value, item.SubmitedDate);
                    }
                    item.APIcategory = categorylist.Where(x => x.Id == item.ParentCategoryId).Select(x => x.Name).FirstOrDefault();
                    if (item.SpeDataAttachment != null)
                    {
                        item.SpeDataAttachment = "<a download href='" + item.SpeDataAttachment.Replace("..", "") + "' ><i class='fa fa-download'></i></a>";
                    }
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    allProList = allProList.Where(m => (m.ScientistName != null && m.ScientistName.ToLower().Contains(searchValue)) ||
                                            (m.SubmitedDateText != null && m.SubmitedDateText.ToLower().Contains(searchValue)) ||
                                            (m.SubScientistName != null && m.SubScientistName.ToLower().Contains(searchValue)) ||
                                            (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue)) ||
                                            (m.Quantity != null && m.Quantity.ToLower().Contains(searchValue)) ||
                                             (m.QuantityDemand != null && m.QuantityDemand.ToLower().Contains(searchValue)) ||
                                             (m.QuotedLeadTime != null && m.QuotedLeadTime.ToLower().Contains(searchValue)) ||
                                             (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue)) ||
                                             (m.EarlierSynthesized != null && m.EarlierSynthesized.ToLower().Contains(searchValue)) ||
                                             (m.Duration != null && m.Duration.ToLower().Contains(searchValue)) ||
                                             (m.PurificationBy != null && m.PurificationBy.ToLower().Contains(searchValue))
                                       ).ToList();
                }

                var allRecords = allProList;
                recordsTotal = allProList.Count();
                allProList = allProList.Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();

                var jsonResult = Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = allProList, allRecords = allRecords }, JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult ScientistDashboardDetail(int id)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsQuote)
            {
                return RedirectToAction("Index", "Home");
            }
            ViewBag.ScientistId = id;
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });

            string customerName = string.Empty;
            var genericAttr = genericData.Where(x => x.EntityId == id).ToList();
            if (genericAttr.Count > 0)
            {
                customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
            }
            ViewBag.ScientistName = customerName;

            return View(new List<ScientistDetailDashboardModel>());
        }

        public ActionResult saveEmailTotal(int totalemail, int days)
        {
            var startDate = new DateTime();
            var endDate = new DateTime();
            if (days == 1)
            {
                startDate = DateTime.Now.AddDays(-1);
                endDate = DateTime.Now.AddDays(-1);
            }
            else
            {
                startDate = DateTime.Now;
                endDate = DateTime.Now;
            }
            TimeSpan duration = new TimeSpan(0, 0, 0);
            TimeSpan endduration = new TimeSpan(23, 59, 59);
            startDate = startDate.Date + duration;
            endDate = endDate.Date + endduration;
            var quotesummarycurrent = db.SZ_QuoteSummary.Where(x => x.Username == "Total" && x.StartDate >= startDate && x.EndDate <= endDate).FirstOrDefault();
            if (quotesummarycurrent != null)
            {
                //Update
                quotesummarycurrent.Clarification = totalemail;
                db.Entry<SZ_QuoteSummary>(quotesummarycurrent).State = EntityState.Modified;
                db.SaveChanges();
            }
            else
            {
                //Insert
                quotesummarycurrent = new SZ_QuoteSummary();
                quotesummarycurrent.UserId = 0;
                quotesummarycurrent.Username = "Total";
                quotesummarycurrent.StartDate = startDate;
                quotesummarycurrent.EndDate = startDate;
                quotesummarycurrent.UpdatedUsername = SessionCookieManagement.UserName;
                quotesummarycurrent.Clarification = totalemail;
                db.Entry<SZ_QuoteSummary>(quotesummarycurrent).State = EntityState.Added;
                db.SaveChanges();
            }

            return Json("success", JsonRequestBehavior.AllowGet);
        }


        public ActionResult saveRegrettedTotal(int totalRegretted, int days)
        {
            var startDate = new DateTime();
            var endDate = new DateTime();
            if (days == 1)
            {
                startDate = DateTime.Now.AddDays(-1);
                endDate = DateTime.Now.AddDays(-1);
            }
            else
            {
                startDate = DateTime.Now;
                endDate = DateTime.Now;
            }
            TimeSpan duration = new TimeSpan(0, 0, 0);
            TimeSpan endduration = new TimeSpan(23, 59, 59);
            startDate = startDate.Date + duration;
            endDate = endDate.Date + endduration;
            var quotesummarycurrent = db.SZ_QuoteSummary.Where(x => x.Username == "Regretted" && x.StartDate >= startDate && x.EndDate <= endDate).FirstOrDefault();
            if (quotesummarycurrent != null)
            {
                //Update
                quotesummarycurrent.Clarification = totalRegretted;
                db.Entry<SZ_QuoteSummary>(quotesummarycurrent).State = EntityState.Modified;
                db.SaveChanges();
            }
            else
            {
                //Insert
                quotesummarycurrent = new SZ_QuoteSummary();
                quotesummarycurrent.UserId = 0;
                quotesummarycurrent.Username = "Regretted";
                quotesummarycurrent.StartDate = startDate;
                quotesummarycurrent.EndDate = startDate;
                quotesummarycurrent.UpdatedUsername = SessionCookieManagement.UserName;
                quotesummarycurrent.Clarification = totalRegretted;
                db.Entry<SZ_QuoteSummary>(quotesummarycurrent).State = EntityState.Added;
                db.SaveChanges();
            }

            return Json("success", JsonRequestBehavior.AllowGet);
        }


        public ActionResult Editsummary(int userid, int days, int clarification = 0, int upload = 0, int complex = 0/*, int regretted = 0*/)
        {
            var startDate = new DateTime();
            var endDate = new DateTime();
            if (days == 1)
            {
                startDate = DateTime.Now.AddDays(-1);
                endDate = DateTime.Now.AddDays(-1);
            }
            else
            {
                startDate = DateTime.Now;
                endDate = DateTime.Now;
            }
            TimeSpan duration = new TimeSpan(0, 0, 0);
            TimeSpan endduration = new TimeSpan(23, 59, 59);
            startDate = startDate.Date + duration;
            endDate = endDate.Date + endduration;
            var quotesummarycurrent = db.SZ_QuoteSummary.Where(x => x.UserId == userid && x.StartDate >= startDate && x.EndDate <= endDate).FirstOrDefault();
            if (quotesummarycurrent != null)
            {
                //Update
                quotesummarycurrent.Clarification = clarification;
                quotesummarycurrent.Upload = upload;
                quotesummarycurrent.Complex = complex;
                //quotesummarycurrent.Regretted = regretted;
                db.Entry<SZ_QuoteSummary>(quotesummarycurrent).State = EntityState.Modified;
                db.SaveChanges();
            }
            else
            {
                MemoryCacheManager objCache = new MemoryCacheManager();

                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                });
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == userid).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                //Insert
                quotesummarycurrent = new SZ_QuoteSummary();
                quotesummarycurrent.UserId = userid;
                quotesummarycurrent.Username = customerName;
                quotesummarycurrent.StartDate = startDate;
                quotesummarycurrent.EndDate = startDate;
                quotesummarycurrent.UpdatedUsername = SessionCookieManagement.UserName;
                quotesummarycurrent.Clarification = clarification;
                quotesummarycurrent.Upload = upload;
                quotesummarycurrent.Complex = complex;
                //quotesummarycurrent.Regretted = regretted;
                db.Entry<SZ_QuoteSummary>(quotesummarycurrent).State = EntityState.Added;
                db.SaveChanges();
            }

            return Json("success", JsonRequestBehavior.AllowGet);
        }

        public ActionResult LoadScientistDashboardDetail(int id)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                int? recordsTotal = 0;
                var categorylist = db.Categories.Where(x => x.ParentCategoryId == 0).ToList();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                var sid = scienList.Where(x => x == id).FirstOrDefault();
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == sid).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                ViewBag.ScientistName = customerName;
                var customerdata = db.Customers.Where(x => x.Active == true && x.Deleted == false).ToList();

                customerName = customerName.ToLower().Trim();
                var allProList = (from c in db.Categories
                                  join cp in db.Product_Category_Mapping on c.Id equals cp.CategoryId
                                  join p in db.Products on cp.ProductId equals p.Id
                                  join i in db.SZ_Inventory on p.Id equals i.ProductId
                                  join qd in db.SZ_QuoteDetailForm on i.BatchNo equals qd.BatchCode
                                  join t3 in db.SZ_QuoteDetails_Form on qd.Id equals t3.FormId
                                  join qdd in db.SZ_QuotationDetail on t3.QuoteDetailsId equals qdd.Id
                                  where qdd.ScientistCustomerId == id
                                  && (qd.IsDispatchedEntry == false || qd.IsDispatchedEntry == null)
                                  orderby qd.SubmissionDate descending
                                  select new ScientistDetailDashboardModel()
                                  {
                                      CASNO = qd.CASNo,
                                      CATNo = qd.CATNo,
                                      ScientistName = qd.ScientistName,
                                      DiffLevel = qdd.DifficultyLevel,
                                      ProductName = qd.ProductName,
                                      QuantityDemand = qdd.RequiredQty,
                                      Quantity = qd.Qty,
                                      SubmitedDate = qd.SubmissionDate,
                                      ScientistDate = qdd.MoveToScientistDate,
                                      SubScientistName = qdd.SubScientistName,
                                      Chemist = qdd.Chemist,
                                      //Duration = SZ_Helper.GetStringDateDiffrance(qdd.MoveToScientistDate.Value, qd.CreatedDate),
                                      QuotedLeadTime = qdd.LeadTime,
                                      PONumber = qdd.SZ_Quotation.PONo,
                                      PODate = qdd.SZ_Quotation.PODate,
                                      FinalRoute = qd.NoOfFinalStep,
                                      EarlierSynthesized = qd.EarlierSynthesized,
                                      PurificationBy = qd.PurificationBy,
                                      APIcategory = c.Name,
                                      SpeDataAttachment = qd.SpectralDataAttachment,
                                  }).ToList();


                foreach (var item in allProList)
                {
                    item.CATNoText = "<a href='https://synzeal.com/search?q=" + item.CATNo + "' target='_blank'>" + item.CATNo + "</a>";
                    item.FirstRaw = "<input type='checkbox' class='chksave' value='" + item.QuotationDetailsId + "' />";
                    if (item.PODate.HasValue)
                    {
                        // item.Duration = SZ_Helper.GetStringDateDiffrance(item.ScientistDate.Value, item.SubmitedDate);
                        item.Duration = SZ_Helper.GetStringDateDiffrance(item.PODate.Value, item.SubmitedDate);
                    }
                    item.SubmitedDateText = item.SubmitedDate.ToShortDateString();
                    item.APIcategory = categorylist.Where(x => x.Id == item.ParentCategoryId).Select(x => x.Name).FirstOrDefault();

                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        if (Convert.ToString(val) == item.DiffLevel)
                        {
                            item.DiffLevelText = text;
                        }
                    }
                    if (item.SpeDataAttachment != null)
                    {
                        item.SpeDataAttachment = "<a download href='" + item.SpeDataAttachment.Replace("..", "") + "' ><i class='fa fa-download'></i></a>";
                    }

                    if (!string.IsNullOrEmpty(item.SubScientistName))
                    {
                        var isNumeric = System.Text.RegularExpressions.Regex.IsMatch(item.SubScientistName, @"\d");
                        if (isNumeric)
                        {
                            int subsciId = 0;
                            if (Int32.TryParse(item.SubScientistName, out int j))
                            {
                                subsciId = j;
                                var customer = customerdata.Where(x => x.Id == subsciId).FirstOrDefault();
                                if (customer != null)
                                {
                                    string customersName = string.Empty;
                                    var genericsAttr = genericData.Where(x => x.EntityId == customer.Id).ToList();
                                    if (genericsAttr.Count > 0)
                                    {
                                        customersName = genericsAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericsAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                                    }
                                    item.SubScientistName = customersName;
                                }
                            }
                        }
                    }
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    allProList = allProList.Where(m => (m.ScientistName != null && m.ScientistName.ToLower().Contains(searchValue)) ||
                                            (m.SubmitedDateText != null && m.SubmitedDateText.ToLower().Contains(searchValue)) ||
                                            (m.SubScientistName != null && m.SubScientistName.ToLower().Contains(searchValue)) ||
                                            (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue)) ||
                                            (m.Quantity != null && m.Quantity.ToLower().Contains(searchValue)) ||
                                             (m.QuantityDemand != null && m.QuantityDemand.ToLower().Contains(searchValue)) ||
                                             (m.QuotedLeadTime != null && m.QuotedLeadTime.ToLower().Contains(searchValue)) ||
                                             (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue)) ||
                                             (m.EarlierSynthesized != null && m.EarlierSynthesized.ToLower().Contains(searchValue)) ||
                                             (m.Duration != null && m.Duration.ToLower().Contains(searchValue)) ||
                                             (m.PurificationBy != null && m.PurificationBy.ToLower().Contains(searchValue))
                                       ).ToList();
                }

                var allRecords = allProList;
                recordsTotal = allProList.Count();
                allProList = allProList.Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();

                var jsonResult = Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = allProList, allRecords = allRecords }, JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult TodayDashboard()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            if (!SessionCookieManagement.IsAdmin &&
                !SessionCookieManagement.IsQuote)
            {
                return RedirectToAction("Index", "Home");
            }
            string synthesisProjectType = Convert.ToString((int)EnumList.ProjectType.Synthesis);
            string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
            ViewBag.SynthesisCatNo = (from cp in db.SZ_QuotationDetail
                                      where (cp.ProjectType == synthesisProjectType || cp.ProjectType == pursynthesisProjectType)
                                      && (cp.MoveToDispatch == false || cp.MoveToDispatch == null)
                                      select cp.CATNo).Distinct().ToList();

            DateTime date = DateTime.Now.AddDays(-7);
            ViewBag.Reviewed = db.SZ_Quotation.Where(x => x.IsReviewed == true && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) && x.CreatedDate >= date).OrderBy(x => x.CompanyName).ToList();

            ViewBag.Instock = db.SZ_Quotation.Where(x => (x.IsShowDashboard == true && x.IsInstock == true) || (x.IsInstock == true && (x.IsReviewed == false || x.IsReviewed == null) && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) && x.CreatedDate >= date)).OrderBy(x => x.CompanyName).ToList();
            ViewBag.CustomSynthesis = db.SZ_Quotation.Where(x => (x.IsShowDashboard == true && x.IsCustomSynthesis == true) || x.IsCustomSynthesis == true && (x.IsReviewed == false || x.IsReviewed == null) && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) && x.CreatedDate >= date).OrderBy(x => x.CompanyName).ToList();
            //ViewBag.Approved = db.SZ_Quotation.Where(x => x.IsQuoteApproved == true && (x.IsPark == false || x.IsPark == null) && x.CreatedDate >= date).ToList();

            ViewBag.Approved = (from c in db.SZ_Quotation
                                join cp in db.SZ_QuotationDetail on c.Id equals cp.QuoteId
                                where c.IsQuoteApproved == true && (c.IsPark == false || c.IsPark == null) && c.CreatedDate >= date
                                && (cp.IsSynthesisLog != true || cp.IsSynthesisLog == null)
                                 && (c.IsReviewed == false || c.IsReviewed == null)
                                select c).Distinct().OrderBy(x => x.CompanyName).ToList();

            DateTime crateddate = DateTime.Now.AddDays(-2);

            ViewBag.QuotationList = (from q in db.SZ_Quotation
                                     where q.CreatedDate >= crateddate && (q.IsToBe == null || q.IsToBe == false) && (q.IsQuoteApproved == false || q.IsQuoteApproved == null) && (q.IsPark == false || q.IsPark == null) && !q.CompanyName.Contains("synzeal")
                                     select q).Distinct().OrderBy(x => x.CompanyName).ToList();

            List<MonthWiseUserDashboardDto> mainmodel = new List<MonthWiseUserDashboardDto>();
            var startDate = DateTime.Now;
            var endDate = DateTime.Now;
            while (startDate <= endDate)
            {
                List<UserDashboardDto> model = new List<UserDashboardDto>();
                int month = startDate.Month;
                int year = startDate.Year;
                var datas = db.SZ_UserDashboard.Where(x => x.Month == month && x.Year == year).ToList();
                foreach (var item in datas)
                {
                    UserDashboardDto objModel = new UserDashboardDto();
                    objModel.Username = item.UserName;
                    objModel.AllDetails = item.AllDetails;
                    objModel.WithoutCatNo = item.WithoutCatNo;
                    objModel.WithoutCasNo = item.WithoutCasNo;
                    objModel.WithoutPrice = item.WithoutPrice;
                    objModel.TotalAdded = item.TotalAdded;
                    objModel.RevisionCatNo = item.CatNoRevision;
                    objModel.RevisionCasNo = item.CASNoRevision;
                    objModel.RevisionPrice = item.PriceRevision;
                    objModel.TotalRevisionProduct = item.TotalRevisionProduct;
                    model.Add(objModel);
                }

                MonthWiseUserDashboardDto objMainModel = new MonthWiseUserDashboardDto();
                objMainModel.MonthName = startDate.ToShortMonthName();
                objMainModel.Year = startDate.Year;
                objMainModel.UserDashboardModel = model.OrderByDescending(x => x.TotalAdded).ToList();
                mainmodel.Add(objMainModel);
                // do something with target.Month and target.Year
                startDate = startDate.AddMonths(1);
            }

            TimeSpan duration = new TimeSpan(22, 30, 0);
            TimeSpan durationend = new TimeSpan(22, 30, 0);
            var startDatesummary = DateTime.Now.AddDays(-2);
            var endstartDatesummary = DateTime.Now.AddDays(-1);
            startDatesummary = startDatesummary.Date + duration;
            endstartDatesummary = endstartDatesummary.Date + durationend;
            var endDatesummary = DateTime.Now.AddDays(-1);
            var startendDatesummary = DateTime.Now;
            startendDatesummary = startendDatesummary.Date + durationend;
            endDatesummary = endDatesummary.Date + duration;
            var listBDItems = new List<SelectListItem>();
            var quoteUserList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("quote")).ToList();
            foreach (var term in quoteUserList)
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listBDItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.TotalOfEmail = db.SZ_QuoteSummary.Where(x => x.Username == "Total" && x.StartDate >= startDatesummary && x.EndDate <= endstartDatesummary).Select(x => x.Clarification).FirstOrDefault();
            ViewBag.TotalOfRegretted = db.SZ_QuoteSummary.Where(x => x.Username == "Regretted" && x.StartDate >= startDatesummary && x.EndDate <= endstartDatesummary).Select(x => x.Clarification).FirstOrDefault();
            var quotesummary = db.SZ_QuoteSummary.Where(x => x.StartDate >= startDatesummary && x.EndDate <= endstartDatesummary).ToList();
            var listofquotedetails = new List<UserDashboardSummaryDto>();
            foreach (var item in listBDItems)
            {
                var quoteData = db.SZ_Quotation.Where(x => x.CreatedDate != null && x.CreatedDate >= startDatesummary && x.CreatedDate <= endstartDatesummary && x.CreatedBy.ToLower().Trim() == item.Text.ToLower().Trim()).ToList();
                UserDashboardSummaryDto objsummaryModel = new UserDashboardSummaryDto();
                objsummaryModel.Username = item.Text;
                int userid = Convert.ToInt32(item.Value);
                objsummaryModel.UserId = userid;
                if (quoteData != null && quoteData.Count > 0)
                {
                    //objsummaryModel.Reviewed = quoteData.Where(x => x.IsReviewed == true && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    //objsummaryModel.InStock = quoteData.Where(x => (x.IsShowDashboard == true && x.IsInstock == true) || (x.IsInstock == true && (x.IsReviewed == false || x.IsReviewed == null) && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) ) && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    //objsummaryModel.Synthesis = quoteData.Where(x => (x.IsShowDashboard == true && x.IsCustomSynthesis == true) || x.IsCustomSynthesis == true && (x.IsReviewed == false || x.IsReviewed == null) && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();


                    objsummaryModel.Reviewed = quoteData.Where(x => x.IsReviewed == true && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.InStock = quoteData.Where(x => x.IsInstock == true && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Synthesis = quoteData.Where(x => x.IsCustomSynthesis == true && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Approved = (from c in quoteData
                                                where !string.IsNullOrEmpty(c.ApprovedBy) && (c.IsPark == false || c.IsPark == null)
                                                select c).Distinct().OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Park = quoteData.Where(x => x.IsPark == true).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Regretted = quoteData.Where(x => x.IsRegret == true).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Deleted = 0;
                    objsummaryModel.Clarification = 0;
                    objsummaryModel.Upload = 0;
                    objsummaryModel.Complex = 0;
                    var quoteusersummary = quotesummary.Where(x => x.UserId == userid).FirstOrDefault();
                    if (quoteusersummary != null)
                    {
                        objsummaryModel.Clarification = quoteusersummary.Clarification;
                        objsummaryModel.Upload = quoteusersummary.Upload;
                        objsummaryModel.Complex = quoteusersummary.Complex;
                    }
                    objsummaryModel.Total = objsummaryModel.Reviewed + objsummaryModel.InStock + objsummaryModel.Synthesis + objsummaryModel.Approved + objsummaryModel.Park;
                }
                listofquotedetails.Add(objsummaryModel);
            }
            ViewBag.listofquotedetails = listofquotedetails;

            ViewBag.TotalOfEmailCurrent = db.SZ_QuoteSummary.Where(x => x.Username == "Total" && x.StartDate >= endDatesummary && x.EndDate <= startendDatesummary).Select(x => x.Clarification).FirstOrDefault();
            ViewBag.TotalOfRegrettedCurrent = db.SZ_QuoteSummary.Where(x => x.Username == "Regretted" && x.StartDate >= endDatesummary && x.EndDate <= startendDatesummary).Select(x => x.Clarification).FirstOrDefault();
            var quotesummarycurrent = db.SZ_QuoteSummary.Where(x => x.StartDate >= endDatesummary && x.EndDate <= startendDatesummary).ToList();
            var listofquotedetailsCurrent = new List<UserDashboardSummaryDto>();
            foreach (var item in listBDItems)
            {
                var quoteData = db.SZ_Quotation.Where(x => x.CreatedDate != null && x.CreatedDate >= endDatesummary && x.CreatedDate <= startendDatesummary && x.CreatedBy.ToLower().Trim() == item.Text.ToLower().Trim()).ToList();
                UserDashboardSummaryDto objsummaryModel = new UserDashboardSummaryDto();
                objsummaryModel.Username = item.Text;
                int userid = Convert.ToInt32(item.Value);
                objsummaryModel.UserId = userid;
                if (quoteData != null && quoteData.Count > 0)
                {
                    objsummaryModel.Reviewed = quoteData.Where(x => x.IsReviewed == true && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.InStock = quoteData.Where(x => x.IsInstock == true && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Synthesis = quoteData.Where(x => x.IsCustomSynthesis == true && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();

                    //objsummaryModel.Reviewed = quoteData.Where(x => x.IsReviewed == true && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    //objsummaryModel.InStock = quoteData.Where(x => (x.IsShowDashboard == true && x.IsInstock == true) || (x.IsInstock == true && (x.IsReviewed == false || x.IsReviewed == null) && (x.IsQuoteApproved == null || x.IsQuoteApproved == false)) && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    //objsummaryModel.Synthesis = quoteData.Where(x => (x.IsShowDashboard == true && x.IsCustomSynthesis == true) || x.IsCustomSynthesis == true && (x.IsReviewed == false || x.IsReviewed == null) && (x.IsQuoteApproved == null || x.IsQuoteApproved == false) && (x.IsPark == false || x.IsPark == null)).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Approved = (from c in quoteData
                                                where !string.IsNullOrEmpty(c.ApprovedBy) && (c.IsPark == false || c.IsPark == null)
                                                select c).Distinct().OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Park = quoteData.Where(x => x.IsPark == true).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Regretted = quoteData.Where(x => x.IsRegret == true).OrderBy(x => x.CompanyName).Count();
                    objsummaryModel.Deleted = 0;
                    objsummaryModel.Clarification = 0;
                    objsummaryModel.Upload = 0;
                    objsummaryModel.Complex = 0;
                    var quoteusersummary = quotesummarycurrent.Where(x => x.UserId == userid).FirstOrDefault();
                    if (quoteusersummary != null)
                    {
                        objsummaryModel.Clarification = quoteusersummary.Clarification;
                        objsummaryModel.Upload = quoteusersummary.Upload;
                        objsummaryModel.Complex = quoteusersummary.Complex;
                    }
                    objsummaryModel.Total = objsummaryModel.Reviewed + objsummaryModel.InStock + objsummaryModel.Synthesis + objsummaryModel.Approved + objsummaryModel.Park;
                }
                listofquotedetailsCurrent.Add(objsummaryModel);
            }
            ViewBag.listofquotedetailsCurrent = listofquotedetailsCurrent;

            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_CompanyList.ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }
            ViewBag.compList = listItems;
            return View(mainmodel);
        }

        public ActionResult RecentSubmittionDashboard()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsQuote)
            {
                return RedirectToAction("Index", "Home");
            }

            var yearItems = new List<SelectListItem>();
            var monthItems = new List<SelectListItem>();
            var weekItems = new List<SelectListItem>();
            yearItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            monthItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            weekItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            for (int i = 2018; i <= DateTime.Now.Year; i++)
            {
                yearItems.Add(new SelectListItem
                {
                    Text = i.ToString(),
                    Value = i.ToString(),
                    Selected = i == DateTime.Now.Year ? true : false
                });
            }
            for (int i = 1; i <= 12; i++)
            {
                monthItems.Add(new SelectListItem
                {
                    Text = i.ToString(),
                    Value = i.ToString()
                });
            }
            for (int i = 1; i <= 54; i++)
            {
                weekItems.Add(new SelectListItem
                {
                    Text = i.ToString(),
                    Value = i.ToString()
                });
            }
            ViewBag.YearItems = yearItems;
            ViewBag.WeekItems = weekItems;
            ViewBag.MonthItems = monthItems;
            return View(new List<ScientistDetailDashboardModel>());
        }
        public ActionResult UserDashboard()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsQuote)
            {
                return RedirectToAction("Index", "Home");
            }


            List<MonthWiseUserDashboardDto> mainmodel = new List<MonthWiseUserDashboardDto>();
            var startDate = DateTime.Now.AddMonths(-2);
            var endDate = DateTime.Now;
            while (startDate <= endDate)
            {
                List<UserDashboardDto> model = new List<UserDashboardDto>();
                int month = startDate.Month;
                int year = startDate.Year;
                var datas = db.SZ_UserDashboard.Where(x => x.Month == month && x.Year == year).ToList();
                foreach (var item in datas)
                {
                    UserDashboardDto objModel = new UserDashboardDto();
                    objModel.Username = item.UserName;
                    objModel.AllDetails = item.AllDetails;
                    objModel.WithoutCatNo = item.WithoutCatNo;
                    objModel.WithoutCasNo = item.WithoutCasNo;
                    objModel.WithoutPrice = item.WithoutPrice;
                    objModel.TotalAdded = item.TotalAdded;
                    objModel.RevisionCatNo = item.CatNoRevision;
                    objModel.RevisionCasNo = item.CASNoRevision;
                    objModel.RevisionPrice = item.PriceRevision;
                    objModel.TotalRevisionProduct = item.TotalRevisionProduct;
                    model.Add(objModel);
                }

                MonthWiseUserDashboardDto objMainModel = new MonthWiseUserDashboardDto();
                objMainModel.MonthName = startDate.ToShortMonthName();
                objMainModel.Year = startDate.Year;
                objMainModel.UserDashboardModel = model;
                mainmodel.Add(objMainModel);
                // do something with target.Month and target.Year
                startDate = startDate.AddMonths(1);
            }
            return View(mainmodel);
        }


        public ActionResult ScientistDashboard()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsQuote)
            {
                return RedirectToAction("Index", "Home");
            }

            var yearItems = new List<SelectListItem>();
            var monthItems = new List<SelectListItem>();
            var weekItems = new List<SelectListItem>();
            yearItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            monthItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            weekItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            for (int i = 2018; i <= DateTime.Now.Year; i++)
            {
                yearItems.Add(new SelectListItem
                {
                    Text = i.ToString(),
                    Value = i.ToString(),
                    Selected = i == DateTime.Now.Year ? true : false
                });
            }
            for (int i = 1; i <= 12; i++)
            {
                monthItems.Add(new SelectListItem
                {
                    Text = i.ToString(),
                    Value = i.ToString()
                });
            }
            for (int i = 1; i <= 54; i++)
            {
                weekItems.Add(new SelectListItem
                {
                    Text = i.ToString(),
                    Value = i.ToString()
                });
            }
            ViewBag.YearItems = yearItems;
            ViewBag.WeekItems = weekItems;
            ViewBag.MonthItems = monthItems;

            return View(new List<ScientistModel>());
        }

        public ActionResult LoadScientistDashboard()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                var filterYear = Request.Form.GetValues("filterYear")[0].ToString();
                //var filterWeek = Request.Form.GetValues("filterWeek")[0].ToString();
                var filterMonth = Request.Form.GetValues("filterMonth")[0].ToString();

                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                int? recordsTotal = 0;
                var query = new List<Product>();
                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName.Trim(),
                        Value = term.ToString()
                    });
                });

                var allscientistName = listItems.Select(x => x.Text.ToLower().Trim()).ToArray();

                var allProList = (from c in db.Categories
                                  join cp in db.Product_Category_Mapping on c.Id equals cp.CategoryId
                                  join p in db.Products on cp.ProductId equals p.Id
                                  join i in db.SZ_Inventory on p.Id equals i.ProductId
                                  join qd in db.SZ_QuoteDetailForm on i.BatchNo equals qd.BatchCode
                                  join t3 in db.SZ_QuoteDetails_Form on qd.Id equals t3.FormId
                                  join qdd in db.SZ_QuotationDetail on t3.QuoteDetailsId equals qdd.Id
                                  // where allscientistName.Contains(qd.TLName.Trim().ToLower())
                                  where scienList.Contains(qdd.ScientistCustomerId)
                                  select new ScientistDashboardDataModel()
                                  {
                                      ScientistId = qdd.ScientistCustomerId,
                                      ScientistName = qd.TLName,
                                      DiffLevel = qdd.DifficultyLevel,
                                      Year = qd.CreatedDate.Year,
                                      Month = qd.CreatedDate.Month,
                                      Date = qd.CreatedDate,
                                      Week = 0
                                  }).ToList();
                if (!string.IsNullOrEmpty(filterMonth))
                {
                    int mon = Convert.ToInt32(filterMonth);
                    allProList = allProList.Where(m => m.Month == mon).ToList();
                }
                if (!string.IsNullOrEmpty(filterYear))
                {
                    int yr = Convert.ToInt32(filterYear);
                    allProList = allProList.Where(m => m.Year == yr).ToList();
                }
                var model = new List<ScientistModel>();
                foreach (var item in listItems)
                {
                    var sciid = Convert.ToInt32(item.Value);
                    var sciname = item.Text.ToLower().Trim();
                    var ACount = allProList.Where(x => x.ScientistId == sciid && x.DiffLevel == "1").Count();
                    var BCount = allProList.Where(x => x.ScientistId == sciid && x.DiffLevel == "2").Count();
                    var CCount = allProList.Where(x => x.ScientistId == sciid && x.DiffLevel == "3").Count();
                    var DCount = allProList.Where(x => x.ScientistId == sciid && x.DiffLevel == "4").Count();
                    var ECount = allProList.Where(x => x.ScientistId == sciid && x.DiffLevel == "5").Count();

                    var objmodel = new ScientistModel();
                    objmodel.ScientistId = sciid;
                    objmodel.ScientistName = item.Text;
                    objmodel.A = ACount;
                    objmodel.B = BCount;
                    objmodel.C = CCount;
                    objmodel.D = DCount;
                    objmodel.E = ECount;
                    objmodel.TotalProduct = allProList.Where(x => x.ScientistId == sciid).Count();
                    objmodel.ActionRow = "<a href='/Form/ScientistDashboardDetail/" + objmodel.ScientistId + "'>Detailed</a>";
                    model.Add(objmodel);
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ScientistName != null && m.ScientistName.ToLower().Contains(searchValue))
                                       ).ToList();
                }



                var allRecords = model;
                recordsTotal = model.Count();
                model = model.Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model, allRecords = allRecords });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult LoadRecentSubmittionDashboard()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                var filterYear = Request.Form.GetValues("filterYear")[0].ToString();
                //var filterWeek = Request.Form.GetValues("filterWeek")[0].ToString();
                var filterMonth = Request.Form.GetValues("filterMonth")[0].ToString();
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                //var listItems = new List<SelectListItem>();
                //var genericData = db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                //var scienList = db.GetScientistId().ToList();
                //scienList.ForEach(term =>
                //{
                //    string customerName = string.Empty;
                //    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                //    if (genericAttr.Count > 0)
                //    {
                //        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                //    }
                //    listItems.Add(new SelectListItem
                //    {
                //        Text = customerName,
                //        Value = term.ToString()
                //    });
                //});
                int? recordsTotal = 0;
                var categorylist = db.Categories.Where(x => x.ParentCategoryId == 0).ToList();
                var list = (from p in db.Products
                            join si in db.SZ_Inventory on p.Id equals si.ProductId
                            join qdf in db.SZ_QuoteDetailForm on si.BatchNo equals qdf.BatchCode
                            join t3 in db.SZ_QuoteDetails_Form on qdf.Id equals t3.FormId
                            join qd in db.SZ_QuotationDetail on t3.QuoteDetailsId equals qd.Id
                            join cp in db.Product_Category_Mapping on p.Id equals cp.ProductId
                            join c in db.Categories on cp.CategoryId equals c.Id
                            where p.Published == true && p.Deleted == false
                            && (qdf.IsDispatchedEntry == null || qdf.IsDispatchedEntry == false)
                            orderby si.CreatedDate descending
                            select new ScientistDetailDashboardModel
                            {
                                QuoteId = qd.SZ_Quotation.Id,
                                QuotationDetailsId = qd.Id,
                                ScientistName = qdf.ScientistName,
                                BatchNo = qdf.BatchCode,
                                //ScientistName = qd.ScientistCustomerId,
                                DiffLevel = qd.DifficultyLevel,
                                ParentCategoryId = c.ParentCategoryId,
                                ProductName = qd.ProductName,
                                QuantityDemand = qd.RequiredQty,
                                Quantity = qdf.Qty,
                                SubmitedDate = qdf.SubmissionDate,
                                ScientistDate = qd.MoveToScientistDate,
                                QuotedLeadTime = qd.LeadTime,
                                PONumber = qd.SZ_Quotation.PONo,
                                FinalRoute = qdf.NoOfFinalStep,
                                EarlierSynthesized = qdf.EarlierSynthesized,
                                PurificationBy = qdf.PurificationBy,
                                CASNO = qd.CASNo,
                                CATNo = qd.CATNo,
                                SpeDataAttachment = qdf.SpectralDataAttachment,
                                Year = qd.CreatedDate.Year,
                                Month = qd.CreatedDate.Month,
                            }).Distinct().ToList();

                if (!string.IsNullOrEmpty(filterMonth))
                {
                    int mon = Convert.ToInt32(filterMonth);
                    list = list.Where(m => m.Month == mon).ToList();
                }
                if (!string.IsNullOrEmpty(filterYear))
                {
                    int yr = Convert.ToInt32(filterYear);
                    list = list.Where(m => m.Year == yr).ToList();
                }
                foreach (var item in list)
                {
                    item.CATNoText = "<a href='https://synzeal.com/search?q=" + item.CATNo + "' target='_blank'>" + item.CATNo + "</a>";
                    item.FirstRaw = "<input type='checkbox' class='chksave' value='" + item.QuotationDetailsId + "' />";
                    if (item.ScientistDate.HasValue)
                    {
                        item.Duration = SZ_Helper.GetStringDateDiffrance(item.ScientistDate.Value, item.SubmitedDate);
                    }
                    item.SubmitedDateText = item.SubmitedDate.ToShortDateString();
                    item.APIcategory = categorylist.Where(x => x.Id == item.ParentCategoryId).Select(x => x.Name).FirstOrDefault();
                    item.DiffLevelText = "<select id='difflevel_" + item.QuotationDetailsId + "' class='clsDifficultyLevel' data-DiffLevel='" + item.DiffLevel + "' data-quoteDetailsId='" + item.QuotationDetailsId + "'><option value=''>--Select--</option>";
                    foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                    {
                        string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (Convert.ToString(val) == item.DiffLevel)
                        {
                            selected = "selected ";
                        }
                        item.DiffLevelText += "<option value='" + val + "' " + selected + ">" + text + "</option>";
                    }
                    if (!string.IsNullOrEmpty(item.SpeDataAttachment))
                    {
                        item.SpeDataAttachment = "<a download href='" + item.SpeDataAttachment.Replace("..", "") + "' ><i class='fa fa-download'></i></a>";
                    }

                    //item.PONumberText = "<a href='https://synzeal.com/search?q=" + item.CATNo + "' target='_blank'>" + item.PONumber + "</a>";
                    item.PONumberText = "<a href='../Form/Quote/" + item.QuoteId + "' target='_blank'> " + item.PONumber + "</a>";
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    list = list.Where(m => (m.ScientistName != null && m.ScientistName.ToLower().Contains(searchValue)) ||
                                           (m.SubmitedDateText != null && m.SubmitedDateText.ToLower().Contains(searchValue)) ||
                                           (m.SubScientistName != null && m.SubScientistName.ToLower().Contains(searchValue)) ||
                                           (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue)) ||
                                           (m.Quantity != null && m.Quantity.ToLower().Contains(searchValue)) ||
                                           (m.QuantityDemand != null && m.QuantityDemand.ToLower().Contains(searchValue)) ||
                                           (m.QuotedLeadTime != null && m.QuotedLeadTime.ToLower().Contains(searchValue)) ||
                                           (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue)) ||
                                           (m.EarlierSynthesized != null && m.EarlierSynthesized.ToLower().Contains(searchValue)) ||
                                           (m.Duration != null && m.Duration.ToLower().Contains(searchValue)) ||
                                           (m.PurificationBy != null && m.PurificationBy.ToLower().Contains(searchValue))
                                       ).ToList();
                }

                var allRecords = list;
                recordsTotal = list.Count();
                list = list.OrderByDescending(x => x.SubmitedDate).Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();

                var jsonResult = Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = list, allRecords = allRecords }, JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult MultipleQuote(int id)
        {
            if (!SessionCookieManagement.IsMiniAdmin && !SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsFollowUp)
            {
                return RedirectToAction("Index", "Home");
            }
            var quote = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
            if (quote == null)
            {
                return Json(new { success = false, message = "Quote not found" }, JsonRequestBehavior.AllowGet);
            }
            var multiplepoquote = db.SZ_Quotation.Where(x => x.PONo == quote.PONo).ToList();
            var quoteids = multiplepoquote.Select(x => x.Id).ToList();
            return Json(new { success = true, data = quoteids }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Quote(int id = 0, bool isclubquote = false)
        {
            if (!SessionCookieManagement.IsMiniAdmin && !SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsFollowUp)
            {
                return RedirectToAction("Index", "Home");
            }

            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_Terms.ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.termsList = listItems;

            var listCompItems = new List<SelectListItem>();
            listCompItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            //var compData = db.SZ_CompanyList.Where(x => x.IsBlockCompany == null || x.IsBlockCompany == false).OrderBy(x => x.Name.Trim()).ToList();
            var compData = db.SZ_CompanyList.OrderBy(x => x.Name.Trim()).ToList();
            foreach (var term in compData)
            {
                bool isblocked = term.IsBlockCompany.HasValue ? term.IsBlockCompany.Value : false;
                listCompItems.Add(new SelectListItem
                {
                    Text = term.Name + " " + isblocked,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.listCompItems = listCompItems;

            var listPaymentTermsItems = new List<SelectListItem>();
            listPaymentTermsItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var paymentTermData = db.PaymentTerms.OrderBy(x => x.Id).ToList();
            foreach (var term in paymentTermData)
            {
                listPaymentTermsItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Name.ToString()
                });
            }

            ViewBag.listPaymentTermsItems = listPaymentTermsItems;

            var model = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
            {
                model = new SZ_Quotation();
                model.PODate = DateTime.Now;
            }

            ViewBag.IsClubQuote = isclubquote;
            ViewBag.QuoteId = id;

            var listCountryItems = new List<SelectListItem>();
            listCountryItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var countries = db.Countries.OrderBy(x => x.name).ToList();
            foreach (var term in countries)
            {
                listCountryItems.Add(new SelectListItem
                {
                    Text = term.name,
                    Value = term.name
                });
            }

            ViewBag.CountryList = listCountryItems;

            if (id > 0)
            {
                if (model.WorkingDate.HasValue && model.WorkingDate.Value.AddMinutes(5) <= DateTime.Now)
                {
                    model.WorkingDate = DateTime.Now;
                    model.IsWorking = true;
                    model.WorkingUserName = SessionCookieManagement.UserName;
                    db.Entry<SZ_Quotation>(model).State = EntityState.Modified;
                    db.SaveChanges();
                }
                //TODO: Add 2 columns in database and manage accordingly this 
                if (!model.IsWorking.HasValue || model.IsWorking == false)
                {
                    model.WorkingDate = DateTime.Now;
                    model.IsWorking = true;
                    model.WorkingUserName = SessionCookieManagement.UserName;
                    db.Entry<SZ_Quotation>(model).State = EntityState.Modified;
                    db.SaveChanges();
                }
                else
                {
                    if (SessionCookieManagement.UserName != model.WorkingUserName)
                    {
                        model.HideButton = true;
                        TempData["Quotation"] = model.WorkingUserName + " is working on this quotation";
                    }
                }
            }
            ViewBag.IsQuoteViewOnly = false;
            if (SessionCookieManagement.UserId != 0)
            {
                var customer = db.Customers.Where(x => x.Id == SessionCookieManagement.UserId).FirstOrDefault();
                if (customer.CustomerRoles.Where(x => x.Name.ToLower().Contains("project")).Count() > 0
                    && (customer.CustomerRoles.Where(x => x.Name.ToLower().Contains("price")).Count() == 0
                    && customer.CustomerRoles.Where(x => x.Name.ToLower().Contains("followup")).Count() == 0))
                {
                    ViewBag.IsQuoteViewOnly = true;
                }
            }


            var listItemscurrency = new List<SelectListItem>();
            listItemscurrency.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var currency = db.SZ_Currency.ToList();
            foreach (var term in currency)
            {
                listItemscurrency.Add(new SelectListItem
                {
                    Text = term.Currency,
                    Value = term.Currency
                });
            }

            ViewBag.listItemscurrency = listItemscurrency;

            if (!string.IsNullOrEmpty(model.ClientRef))
            {
                model.ClientRef = HttpUtility.HtmlDecode(model.ClientRef);
            }
            return View(model);
        }

        [HttpPost]
        public ActionResult LoadQuoteLogUplaodData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var list = (from i in db.SZ_Quotation
                            join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                            where (t2.IsUploadServer == null || t2.IsUploadServer == false)
                            && ((string.IsNullOrEmpty(t2.CATNo) || t2.CATNo.Trim().ToLower() == "n/a" || t2.CATNo.Trim().ToLower() == "na")
                            || (string.IsNullOrEmpty(t2.CASNo)))
                            && (t2.MoveToProject == false || t2.MoveToProject == null)
                            orderby i.PODate descending
                            select t2).Distinct().ToList();

                var model = new List<PendingUploadModel>();
                foreach (var k in list)
                {
                    PendingUploadModel subList = new PendingUploadModel();
                    subList.FirstColumn = "<input type='checkbox' id='chk_" + k.Id + "' value='" + k.Id + "' class='clspendingupload' />";
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CATNoText = "<input type='text' id='cat_" + k.Id + "' name='cat_" + k.Id + "' value='" + k.CATNo + "' />";
                    subList.CASNoText = "<input type='text' id='cas_" + k.Id + "' name='cas_" + k.Id + "' value='" + k.CASNo + "' />";
                    subList.ProductName = k.ProductName;
                    subList.MoveToProject = k.MoveToProject;
                    subList.IsOnHold = k.IsOnHold;
                    model.Add(subList);
                }

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.PONumber).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }

        }


        public string GenerateAttachmentHtml(string attachment)
        {
            if (string.IsNullOrEmpty(attachment))
            {
                return "";
            }

            string str = "";
            var records = attachment.Split(',');
            foreach (var item in records)
            {
                str += "<div class='attachitems' data-filename='" + item + "'><a href='/Content/Attachment/" + item + "' target='_blank'><i class='fa fa-download'></i></a></div>";
            }
            return str;
        }

        [HttpPost]
        public ActionResult LoadQuoteUploadData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();



                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var list = (from i in db.SZ_Quotation
                            join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                            where t2.IsForceUpload == true
                            orderby i.CreatedDate descending
                            select t2).Distinct().ToList();

                var model = new List<PendingUploadModel>();
                foreach (var k in list)
                {
                    PendingUploadModel subList = new PendingUploadModel();
                    subList.FirstColumn = "<input type='checkbox' id='chk_" + k.Id + "' value='" + k.Id + "' class='clspendingupload' />";
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CATNoText = "<input type='text' id='cat_" + k.Id + "' name='cat_" + k.Id + "' value='" + k.CATNo + "' />";
                    subList.CASNoText = "<input type='text' id='cas_" + k.Id + "' name='cas_" + k.Id + "' value='" + k.CASNo + "' />";
                    subList.ProductName = k.ProductName;
                    subList.MoveToProject = k.MoveToProject;
                    subList.IsOnHold = k.IsOnHold;
                    subList.CreatedbyText = k.SZ_Quotation.CreatedBy;
                    subList.AttachmentText = GenerateAttachmentHtml(k.SZ_Quotation.Attachment);
                    model.Add(subList);
                }

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.PONumber).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadPendingUplaodDatas()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var list = (from i in db.SZ_Quotation
                            join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                            where
                            //(t2.IsUploadServer == null || t2.IsUploadServer == false) &&
                            ((string.IsNullOrEmpty(t2.CATNo) || t2.CATNo.Trim().ToLower() == "n/a" || t2.CATNo.Trim().ToLower() == "na")
                            || (string.IsNullOrEmpty(t2.CASNo)))
                            && t2.MoveToProject == true
                            && (t2.MoveToDispatch == null || t2.MoveToDispatch == false)
                            orderby i.PODate descending
                            select t2).Distinct().ToList();

                var model = new List<PendingUploadModel>();
                foreach (var k in list)
                {
                    PendingUploadModel subList = new PendingUploadModel();
                    subList.FirstColumn = "<input type='checkbox' id='chk_" + k.Id + "' value='" + k.Id + "' class='clspendingupload' />";
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CATNoText = "<input type='text' id='cat_" + k.Id + "' name='cat_" + k.Id + "' value='" + k.CATNo + "' />";
                    subList.CASNoText = "<input type='text' id='cas_" + k.Id + "' name='cas_" + k.Id + "' value='" + k.CASNo + "' />";
                    subList.ProductName = k.ProductName;
                    subList.MoveToProject = k.MoveToProject;
                    subList.IsOnHold = k.IsOnHold;
                    model.Add(subList);
                }

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.PONumber).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }

        }
        [HttpPost]
        public ActionResult LoadAllPendingUplaodData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();



                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                //var list = (from i in db.SZ_Quotation
                //             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                //             where (t2.IsUploadServer == null || t2.IsUploadServer == false)
                //             && ((string.IsNullOrEmpty(t2.CATNo) || t2.CATNo.Trim().ToLower() == "n/a" || t2.CATNo.Trim().ToLower() == "na")
                //             || (string.IsNullOrEmpty(t2.CATNo)))
                //             orderby i.PODate descending
                //             select t2).Distinct().ToList();
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var queryData = db.SZ_QueryModule.AsQueryable();
                var quotationDetailsdata = db.SZ_QuotationDetail.AsQueryable();
                // Getting all Customer data  
                var list = (from i in db.SZ_Quotation
                            join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                            where t2.MoveToProject == true
                            && string.IsNullOrEmpty(t2.TrackingNo)
                            && (t2.IsOnHold == false || t2.IsOnHold == null)
                            && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                            orderby t2.MoveProjectDate descending
                            select t2).Distinct().AsQueryable();

                list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);
                var proids = list.Select(x => x.ProductId).ToList();
                var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();
                var model = new List<PendingUploadModel>();
                foreach (var k in list)
                {
                    PendingUploadModel subList = new PendingUploadModel();
                    subList.FirstColumn = "<input type='checkbox' id='chk_" + k.Id + "' value='" + k.Id + "' class='clspendingupload' />";
                    subList.QuoteId = k.SZ_Quotation.Id;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.MoveProjectDate = k.MoveProjectDate;
                    subList.QuoteDetailsId = k.Id;
                    subList.CASNo = k.CASNo;
                    subList.CATNo = k.CATNo;
                    subList.CATNoText = "<input type='text' id='cat_" + k.Id + "' name='cat_" + k.Id + "' value='" + k.CATNo + "' />";
                    subList.CASNoText = "<input type='text' id='cas_" + k.Id + "' name='cas_" + k.Id + "' value='" + k.CASNo + "' />";
                    subList.ProductName = k.ProductName;
                    subList.MoveToProject = k.MoveToProject;
                    subList.IsOnHold = k.IsOnHold;
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.Id + "' class='addbatch'><option value=''>--Select--</option>";
                    var proBatchData = inventorydata.Where(x => x.ProductId == k.Id).OrderBy(x => x.Id).ToList();
                    if (proBatchData.Count > 0)
                    {
                        int probatchcount = 1;
                        foreach (var r in proBatchData)
                        {
                            string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            if (r.IsApproved == false)
                            {
                                text = "*" + text;
                            }

                            subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "'>" + text + "</option>";
                            probatchcount += 1;
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    model.Add(subList);
                }

                model = model.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.PONumber).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }

        }
        public ActionResult PendingUpload()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }

            var list = new List<SZ_QuotationModel>();
            return View(list);
        }

        public ActionResult Terms()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_Terms.ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }
            ViewBag.termsList = listItems;
            return View();
        }

        public ActionResult GetTermsById(int id)
        {
            var msgData = db.SZ_Terms.Where(x => x.Id == id).FirstOrDefault();
            return Json(new
            {
                data = msgData
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteTempProduct(int id, bool isClubQuote = false)
        {
            var tempData = db.SZ_TempQuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (tempData != null)
            {
                db.Entry(tempData).State = EntityState.Deleted;
                db.SaveChanges();
                if (isClubQuote)
                {
                    var clubRecord = db.SZ_ClubQuote.Where(x => x.TempQuoteId == id).FirstOrDefault();
                    if (clubRecord != null)
                    {
                        db.Entry(clubRecord).State = EntityState.Deleted;
                        db.SaveChanges();
                    }
                }
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteProductFromQuoteDetails(int id)
        {
            var tempData = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (tempData != null)
            {
                db.Entry(tempData).State = EntityState.Deleted;
                db.SaveChanges();

            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SaveTermsData(TermsModel model)
        {
            try
            {
                var msgData = db.SZ_Terms.Where(x => x.Id == model.Id).FirstOrDefault();
                if (msgData != null)
                {
                    msgData.Value = model.Message;
                    db.Entry<SZ_Terms>(msgData).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetTempQuoteDataById(string uniqueId)
        {
            Guid tempGuid = Guid.Parse(uniqueId);
            var tempQuoteData = db.SZ_TempQuotationDetail.Where(x => x.UniqueId == tempGuid).ToList();
            return Json(new
            {
                data = tempQuoteData
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult UpdateProductPrice(int productId, string price)
        {
            var product = db.Products.Where(x => x.Id == productId).FirstOrDefault();
            if (product != null)
            {
                product.QuotePrice = price;
                db.Entry(product).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult UpdateQuoteDetailsProductRemark(int id, string productremark)
        {
            var szquotedetails = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (szquotedetails != null)
            {
                var product = db.Products.Where(x => x.Id == szquotedetails.ProductId).FirstOrDefault();
                if (product != null)
                {
                    product.ProductRemark = productremark;
                    db.Entry(product).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        public ActionResult PartialProductList(int quoteId, string Layout = null, bool isHistoryLayout = false)
        {
            ViewBag.isHistoryLayout = isHistoryLayout;
            var model = db.SZ_QuotationDetail.Where(x => x.QuoteId == quoteId).OrderBy(x => x.DisplayOrder).ThenByDescending(x => x.CreatedDate).ToList();
            if (model != null && model.Count > 0)
            {
                if (Layout == null)
                {
                    ViewBag.Layout = model[0].SZ_Quotation.LayoutType;
                    if (ViewBag.Layout == null)
                    {
                        ViewBag.Layout = Layout;
                    }
                }
                else
                {
                    ViewBag.Layout = Layout;
                }
                int?[] proIds = model.Select(x => x.ProductId).ToArray();
                var szInventories = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
                foreach (var key in TempData.Keys.ToList())
                {
                    TempData.Remove(key);
                }
                model.ForEach(x =>
                {
                    var lastsixmonth = DateTime.Now.AddMonths(-6);
                    var matchedProduct = db.SZ_QuotationDetail.Where(z => !string.IsNullOrEmpty(z.Price) && z.ProductId == x.ProductId && z.QuoteId != x.QuoteId && z.CreatedDate >= lastsixmonth).OrderByDescending(z => z.Id).ToList();
                    TempData["MatchedProduct_" + x.Id] = matchedProduct;
                    var inv = szInventories.Where(y => y.ProductId == x.ProductId).ToList();
                    if (inv != null && inv.Count > 0)
                    {
                        TempData["BatchNo_" + x.ProductId.Value] = string.Join(", ", inv.Select(z => z.BatchNo + " (" + (Convert.ToInt32(z.AvailableQty) < 0 ? "0" : Convert.ToInt32(z.AvailableQty).ToString()) + ")"));
                    }

                    TempData["IsInSynthesis_" + x.ProductId.Value] = (from i in db.SZ_Quotation
                                                                      join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                                                                      where t2.ScientistCustomerId != null
                                                                      && t2.ProductId == x.ProductId
                                                                      && (t2.MoveToDispatch == false || t2.MoveToDispatch == null)
                                                                      select i).Any();

                });
            }
            return PartialView("_PartialProductList", model);
        }

        [HttpGet]
        public ActionResult FindBatchNoDetailsByCatNo(string catNo)
        {
            string batchNoList = string.Empty;
            var productRecord = db.Products.Where(x => x.Sku.ToLower() == catNo.Trim().ToLower()).FirstOrDefault();
            if (productRecord != null)
            {
                var szInventories = db.SZ_Inventory.Where(x => productRecord.Id == x.ProductId).ToList();
                if (szInventories != null && szInventories.Count > 0)
                {
                    batchNoList = string.Join(", ", szInventories.Select(z => z.BatchNo + " (" + z.Qty + ")"));
                }
            }

            return Json(batchNoList, JsonRequestBehavior.AllowGet);
        }

        public ActionResult PartialTempProductList(string uniqueId, bool isClubQuote = false)
        {
            Guid tempGuid = Guid.Parse(uniqueId);
            if (isClubQuote)
            {
                var productData = (from i in db.SZ_ClubQuote
                                   join t2 in db.SZ_QuotationDetail on i.QuotationDetailsId equals t2.Id
                                   select new
                                   {
                                       clubId = i.Id,
                                       quoteDetailsId = t2.Id
                                   }).ToList();

                foreach (var i in productData)
                {
                    var product = db.SZ_QuotationDetail.Where(x => x.Id == i.quoteDetailsId).FirstOrDefault();
                    if (product != null)
                    {

                        var clubCheck = db.SZ_TempQuotationDetail.Where(x => x.ClubQuoteId == i.clubId).FirstOrDefault();
                        if (clubCheck == null)
                        {
                            SZ_TempQuotationDetail objTemp = new SZ_TempQuotationDetail();
                            objTemp.ProductId = product.ProductId;
                            objTemp.CASNo = product.CASNo;
                            objTemp.CreatedDate = DateTime.Now;
                            objTemp.IsUploadServer = product.IsUploadServer;
                            objTemp.ImagePath = product.ImagePath;
                            objTemp.ProductName = product.ProductName;
                            objTemp.CATNo = product.CATNo;
                            objTemp.QuoteId = product.QuoteId;
                            objTemp.UniqueId = tempGuid;
                            objTemp.Price = product.Price;
                            objTemp.LeadTime = product.LeadTime;
                            objTemp.ClubQuoteId = i.clubId;
                            objTemp.IsSynthesisLog = false;
                            objTemp.FinalPrice = product.FinalPrice;
                            objTemp.ProductRemark = "Ref # " + product.SZ_Quotation.Ref + " " + product.ProductRemark;
                            db.SZ_TempQuotationDetail.Add(objTemp);
                            db.SaveChanges();

                            var clubData = db.SZ_ClubQuote.Where(x => x.Id == i.clubId).FirstOrDefault();
                            if (clubData != null)
                            {
                                clubData.TempQuoteId = objTemp.Id;
                                db.Entry(clubData).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                        }
                    }
                }

                var models = db.SZ_TempQuotationDetail.Where(x => x.ClubQuoteId != null).ToList();
                if (models.Count > 0)
                {

                    int?[] proIds = models.Select(x => x.ProductId).ToArray();
                    var szInventories = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
                    models.ForEach(x =>
                    {
                        var inv = szInventories.Where(y => y.ProductId == x.ProductId).ToList();
                        if (inv != null && inv.Count > 0)
                        {
                            TempData["BatchNo_" + x.ProductId.Value] = string.Join(", ", inv.Select(z => z.BatchNo + " (" + z.Qty + ")"));
                        }
                    });

                    //foreach (var item in models)
                    //{
                    //    string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + item.ProductId;
                    //    using (HttpClient httpClient = new HttpClient())
                    //    {
                    //        Task<String> response = httpClient.GetStringAsync(uri);
                    //        string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    //        var productmodel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                    //        if (productmodel != null && productmodel.InventoryModel != null)
                    //        {
                    //            TempData["BatchNo_" + item.ProductId] = string.Join(", ", productmodel.InventoryModel.Select(x => x.BatchNo + " (" + x.Qty + ")"));
                    //        }
                    //    }
                    //}
                }
                return PartialView("_PartialTempProductList", models);

            }
            var model = db.SZ_TempQuotationDetail.Where(x => x.UniqueId == tempGuid).ToList();
            int?[] proIdss = model.Select(x => x.ProductId).ToArray();
            var szInventoriess = db.SZ_Inventory.Where(x => proIdss.Contains(x.ProductId)).ToList();
            model.ForEach(x =>
            {
                var invs = szInventoriess.Where(y => y.ProductId == x.ProductId).ToList();
                if (invs != null && invs.Count > 0)
                {
                    TempData["BatchNo_" + x.ProductId.Value] = string.Join(", ", invs.Select(z => z.BatchNo + " (" + z.Qty + ")"));
                }
            });
            //foreach (var product in model)
            //{
            //    string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + product.ProductId;
            //    using (HttpClient httpClient = new HttpClient())
            //    {
            //        Task<String> response = httpClient.GetStringAsync(uri);
            //        string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
            //        var productmodel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
            //        if (productmodel != null && productmodel.InventoryModel != null)
            //        {
            //            TempData["BatchNo_" + product.ProductId] = string.Join(", ", productmodel.InventoryModel.Select(x => x.BatchNo + " (" + x.Qty + ")"));
            //        }
            //    }
            //}
            return PartialView("_PartialTempProductList", model);
        }

        public int ExtractQuoreRefNumber(string original)
        {
            string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
            original = original.Replace(matchingstring, "");
            return Convert.ToInt32(new string(original.Where(c => Char.IsDigit(c)).ToArray()));
        }

        public int ExtractPurchaseRfqNumber(string original)
        {
            string matchingstring = "SZ-RFQ-";
            original = original.Replace(matchingstring, "");
            return Convert.ToInt32(new string(original.Where(c => Char.IsDigit(c)).ToArray()));
        }

        public int ExtractQueryModukeRefNumber(string original)
        {
            string matchingstring = "SZ-Q-";
            original = original.Replace(matchingstring, "");
            return Convert.ToInt32(new string(original.Where(c => Char.IsDigit(c)).ToArray()));
        }

        [HttpPost]
        public ActionResult ImportNewProductInTempQuote(SZ_QuotationProductModel model)
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        //string path = AppDomain.CurrentDomain.BaseDirectory + "Uploads/";  
                        //string filename = Path.GetFileName(Request.Files[i].FileName);  

                        HttpPostedFileBase file = files[i];
                        if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                        {
                            string fileName = file.FileName;
                            string fileContentType = file.ContentType;
                            byte[] fileBytes = new byte[file.ContentLength];
                            var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                            using (var package = new ExcelPackage(file.InputStream))
                            {
                                var currentSheet = package.Workbook.Worksheets;
                                var workSheet = currentSheet.First();
                                var noOfCol = workSheet.Dimension.End.Column;
                                var noOfRow = workSheet.Dimension.End.Row;
                                for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                                {
                                    string productname = workSheet.Cells[rowIterator, 1].Value.ToString();
                                    string casno = workSheet.Cells[rowIterator, 2].Value != null ? workSheet.Cells[rowIterator, 2].Value.ToString() : string.Empty;
                                    string priceQty = workSheet.Cells[rowIterator, 3].Value != null ? workSheet.Cells[rowIterator, 3].Value.ToString() : string.Empty;
                                    string leadTime = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : "";

                                    //Insert logic save in temp table
                                    SZ_TempQuotationDetail objTemp = new SZ_TempQuotationDetail();
                                    objTemp.ProductId = 0;
                                    objTemp.CASNo = casno;
                                    objTemp.CreatedDate = DateTime.Now;
                                    objTemp.IsUploadServer = model.IsUploadServer;
                                    if (model.ProductId != 0)
                                    {
                                        objTemp.IsUploadServer = true;
                                    }
                                    else
                                    {
                                        objTemp.IsUploadServer = false;
                                    }
                                    objTemp.LeadTime = leadTime;
                                    objTemp.Price = priceQty;
                                    objTemp.ImagePath = string.Empty;
                                    objTemp.ProductName = productname;
                                    objTemp.CATNo = string.Empty;
                                    objTemp.QuoteId = 0;
                                    objTemp.UniqueId = model.UniqueId;
                                    objTemp.IsSynthesisLog = false;
                                    db.SZ_TempQuotationDetail.Add(objTemp);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }

                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult ImportCOAFromexcel()
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                        {
                            string fileName = file.FileName;
                            string fileContentType = file.ContentType;
                            byte[] fileBytes = new byte[file.ContentLength];
                            var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                            using (var package = new ExcelPackage(file.InputStream))
                            {
                                var currentSheet = package.Workbook.Worksheets;
                                var workSheet = currentSheet.First();
                                var noOfCol = workSheet.Dimension.End.Column;
                                var noOfRow = workSheet.Dimension.End.Row;
                                for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                                {
                                    string CATNo = workSheet.Cells[rowIterator, 1].Value.ToString().Trim();
                                    string BatchNo = workSheet.Cells[rowIterator, 2].Value != null ? workSheet.Cells[rowIterator, 2].Value.ToString().Trim() : string.Empty;
                                    string MolFormula = workSheet.Cells[rowIterator, 3].Value != null ? workSheet.Cells[rowIterator, 3].Value.ToString() : string.Empty;
                                    string MolWeight = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : string.Empty;
                                    string ProductName = workSheet.Cells[rowIterator, 5].Value != null ? workSheet.Cells[rowIterator, 5].Value.ToString() : string.Empty;
                                    string ChemicalName = workSheet.Cells[rowIterator, 6].Value != null ? workSheet.Cells[rowIterator, 6].Value.ToString() : string.Empty;
                                    string Synonym = workSheet.Cells[rowIterator, 7].Value != null ? workSheet.Cells[rowIterator, 7].Value.ToString() : string.Empty;
                                    string Mass = workSheet.Cells[rowIterator, 8].Value != null ? workSheet.Cells[rowIterator, 8].Value.ToString() : string.Empty;
                                    string Solutibility = workSheet.Cells[rowIterator, 9].Value != null ? workSheet.Cells[rowIterator, 9].Value.ToString() : string.Empty;
                                    string IR = workSheet.Cells[rowIterator, 10].Value != null ? workSheet.Cells[rowIterator, 10].Value.ToString() : string.Empty;
                                    string Appearanceofproduct = workSheet.Cells[rowIterator, 11].Value != null ? workSheet.Cells[rowIterator, 11].Value.ToString() : string.Empty;
                                    string Purity = workSheet.Cells[rowIterator, 12].Value != null ? workSheet.Cells[rowIterator, 12].Value.ToString() : string.Empty;
                                    string PurityValue = workSheet.Cells[rowIterator, 13].Value != null ? workSheet.Cells[rowIterator, 13].Value.ToString() : string.Empty;
                                    string Storage = workSheet.Cells[rowIterator, 14].Value != null ? workSheet.Cells[rowIterator, 14].Value.ToString() : string.Empty;
                                    string TGA = workSheet.Cells[rowIterator, 15].Value != null ? workSheet.Cells[rowIterator, 15].Value.ToString() : string.Empty;
                                    string CMR = workSheet.Cells[rowIterator, 16].Value != null ? workSheet.Cells[rowIterator, 16].Value.ToString() : string.Empty;
                                    string Dept = workSheet.Cells[rowIterator, 17].Value != null ? workSheet.Cells[rowIterator, 17].Value.ToString() : string.Empty;
                                    string ROI = workSheet.Cells[rowIterator, 18].Value != null ? workSheet.Cells[rowIterator, 18].Value.ToString() : string.Empty;
                                    string NMR = workSheet.Cells[rowIterator, 19].Value != null ? workSheet.Cells[rowIterator, 19].Value.ToString() : string.Empty;
                                    string Chiral = workSheet.Cells[rowIterator, 20].Value != null ? workSheet.Cells[rowIterator, 20].Value.ToString() : string.Empty;
                                    string IsEquation = workSheet.Cells[rowIterator, 21].Value != null ? workSheet.Cells[rowIterator, 21].Value.ToString() : string.Empty;
                                    string EquationType = workSheet.Cells[rowIterator, 22].Value != null ? workSheet.Cells[rowIterator, 22].Value.ToString() : string.Empty;
                                    string AdditionalInfo = workSheet.Cells[rowIterator, 23].Value != null ? workSheet.Cells[rowIterator, 23].Value.ToString() : string.Empty;
                                    string Attachment = workSheet.Cells[rowIterator, 24].Value != null ? workSheet.Cells[rowIterator, 24].Value.ToString() : string.Empty;
                                    string AnalysisDate = workSheet.Cells[rowIterator, 25].Value != null ? workSheet.Cells[rowIterator, 25].Value.ToString() : string.Empty;
                                    string RetestDate = workSheet.Cells[rowIterator, 26].Value != null ? workSheet.Cells[rowIterator, 26].Value.ToString() : string.Empty;

                                    var masterrecord = db.SZ_MasterCOA
                                        .Where(x => x.CATNo == CATNo.Trim() && x.BatchNo == BatchNo.Trim()).FirstOrDefault();
                                    if (masterrecord == null)
                                    {
                                        var batchlist = (from z in db.Products
                                                         join t2 in db.SZ_Inventory on z.Id equals t2.ProductId
                                                         //join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                                         where (z.Sku.ToLower() == CATNo.Trim().ToLower())
                                                               && z.Deleted == false && z.Published == true
                                                         select new
                                                         {
                                                             ProductId = z.Id,
                                                             BatchId = t2.Id,
                                                             CasNo = z.ManufacturerPartNumber,
                                                             Qty = t2.Qty,
                                                             ProductName = z.Name,
                                                             CATNo = z.Sku,
                                                             MolFormula = z.Gtin,
                                                             MolWeight = z.MolecularWeight,
                                                             Synonym = z.Synonym
                                                         }).FirstOrDefault();
                                        var inventoryData = new SZ_Inventory();
                                        if (batchlist != null)
                                        {
                                            inventoryData = db.SZ_Inventory.Where(x => x.ProductId == batchlist.ProductId && x.BatchNo.Trim().ToLower() == BatchNo.Trim().ToLower()).FirstOrDefault();
                                        }
                                        masterrecord = new SZ_MasterCOA();
                                        masterrecord.RefNo = CATNo + "-" + DateTime.Now.ToString("HHmm");
                                        masterrecord.ProductName = !string.IsNullOrEmpty(ProductName) ? ProductName : batchlist.ProductName;
                                        masterrecord.CATNo = CATNo;
                                        masterrecord.ProductId = Convert.ToInt32(batchlist.ProductId);
                                        masterrecord.IsRepresentative = false;
                                        masterrecord.CASNo = batchlist.CasNo;
                                        masterrecord.MolFormula = !string.IsNullOrEmpty(MolFormula) ? MolFormula : batchlist.MolFormula;
                                        masterrecord.MolecularWeight = !string.IsNullOrEmpty(MolWeight) ? MolWeight : batchlist.MolWeight;
                                        masterrecord.AdditionalInfor = AdditionalInfo;
                                        masterrecord.IsEquation = IsEquation == "True" ? true : false;
                                        masterrecord.Dept = Dept;
                                        masterrecord.TGALoss = TGA;
                                        masterrecord.Attachment = Attachment;
                                        masterrecord.Chemicalname = ChemicalName;
                                        masterrecord.HPLCGCELSD = PurityValue;
                                        masterrecord.Purity = Purity;
                                        masterrecord.IR = IR;
                                        masterrecord.Mass = Mass;
                                        masterrecord.BatchId = inventoryData != null ? inventoryData.Id : 0;
                                        masterrecord.BatchNo = BatchNo.Trim();
                                        masterrecord.ResidueOnIgnition = ROI;
                                        masterrecord.CMR = CMR;
                                        masterrecord.NMR = NMR;
                                        masterrecord.StorageCon = !string.IsNullOrEmpty(Storage) ? Storage : "2-8 °C for long term storage";
                                        masterrecord.AppearanceProduct = Appearanceofproduct;
                                        masterrecord.SOLUBILITY = Solutibility;
                                        masterrecord.Synonym = !string.IsNullOrEmpty(Synonym) ? Synonym : batchlist.Synonym;
                                        masterrecord.CreatedDate = DateTime.Now;
                                        masterrecord.UpdatedDate = DateTime.Now;
                                        masterrecord.QuantityAvailable = inventoryData != null ? Convert.ToString(inventoryData.Qty) : null;
                                        masterrecord.EquationType = EquationType;
                                        masterrecord.Potency = Chiral;
                                        if (!string.IsNullOrEmpty(AnalysisDate))
                                        {
                                            masterrecord.AnalysisDate = Convert.ToDateTime(AnalysisDate);
                                        }
                                        else
                                        {
                                            masterrecord.AnalysisDate = null;
                                        }
                                        if (!string.IsNullOrEmpty(RetestDate))
                                        {
                                            masterrecord.ReTestDate = Convert.ToDateTime(RetestDate);
                                        }
                                        else
                                        {
                                            masterrecord.ReTestDate = null;
                                        }
                                        masterrecord.IsLogoAttached = false;
                                        db.SZ_MasterCOA.Add(masterrecord);
                                        db.SaveChanges();
                                    }
                                    else
                                    {
                                        var batchlist = (from z in db.Products
                                                         join t2 in db.SZ_Inventory on z.Id equals t2.ProductId
                                                         //join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                                         where (z.Sku.ToLower() == CATNo.Trim().ToLower())
                                                               && z.Deleted == false && z.Published == true
                                                         select new
                                                         {
                                                             ProductId = z.Id,
                                                             BatchId = t2.Id,
                                                             CasNo = z.ManufacturerPartNumber,
                                                             Qty = t2.Qty,
                                                             ProductName = z.Name,
                                                             CATNo = z.Sku,
                                                             MolFormula = z.Gtin,
                                                             MolWeight = z.MolecularWeight,
                                                             Synonym = z.Synonym
                                                         }).FirstOrDefault();

                                        var inventoryData = new SZ_Inventory();
                                        if (batchlist != null)
                                        {
                                            inventoryData = db.SZ_Inventory.Where(x => x.ProductId == batchlist.ProductId && x.BatchNo.Trim().ToLower() == BatchNo.Trim().ToLower()).FirstOrDefault();
                                        }

                                        masterrecord.RefNo = CATNo + "-" + DateTime.Now.ToString("HHmm");
                                        masterrecord.ProductName = !string.IsNullOrEmpty(ProductName) ? ProductName : batchlist.ProductName;
                                        masterrecord.CATNo = CATNo;
                                        masterrecord.ProductId = Convert.ToInt32(batchlist.ProductId);
                                        masterrecord.IsRepresentative = false;
                                        masterrecord.CASNo = batchlist.CasNo;
                                        masterrecord.MolFormula = !string.IsNullOrEmpty(MolFormula) ? MolFormula : batchlist.MolFormula;
                                        masterrecord.MolecularWeight = !string.IsNullOrEmpty(MolWeight) ? MolWeight : batchlist.MolWeight;
                                        masterrecord.AdditionalInfor = AdditionalInfo;
                                        masterrecord.IsEquation = IsEquation == "True" ? true : false;
                                        masterrecord.Dept = Dept;
                                        masterrecord.TGALoss = TGA;
                                        masterrecord.Attachment = Attachment;
                                        masterrecord.Chemicalname = ChemicalName;
                                        masterrecord.HPLCGCELSD = PurityValue;
                                        masterrecord.Purity = Purity;
                                        masterrecord.IR = IR;
                                        masterrecord.Mass = Mass;
                                        masterrecord.BatchId = inventoryData != null ? inventoryData.Id : 0;
                                        masterrecord.BatchNo = BatchNo.Trim();
                                        masterrecord.ResidueOnIgnition = ROI;
                                        masterrecord.CMR = CMR;
                                        masterrecord.NMR = NMR;
                                        masterrecord.StorageCon = !string.IsNullOrEmpty(Storage) ? Storage : "2-8 °C for long term storage";
                                        masterrecord.AppearanceProduct = Appearanceofproduct;
                                        masterrecord.SOLUBILITY = Solutibility;
                                        masterrecord.Synonym = !string.IsNullOrEmpty(Synonym) ? Synonym : batchlist.Synonym;
                                        masterrecord.CreatedDate = DateTime.Now;
                                        masterrecord.UpdatedDate = DateTime.Now;
                                        masterrecord.QuantityAvailable = inventoryData != null ? Convert.ToString(inventoryData.Qty) : null;
                                        masterrecord.EquationType = EquationType;
                                        masterrecord.Potency = Chiral;
                                        if (!string.IsNullOrEmpty(AnalysisDate))
                                        {
                                            masterrecord.AnalysisDate = Convert.ToDateTime(AnalysisDate);
                                        }
                                        else
                                        {
                                            masterrecord.AnalysisDate = null;
                                        }
                                        if (!string.IsNullOrEmpty(RetestDate))
                                        {
                                            masterrecord.ReTestDate = Convert.ToDateTime(RetestDate);
                                        }
                                        else
                                        {
                                            masterrecord.ReTestDate = null;
                                        }
                                        masterrecord.IsLogoAttached = false;
                                        db.Entry(masterrecord).State = EntityState.Modified;
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public ActionResult ImportNewQuoteFromexcel()
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        //string path = AppDomain.CurrentDomain.BaseDirectory + "Uploads/";  
                        //string filename = Path.GetFileName(Request.Files[i].FileName);  

                        HttpPostedFileBase file = files[i];
                        if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                        {
                            string fileName = file.FileName;
                            string fileContentType = file.ContentType;
                            byte[] fileBytes = new byte[file.ContentLength];
                            var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                            using (var package = new ExcelPackage(file.InputStream))
                            {
                                var currentSheet = package.Workbook.Worksheets;
                                var workSheet = currentSheet.First();
                                var noOfCol = workSheet.Dimension.End.Column;
                                var noOfRow = workSheet.Dimension.End.Row;
                                for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                                {
                                    string referenceNo = workSheet.Cells[rowIterator, 1].Value.ToString();
                                    string companyName = workSheet.Cells[rowIterator, 2].Value != null ? workSheet.Cells[rowIterator, 2].Value.ToString() : string.Empty;
                                    string emailAddress = workSheet.Cells[rowIterator, 3].Value != null ? workSheet.Cells[rowIterator, 3].Value.ToString() : string.Empty;
                                    string poNo = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : string.Empty;
                                    string productName = workSheet.Cells[rowIterator, 5].Value != null ? workSheet.Cells[rowIterator, 5].Value.ToString() : string.Empty;
                                    string priceqty = workSheet.Cells[rowIterator, 6].Value != null ? workSheet.Cells[rowIterator, 6].Value.ToString() : string.Empty;
                                    string casNo = workSheet.Cells[rowIterator, 7].Value != null ? workSheet.Cells[rowIterator, 7].Value.ToString() : string.Empty;
                                    string catNo = workSheet.Cells[rowIterator, 8].Value != null ? workSheet.Cells[rowIterator, 8].Value.ToString() : string.Empty;
                                    string leadTime = workSheet.Cells[rowIterator, 9].Value != null ? workSheet.Cells[rowIterator, 9].Value.ToString() : string.Empty;
                                    var companyData = db.SZ_CompanyList.Where(x => x.Name.Trim().ToLower().Contains(companyName.ToLower().Trim())).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(catNo))
                                    {
                                        catNo = catNo.Trim();
                                    }

                                    var productData = db.Products.Where(x => x.Deleted == false && x.Published == true && x.Sku.ToLower().Contains(catNo.ToLower())).FirstOrDefault();
                                    var model = db.SZ_Quotation.Where(x => x.Ref.Contains(referenceNo.Trim())).FirstOrDefault();
                                    if (model == null)
                                    {
                                        SZ_Quotation objquote = new SZ_Quotation();
                                        objquote.Ref = referenceNo;
                                        if (companyData != null)
                                        {
                                            objquote.CompanyId = companyData.Id;
                                            objquote.CompanyName = companyData.Name;
                                        }
                                        objquote.EmailAddress = emailAddress;
                                        objquote.IsImageAttach = true;
                                        objquote.PONo = poNo;
                                        objquote.IsImportedQuote = true;
                                        objquote.CreatedDate = DateTime.Now;
                                        objquote.CreatedBy = SessionCookieManagement.UserName;
                                        if (objquote.CountryType == "Export")
                                        {
                                            objquote.IsAnalyticalData = true;
                                        }
                                        db.SZ_Quotation.Add(objquote);
                                        db.SaveChanges();

                                        SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                                        objdetails.IsUploadServer = true;
                                        objdetails.CASNo = !string.IsNullOrEmpty(casNo) ? casNo : string.Empty;
                                        objdetails.CATNo = catNo;
                                        objdetails.CreatedDate = DateTime.Now;
                                        objdetails.LeadTime = leadTime;
                                        objdetails.Price = priceqty;
                                        objdetails.ProductId = productData != null ? productData.Id : 0;
                                        objdetails.ProductName = productName;
                                        objdetails.QuoteId = objquote.Id;
                                        objdetails.DisplayOrder = 0;
                                        db.SZ_QuotationDetail.Add(objdetails);
                                        db.SaveChanges();
                                    }
                                    else
                                    {
                                        var quoteData = db.SZ_Quotation.Where(x => x.Id == model.Id).FirstOrDefault();
                                        if (quoteData != null)
                                        {
                                            if (companyData != null)
                                            {
                                                quoteData.CompanyId = companyData.Id;
                                                quoteData.CompanyName = companyData.Name;
                                            }
                                            quoteData.EmailAddress = emailAddress;
                                            quoteData.PONo = poNo;
                                            db.Entry(quoteData).State = EntityState.Modified;
                                            db.SaveChanges();

                                            SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                                            objdetails.IsUploadServer = true;
                                            objdetails.CASNo = !string.IsNullOrEmpty(casNo) ? casNo : string.Empty;
                                            objdetails.CATNo = catNo;
                                            objdetails.CreatedDate = DateTime.Now;
                                            objdetails.LeadTime = leadTime;
                                            objdetails.Price = priceqty;
                                            objdetails.ProductId = productData != null ? productData.Id : 0;
                                            objdetails.ProductName = productName;
                                            objdetails.QuoteId = quoteData.Id;
                                            objdetails.DisplayOrder = 0;
                                            db.SZ_QuotationDetail.Add(objdetails);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                    }

                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public ActionResult importPurchaseProductFile()
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                        {
                            string fileName = file.FileName;
                            string fileContentType = file.ContentType;
                            byte[] fileBytes = new byte[file.ContentLength];
                            var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                            using (var package = new ExcelPackage(file.InputStream))
                            {
                                var currentSheet = package.Workbook.Worksheets;
                                var workSheet = currentSheet.First();
                                var noOfCol = workSheet.Dimension.End.Column;
                                var noOfRow = workSheet.Dimension.End.Row;
                                for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                                {
                                    string productName = workSheet.Cells[rowIterator, 2].Value.ToString();
                                    string casno = workSheet.Cells[rowIterator, 3].Value != null ? workSheet.Cells[rowIterator, 3].Value.ToString() : string.Empty;
                                    string suppliercatno = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : string.Empty;
                                    string make = workSheet.Cells[rowIterator, 5].Value != null ? workSheet.Cells[rowIterator, 5].Value.ToString() : string.Empty;
                                    string price = workSheet.Cells[rowIterator, 6].Value != null ? workSheet.Cells[rowIterator, 6].Value.ToString() : string.Empty;
                                    string leadtime = workSheet.Cells[rowIterator, 7].Value != null ? workSheet.Cells[rowIterator, 7].Value.ToString() : string.Empty;
                                    if (!string.IsNullOrEmpty(casno))
                                    {
                                        casno = casno.Trim();
                                    }
                                    if (!string.IsNullOrEmpty(suppliercatno))
                                    {
                                        suppliercatno = suppliercatno.Trim();
                                    }
                                    if (!string.IsNullOrEmpty(make))
                                    {
                                        make = make.Trim();
                                    }
                                    if (!string.IsNullOrEmpty(productName))
                                    {
                                        productName = productName.Trim();
                                    }
                                    if (!string.IsNullOrEmpty(leadtime))
                                    {
                                        leadtime = leadtime.Trim();
                                    }

                                    var model = db.SZ_PurchaseSupplierCatalogue.Where(x => x.CASNo.Contains(casno.Trim()) && x.SupplierCATNo.Contains(suppliercatno.Trim())).FirstOrDefault();
                                    if (model == null)
                                    {
                                        SZ_PurchaseSupplierCatalogue objquote = new SZ_PurchaseSupplierCatalogue();
                                        objquote.CASNo = casno;
                                        objquote.ProductName = productName;
                                        objquote.SupplierCATNo = suppliercatno;
                                        objquote.Make = make;
                                        objquote.Price = price;
                                        objquote.Leadtime = leadtime;
                                        objquote.CreatedDate = DateTime.Now;
                                        objquote.CreatedBy = SessionCookieManagement.UserName;
                                        objquote.UpdatedDate = DateTime.Now;
                                        objquote.UpdatedBy = SessionCookieManagement.UserName;
                                        db.SZ_PurchaseSupplierCatalogue.Add(objquote);
                                        db.SaveChanges();
                                    }
                                    else
                                    {
                                        var quoteData = db.SZ_PurchaseSupplierCatalogue.Where(x => x.Id == model.Id).FirstOrDefault();
                                        if (quoteData != null)
                                        {
                                            quoteData.CASNo = casno;
                                            quoteData.ProductName = productName;
                                            quoteData.SupplierCATNo = suppliercatno;
                                            quoteData.Make = make;
                                            quoteData.Price = price;
                                            quoteData.Leadtime = leadtime;
                                            quoteData.UpdatedDate = DateTime.Now;
                                            quoteData.UpdatedBy = SessionCookieManagement.UserName;
                                            db.Entry(quoteData).State = EntityState.Modified;
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult AddTerm()
        {
            return View();
        }

        [HttpPost]
        public JsonResult AddTermsData(string term)
        {
            try
            {
                SZ_Terms objTerms = new SZ_Terms();
                objTerms.Name = term;
                db.SZ_Terms.Add(objTerms);
                db.SaveChanges();



                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult ProductDetailsBySku(string sku)
        {
            try
            {
                string uri = Domain + "/api/RestAPI/ProductDetailsBySku?sku=" + sku;
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var product = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                    return Json(new
                    {
                        success = true,
                        data = product
                    }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult SaveProductInTempQuote(SZ_QuotationProductModel model)
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        //string path = AppDomain.CurrentDomain.BaseDirectory + "Uploads/";  
                        //string filename = Path.GetFileName(Request.Files[i].FileName);  

                        HttpPostedFileBase file = files[i];
                        string fname;
                        string extension = Path.GetExtension(file.FileName);

                        string newfname = Guid.NewGuid().ToString() + extension;
                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath("~/Content/NewProducts/"), newfname);
                        file.SaveAs(fname);
                        model.ImagePath = "../Content/NewProducts/" + newfname;
                    }

                }
                int? maxDisplayOrderNo = db.SZ_QuotationDetail.Where(x => x.QuoteId == model.QuoteId).Max(x => x.DisplayOrder);
                if (maxDisplayOrderNo.HasValue)
                {
                    maxDisplayOrderNo += 1;
                }
                else
                {
                    maxDisplayOrderNo = 1;
                }
                SZ_QuotationDetail objTemp = new SZ_QuotationDetail();
                objTemp.DisplayOrder = maxDisplayOrderNo;
                objTemp.ProductId = model.ProductId;
                objTemp.CASNo = model.CASNo;
                objTemp.CreatedDate = DateTime.Now;
                objTemp.IsUploadServer = model.IsUploadServer;
                if (model.ProductId != 0)
                {
                    objTemp.IsUploadServer = true;
                }
                else
                {
                    objTemp.IsUploadServer = false;
                }
                objTemp.LeadTime = model.LeadTime;
                objTemp.Price = model.Price;
                objTemp.ImagePath = model.ImagePath;
                objTemp.ProductName = model.ProductName;
                objTemp.CATNo = model.CATNo;
                if (string.IsNullOrEmpty(model.CATNo) || model.CATNo == "null")
                {
                    objTemp.CATNo = "";
                }
                objTemp.QuoteId = model.QuoteId.Value;
                objTemp.ProductRemark = model.Productremark;
                if (model.CompanyId.HasValue)
                {
                    var oldproductData = (from i in db.SZ_Quotation
                                          join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                                          where t2.MoveToProject == true && !string.IsNullOrEmpty(i.PONo) && i.CompanyId == model.CompanyId &&
                                          t2.ProductId == model.ProductId
                                          select i).Distinct().ToList();
                    if (oldproductData != null && oldproductData.Count > 0 && !string.IsNullOrEmpty(objTemp.CATNo))
                    {
                        objTemp.ProductRemark += " Earlier PO Ref # " + string.Join(", ", oldproductData.Select(x => x.PONo));
                        objTemp.ProductRemark += "  Ref # " + string.Join(", ", oldproductData.Select(x => x.Ref));
                    }
                }

                var productdata = db.Products.Where(x => x.Id == model.ProductId).FirstOrDefault();
                if (productdata != null)
                {
                    if (!string.IsNullOrEmpty(objTemp.ProductRemark))
                    {
                        objTemp.ProductRemark += " ,";
                    }
                    if (productdata.ShippingCondition == "Cold Shipment")
                    {
                        objTemp.ProductRemark += " Cold Shipment Required";
                    }
                    if (!string.IsNullOrEmpty(productdata.ProductRemark))
                    {
                        objTemp.ProductRemark = productdata.ProductRemark + ", " + objTemp.ProductRemark;
                    }
                }

                db.SZ_QuotationDetail.Add(objTemp);
                db.SaveChanges();
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult SaveInvoiceData(SZ_InvoiceModel model)
        {
            var firstquotedetailsid = model.QuoteDetailsModel.Select(x => x.QuoteDetailId).FirstOrDefault();
            SZ_InvoiceData obj = new SZ_InvoiceData();
            obj.QuoteId = model.QuoteId;
            obj.CompanyId = model.CompanyId;
            obj.CompanyName = db.SZ_CompanyList.Where(x => x.Id == model.CompanyId).Select(x => x.Name).FirstOrDefault();
            var quotedata = db.SZ_Quotation.Where(x => x.Id == model.QuoteId).FirstOrDefault();
            if (quotedata != null)
            {
                obj.PODate = quotedata.PODate.HasValue ? quotedata.PODate.Value : DateTime.Now;
                obj.PONo = quotedata.PONo;
            }
            var firstquotedetailsdata = db.SZ_QuotationDetail.Where(x => x.Id == firstquotedetailsid).FirstOrDefault();
            if (firstquotedetailsdata != null)
            {
                obj.Courier = firstquotedetailsdata.Courier;
                obj.TrackingNo = firstquotedetailsdata.TrackingNo;
            }
            obj.InvoiceNo = model.InvoiceNo;
            obj.InvoiceDate = model.InvoiceDate;
            obj.TermsId = model.TermsId;
            obj.Add1 = model.Add1;
            obj.Add2 = model.Add2;
            obj.City = model.City;
            obj.State = model.State;
            obj.PostCode = model.PostCode;
            obj.ShipAdd1 = model.ShipAdd1;
            obj.ShipAdd2 = model.ShipAdd2;
            obj.ShipCity = model.ShipCity;
            obj.ShipState = model.ShipState;
            obj.ShipPostCode = model.ShipPostCode;
            obj.ShipTelno = model.ShipTelno;
            obj.Telno = model.Telno;
            obj.Country = model.Country;
            obj.ShipCountry = model.ShipCountry;
            obj.CreatedDate = DateTime.Now;
            obj.CreatedBy = SessionCookieManagement.UserName;
            obj.Type = model.Type;
            obj.ShippingCost = model.ShippingCost;
            obj.Temperature = model.Temperature;
            obj.GrossWeight = model.GrossWeight;
            db.SZ_InvoiceData.Add(obj);
            db.SaveChanges();

            foreach (var item in model.QuoteDetailsModel)
            {
                var quotedetailsdata = db.SZ_QuotationDetail.Where(x => x.Id == item.QuoteDetailId).FirstOrDefault();
                if (quotedetailsdata != null)
                {
                    SZ_InvoiceDetailsData objsub = new SZ_InvoiceDetailsData();
                    objsub.InvoiceId = obj.Id;
                    objsub.QuoteDetailsId = item.QuoteDetailId;
                    objsub.ProductId = quotedetailsdata.ProductId;
                    objsub.ProductName = quotedetailsdata.ProductName;
                    objsub.CASNo = quotedetailsdata.CASNo;
                    objsub.CATNo = quotedetailsdata.CATNo;
                    var inventory = db.SZ_Inventory.Where(x => x.Id == quotedetailsdata.AdditionalBatchNo).FirstOrDefault();
                    if (inventory != null)
                    {
                        objsub.BatchNo = inventory.BatchNo;
                        objsub.BatchId = inventory.Id;
                    }
                    var coadata = db.SZ_ChildCOA.Where(x => x.Id == quotedetailsdata.COAId).FirstOrDefault();
                    if (coadata != null)
                    {
                        if (coadata.ReTestDate.HasValue)
                        {
                            objsub.RetestDate = coadata.ReTestDate.Value;
                        }
                        if (coadata.AnalysisDate.HasValue)
                        {
                            objsub.AnalysisDate = coadata.AnalysisDate.Value;
                        }
                    }
                    objsub.HSN = "38220090";
                    objsub.Qty = quotedetailsdata.RequiredQty;
                    objsub.Unit = "MG";
                    objsub.Rate = Convert.ToDecimal(item.Rate);
                    objsub.Total = Convert.ToInt32(quotedetailsdata.RequiredQty) * Convert.ToDecimal(item.Rate);
                    objsub.CreatedDate = DateTime.Now;
                    objsub.CreatedBy = SessionCookieManagement.LoginCompanyName;
                    db.SZ_InvoiceDetailsData.Add(objsub);
                    db.SaveChanges();
                }
            }

            var companyData = db.SZ_CompanyList.Where(x => x.Id == model.CompanyId).FirstOrDefault();
            if (companyData != null)
            {
                companyData.Add1 = model.Add1;
                companyData.Add2 = model.Add2;
                companyData.City = model.City;
                companyData.State = model.State;
                companyData.PostCode = model.PostCode;
                companyData.ShipAdd1 = model.ShipAdd1;
                companyData.ShipAdd2 = model.ShipAdd2;
                companyData.ShipCity = model.ShipCity;
                companyData.ShipState = model.ShipState;
                companyData.ShipCountry = model.ShipCountry;
                companyData.Telno = model.Telno;
                companyData.ShipTelno = model.ShipTelno;
                companyData.ShipPostCode = model.ShipPostCode;
                companyData.PaymentTerms = model.TermsId;
                db.Entry(companyData).State = EntityState.Modified;
                db.SaveChanges();
            }
            if (!string.IsNullOrEmpty(obj.Courier))
            {
                var cid = Convert.ToInt32(obj.Courier);
                ViewBag.Courier = db.SZ_Courier.Where(x => x.Id == cid).Select(x => x.Name).FirstOrDefault();
            }
            var htmlstring = PartialViewdata(this, "_PartialInvoicePDF", obj);
            htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
            //string path = printpdf(htmlstring, "Invoice_SynZeal_Order_Confirmation", true);
            string path = ConvertHTMLToPDF(htmlstring, "Invoice_SynZeal_Order_Confirmation", false, true);


            try
            {
                return Json(new
                {
                    success = true,
                    path = path
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public ActionResult SaveProductInQuoteDetails(SZ_QuotationProductModel model)
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        //string path = AppDomain.CurrentDomain.BaseDirectory + "Uploads/";  
                        //string filename = Path.GetFileName(Request.Files[i].FileName);  

                        HttpPostedFileBase file = files[i];
                        string fname;
                        string extension = Path.GetExtension(file.FileName);

                        string newfname = Guid.NewGuid().ToString() + extension;
                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath("~/Content/NewProducts/"), newfname);
                        file.SaveAs(fname);
                        model.ImagePath = "../Content/NewProducts/" + newfname;
                    }

                }
                int? maxDisplayOrderNo = db.SZ_QuotationDetail.Where(x => x.QuoteId == model.QuoteId).Max(x => x.DisplayOrder);
                if (maxDisplayOrderNo.HasValue)
                {
                    maxDisplayOrderNo += 1;
                }

                SZ_QuotationDetail objTemp = new SZ_QuotationDetail();
                objTemp.QuoteId = model.QuoteId.HasValue ? model.QuoteId.Value : 0;
                objTemp.ProductId = model.ProductId;
                objTemp.CASNo = model.CASNo;
                objTemp.CreatedDate = DateTime.Now;
                objTemp.IsUploadServer = model.IsUploadServer;
                if (model.ProductId != 0)
                {
                    objTemp.IsUploadServer = true;
                }
                else
                {
                    objTemp.IsUploadServer = false;
                }
                objTemp.LeadTime = model.LeadTime;
                objTemp.Price = model.Price;
                objTemp.ImagePath = model.ImagePath;
                objTemp.ProductName = model.ProductName;
                objTemp.CATNo = model.CATNo;
                if (string.IsNullOrEmpty(model.CATNo) || model.CATNo == "null")
                {
                    objTemp.CATNo = "";
                }
                objTemp.ProductRemark = model.Productremark;
                objTemp.IsSynthesisLog = false;

                if (model.CompanyId.HasValue)
                {
                    var oldproductData = (from i in db.SZ_Quotation
                                          join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                                          where t2.MoveToProject == true && !string.IsNullOrEmpty(i.PONo) && i.CompanyId == model.CompanyId &&
                                          t2.ProductId == model.ProductId
                                          select i).Distinct().ToList();
                    if (oldproductData != null && oldproductData.Count > 0 && !string.IsNullOrEmpty(objTemp.CATNo))
                    {
                        objTemp.ProductRemark += " Earlier PO Ref # " + string.Join(", ", oldproductData.Select(x => x.PONo));
                        objTemp.ProductRemark += "  Ref # " + string.Join(", ", oldproductData.Select(x => x.Ref));
                    }
                }
                objTemp.DisplayOrder = maxDisplayOrderNo;

                var productdata = db.Products.Where(x => x.Id == model.ProductId).FirstOrDefault();
                if (productdata != null)
                {
                    if (!string.IsNullOrEmpty(objTemp.ProductRemark))
                    {
                        objTemp.ProductRemark += " ,";
                    }
                    if (productdata.ShippingCondition == "Cold Shipment")
                    {
                        objTemp.ProductRemark += " Cold Shipment Required";
                    }
                    if (!string.IsNullOrEmpty(productdata.ProductRemark))
                    {
                        objTemp.ProductRemark = productdata.ProductRemark + ", " + objTemp.ProductRemark;
                    }
                }
                db.SZ_QuotationDetail.Add(objTemp);
                db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateTempProductInfo(TempProductModel model)
        {
            try
            {
                var szquotedetails = db.SZ_TempQuotationDetail.Where(x => x.Id == model.id).FirstOrDefault();
                if (szquotedetails != null)
                {
                    szquotedetails.ProductName = model.ProductName;
                    szquotedetails.CASNo = model.casno;
                    szquotedetails.CATNo = model.catNo;
                    szquotedetails.Price = model.price;
                    szquotedetails.FinalPrice = model.finalprice;
                    szquotedetails.LeadTime = model.leadtime;
                    szquotedetails.ProductRemark = model.productremark;
                    szquotedetails.IsSynthesisLog = model.synthesislog;
                    if (!string.IsNullOrEmpty(model.estimateDispatchDate))
                    {
                        szquotedetails.EstimateDispatchDate = Convert.ToDateTime(model.estimateDispatchDate);
                    }
                    else
                    {
                        szquotedetails.EstimateDispatchDate = null;
                    }
                    db.Entry(szquotedetails).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult GetMasterCOAIdFromBatchNo(string batchNo)
        {
            var mastercoa = db.SZ_MasterCOA.Where(x => x.BatchNo == batchNo).OrderByDescending(x => x.Id).FirstOrDefault();
            if (mastercoa != null)
            {
                return Json(mastercoa.Id, JsonRequestBehavior.AllowGet);
            }
            return Json(0, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult replacementProducts(List<int> id)
        {
            var iddata = id[0];
            var firstId = db.SZ_QueryModule.Where(x => x.Id == iddata).Select(x => x.QuoteDetailsId).FirstOrDefault();
            //int firstId = id[0];
            int QuoteId = 0;
            int refNo = 1;
            string value = string.Empty;
            string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
            var SZ_Quotationdata = (from i in db.SZ_Quotation
                                    where i.Ref.StartsWith(matchingstring)
                                    select i).ToList();
            if (SZ_Quotationdata.Count > 0)
            {
                refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-" + newbrokerrewf.ToString().PadLeft(2, '0');
            }
            else
            {
                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-01";
            }

            var quotedetailsdata = db.SZ_QuotationDetail.Where(x => x.Id == firstId).FirstOrDefault();
            var quote = quotedetailsdata.SZ_Quotation;
            SZ_Quotation objquote = new SZ_Quotation();
            objquote.Ref = value;
            objquote.CompanyId = quote.CompanyId;
            objquote.CompanyName = quote.CompanyName;
            objquote.EmailAddress = quote.EmailAddress;
            objquote.ClientRef = quote.ClientRef;
            objquote.IsImageAttach = quote.IsImageAttach;
            objquote.PONo = "RE-" + (!string.IsNullOrEmpty(quote.PONo) ? quote.PONo : string.Empty);
            objquote.Remark = quote.Remark;
            objquote.TermsId = quote.TermsId;
            objquote.CountryType = quote.CountryType;
            objquote.UserDistType = quote.UserDistType;
            objquote.IsToBe = quote.IsToBe;
            objquote.IsQuoteApproved = quote.IsQuoteApproved;
            objquote.IsCOA = quote.IsCOA;
            objquote.Auction = quote.Auction;
            objquote.PODate = quote.PODate.HasValue ? quote.PODate.Value : DateTime.Now;
            objquote.SuggChemName = quote.SuggChemName;
            objquote.Attachment = quote.Attachment;
            objquote.CreatedDate = DateTime.Now;
            objquote.EmailCC = quote.EmailCC;
            objquote.IsFollowupRequired = quote.IsFollowupRequired;
            if (quote.IsQuoteApproved.HasValue && quote.IsQuoteApproved.Value)
            {
                objquote.ApprovedBy = SessionCookieManagement.UserName;
            }
            objquote.CreatedBy = SessionCookieManagement.UserName;
            if (objquote.CountryType == "Export")
            {
                objquote.IsAnalyticalData = true;
            }
            db.SZ_Quotation.Add(objquote);
            db.SaveChanges();

            QuoteId = objquote.Id;

            int displayOrder = 0;
            foreach (var i in id)
            {
                var quotedetailsid = db.SZ_QueryModule.Where(x => x.Id == i).Select(x => x.QuoteDetailsId).FirstOrDefault();

                var qd = db.SZ_QuotationDetail.Where(x => x.Id == quotedetailsid).FirstOrDefault();

                SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                objdetails.IsUploadServer = qd.IsUploadServer;
                objdetails.CASNo = qd.CASNo;
                objdetails.CATNo = qd.CATNo;
                objdetails.CreatedDate = DateTime.Now;
                objdetails.ImagePath = qd.ImagePath;
                objdetails.LeadTime = qd.LeadTime;
                objdetails.EstimateDispatchDate = qd.EstimateDispatchDate;
                objdetails.Price = qd.Price;
                objdetails.FinalPrice = qd.FinalPrice;
                objdetails.ProductId = qd.ProductId;
                objdetails.ProductName = qd.ProductName;
                objdetails.QuoteId = objquote.Id;
                objdetails.DisplayOrder = displayOrder;
                objdetails.ProductRemark = qd.ProductRemark;
                objdetails.ProcessState = (int)EnumList.ProcessState.InProgress;
                objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                objdetails.IsSynthesisLog = qd.IsSynthesisLog;
                db.SZ_QuotationDetail.Add(objdetails);

                displayOrder += 1;
            }

            db.SaveChanges();
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { success = true, message = "Moved successfully.." }
            };
        }

        [HttpPost]
        public ActionResult SaveQuote(SZ_QuotationModel model)
        {
            int QuoteId = 0;
            var productData = db.SZ_TempQuotationDetail.Where(x => x.UniqueId == model.UniqueId).ToList();
            if (model.IsClubQuotation)
            {
                productData = db.SZ_TempQuotationDetail.Where(x => x.ClubQuoteId != null).ToList();
            }
            if (model.QuoteId == 0)
            {
                int refNo = 1;
                string value = string.Empty;
                string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
                var SZ_Quotationdata = (from i in db.SZ_Quotation
                                        where i.Ref.StartsWith(matchingstring)
                                        select i).ToList();
                if (SZ_Quotationdata.Count > 0)
                {
                    refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                    int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                    value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-" + newbrokerrewf.ToString().PadLeft(2, '0');
                }
                else
                {
                    value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-01";
                }

                SZ_Quotation objquote = new SZ_Quotation();
                objquote.Ref = value;
                objquote.CompanyId = model.CompanyId;
                objquote.CompanyName = db.SZ_CompanyList.Where(x => x.Id == model.CompanyId).Select(x => x.Name).FirstOrDefault();
                objquote.EmailAddress = model.Email;
                objquote.ClientRef = model.ClientRef;
                objquote.IsImageAttach = model.IsImageAttach;
                objquote.PONo = !string.IsNullOrEmpty(model.PONumber) ? model.PONumber : string.Empty;
                objquote.Remark = model.Remark;
                objquote.TermsId = model.TermsId;
                objquote.CountryType = model.CountryType;
                objquote.UserDistType = model.UserDistType;
                objquote.IsToBe = model.IsToBe;
                objquote.IsQuoteApproved = model.IsQuoteApproved;
                objquote.IsCOA = model.IsCOA;
                objquote.Auction = model.Auction;
                objquote.PODate = model.PODate.HasValue ? model.PODate.Value : DateTime.Now;
                objquote.SuggChemName = model.SuggChemName;
                objquote.Attachment = model.Attachment;
                objquote.CreatedDate = DateTime.Now;
                objquote.EmailCC = model.EmailCC;
                objquote.IsFollowupRequired = model.IsFollowupRequired;
                if (model.IsQuoteApproved)
                {
                    objquote.ApprovedBy = SessionCookieManagement.UserName;
                }
                objquote.CreatedBy = SessionCookieManagement.UserName;
                objquote.LayoutType = model.LayoutType;
                objquote.IsInstock = model.IsInstock;
                objquote.IsCustomSynthesis = model.IsCustomSynthesis;
                objquote.IsPreviewed = model.IsPreviewed;
                objquote.IsReviewed = model.IsReviewed;
                objquote.QuoteComment = model.QuoteComment;
                objquote.PaymentTerm = model.PaymentTerm;
                objquote.IsShippedCharge = model.IsShippedCharge;
                objquote.IsShowDashboard = model.IsShowDashboard;
                objquote.PurchaseName = model.PurchaseName;
                objquote.PurchaseContactNo = model.PurchaseContactNo;
                objquote.PurchaseEmail = model.PurchaseEmail;
                objquote.PurchaseAddress = model.PurchaseAddress;
                objquote.PurchaseCity = model.PurchaseCity;
                objquote.PurchaseCountry = model.PurchaseCountry;
                objquote.TechnicalName = model.TechnicalName;
                objquote.TechnicalContactNo = model.TechnicalContactNo;
                objquote.TechnicalEmail = model.TechnicalEmail;
                objquote.TechnicalAddress = model.TechnicalAddress;
                objquote.TechnicalCity = model.TechnicalCity;
                objquote.TechnicalCountry = model.TechnicalCountry;
                objquote.Currency = model.Currency;
                objquote.IsAnalyticalData = model.IsAnalyticalData;
                objquote.IsRegret = model.IsRegret;
                objquote.QuotePDF = model.QuotePDF;
                objquote.EmailReceivedDate = model.EmailReceivedDate;
                objquote.IsCompleted = false;
                db.SZ_Quotation.Add(objquote);
                db.SaveChanges();

                QuoteId = objquote.Id;

                int displayOrder = 0;
                foreach (var i in productData)
                {
                    SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                    objdetails.IsUploadServer = i.IsUploadServer;
                    objdetails.CASNo = i.CASNo;
                    objdetails.CATNo = i.CATNo;
                    objdetails.CreatedDate = DateTime.Now;
                    objdetails.ImagePath = i.ImagePath;
                    objdetails.LeadTime = i.LeadTime;
                    objdetails.EstimateDispatchDate = i.EstimateDispatchDate;
                    objdetails.Price = i.Price;
                    objdetails.FinalPrice = i.FinalPrice;
                    objdetails.ProductId = i.ProductId;
                    objdetails.ProductName = i.ProductName;
                    objdetails.QuoteId = objquote.Id;
                    objdetails.DisplayOrder = displayOrder;
                    objdetails.ProductRemark = i.ProductRemark;
                    objdetails.ProcessState = (int)EnumList.ProcessState.InProgress;
                    objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                    objdetails.IsSynthesisLog = i.IsSynthesisLog;
                    db.SZ_QuotationDetail.Add(objdetails);
                    displayOrder += 1;
                }

                if (!string.IsNullOrEmpty(model.PaymentTerm))
                {
                    if (objquote.SZ_CompanyList != null && string.IsNullOrEmpty(objquote.SZ_CompanyList.PaymentTerms))
                    {
                        objquote.SZ_CompanyList.PaymentTerms = model.PaymentTerm;
                    }
                }

                db.SaveChanges();
            }
            else
            {
                var quoteData = db.SZ_Quotation.Where(x => x.Id == model.QuoteId).FirstOrDefault();
                if (quoteData != null)
                {
                    var oldModel = LogManagement.PrepareQuoteEntity(quoteData);

                    quoteData.PaymentTerm = model.PaymentTerm;
                    quoteData.ClientRef = model.ClientRef;
                    quoteData.CountryType = model.CountryType;
                    quoteData.UserDistType = model.UserDistType;
                    quoteData.CompanyId = model.CompanyId;
                    quoteData.CompanyName = db.SZ_CompanyList.Where(x => x.Id == model.CompanyId).Select(x => x.Name).FirstOrDefault();
                    quoteData.EmailAddress = model.Email;
                    quoteData.IsImageAttach = model.IsImageAttach;
                    if (!string.IsNullOrEmpty(model.PONumber) && string.IsNullOrEmpty(quoteData.PONo))
                    {
                        quoteData.PODate = DateTime.Now;
                    }
                    quoteData.PONo = !string.IsNullOrEmpty(model.PONumber) ? model.PONumber : string.Empty;
                    quoteData.Remark = model.Remark;
                    quoteData.TermsId = model.TermsId;
                    quoteData.IsToBe = model.IsToBe;
                    if (model.IsQuoteApproved && (quoteData.IsQuoteApproved == false || quoteData.IsQuoteApproved == null))
                    {
                        if (string.IsNullOrEmpty(quoteData.ApprovedBy))
                        {
                            quoteData.ApprovedBy = SessionCookieManagement.UserName;
                        }
                        else
                        {
                            if (quoteData.ApprovedBy != SessionCookieManagement.UserName)
                            {
                                quoteData.ApprovedBy += ", " + SessionCookieManagement.UserName;
                            }
                        }
                    }
                    quoteData.IsQuoteApproved = model.IsQuoteApproved;
                    quoteData.IsCOA = model.IsCOA;
                    quoteData.Auction = model.Auction;
                    quoteData.PODate = model.PODate.HasValue ? model.PODate.Value : DateTime.Now;
                    quoteData.SuggChemName = model.SuggChemName;
                    quoteData.Attachment = model.Attachment;
                    quoteData.EmailCC = model.EmailCC;
                    quoteData.IsFollowupRequired = model.IsFollowupRequired;
                    quoteData.IsInstock = model.IsInstock;
                    quoteData.IsCustomSynthesis = model.IsCustomSynthesis;
                    quoteData.IsPreviewed = model.IsPreviewed;
                    quoteData.IsReviewed = model.IsReviewed;
                    quoteData.QuoteComment = model.QuoteComment;
                    quoteData.WorkingDate = DateTime.Now;
                    quoteData.IsWorking = false;
                    quoteData.WorkingUserName = SessionCookieManagement.UserName;
                    quoteData.IsShippedCharge = model.IsShippedCharge;
                    quoteData.IsShowDashboard = model.IsShowDashboard;
                    quoteData.PurchaseName = model.PurchaseName;
                    quoteData.PurchaseContactNo = model.PurchaseContactNo;
                    quoteData.PurchaseEmail = model.PurchaseEmail;
                    quoteData.PurchaseAddress = model.PurchaseAddress;
                    quoteData.PurchaseCity = model.PurchaseCity;
                    quoteData.PurchaseCountry = model.PurchaseCountry;
                    quoteData.TechnicalName = model.TechnicalName;
                    quoteData.TechnicalContactNo = model.TechnicalContactNo;
                    quoteData.TechnicalEmail = model.TechnicalEmail;
                    quoteData.TechnicalAddress = model.TechnicalAddress;
                    quoteData.TechnicalCity = model.TechnicalCity;
                    quoteData.TechnicalCountry = model.TechnicalCountry;
                    quoteData.Currency = model.Currency;
                    quoteData.IsAnalyticalData = model.IsAnalyticalData;
                    quoteData.IsRegret = model.IsRegret;
                    quoteData.QuotePDF = model.QuotePDF;
                    quoteData.EmailReceivedDate = model.EmailReceivedDate;
                    db.Entry(quoteData).State = EntityState.Modified;
                    db.SaveChanges();
                    QuoteId = quoteData.Id;

                    int? maxDisplayOrderNo = db.SZ_QuotationDetail.Where(x => x.QuoteId == quoteData.Id).Max(x => x.DisplayOrder);
                    if (maxDisplayOrderNo.HasValue)
                    {
                        maxDisplayOrderNo += 1;
                    }
                    foreach (var i in productData)
                    {
                        SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                        objdetails.IsUploadServer = i.IsUploadServer;
                        objdetails.CASNo = i.CASNo;
                        objdetails.CATNo = i.CATNo;
                        objdetails.CreatedDate = DateTime.Now;
                        objdetails.ImagePath = i.ImagePath;
                        objdetails.LeadTime = i.LeadTime;
                        objdetails.Price = i.Price;
                        objdetails.FinalPrice = i.FinalPrice;
                        objdetails.ProductId = i.ProductId;
                        objdetails.ProductName = i.ProductName;
                        objdetails.QuoteId = quoteData.Id;
                        objdetails.DisplayOrder = maxDisplayOrderNo;
                        objdetails.ProductRemark = i.ProductRemark;
                        objdetails.EstimateDispatchDate = i.EstimateDispatchDate;
                        objdetails.IsSynthesisLog = i.IsSynthesisLog;
                        db.SZ_QuotationDetail.Add(objdetails);
                        maxDisplayOrderNo += 1;
                    }
                    if (!string.IsNullOrEmpty(model.PaymentTerm))
                    {
                        if (quoteData.SZ_CompanyList != null && string.IsNullOrEmpty(quoteData.SZ_CompanyList.PaymentTerms))
                        {
                            quoteData.SZ_CompanyList.PaymentTerms = model.PaymentTerm;
                        }
                    }
                    db.SaveChanges();
                    LogManagement.AddQuoteLog(quoteData, oldModel);
                }
            }

            if (model.IsClubQuotation)
            {
                var clubdata = db.SZ_ClubQuote.ToList();
                if (clubdata != null && clubdata.Count > 0)
                {
                    clubdata.ForEach(x =>
                    {
                        db.Entry(x).State = EntityState.Deleted;
                    });
                }

                var clubmodels = db.SZ_TempQuotationDetail.Where(x => x.ClubQuoteId != null).ToList();
                if (clubmodels != null && clubmodels.Count > 0)
                {
                    clubmodels.ForEach(x =>
                    {
                        db.Entry(x).State = EntityState.Deleted;
                    });
                }
                db.SaveChanges();
            }

            if (model.SendMail)
            {
                try
                {
                    var data = db.SZ_Quotation.Where(x => x.Id == QuoteId).FirstOrDefault();
                    var htmlstring = PartialViewdata(this, "_PartialQuotationPDF", data);
                    htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
                    string path = printpdf(htmlstring, data.Ref);
                    MailMessage mail = new MailMessage();
                    SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                    mail.Attachments.Add(new Attachment(path));
                    mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");
                    var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                    if (isDevelopment.ToLower().Contains("true"))
                    {
                        mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                    }
                    else
                    {
                        mail.To.Add(data.EmailAddress);
                        if (!string.IsNullOrEmpty(data.EmailCC))
                        {
                            var cc = data.EmailCC.Split(';');
                            foreach (var c in cc)
                            {
                                if (!string.IsNullOrEmpty(c))
                                {
                                    mail.CC.Add(c);
                                }
                            }
                        }
                        mail.CC.Add("bd@synzeal.com");
                        mail.CC.Add("standards@synzeal.com");
                        mail.Bcc.Add("noreply.synzeal@gmail.com");
                        mail.ReplyToList.Add("standards@synzeal.com");
                    }
                    //mail.To. = adminemail;
                    if (!string.IsNullOrEmpty(data.ClientRef))
                    {
                        mail.Subject = "SynZeal Research Quotation : " + data.ClientRef + " / SZ Quote ID : " + data.Ref;
                    }
                    else
                    {
                        mail.Subject = "SynZeal Research Quotation : SZ Quote ID : " + data.Ref;
                    }

                    string html = System.IO.File.ReadAllText(Server.MapPath("~/Mail/Quotation.html"));
                    mail.Body = html;
                    mail.IsBodyHtml = true;
                    SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                    SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mail);
                }
                catch (Exception ex)
                {
                    sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                }

            }

            List<int> ids = new List<int>();
            List<int> proids = new List<int>();
            if (model.IsCOA.HasValue && model.IsCOA.Value)
            {
                var allproducts = db.SZ_QuotationDetail.Where(x => x.QuoteId == QuoteId).ToList();

                if (allproducts.Count > 0)
                {
                    foreach (var item in allproducts)
                    {
                        var mastercoa = db.SZ_MasterCOA.Where(x => x.ProductId == item.ProductId).OrderByDescending(x => x.Id).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            proids.Add(item.Id);
                            ids.Add(mastercoa.Id);
                        }
                    }
                }

                if (productData != null && productData.Count > 0)
                {
                    foreach (var i in productData)
                    {
                        var mastercoa = db.SZ_MasterCOA.Where(x => x.ProductId == i.ProductId).OrderByDescending(x => x.Id).FirstOrDefault();
                        if (mastercoa != null)
                        {
                            proids.Add(i.Id);
                            ids.Add(mastercoa.Id);
                        }
                    }
                }

            }

            return Json(new
            {
                success = true,
                quoteId = QuoteId,
                isMasterCOAIds = ids,
                proids = proids,
                QuotePDF = model.QuotePDF
            }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult SaveClubQuote(SZ_QuotationModel model)
        {
            var productData = (from i in db.SZ_ClubQuote
                               join t2 in db.SZ_QuotationDetail on i.QuotationDetailsId equals t2.Id
                               select t2).ToList();

            if (productData.Count == 0)
            {
                return Json(new
                {
                    success = false,
                    message = "Please add atleast one product."
                }, JsonRequestBehavior.AllowGet);
            }

            int refNo = 1;
            string value = string.Empty;
            string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
            var SZ_Quotationdata = (from i in db.SZ_Quotation
                                    where i.Ref.StartsWith(matchingstring)
                                    select i).ToList();
            if (SZ_Quotationdata.Count > 0)
            {
                refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-" + newbrokerrewf.ToString().PadLeft(2, '0');
            }
            else
            {
                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-01";
            }

            //new value 
            //value = "SZ-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM");


            SZ_Quotation objquote = new SZ_Quotation();
            objquote.Ref = value;
            objquote.CompanyId = model.CompanyId;
            objquote.CompanyName = db.SZ_CompanyList.Where(x => x.Id == model.CompanyId).Select(x => x.Name).FirstOrDefault();
            objquote.EmailAddress = model.Email;
            objquote.IsImageAttach = model.IsImageAttach;
            objquote.PONo = !string.IsNullOrEmpty(model.PONumber) ? model.PONumber : string.Empty;
            objquote.Remark = model.Remark;
            objquote.TermsId = model.TermsId;
            objquote.CreatedDate = DateTime.Now;
            if (!string.IsNullOrEmpty(model.PONumber))
            {
                objquote.PODate = DateTime.Now;
            }
            objquote.CreatedBy = SessionCookieManagement.UserName;

            if (objquote.CountryType == "Export")
            {
                objquote.IsAnalyticalData = true;
            }
            db.SZ_Quotation.Add(objquote);
            db.SaveChanges();

            int displayOrder = 0;
            foreach (var i in productData)
            {
                SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                objdetails.IsUploadServer = i.IsUploadServer;
                objdetails.CASNo = i.CASNo;
                objdetails.CATNo = i.CATNo;
                objdetails.CreatedDate = DateTime.Now;
                objdetails.ImagePath = i.ImagePath;
                objdetails.LeadTime = i.LeadTime;
                objdetails.Price = i.Price;
                objdetails.ProductId = i.ProductId;
                objdetails.ProductName = i.ProductName;
                objdetails.QuoteId = objquote.Id;
                objdetails.DisplayOrder = displayOrder;
                objdetails.ProcessState = (int)EnumList.ProcessState.InProgress;
                objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                objdetails.IsSynthesisLog = i.IsSynthesisLog;
                db.SZ_QuotationDetail.Add(objdetails);
                db.SaveChanges();
                displayOrder += 1;
            }

            var clubData = db.SZ_ClubQuote.ToList();
            foreach (var k in clubData)
            {
                db.Entry(k).State = EntityState.Deleted;
                db.SaveChanges();
            }

            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveQuoteTOApproved(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        var quote = db.SZ_Quotation.Where(x => x.Id == details.QuoteId).FirstOrDefault();
                        if (quote != null)
                        {
                            quote.IsQuoteApproved = true;
                            db.Entry(quote).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Quotation moved in approved tab."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ParkAllQuote(List<int> id, string parkreason)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_Quotation.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        details.ParkReason = parkreason;
                        details.IsPark = true;
                        details.IsToBe = false;
                        details.IsInstock = false;
                        details.IsCustomSynthesis = false;
                        db.Entry(details).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Quotation parked successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveQuoteTOAllFromApproved(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        var quote = db.SZ_Quotation.Where(x => x.Id == details.QuoteId).FirstOrDefault();
                        if (quote != null)
                        {
                            quote.IsQuoteApproved = false;
                            quote.IsToBe = false;
                            db.Entry(quote).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Quotation moved in approved tab."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PrintQuotationListAllRecordWithDiscount(List<int> id)
        {
            try
            {
                int quoteId = 0;

                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        int discount = 0;
                        if (details.Discount.HasValue)
                        {
                            discount = details.Discount.Value;
                        }
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.QuoteId = details.QuoteId;
                        quoteId = details.QuoteId;
                        objmodel.CreatedDate = details.CreatedDate;
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.Price = details.Price;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.LeadTime = details.LeadTime;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Ref = details.SZ_Quotation.Ref;

                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        var pricestr = new List<string>();
                        if (!string.IsNullOrEmpty(objmodel.Price) && discount != 0)
                        {
                            var pri = objmodel.Price.Split(',');
                            if (pri != null && pri.Count() > 0)
                            {
                                foreach (var item in pri)
                                {
                                    var atpri = item.Split('@')[1];
                                    var mainpri = atpri.Trim().Split(' ')[0].Trim();
                                    var finalpri = Convert.ToInt32(mainpri) - ((Convert.ToInt32(mainpri) / 100) * discount);
                                    var currency = details.SZ_Quotation.CountryType == "Domestic" ? "INR" : "USD";
                                    if (!string.IsNullOrEmpty(details.SZ_Quotation.Currency))
                                    {
                                        currency = details.SZ_Quotation.Currency;
                                    }
                                    pricestr.Add(item.Split('@')[0] + "@" + finalpri + " " + currency);
                                }
                            }
                        }
                        if (pricestr != null && pricestr.Count > 0)
                        {
                            objmodel.Price = string.Join(", ", pricestr);
                        }

                        model.Add(objmodel);
                    }
                }


                string htmlstring = PartialViewdata(this, "_PrintQuotationListAllRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult Quicksearch()
        {
            try
            {
                string htmlstring = PartialViewdata(this, "_PartialQuickSearch", null);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PrintQuotationListAllRecord(List<int> id)
        {
            try
            {
                int quoteId = 0;

                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.QuoteId = details.QuoteId;
                        quoteId = details.QuoteId;
                        objmodel.CreatedDate = details.CreatedDate;
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.Price = details.Price;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.LeadTime = details.LeadTime;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Ref = details.SZ_Quotation.Ref;

                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        model.Add(objmodel);
                    }
                }

                string htmlstring = PartialViewdata(this, "_PrintQuotationListAllRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PrintScientistAllRecord(List<int> id)
        {
            try
            {
                int quoteId = 0;

                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.QuoteId = details.QuoteId;
                        quoteId = details.QuoteId;
                        objmodel.CreatedDate = details.CreatedDate;
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.Price = details.Price;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.LeadTime = details.LeadTime;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Ref = details.SZ_Quotation.Ref;
                        if (details.MoveToScientistDate.HasValue)
                        {
                            objmodel.MoveToScientistDate = details.MoveToScientistDate.Value.ToShortDateString();
                        }
                        if (details.EstimateCompleteDate.HasValue)
                        {
                            objmodel.EstimateCompleteDate = details.EstimateCompleteDate.Value.ToShortDateString();
                        }

                        objmodel.DataRemark = details.Remark;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        model.Add(objmodel);
                    }
                }

                string htmlstring = PartialViewdata(this, "_PrintScientistAllRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SendFollowUpMail(List<int> id)
        {
            try
            {
                int quoteId = 0;

                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.QuoteId = details.QuoteId;
                        quoteId = details.QuoteId;
                        objmodel.CreatedDate = details.CreatedDate;
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.Price = details.Price;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.LeadTime = details.LeadTime;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Ref = details.SZ_Quotation.Ref;

                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        model.Add(objmodel);
                    }
                }

                ViewBag.ISMailSend = true;

                var quoteData = db.SZ_Quotation.Where(x => x.Id == quoteId).FirstOrDefault();
                if (quoteData != null)
                {
                    try
                    {
                        string htmlstring = PartialViewdata(this, "_PartialFollowupRecord", model);

                        MailMessage mail = new MailMessage();
                        SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                        mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

                        var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                        if (isDevelopment.ToLower().Contains("true"))
                        {
                            mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                        }
                        else
                        {
                            mail.To.Add(quoteData.EmailAddress);
                            mail.CC.Add("bd@synzeal.com");
                            mail.CC.Add("standards@synzeal.com");

                            mail.ReplyToList.Add("standards@synzeal.com");
                            mail.ReplyToList.Add("bd@synzeal.com");
                        }
                        //mail.To. = adminemail;
                        mail.Subject = "SynZeal Research: Quote ID: " + quoteData.Ref + "  -  Feedback";
                        mail.Body = htmlstring;
                        mail.IsBodyHtml = true;
                        SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                        SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                        SmtpServer.EnableSsl = true;
                        SmtpServer.Send(mail);
                    }
                    catch (Exception ex)
                    {
                        sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                    }
                }
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public void sendErrorMail(string htmlstring)
        {
            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
            mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

            mail.To.Add("parthsuthar2010@gmail.com");
            //mail.To. = adminemail;
            mail.Subject = "SynZeal Research: Error Mail " + System.DateTime.Now;
            mail.Body = htmlstring;
            mail.IsBodyHtml = true;
            SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
            SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
            SmtpServer.EnableSsl = true;
            SmtpServer.Send(mail);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveToUploadProduct(List<int> id, string bName)
        {
            try
            {
                var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                quoteDetailsList.ForEach(details =>
                {
                    details.IsForceUpload = true;
                });
                db.SaveChanges();
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SetQuoteReminder(List<int> id)
        {
            try
            {
                var quoteList = db.SZ_Quotation.Where(x => id.Contains(x.Id)).ToList();
                quoteList.ForEach(details =>
                {
                    details.IsReminder = true;
                });

                db.SaveChanges();
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveToProject(List<int> id, string bName)
        {
            try
            {
                var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                string st = Convert.ToString((int)EnumList.ProjectType.Synthesis);
                string pst = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var quoteids = quoteDetailsList.Select(y => y.QuoteId).ToArray();

                int qid = quoteids[0];
                var allquotedetailsWithProjectCount = db.SZ_QuotationDetail.Where(x => x.QuoteId == qid && (x.MoveToProject.HasValue && x.MoveToProject.Value)).Count();
                if (allquotedetailsWithProjectCount == 0)
                {
                    var quote = db.SZ_Quotation.Where(x => x.Id == qid).FirstOrDefault();
                    if (quote != null)
                    {
                        quote.PODate = DateTime.Now;
                        db.Entry(quote).State = EntityState.Modified;
                    }
                }
                var quotelistfordetails = db.SZ_QuotationDetail.Where(x => quoteids.Contains(x.Id)).ToList();
                quoteDetailsList.ForEach(details =>
                {
                    var quotedetailsPO = quotelistfordetails.Where(x => x.QuoteId == details.QuoteId).Max(x => x.SrPo);
                    int srPo = 0;
                    if (quotedetailsPO != null && quotedetailsPO != 0 && quotedetailsPO.HasValue)
                    {
                        srPo = quotedetailsPO.Value + 1;
                    }
                    else
                    {
                        srPo = 1;
                    }
                    details.SrPo = srPo;
                    details.MoveToProject = true;
                    details.MoveProjectDate = DateTime.Now;
                    details.EstimateCompleteDate = DateTime.Now;
                    details.ProcessState = (int)EnumList.ProcessState.MoveToProject;
                    details.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;

                    details.SZ_Quotation.PODate = DateTime.Now;
                    details.BranchLocation = bName;
                    if (details.ProductId > 0 && !string.IsNullOrEmpty(details.CASNo) && details.CASNo.ToLower().Trim() != "na" && details.CASNo.ToLower().Trim() != "n/a")
                    {
                        var qd = db.SZ_QuotationDetail.Where(x => (x.CASNo == details.CASNo || x.CATNo == details.CATNo) && (x.ProjectType == st || x.ProjectType == pst) && x.AdditionalBatchNo == null && x.ScientistCustomerId != null && x.Id != details.Id && x.MoveToProject == true && x.PackDate == null).OrderByDescending(x => x.Id).FirstOrDefault();
                        if (qd != null)
                        {
                            details.ProjectType = Convert.ToString((int)EnumList.ProjectType.Synthesis);
                            details.ScientistCustomerId = qd.ScientistCustomerId;
                        }
                        string cName = details.SZ_Quotation.CompanyName;
                        var qdd = db.SZ_QuotationDetail.Where(x => (x.CASNo == details.CASNo || x.CATNo == details.CATNo) && x.SZ_Quotation.CompanyName == cName && x.Id != details.Id && x.MoveToProject == true && x.DispatchedStatus == (int)EnumList.DispatchStatus.Packed).OrderByDescending(x => x.Id).FirstOrDefault();
                        if (qdd != null)
                        {
                            details.AdditionalBatchNo = qdd.AdditionalBatchNo;
                            details.COAId = qdd.COAId;
                        }

                        DateTime oneyearolddate = DateTime.Now.AddYears(-1);
                        var qddd = db.SZ_QuotationDetail.Where(x => x.CreatedDate >= oneyearolddate && (x.CASNo == details.CASNo || x.CATNo == details.CATNo) && x.SZ_Quotation.CompanyName == cName && x.Id != details.Id && x.MoveToProject == true && x.MoveToInvoice == true).OrderByDescending(x => x.Id).FirstOrDefault();
                        if (qddd != null)
                        {
                            details.AdditionalBatchNo = qddd.AdditionalBatchNo;
                            details.COAId = qddd.COAId;
                            details.ActivityStatus = "Repeat Order";
                        }
                    }
                    string orderremark = "";
                    //Setup Default qtuantity logic
                    if (!string.IsNullOrEmpty(details.Price))
                    {
                        var allpricedata = details.Price.Split(',');
                        if (allpricedata.Count() == 1)
                        {
                            if (allpricedata[0].IndexOf("X") != -1)
                            {
                                string packs = allpricedata[0].Split('X')[1];
                                if (packs.Contains("="))
                                {
                                    if (Convert.ToInt32(packs.Split('=')[0]) > 1)
                                    {
                                        orderremark = allpricedata[0].Split('@')[0].Replace("mg", "").Trim() + " mg * " + packs.Split('=')[0].Trim() + " vials";
                                    }
                                }
                                int packsize = Convert.ToInt32(System.Text.RegularExpressions.Regex.Match(packs, @"\d+").Value);
                                details.RequiredQty = Convert.ToString(Convert.ToInt32(allpricedata[0].Split(' ')[0]) * Convert.ToInt32(packsize));

                            }
                            else
                            {
                                details.RequiredQty = allpricedata[0].Split(' ')[0];
                                orderremark = details.RequiredQty + " mg * 1 vial";
                            }
                        }
                        else
                        {
                            var cnt = new List<string>();
                            foreach (var item in allpricedata)
                            {
                                var qty = System.Text.RegularExpressions.Regex.Match(item.Split('@')[0], @"\d+").Value;
                                var price = System.Text.RegularExpressions.Regex.Match(item.Split('@')[1], @"\d+").Value;
                                if (item.Split('X').Count() > 1)
                                {
                                    if (item.Split('X')[1].Contains("="))
                                    {
                                        if (Convert.ToInt32(item.Split('X')[1].Split('=')[0]) > 1)
                                        {
                                            orderremark += item.Split('@')[0].Replace("mg", "").Trim() + " mg * " + item.Split('X')[1].Split('=')[0].Trim() + " vial ";
                                        }
                                        qty = Convert.ToString(Convert.ToInt32(qty) * Convert.ToInt32(item.Split('X')[1].Split('=')[0]));
                                    }
                                    else
                                    {
                                        qty = Convert.ToString(Convert.ToInt32(qty) * Convert.ToInt32(item.Split('X')[1]));
                                    }
                                }
                                if (!string.IsNullOrEmpty(price))
                                {
                                    cnt.Add(qty + " " + price);
                                }
                            }
                            if (cnt.Count == 1)
                            {
                                details.RequiredQty = cnt[0].Split(' ')[0];
                                orderremark = details.RequiredQty + " mg * 1 vial";
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(orderremark))
                    {
                        details.OrderRemark = orderremark;
                    }
                    details.FinalPrice = "";

                    if (!string.IsNullOrEmpty(details.SZ_Quotation.PONo) && details.SZ_Quotation.CountryType == "Export")
                    {
                        details.ActivityStatus = "Approval First";
                    }

                    if (!string.IsNullOrEmpty(details.SZ_Quotation.PONo) && string.IsNullOrEmpty(details.SZ_Quotation.PONo)
                    && (details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("torrent")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("amneal")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("drreddys")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("eugia")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("ftf")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("concord")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("sandoz")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("novartis")
                    || details.SZ_Quotation.CompanyName.ToLower().Trim().Contains("pfizer")))
                    {
                        details.ActivityStatus = "Approval First";
                    }
                });

                db.SaveChanges();
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ResumeCancelledProductList(List<int> id)
        {
            try
            {
                var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                quoteDetailsList.ForEach(details =>
                {
                    details.IsCancel = false;
                    details.CancelDate = DateTime.Now;
                    details.CancelledBy = SessionCookieManagement.UserName;
                    db.Entry(details).State = EntityState.Modified;
                });
                db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult CancelledProductList(List<int> id)
        {
            try
            {
                var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                quoteDetailsList.ForEach(details =>
                {
                    details.IsCancel = true;
                    details.CancelDate = DateTime.Now;
                    details.CancelledBy = SessionCookieManagement.UserName;
                    db.Entry(details).State = EntityState.Modified;
                });
                db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveToNoActionList(List<int> id)
        {
            try
            {
                var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                quoteDetailsList.ForEach(details =>
                {
                    details.ProjectType = null;
                    details.IsBackFromPurchase = true;
                    db.Entry(details).State = EntityState.Modified;
                });
                db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SetProjectOnResumeAll(List<int> id)
        {
            try
            {
                var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                quoteDetailsList.ForEach(data =>
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                    data.IsOnHold = false;
                    db.Entry(data).State = EntityState.Modified;
                });
                db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveToDispatchList(List<int> id)
        {
            try
            {
                var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                quoteDetailsList.ForEach(details =>
                {
                    details.MoveToDispatch = true;
                    details.MoveDispatchDate = DateTime.Now;
                    details.ProjectStatus = (int)EnumList.ProjectStatus.MoveToDispatch;
                    details.ProcessState = (int)EnumList.ProcessState.MoveToDispatch;
                    db.Entry(details).State = EntityState.Modified;
                });
                db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveAllRecentDashboard(List<int> id, List<string> category)
        {
            try
            {
                int loop = 0;
                foreach (var item in id)
                {
                    var quoteDetailsList = db.SZ_QuotationDetail.Where(x => x.Id == item).FirstOrDefault();
                    if (quoteDetailsList != null)
                    {
                        quoteDetailsList.DifficultyLevel = category[loop];
                        db.Entry(quoteDetailsList).State = EntityState.Modified;
                    }

                    loop += 1;
                }
                db.SaveChanges();
                //var quoteDetailsList = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                //quoteDetailsList.ForEach(details =>
                //{
                //    details.MoveToDispatch = true;
                //    details.MoveDispatchDate = DateTime.Now;
                //    details.ProjectStatus = (int)EnumList.ProjectStatus.MoveToDispatch;
                //    details.ProcessState = (int)EnumList.ProcessState.MoveToDispatch;
                //    db.Entry(details).State = EntityState.Modified;
                //});
                //db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult InStockAction(int id)
        {
            try
            {
                var model = (from i in db.SZ_Quotation
                             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                             where (t2.MoveToDispatch == false || t2.MoveToDispatch == null) && t2.MoveToProject == true && i.CompanyId == id && t2.ProjectType == "4"
                             orderby t2.MoveToProject descending
                             select t2).ToList();
                var compData = db.SZ_CompanyList.ToList();
                var proids = model.Select(x => x.ProductId).ToList();
                var productdata = db.Products.Where(x => proids.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();
                var list = new List<SZ_QuotationModel>();
                foreach (var k in model)
                {
                    SZ_QuotationModel subList = new SZ_QuotationModel();
                    subList.QuoteId = k.QuoteId;
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveDispatchDate = k.MoveDispatchDate;
                    subList.SZ_QuotationProductModel = new List<SZ_QuotationProductModel>();
                    //var proData = db.SZ_QuotationDetail.Where(x => x.QuoteId == i.Id && x.ProcessState == (int)EnumList.ProcessState.MoveToDispatch).ToList();
                    //foreach (var k in proData)
                    //{
                    SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
                    objlist.QuoteDetailsId = k.Id;
                    objlist.CASNo = k.CASNo;
                    objlist.CATNo = k.CATNo;
                    objlist.CreatedDate = k.CreatedDate;
                    objlist.ImagePath = k.ImagePath;
                    objlist.IsUploadServer = k.IsUploadServer;
                    objlist.LeadTime = k.LeadTime;
                    objlist.Price = k.Price;
                    objlist.ProductId = k.ProductId;
                    objlist.ProductName = k.ProductName;
                    objlist.QuoteId = k.QuoteId;
                    objlist.ProjectType = k.ProjectType;
                    objlist.ScientistCustomerId = k.ScientistCustomerId;
                    objlist.RequiredQty = k.RequiredQty;
                    objlist.ProjectStatus = k.ProjectStatus;
                    objlist.ScientistStatus = k.ScientistStatus;
                    objlist.BatchCode1 = k.BatchCode1;
                    objlist.BatchCode2 = k.BatchCode2;
                    objlist.Qty1 = k.Qty1;
                    objlist.Qty2 = k.Qty2;
                    objlist.DispatchedStatus = k.DispatchedStatus;
                    //objlist.BatchNo = k.BatchNo;
                    objlist.AdditionalBatchNo = k.AdditionalBatchNo;
                    objlist.MoveToDispatch = k.MoveToDispatch;
                    objlist.MoveToProject = k.MoveToProject;
                    objlist.SrPo = k.SrPo;
                    objlist.AdminScientistStatus = k.AdminScientistStatus;
                    objlist.InvoiceNo = k.InvoiceNo;
                    objlist.InvoiceRemark = k.InvoiceRemark;
                    objlist.Remark = k.Remark;
                    if (k.ProjectStatus != null)
                    {
                        objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }

                    if (objlist.ProductId.HasValue)
                    {
                        objlist.ListBatchNo = new List<SelectListItem>();
                        objlist.ListBatchNo.Add(new SelectListItem
                        {
                            Text = "--Select--",
                            Value = ""
                        });
                        var proData = productdata.Where(x => x.Id == objlist.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventorydata.Where(x => x.ProductId == objlist.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var term in proBatchData)
                            {
                                string text = term.BatchNo + " (" + term.Qty + ")";
                                if (term.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                objlist.ListBatchNo.Add(new SelectListItem
                                {
                                    Text = text,
                                    Value = term.Id.ToString(),
                                    Selected = objlist.AdditionalBatchNo == term.Id ? true : false
                                });
                            }
                        }
                    }

                    subList.SZ_QuotationProductModel.Add(objlist);

                    list.Add(subList);
                }

                var htmlstring = PartialViewdata(this, "_PartialInStockAction", list);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PendingAction(int id)
        {
            try
            {
                var listItems = new List<SelectListItem>();
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                });

                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                ViewBag.ScientistList = listItems;
                var model = (from i in db.SZ_Quotation
                             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                             where (t2.MoveToDispatch == false || t2.MoveToDispatch == null) && t2.MoveToProject == true && i.CompanyId == id && t2.ProjectStatus == 0
                             orderby t2.MoveToProject descending
                             select t2).ToList();
                var htmlstring = PartialViewdata(this, "_PartialPendingAction", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PurchaseAction(int id)
        {
            try
            {
                var model = (from i in db.SZ_Quotation
                             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                             where (t2.MoveToDispatch == false || t2.MoveToDispatch == null) && t2.MoveToProject == true && i.CompanyId == id && t2.ProjectType == "3"
                             orderby t2.MoveToProject descending
                             select t2).ToList();

                var compData = db.SZ_CompanyList.ToList();
                var proids = model.Select(x => x.ProductId).ToList();
                var productdata = db.Products.Where(x => proids.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();

                var list = new List<SZ_QuotationModel>();
                foreach (var k in model)
                {
                    SZ_QuotationModel subList = new SZ_QuotationModel();
                    subList.QuoteId = k.QuoteId;
                    subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                    subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                    subList.Email = k.SZ_Quotation.EmailAddress;
                    subList.PONumber = k.SZ_Quotation.PONo;
                    subList.Ref = k.SZ_Quotation.Ref;
                    subList.Remark = k.SZ_Quotation.Remark;
                    subList.MoveDispatchDate = k.MoveDispatchDate;
                    subList.SZ_QuotationProductModel = new List<SZ_QuotationProductModel>();

                    SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
                    objlist.QuoteDetailsId = k.Id;
                    objlist.CASNo = k.CASNo;
                    objlist.CATNo = k.CATNo;
                    objlist.CreatedDate = k.CreatedDate;
                    objlist.ImagePath = k.ImagePath;
                    objlist.IsUploadServer = k.IsUploadServer;
                    objlist.LeadTime = k.LeadTime;
                    objlist.Price = k.Price;
                    objlist.ProductId = k.ProductId;
                    objlist.ProductName = k.ProductName;
                    objlist.QuoteId = k.QuoteId;
                    objlist.ProjectType = k.ProjectType;
                    objlist.ScientistCustomerId = k.ScientistCustomerId;
                    objlist.RequiredQty = k.RequiredQty;
                    objlist.ProjectStatus = k.ProjectStatus;
                    objlist.ScientistStatus = k.ScientistStatus;
                    objlist.BatchCode1 = k.BatchCode1;
                    objlist.BatchCode2 = k.BatchCode2;
                    objlist.Qty1 = k.Qty1;
                    objlist.Qty2 = k.Qty2;
                    objlist.DispatchedStatus = k.DispatchedStatus;
                    objlist.BatchNo = k.BatchNo;
                    objlist.AdditionalBatchNo = k.AdditionalBatchNo;
                    objlist.MoveToDispatch = k.MoveToDispatch;
                    objlist.MoveToProject = k.MoveToProject;
                    objlist.SrPo = k.SrPo;
                    objlist.AdminScientistStatus = k.AdminScientistStatus;
                    objlist.InvoiceNo = k.InvoiceNo;
                    objlist.InvoiceRemark = k.InvoiceRemark;
                    objlist.Remark = k.Remark;
                    if (k.ProjectStatus != null)
                    {
                        objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }

                    if (objlist.ProductId.HasValue)
                    {
                        objlist.ListBatchNo = new List<SelectListItem>();
                        objlist.ListBatchNo.Add(new SelectListItem
                        {
                            Text = "--Select--",
                            Value = ""
                        });
                        var proData = productdata.Where(x => x.Id == objlist.ProductId && x.Published == true && x.Deleted == false).Count();
                        var proBatchData = inventorydata.Where(x => x.ProductId == objlist.ProductId).ToList();
                        if (proBatchData.Count > 0 && proData > 0)
                        {
                            foreach (var term in proBatchData)
                            {
                                string text = term.BatchNo + " (" + term.Qty + ")";
                                if (term.IsApproved == false)
                                {
                                    text = "*" + text;
                                }
                                objlist.ListBatchNo.Add(new SelectListItem
                                {
                                    Text = text,
                                    Value = term.Id.ToString(),
                                    Selected = objlist.AdditionalBatchNo == term.Id ? true : false
                                });
                            }
                        }
                    }

                    subList.SZ_QuotationProductModel.Add(objlist);

                    list.Add(subList);
                }

                var htmlstring = PartialViewdata(this, "_PartialInStockAction", list);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult DataApprovedProjectRecord(List<int> id)
        {
            try
            {
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        details.IsDataApproved = true;
                        details.DataApprovalDate = DateTime.Now;
                        db.Entry(details).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }
                return Json(new
                {
                    success = true,
                    message = "Data Approved successfully and moved into dispatch screen."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PrintProjectRecord(List<int> id, string pageName = null)
        {
            ViewBag.pageName = pageName;
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        objmodel.BatchNo = details.BatchNo;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.Explanation = details.Explanation;
                        objmodel.ExplainationSecond = details.ExplainationSecond;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (details.EstimateCompleteDate.HasValue)
                        {
                            objmodel.EstimateCompleteDate = details.EstimateCompleteDate.Value.ToShortDateString();
                        }
                        objmodel.AdminScientistStatus = details.AdminScientistStatus;
                        if (details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }
                        objmodel.LeadTime = details.LeadTime;
                        model.Add(objmodel);
                    }
                }

                var htmlstring = PartialViewdata(this, "_PartialPrintProjectRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ProjectUpdateEmail(List<int> id)
        {
            List<QuotationListModel> model = new List<QuotationListModel>();
            foreach (var ids in id)
            {
                var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                if (details != null)
                {
                    QuotationListModel objmodel = new QuotationListModel();
                    objmodel.PONumber = details.SZ_Quotation.PONo;
                    objmodel.PODate = details.SZ_Quotation.PODate;
                    objmodel.SrPo = details.SrPo;
                    objmodel.ProductName = details.ProductName;
                    objmodel.RequiredQty = details.RequiredQty;
                    objmodel.BatchNo = details.BatchNo;
                    objmodel.CASNo = details.CASNo;
                    objmodel.CATNo = details.CATNo;
                    objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                    objmodel.Courier = details.Courier;
                    objmodel.TrackingNo = details.TrackingNo;
                    objmodel.Location = details.Location;
                    objmodel.RefName = details.RefName;
                    objmodel.PurposeDispatch = details.PurposeDispatch;
                    if (details.EstimateCompleteDate.HasValue)
                    {
                        objmodel.EstimateCompleteDate = details.EstimateCompleteDate.Value.ToShortDateString();
                    }
                    objmodel.AdminScientistStatus = details.AdminScientistStatus;
                    if (details.AdditionalBatchNo.HasValue)
                    {
                        objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                    }
                    if (objmodel.BatchNo == "undefined")
                    {
                        objmodel.BatchNo = "";
                    }
                    objmodel.LeadTime = details.LeadTime;
                    objmodel.TermsId = details.SZ_Quotation.TermsId;
                    objmodel.ClientRef = details.SZ_Quotation.ClientRef;
                    objmodel.Ref = details.SZ_Quotation.Ref;
                    objmodel.CreatedDate = details.SZ_Quotation.CreatedDate;
                    objmodel.PODate = details.SZ_Quotation.PODate;
                    objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                    objmodel.DisplayOrder = details.DisplayOrder;
                    objmodel.ImagePath = details.ImagePath;
                    objmodel.Remark = details.SZ_Quotation.Remark;
                    objmodel.IsImageAttach = details.SZ_Quotation.IsImageAttach;
                    objmodel.OrderRemark = details.OrderRemark;
                    objmodel.Price = details.Price;
                    objmodel.RequiredQty = details.RequiredQty;
                    objmodel.EstimateDispatchDate = details.EstimateDispatchDate;
                    objmodel.EmailAddress = details.SZ_Quotation.EmailAddress;
                    objmodel.EmailCC = details.SZ_Quotation.EmailCC;
                    model.Add(objmodel);
                }
            }

            try
            {
                var htmlstring = PartialViewdata(this, "_PartialProjectUpdateEmail", model);
                //htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
                // string path = printpdf(htmlstring, "PO No Order - " + model[0].PONumber.Replace(" ", "_").Replace("/", "_").Replace(@"\", "_") + " SynZeal Order Confirmation");
                MailMessage mail = new MailMessage();
                SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

                var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                if (isDevelopment.ToLower().Contains("true"))
                {
                    mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                }
                else
                {
                    mail.To.Add(model[0].EmailAddress);
                    if (!string.IsNullOrEmpty(model[0].EmailCC))
                    {
                        var cc = model[0].EmailCC.Split(';');
                        foreach (var c in cc)
                        {
                            if (!string.IsNullOrEmpty(c))
                            {
                                mail.CC.Add(c);
                            }
                        }
                    }
                    mail.CC.Add("standards@synzeal.com");
                    mail.CC.Add("projects@synzeal.com");
                    mail.ReplyToList.Add("standards@synzeal.com");
                    mail.ReplyToList.Add("projects@synzeal.com");
                    mail.Bcc.Add("noreply.synzeal@gmail.com");
                }
                //  mail.Attachments.Add(new Attachment(path));
                mail.Subject = "SynZeal Research/" + model[0].CompanyName + " : PO No " + model[0].PONumber + " Update dated " + DateTime.Now.GetOrdinalDate();

                string html = System.IO.File.ReadAllText(Server.MapPath("~/Mail/OrderConfirmation.html"));
                html = html.Replace("#ponumber#", model[0].PONumber);
                mail.Body = htmlstring;
                mail.IsBodyHtml = true;
                SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                SmtpServer.EnableSsl = true;
                SmtpServer.Send(mail);
            }
            catch (Exception ex)
            {
                sendErrorMail(ex.LineNumber() + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
            }

            return Json(new
            {
                success = true,
                message = ""
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult GenerateInvoice(List<int> id)
        {
            try
            {
                int companyId = 0;
                ViewBag.CompanyId = 0;
                ViewBag.CompanyName = "";
                ViewBag.Ids = id;
                ViewBag.PONo = "";
                ViewBag.PODate = "";
                ViewBag.Email = "";
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        ViewBag.QuoteId = details.SZ_Quotation.Id;
                        ViewBag.Email = details.SZ_Quotation.EmailAddress;
                        ViewBag.PONo = details.SZ_Quotation.PONo;
                        ViewBag.PODate = details.SZ_Quotation.PODate.Value.ToShortDateString();
                        ViewBag.CompanyId = details.SZ_Quotation.CompanyId;
                        ViewBag.CompanyName = details.SZ_Quotation.CompanyName;
                        ViewBag.PaymentTerms = details.SZ_Quotation.PaymentTerm;
                        ViewBag.IsShippedCharge = details.SZ_Quotation.IsShippedCharge;
                        ViewBag.TrackingNo = details.TrackingNo;
                        if (details.SZ_Quotation.CompanyId.HasValue)
                        {
                            companyId = details.SZ_Quotation.CompanyId.Value;
                        }
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.QuoteDetailsId = details.Id;
                        objmodel.Price = details.Price;
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        objmodel.BatchNo = details.BatchNo;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (details.EstimateDispatchDate.HasValue)
                        {
                            objmodel.EstimateDispatchDateStr = details.EstimateDispatchDate.Value.ToShortDateString();
                        }
                        objmodel.AdminScientistStatus = details.AdminScientistStatus;
                        if (details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        objmodel.LeadTime = details.LeadTime;
                        objmodel.FinalPrice = details.FinalPrice;

                        var coadata = db.SZ_ChildCOA.Where(x => x.Id == details.COAId).FirstOrDefault();
                        if (coadata != null)
                        {
                            if (coadata.ReTestDate.HasValue)
                            {
                                objmodel.ReTestDateStr = coadata.ReTestDate.Value.ToShortDateString();
                            }
                            if (coadata.AnalysisDate.HasValue)
                            {
                                objmodel.AnalysisDateStr = coadata.AnalysisDate.Value.ToShortDateString();
                            }
                        }

                        model.Add(objmodel);
                    }
                }

                var listPaymentTermsItems = new List<SelectListItem>();
                listPaymentTermsItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                var paymentTermData = db.PaymentTerms.OrderBy(x => x.Id).ToList();
                foreach (var term in paymentTermData)
                {
                    listPaymentTermsItems.Add(new SelectListItem
                    {
                        Text = term.Name,
                        Value = term.Name.ToString()
                    });
                }

                ViewBag.listPaymentTermsItems = listPaymentTermsItems;

                var listCountryItems = new List<SelectListItem>();
                listCountryItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                var countries = db.Countries.OrderBy(x => x.name).ToList();
                foreach (var term in countries)
                {
                    listCountryItems.Add(new SelectListItem
                    {
                        Text = term.name,
                        Value = term.name
                    });
                }

                ViewBag.CountryList = listCountryItems;


                var companyData = db.SZ_CompanyList.Where(x => x.Id == companyId).FirstOrDefault();
                if (companyData != null)
                {
                    ViewBag.Company = companyData;
                }

                var htmlstring = PartialViewdata(this, "_PartialGenerateInvoice", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult OrderConfirmationEmail(List<int> id)
        {
            try
            {
                string paymentterms = "";
                ViewBag.Ids = id;
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        paymentterms = details.SZ_Quotation.PaymentTerm;
                        ViewBag.PaymentTerms = details.SZ_Quotation.PaymentTerm;
                        ViewBag.IsShippedCharge = details.SZ_Quotation.IsShippedCharge;
                        ViewBag.EmailAddress = details.SZ_Quotation.EmailAddress;
                        ViewBag.CountryType = details.SZ_Quotation.CountryType;
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.QuoteDetailsId = details.Id;
                        objmodel.Price = details.Price;
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        objmodel.BatchNo = details.BatchNo;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (details.EstimateDispatchDate.HasValue)
                        {
                            objmodel.EstimateDispatchDateStr = details.EstimateDispatchDate.Value.ToShortDateString();
                        }
                        objmodel.AdminScientistStatus = details.AdminScientistStatus;
                        if (details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                        }
                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        objmodel.LeadTime = details.LeadTime;
                        objmodel.FinalPrice = details.FinalPrice;
                        model.Add(objmodel);
                    }
                }

                var listPaymentTermsItems = new List<SelectListItem>();
                listPaymentTermsItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                var paymentTermData = db.PaymentTerms.OrderBy(x => x.Id).ToList();
                foreach (var term in paymentTermData)
                {
                    listPaymentTermsItems.Add(new SelectListItem
                    {
                        Selected = paymentterms == term.Name ? true : false,
                        Text = term.Name,
                        Value = term.Name.ToString()
                    });
                }

                ViewBag.listPaymentTermsItems = listPaymentTermsItems;

                var htmlstring = PartialViewdata(this, "_PartialOrderConfirmationEmail", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SendEmailOrderConfirmationAction(List<QuotationListModel> id, string toEmail, string cctoEmail, string discount, bool isDownload = false, string paymentTerms = null, bool IsShippedCharge = false)
        {
            ViewBag.IsShippedCharge = IsShippedCharge;
            try
            {
                var qdids = id.Select(x => x.QuoteDetailsId).ToList();
                var quotationdetailsdatas = db.SZ_QuotationDetail.Where(x => qdids.Contains(x.Id)).ToList();
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = quotationdetailsdatas.Where(x => x.Id == ids.QuoteDetailsId).FirstOrDefault();
                    if (details != null)
                    {
                        int discounts = string.IsNullOrEmpty(discount) ? 0 : Convert.ToInt32(discount);
                        details.Discount = discounts;
                        details.FinalPrice = ids.FinalPrice;
                        details.LeadTime = ids.LeadTime;

                        var quotation = db.SZ_Quotation.Where(x => x.Id == details.QuoteId).FirstOrDefault();
                        if (quotation != null)
                        {
                            quotation.IsShippedCharge = IsShippedCharge;
                            quotation.PaymentTerm = paymentTerms;
                            db.Entry(quotation).State = EntityState.Modified;
                        }
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        objmodel.BatchNo = details.BatchNo;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        objmodel.DataRemark = details.Remark;
                        if (details.EstimateCompleteDate.HasValue)
                        {
                            objmodel.EstimateCompleteDate = details.EstimateCompleteDate.Value.ToShortDateString();
                        }
                        objmodel.AdminScientistStatus = details.AdminScientistStatus;
                        if (details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                        }
                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }
                        objmodel.LeadTime = details.LeadTime;
                        objmodel.TermsId = details.SZ_Quotation.TermsId;
                        objmodel.ClientRef = details.SZ_Quotation.ClientRef;
                        objmodel.Ref = details.SZ_Quotation.Ref;
                        objmodel.CreatedDate = details.SZ_Quotation.CreatedDate;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.DisplayOrder = details.DisplayOrder;
                        objmodel.ImagePath = details.ImagePath;
                        objmodel.Remark = details.SZ_Quotation.Remark;
                        objmodel.IsImageAttach = details.SZ_Quotation.IsImageAttach;
                        objmodel.OrderRemark = details.OrderRemark;
                        objmodel.Price = details.Price;
                        objmodel.RequiredQty = details.RequiredQty;
                        objmodel.EstimateDispatchDate = details.EstimateDispatchDate;
                        objmodel.FinalPrice = details.FinalPrice;

                        model.Add(objmodel);

                        var emailsuggestions = db.SZ_EmailSuggestion.Where(x => x.CompanyID == details.SZ_Quotation.CompanyId).FirstOrDefault();
                        if (emailsuggestions != null)
                        {
                            //Update records
                            string toRecord = string.Empty;
                            string ccRecord = string.Empty;
                            if (!string.IsNullOrEmpty(toEmail))
                            {
                                string[] emails = toEmail.Split(';');
                                foreach (var i in emails)
                                {
                                    if (!string.IsNullOrEmpty(i) && !emailsuggestions.ToAddress.Contains(i))
                                    {
                                        toRecord += i + ";";
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(cctoEmail))
                            {
                                string[] emails = cctoEmail.Split(';');
                                foreach (var i in emails)
                                {
                                    if (!string.IsNullOrEmpty(i) && !emailsuggestions.CCAddress.Contains(i))
                                    {
                                        ccRecord += i + ";";
                                    }
                                }
                            }

                            if (!string.IsNullOrEmpty(ccRecord))
                            {
                                emailsuggestions.CCAddress += ";" + ccRecord;
                            }
                            if (!string.IsNullOrEmpty(toRecord))
                            {
                                emailsuggestions.ToAddress += ";" + toEmail;
                            }
                            db.Entry(emailsuggestions).State = EntityState.Modified;
                            db.SaveChanges();

                        }
                        else
                        {
                            //Insert Records
                            emailsuggestions = new SZ_EmailSuggestion();
                            emailsuggestions.CompanyID = details.SZ_Quotation.CompanyId.HasValue ? details.SZ_Quotation.CompanyId.Value : 0;
                            emailsuggestions.CreatedDate = DateTime.Now;
                            emailsuggestions.CCAddress = cctoEmail;
                            emailsuggestions.ToAddress = toEmail;
                            db.SZ_EmailSuggestion.Add(emailsuggestions);
                            db.SaveChanges();
                        }
                    }
                }

                try
                {
                    var htmlstring = PartialViewdata(this, "_PartialOrderConfirmationPDF", model);
                    //htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
                    string path = printpdf(htmlstring, "PO_No_Order-" + model[0].PONumber.Replace(":", "_").Replace("#", "_").Replace(" ", "_").Replace("/", "_").Replace(@"\", "_") + "_SynZeal_Order_Confirmation", isDownload);
                    if (isDownload)
                    {
                        return Json(new
                        {
                            success = true,
                            message = path.Replace(" ", "_")
                        }, JsonRequestBehavior.AllowGet);
                    }
                    MailMessage mail = new MailMessage();

                    SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                    mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

                    var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                    if (isDevelopment.ToLower().Contains("true"))
                    {
                        mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(toEmail))
                        {
                            string[] emails = toEmail.Split(';');
                            foreach (var i in emails)
                            {
                                if (!string.IsNullOrEmpty(i))
                                {
                                    mail.To.Add(i);
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(cctoEmail))
                        {
                            string[] emails = cctoEmail.Split(';');
                            foreach (var i in emails)
                            {
                                if (!string.IsNullOrEmpty(i))
                                {
                                    mail.CC.Add(i);
                                }
                            }
                        }
                        else
                        {
                            mail.To.Add("standards@synzeal.com");
                        }

                        mail.ReplyToList.Add("standards@synzeal.com");

                    }
                    mail.Attachments.Add(new Attachment(path));
                    mail.Subject = "SynZeal Research Order Confirmation : PO No " + model[0].PONumber + " /SZ Quote ID: " + model[0].Ref;

                    string html = System.IO.File.ReadAllText(Server.MapPath("~/Mail/OrderConfirmation.html"));
                    html = html.Replace("#ponumber#", model[0].PONumber);
                    mail.Body = html;
                    mail.IsBodyHtml = true;
                    SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                    SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mail);
                }
                catch (Exception ex)
                {
                    sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                    return Json(new
                    {
                        success = false,
                        message = "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace
                    }, JsonRequestBehavior.AllowGet);
                }
                return Json(new
                {
                    success = true,
                    html = ""
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SendEmailInvoiceConfirmationAction(List<int> id, string toEmail, string cctoEmail, string mailfrom)
        {
            try
            {
                List<string> imagePath = new List<string>();

                for (int i = 0; i < Request.Files.Count; i++)
                {
                    var file = Request.Files[i];

                    var fileName = Path.GetFileName(file.FileName);
                    var extension = Path.GetExtension(file.FileName);
                    var imageName = file.FileName + "@" + Guid.NewGuid().ToString() + "" + extension;
                    var tempimagePath = Path.Combine(Server.MapPath("~/Content/Invoice"), imageName);
                    file.SaveAs(tempimagePath);

                    imagePath.Add("/Content/Invoice/" + imageName);
                }
                id = Request.Form.Get("id").Split(',').Select(Int32.Parse).ToList();
                List<QuotationListModel> model = new List<QuotationListModel>();
                var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                foreach (var ids in id)
                {
                    var details = quotedetailsdata.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        objmodel.BatchNo = details.BatchNo;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (details.EstimateCompleteDate.HasValue)
                        {
                            objmodel.EstimateCompleteDate = details.EstimateCompleteDate.Value.ToShortDateString();
                        }
                        objmodel.AdminScientistStatus = details.AdminScientistStatus;
                        if (details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }
                        objmodel.LeadTime = details.LeadTime;
                        objmodel.TermsId = details.SZ_Quotation.TermsId;
                        objmodel.ClientRef = details.SZ_Quotation.ClientRef;
                        objmodel.Ref = details.SZ_Quotation.Ref;
                        objmodel.CreatedDate = details.SZ_Quotation.CreatedDate;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.DisplayOrder = details.DisplayOrder;
                        objmodel.ImagePath = details.ImagePath;
                        objmodel.Remark = details.SZ_Quotation.Remark;
                        objmodel.IsImageAttach = details.SZ_Quotation.IsImageAttach;
                        objmodel.OrderRemark = details.OrderRemark;
                        objmodel.Price = details.Price;
                        objmodel.RequiredQty = details.RequiredQty;
                        objmodel.EstimateDispatchDate = details.EstimateDispatchDate;
                        objmodel.PackDate = details.PackDate.HasValue ? details.PackDate.Value.ToShortDateString() : "";
                        model.Add(objmodel);

                        var emailsuggestions = db.SZ_EmailSuggestion.Where(x => x.CompanyID == details.SZ_Quotation.CompanyId).FirstOrDefault();
                        if (emailsuggestions != null)
                        {
                            //Update records
                            string toRecord = string.Empty;
                            string ccRecord = string.Empty;
                            if (!string.IsNullOrEmpty(toEmail))
                            {
                                string[] emails = toEmail.Split(';');
                                foreach (var i in emails)
                                {
                                    if (!string.IsNullOrEmpty(i) && !emailsuggestions.ToAddress.Contains(i))
                                    {
                                        toRecord += i + ";";
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(cctoEmail))
                            {
                                string[] emails = cctoEmail.Split(';');
                                foreach (var i in emails)
                                {
                                    if (!string.IsNullOrEmpty(i) && !emailsuggestions.CCAddress.Contains(i))
                                    {
                                        ccRecord += i + ";";
                                    }
                                }
                            }

                            if (!string.IsNullOrEmpty(ccRecord))
                            {
                                emailsuggestions.CCAddress += ";" + ccRecord;
                            }
                            if (!string.IsNullOrEmpty(toRecord))
                            {
                                emailsuggestions.ToAddress += ";" + toEmail;
                            }
                            db.Entry(emailsuggestions).State = EntityState.Modified;
                            db.SaveChanges();

                        }
                        else
                        {
                            //Insert Records
                            emailsuggestions = new SZ_EmailSuggestion();
                            emailsuggestions.CompanyID = details.SZ_Quotation.CompanyId.HasValue ? details.SZ_Quotation.CompanyId.Value : 0;
                            emailsuggestions.CreatedDate = DateTime.Now;
                            emailsuggestions.CCAddress = cctoEmail;
                            emailsuggestions.ToAddress = toEmail;
                            db.SZ_EmailSuggestion.Add(emailsuggestions);
                            db.SaveChanges();
                        }
                    }
                }

                try
                {
                    MailMessage mail = new MailMessage();

                    SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                    mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

                    var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                    if (isDevelopment.ToLower().Contains("true"))
                    {
                        mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(toEmail))
                        {
                            string[] emails = toEmail.Split(';');
                            foreach (var i in emails)
                            {
                                if (!string.IsNullOrEmpty(i))
                                {
                                    mail.To.Add(i);
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(cctoEmail))
                        {
                            string[] emails = cctoEmail.Split(';');
                            foreach (var i in emails)
                            {
                                if (!string.IsNullOrEmpty(i))
                                {
                                    mail.CC.Add(i);
                                }
                            }
                        }

                    }
                    ViewBag.IsAttachment = false;
                    if (imagePath != null && imagePath.Count > 0)
                    {
                        foreach (var item in imagePath)
                        {
                            var attach = new Attachment(Server.MapPath("~" + item));
                            attach.Name = item.Split('@')[0].ToLower().Replace("/content/invoice/", "");
                            mail.Attachments.Add(attach);
                        }
                        ViewBag.IsAttachment = true;
                    }

                    var htmlstring = PartialViewdata(this, "_PartialPrintRecordMail", model);

                    mail.Subject = "SynZeal Research PVT LTD Dispatch Detail :: " + model.Select(x => x.CompanyName).FirstOrDefault() + " :: Dated : " + System.DateTime.Now.ToShortDateString();
                    htmlstring = "<html><head></head><body style='font-family:'Roboto', sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";

                    mail.IsBodyHtml = true;
                    SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);

                    if (mailfrom == "Sales")
                    {
                        mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.SalesUsername"], "Sales SynZeal");
                        SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.SalesUsername"], ConfigurationManager.AppSettings["Email.SalesPassword"]);
                        htmlstring = htmlstring.Replace("~signaturename", "Rajen Patel");
                        htmlstring = htmlstring.Replace("~signaturemobile", "+91-76980 00178");
                    }
                    else if (mailfrom == "Export")
                    {
                        mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.ExportUsername"], "Export SynZeal");
                        SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.ExportUsername"], ConfigurationManager.AppSettings["Email.ExportPassword"]);
                        htmlstring = htmlstring.Replace("~signaturename", "Ketan Malani");
                        htmlstring = htmlstring.Replace("~signaturemobile", "+91-75750 10561");
                    }
                    else
                    {
                        htmlstring = htmlstring.Replace("~signaturename", "");
                        htmlstring = htmlstring.Replace("~signaturemobile", "");
                        SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                    }

                    mail.Body = htmlstring;
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mail);
                }
                catch (Exception ex)
                {
                    sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                }
                return Json(new
                {
                    success = true,
                    html = ""
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ViewNotification(int id)
        {
            try
            {
                var details = db.SZ_Notification.Where(x => x.Id == id).FirstOrDefault();
                if (details != null)
                {
                    ViewBag.Message = details.Message;
                    details.IsRead = true;
                    db.Entry(details).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ReminderInvoiceRecord(List<int> id)
        {
            try
            {
                var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = quotedetailsdata.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        model.Add(objmodel);
                    }
                }

                var htmlstring = PartialViewdata(this, "_PartialInvoiceReminderRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }



        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PrintInvoiceRecord(List<int> id)
        {
            try
            {
                var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = quotedetailsdata.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        model.Add(objmodel);
                    }
                }

                var htmlstring = PartialViewdata(this, "_PartialPrintRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SendInvoiceRecord(List<int> id)
        {
            try
            {
                ViewBag.Ids = id;
                var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = quotedetailsdata.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Courier = details.Courier;
                        objmodel.TrackingNo = details.TrackingNo;
                        objmodel.Location = details.Location;
                        objmodel.RefName = details.RefName;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        model.Add(objmodel);
                    }
                }

                var htmlstring = PartialViewdata(this, "_PartialSendInvoiceRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult PrintFollowupRecord(List<int> id)
        {
            try
            {
                var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in id)
                {
                    var details = quotedetailsdata.Where(x => x.Id == ids).FirstOrDefault();
                    if (details != null)
                    {
                        QuotationListModel objmodel = new QuotationListModel();
                        objmodel.QuoteDetailsId = details.Id;
                        objmodel.CreatedDate = details.CreatedDate;
                        objmodel.PONumber = details.SZ_Quotation.PONo;
                        objmodel.PODate = details.SZ_Quotation.PODate;
                        if (details.PackDate.HasValue)
                        {
                            objmodel.PackDate = details.PackDate.Value.ToShortDateString();
                        }
                        objmodel.Price = details.Price;
                        objmodel.CASNo = details.CASNo;
                        objmodel.CATNo = details.CATNo;
                        objmodel.LeadTime = details.LeadTime;
                        objmodel.SrPo = details.SrPo;
                        objmodel.ProductName = details.ProductName;
                        objmodel.RequiredQty = details.RequiredQty;
                        //objmodel.BatchNo = details.BatchNo;
                        objmodel.CompanyName = details.SZ_Quotation.CompanyName;
                        objmodel.Ref = details.SZ_Quotation.Ref;
                        objmodel.PurposeDispatch = details.PurposeDispatch;
                        if (/*string.IsNullOrEmpty(details.BatchNo) && */details.AdditionalBatchNo.HasValue)
                        {
                            objmodel.BatchNo = db.SZ_Inventory.Where(x => x.Id == details.AdditionalBatchNo.Value).Select(x => x.BatchNo).FirstOrDefault();
                        }

                        if (objmodel.BatchNo == "undefined")
                        {
                            objmodel.BatchNo = "";
                        }

                        model.Add(objmodel);
                    }
                }

                var htmlstring = PartialViewdata(this, "_PartialFollowupRecord", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult LoadAllCompanyList()
        {
            List<CompanyModel> model = new List<CompanyModel>();
            var companyList = db.SZ_CompanyList.OrderBy(x => x.Name).ToList();
            foreach (var item in companyList)
            {
                CompanyModel objmodel = new CompanyModel();
                objmodel.id = item.Id;
                objmodel.name = item.Name;
                model.Add(objmodel);
            }

            return Json(model, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult PendingUploadExportPopup()
        {
            var htmlstring = PartialViewdata(this, "_PartialExportPendingUpload", null);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult AddNewCompanyPopup()
        {
            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_Terms.ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.termsList = listItems;
            List<CompanyModel> model = new List<CompanyModel>();
            var htmlstring = PartialViewdata(this, "_PartialNewCompanyAdd", model);

            return Json(new
            {
                success = true,
                html = htmlstring
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult CompanySelectionPopup(List<int> id, string companyName)
        {
            try
            {
                ViewBag.companyName = companyName;
                ViewBag.rfqItds = string.Join(",", id);
                List<CompanyModel> model = new List<CompanyModel>();
                var companyList = db.SZ_CompanyList.OrderBy(x => x.Name).ToList();
                foreach (var item in companyList)
                {
                    CompanyModel objmodel = new CompanyModel();
                    objmodel.id = item.Id;
                    objmodel.name = item.Name;
                    model.Add(objmodel);

                }

                var listItems = new List<SelectListItem>();
                listItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                var terms = db.SZ_Terms.ToList();
                foreach (var term in terms)
                {
                    listItems.Add(new SelectListItem
                    {
                        Text = term.Name,
                        Value = term.Id.ToString()
                    });
                }

                ViewBag.termsList = listItems;

                var htmlstring = PartialViewdata(this, "_PartialCompanySelection", model);

                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SetFollowupRecord(List<int> id)
        {
            try
            {
                List<string> idss = Request.Form["id"].Split(',').ToList();
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var ids in idss)
                {
                    int i = Convert.ToInt32(ids);
                    var details = db.SZ_QuotationDetail.Where(x => x.Id == i).FirstOrDefault();
                    if (details != null)
                    {
                        details.FollowUpRemarkSecond = "Mail Sent.";
                        db.Entry(details).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true,
                    html = ""
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveToInvoiceList(List<int> id)
        {
            List<string> ponos = new List<string>();
            var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
            foreach (var ids in id)
            {
                var data = quotedetailsdata.Where(x => x.Id == ids).FirstOrDefault();
                if (data != null)
                {
                    if (!data.AdditionalBatchNo.HasValue)
                    {
                        ponos.Add(data.CATNo);
                        continue;
                    }
                    int batchnoId = 0;
                    if (data.AdditionalBatchNo.HasValue)
                    {
                        batchnoId = data.AdditionalBatchNo.Value;
                    }
                    data.MoveToInvoice = true;
                    data.PaymentStatus = "UnPaid";
                    data.ProcessState = (int)EnumList.ProjectStatus.MoveToInvoice;
                    data.PackDate = DateTime.Now;
                    data.MoveToInvoiceDate = DateTime.Now;
                    data.InvoiceBatchNo = db.SZ_Inventory.Where(x => x.Id == batchnoId).Select(x => x.BatchNo).FirstOrDefault();
                    data.Courier = "5";
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            if (ponos.Count() > 0)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = "Mostly Products move. Please select bactno of " + string.Join(", ", ponos) }
                };
            }
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { success = true, message = "Moved successfully.." }
            };
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveFollowupOverview(List<SZ_Quotation> quotes)
        {
            foreach (var quote in quotes)
            {
                var details = db.SZ_Quotation.Where(x => x.Id == quote.Id).FirstOrDefault();
                if (details != null)
                {
                    details.QuoteTotal = quote.QuoteTotal;
                    details.FollowUpComment = quote.FollowUpComment;
                    db.Entry(details).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { success = true, message = "Moved successfully.." }
            };
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult removeFollowupOverview(List<int> id)
        {
            foreach (var ids in id)
            {
                var details = db.SZ_Quotation.Where(x => x.Id == ids).FirstOrDefault();
                if (details != null)
                {
                    details.IsRemoveFollowup = true;
                    db.Entry(details).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { success = true, message = "Moved successfully.." }
            };
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveToInHouse(List<int> id)
        {
            var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
            foreach (var ids in id)
            {
                var details = quotedetailsdata.Where(x => x.Id == ids).FirstOrDefault();
                if (details != null)
                {
                    var quotedetailsPO = db.SZ_QuotationDetail.Where(x => x.QuoteId == details.QuoteId).Max(x => x.SrPo);
                    int srPo = 0;
                    if (quotedetailsPO != null && quotedetailsPO != 0 && quotedetailsPO.HasValue)
                    {
                        srPo = quotedetailsPO.Value + 1;
                    }
                    else
                    {
                        srPo = 1;
                    }
                    details.SrPo = srPo;
                    details.MoveToProject = true;
                    details.MoveProjectDate = DateTime.Now;
                    details.ProcessState = (int)EnumList.ProcessState.MoveToProject;
                    details.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                    details.ProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                    db.Entry(details).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { success = true, message = "Moved successfully.." }
            };
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MoveToClubQuote(List<int> id)
        {
            var quotedetailsdata = db.SZ_QuotationDetail.Where(x => id.Contains(x.Id)).ToList();
            var clubquoteList = db.SZ_ClubQuote.Where(x => id.Contains(x.QuotationDetailsId)).ToList();
            quotedetailsdata.ForEach(x =>
            {
                var isCheck = clubquoteList.Where(y => y.QuotationDetailsId == x.Id).FirstOrDefault();
                if (isCheck == null)
                {
                    SZ_ClubQuote objClubQuote = new SZ_ClubQuote();
                    objClubQuote.QuotationDetailsId = x.Id;
                    db.SZ_ClubQuote.Add(objClubQuote);
                }
            });
            db.SaveChanges();
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { success = true, message = "Moved successfully.." }
            };
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveSynthesisLog(ProductInfo model)
        {
            try
            {
                var szquotedetails = db.SZ_QuotationDetail.Where(x => x.Id == model.id).FirstOrDefault();
                if (szquotedetails != null)
                {
                    szquotedetails.IsSynthesisLog = true;
                    db.Entry(szquotedetails).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateSynthesisProductInfo(ProductInfo model)
        {
            try
            {
                var szquotedetails = db.SZ_QuotationDetail.Where(x => x.Id == model.id).FirstOrDefault();
                if (szquotedetails != null)
                {
                    string oldProjectType = szquotedetails.ProjectType;

                    szquotedetails.ProductRemark = model.productremark;
                    szquotedetails.ProductName = model.ProductName;

                    if (model.followUpRemark != "undefined")
                    {
                        szquotedetails.FollowUpRemark = model.followUpRemark;
                    }
                    if (model.followUpRemarkSecond != "undefined")
                    {
                        szquotedetails.FollowUpRemarkSecond = model.followUpRemarkSecond;
                    }
                    szquotedetails.CASNo = model.casno;
                    if (!string.IsNullOrEmpty(model.catNo))
                    {
                        var proData = db.Products.Where(x => x.Published == true && x.Deleted == false && x.Sku.ToLower().Trim() == model.catNo.ToLower().Trim()).FirstOrDefault();
                        if (proData != null)
                        {
                            szquotedetails.ProductId = proData.Id;
                            szquotedetails.IsUploadServer = true;
                        }
                        else
                        {
                            szquotedetails.IsUploadServer = false;
                        }
                    }
                    else
                    {
                        szquotedetails.ProductId = 0;
                        szquotedetails.IsUploadServer = false;
                    }
                    szquotedetails.ProjectType = model.projectType;
                    szquotedetails.CATNo = model.catNo;
                    szquotedetails.Price = model.price;
                    szquotedetails.LeadTime = model.leadtime;
                    szquotedetails.DisplayOrder = model.displayOrder;
                    szquotedetails.ScientistCustomerId = model.scientistCustomerid;
                    if (!string.IsNullOrEmpty(model.estimateDispatchDate))
                    {
                        szquotedetails.EstimateDispatchDate = Convert.ToDateTime(model.estimateDispatchDate);
                    }
                    else
                    {
                        szquotedetails.EstimateDispatchDate = null;
                    }
                    if ("undefined" == szquotedetails.BatchNo)
                    {
                        szquotedetails.BatchNo = "";
                    }

                    if (!string.IsNullOrEmpty(model.projectType) && Convert.ToInt32(model.projectType) == (int)EnumList.ProjectType.InStock)
                    {
                        szquotedetails.ProjectStatus = (int)EnumList.ProjectStatus.MoveToInstock;
                        if (szquotedetails.ProcessState <= (int)EnumList.ProcessState.MoveToInStock)
                        {
                            szquotedetails.ProcessState = (int)EnumList.ProcessState.MoveToInStock;
                        }
                    }
                    if (!string.IsNullOrEmpty(model.projectType) && oldProjectType != model.projectType && (Convert.ToInt32(model.projectType) == (int)EnumList.ProjectType.Purchase || Convert.ToInt32(model.projectType) == (int)EnumList.ProjectType.PurSynthesis))
                    {
                        szquotedetails.PurchaseDate = DateTime.Now;
                        szquotedetails.ProjectStatus = (int)EnumList.ProjectStatus.MoveToPurchase;
                        if (szquotedetails.ProcessState <= (int)EnumList.ProcessState.MoveToPurchase)
                        {
                            szquotedetails.ProcessState = (int)EnumList.ProcessState.MoveToPurchase;
                        }
                    }
                    db.Entry(szquotedetails).State = EntityState.Modified;
                    db.SaveChanges();
                    var szquote = db.SZ_Quotation.Where(x => x.Id == szquotedetails.QuoteId).FirstOrDefault();
                    if (szquote != null)
                    {

                        if (model.ponumber != "undefined" && model.ponumber != null)
                        {
                            if (!string.IsNullOrEmpty(model.ponumber) && string.IsNullOrEmpty(szquote.PONo))
                            {
                                szquote.PODate = DateTime.Now;
                            }
                            szquote.PONo = model.ponumber;
                            db.Entry(szquote).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                    }
                }
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetCurrencyData()
        {
            var data = db.SZ_Currency.ToList();
            return Json(data);
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateProductInfo(ProductInfo model)
        {
            try
            {
                var szquotedetails = db.SZ_QuotationDetail.Where(x => x.Id == model.id).FirstOrDefault();
                if (szquotedetails != null)
                {
                    var oldModel = LogManagement.PrepareQuoteDetailEntity(szquotedetails);

                    szquotedetails.ProductRemark = model.productremark;
                    szquotedetails.ProductName = model.ProductName;
                    if (!string.IsNullOrEmpty(model.batchno) && model.batchno != "undefined")
                    {
                        model.batchno = model.batchno.Trim();
                        szquotedetails.QuoteBatchNo = model.batchno.Trim().Split(' ')[0].Trim();
                    }
                    else
                    {
                        szquotedetails.QuoteBatchNo = "0";
                    }
                    if (model.followUpRemark != "undefined")
                    {
                        szquotedetails.FollowUpRemark = model.followUpRemark;
                    }
                    if (model.followUpRemarkSecond != "undefined")
                    {
                        szquotedetails.FollowUpRemarkSecond = model.followUpRemarkSecond;
                    }
                    szquotedetails.CASNo = model.casno;
                    if (!string.IsNullOrEmpty(model.catNo))
                    {
                        var proData = db.Products.Where(x => x.Published == true && x.Deleted == false && x.Sku.ToLower().Trim() == model.catNo.ToLower().Trim()).FirstOrDefault();
                        if (proData != null)
                        {
                            szquotedetails.ProductId = proData.Id;
                            if (szquotedetails.CATNo != model.catNo)
                            {
                                szquotedetails.CASNo = proData.ManufacturerPartNumber;
                            }
                            if (string.IsNullOrEmpty(szquotedetails.CASNo))
                            {
                                szquotedetails.CASNo = proData.ManufacturerPartNumber;
                            }
                            szquotedetails.IsUploadServer = true;
                        }
                        else
                        {
                            szquotedetails.ProductId = 0;
                            szquotedetails.IsUploadServer = false;
                        }
                    }
                    else
                    {
                        szquotedetails.ProductId = 0;
                        szquotedetails.IsUploadServer = false;
                    }
                    szquotedetails.CATNo = model.catNo;
                    szquotedetails.Price = model.price;
                    szquotedetails.LeadTime = model.leadtime;
                    szquotedetails.DisplayOrder = model.displayOrder;
                    szquotedetails.Discount = model.discount;
                    if (!string.IsNullOrEmpty(model.estimateDispatchDate))
                    {
                        szquotedetails.EstimateDispatchDate = Convert.ToDateTime(model.estimateDispatchDate);
                    }
                    else
                    {
                        szquotedetails.EstimateDispatchDate = null;
                    }

                    if ("undefined" == szquotedetails.BatchNo || string.IsNullOrEmpty(szquotedetails.BatchNo))
                    {
                        szquotedetails.BatchNo = "";
                    }

                    if (model.actionname == "partialproductupdate")
                    {
                        szquotedetails.IsSynthesisLog = model.synthesislog;
                        szquotedetails.FinalPrice = model.finalprice;
                    }
                    if (model.actionname == "all")
                    {
                        szquotedetails.FinalPrice = model.finalprice;
                    }

                    if (model.actionname == "followup")
                    {
                        if (szquotedetails.ContactDetail != model.contactdetail)
                        {
                            szquotedetails.IsFollowUpAdminChange = true;
                            //szquotedetails.IsFollowupChange = false;
                        }
                        szquotedetails.ContactDetail = model.contactdetail;
                    }

                    var szquote = db.SZ_Quotation.Where(x => x.Id == szquotedetails.QuoteId).FirstOrDefault();
                    if (szquote != null)
                    {
                        if (model.ponumber != "undefined" && model.ponumber != null)
                        {
                            if (!string.IsNullOrEmpty(model.ponumber) && string.IsNullOrEmpty(szquote.PONo))
                            {
                                szquote.PODate = DateTime.Now;
                            }
                            if (!string.IsNullOrEmpty(model.ponumber) && string.IsNullOrEmpty(szquote.PONo) && szquote.CountryType == "Export")
                            {
                                szquotedetails.ActivityStatus = "Approval First";
                            }
                            szquotedetails.IsSynthesisLog = false;


                            szquote.PONo = model.ponumber;
                            db.Entry(szquote).State = EntityState.Modified;
                        }
                        //else
                        //{
                        //    szquote.PONo = "";
                        //    db.Entry(szquote).State = EntityState.Modified;
                        //}
                    }

                    db.Entry(szquotedetails).State = EntityState.Modified;
                    db.SaveChanges();

                    PrepareQuoteDetailsLog(szquotedetails, oldModel);

                }
                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateProductInfoAndCheck(List<ProductInfo> modelss, int compId)
        {
            try
            {
                foreach (var model in modelss)
                {
                    var szquotedetails = db.SZ_QuotationDetail.Where(x => x.Id == model.id).FirstOrDefault();
                    if (szquotedetails != null)
                    {
                        var oldModel = LogManagement.PrepareQuoteDetailEntity(szquotedetails);
                        szquotedetails.ProductRemark = model.productremark;
                        szquotedetails.ProductName = model.ProductName;
                        if (!string.IsNullOrEmpty(model.batchno) && model.batchno != "undefined")
                        {
                            model.batchno = model.batchno.Trim();
                            szquotedetails.QuoteBatchNo = model.batchno.Trim().Split(' ')[0].Trim();
                        }
                        else
                        {
                            szquotedetails.QuoteBatchNo = "0";
                        }
                        if (model.followUpRemark != "undefined")
                        {
                            szquotedetails.FollowUpRemark = model.followUpRemark;
                        }
                        if (model.followUpRemarkSecond != "undefined")
                        {
                            szquotedetails.FollowUpRemarkSecond = model.followUpRemarkSecond;
                        }
                        szquotedetails.CASNo = model.casno;
                        if (!string.IsNullOrEmpty(model.catNo))
                        {
                            var proData = db.Products.Where(x => x.Published == true && x.Deleted == false && x.Sku.ToLower().Trim() == model.catNo.ToLower().Trim()).FirstOrDefault();
                            if (proData != null)
                            {
                                szquotedetails.ProductId = proData.Id;
                                if (string.IsNullOrEmpty(szquotedetails.CASNo))
                                {
                                    szquotedetails.CASNo = proData.ManufacturerPartNumber;
                                }
                                szquotedetails.IsUploadServer = true;
                            }
                            else
                            {
                                szquotedetails.ProductId = 0;
                                szquotedetails.IsUploadServer = false;
                            }
                        }
                        else
                        {
                            szquotedetails.ProductId = 0;
                            szquotedetails.IsUploadServer = false;
                        }
                        szquotedetails.CATNo = model.catNo;
                        szquotedetails.Price = model.price;
                        szquotedetails.LeadTime = model.leadtime;
                        szquotedetails.DisplayOrder = model.displayOrder;
                        szquotedetails.Discount = model.discount;
                        if (!string.IsNullOrEmpty(model.estimateDispatchDate))
                        {
                            szquotedetails.EstimateDispatchDate = Convert.ToDateTime(model.estimateDispatchDate);
                        }
                        else
                        {
                            szquotedetails.EstimateDispatchDate = null;
                        }
                        if ("undefined" == szquotedetails.BatchNo || string.IsNullOrEmpty(szquotedetails.BatchNo))
                        {
                            szquotedetails.BatchNo = "";
                        }
                        if (model.actionname == "partialproductupdate")
                        {
                            szquotedetails.IsSynthesisLog = model.synthesislog;
                            szquotedetails.FinalPrice = model.finalprice;
                        }
                        if (model.actionname == "all")
                        {
                            szquotedetails.FinalPrice = model.finalprice;
                        }
                        if (model.actionname == "followup")
                        {
                            if (szquotedetails.ContactDetail != model.contactdetail)
                            {
                                szquotedetails.IsFollowUpAdminChange = true;
                            }
                            szquotedetails.ContactDetail = model.contactdetail;
                        }
                        var szquote = db.SZ_Quotation.Where(x => x.Id == szquotedetails.QuoteId).FirstOrDefault();
                        if (szquote != null)
                        {
                            if (model.ponumber != "undefined" && model.ponumber != null)
                            {
                                if (!string.IsNullOrEmpty(model.ponumber) && string.IsNullOrEmpty(szquote.PONo))
                                {
                                    szquote.PODate = DateTime.Now;
                                }
                                szquote.PONo = model.ponumber;
                                db.Entry(szquote).State = EntityState.Modified;
                                szquotedetails.IsSynthesisLog = false;
                            }
                        }
                        db.Entry(szquotedetails).State = EntityState.Modified;
                        db.SaveChanges();

                        PrepareQuoteDetailsLog(szquotedetails, oldModel);
                    }
                }

                // check old history data
                var sixmonth = DateTime.Now.AddMonths(-6);
                var threemonth = DateTime.Now.AddMonths(-6);
                var oldszquotedetails = new List<SZ_QuotationDetail>();
                var quotedetailsPriceList = new List<SuggestedPriceListModel>();
                foreach (var model in modelss)
                {
                    var pricelist = new List<string>();
                    if (!string.IsNullOrEmpty(model.price))
                    {
                        var splitrecords = model.price.Split(',');
                        foreach (var item in splitrecords)
                        {
                            pricelist.Add(item.Split(' ')[0].Trim() + " mg");
                        }
                    }
                    var catno = model.catNo;
                    foreach (var price in pricelist)
                    {
                        var quotedatas = db.SZ_QuotationDetail.Where(x => x.Id == model.id).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                        var szquotedetails = db.SZ_QuotationDetail.Where(x => x.SZ_Quotation.CountryType == quotedatas.SZ_Quotation.CountryType && x.Price.Contains(price) && x.CATNo == catno && x.SZ_Quotation.CreatedDate >= sixmonth && x.SZ_Quotation.CompanyId == compId && x.Id != model.id).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                        if (szquotedetails != null)
                        {
                            oldszquotedetails.Add(szquotedetails);
                        }
                        else
                        {
                            var szquotedetailsother = db.SZ_QuotationDetail.Where(x => x.SZ_Quotation.CountryType == quotedatas.SZ_Quotation.CountryType && x.Price.Contains(price) && x.CATNo == catno && x.SZ_Quotation.CreatedDate >= threemonth && x.SZ_Quotation.CompanyId != compId && x.Id != model.id).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                            if (szquotedetailsother != null)
                            {
                                oldszquotedetails.Add(szquotedetailsother);
                            }
                        }
                    }

                    //var szquotedetails = db.SZ_QuotationDetail.Where(x => pricelist.Contains(x.Price) && x.CATNo == catno && x.SZ_Quotation.CreatedDate >= sixmonth && x.SZ_Quotation.CompanyId == compId && x.Id != model.id).OrderByDescending(x=>x.CreatedDate).FirstOrDefault();
                    //if (szquotedetails != null)
                    //{
                    //    oldszquotedetails.Add(szquotedetails);
                    //}
                    //else
                    //{
                    //    var szquotedetailsother = db.SZ_QuotationDetail.Where(x => pricelist.Contains(x.Price) && x.CATNo == catno && x.SZ_Quotation.CreatedDate >= threemonth && x.SZ_Quotation.CompanyId != compId && x.Id != model.id).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                    //    if (szquotedetailsother != null)
                    //    {
                    //        oldszquotedetails.Add(szquotedetailsother);
                    //    }
                    //}
                }


                var htmlstring = PartialViewdata(this, "_PartialCheckQuoteHistoryData", oldszquotedetails);


                return Json(new
                {
                    success = true,
                    html = htmlstring
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult ProductListBycategory(string ProductName)
        {
            try
            {
                string uri = Domain + "/api/RestAPI/ProductListBycategory?ProductName=" + ProductName.Trim();
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductOutputModel = JsonConvert.DeserializeObject<List<ProductOverviewModel>>(productModel);
                    var htmlstring = PartialViewdata(this, "_PartialFindProductList", ProductOutputModel);

                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "success", data = ProductOutputModel, html = htmlstring }
                    };
                }
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "fail", data = ex.Message }
                };
            }

        }

        public ActionResult saveFindProductData(List<int> ids, string uniqueId, int quoteId = 0, int companyId = 0) // ids are null
        {
            Guid tempGuid = Guid.Parse(uniqueId);
            string uri = Domain + "/api/RestAPI/ProductDetailsByProductids?id=" + string.Join(",", ids);
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                var productlist = JsonConvert.DeserializeObject<List<ProductDetailsModel>>(productModel);
                int? maxDisplayOrderNo = db.SZ_QuotationDetail.Where(x => x.QuoteId == quoteId).Max(x => x.DisplayOrder);
                if (maxDisplayOrderNo.HasValue)
                {
                    maxDisplayOrderNo += 1;
                }
                else
                {
                    maxDisplayOrderNo = 1;
                }
                foreach (var product in productlist)
                {
                    string pname = string.Empty;
                    if (product != null)
                    {
                        if (product.ManufacturerPartNumber.ToLower() != "na" && product.ManufacturerPartNumber.ToLower() != "n/a")
                        {
                            pname = product.ManufacturerPartNumber;
                        }
                    }

                    var productsamedata = db.Products.Where(x => x.ManufacturerPartNumber == pname.Trim() && x.Id != product.Id && x.Published == true && x.Deleted == false).ToList();
                    var pRemark = string.Empty;
                    if (productsamedata != null && productsamedata.Count > 1)
                    {
                        List<string> sameAsArray = new List<string>();
                        foreach (var item in productsamedata)
                        {
                            if (product.Id != item.Id && !sameAsArray.Contains(item.Sku))
                            {
                                if (!string.IsNullOrEmpty(item.ManufacturerPartNumber) && item.ManufacturerPartNumber != "N/A" && item.ManufacturerPartNumber != "NA")
                                {
                                    sameAsArray.Add(item.Sku);
                                }
                            }
                        }
                        pRemark = "Also Known as " + string.Join(", ", sameAsArray);
                    }
                    SZ_QuotationDetail objTemp = new SZ_QuotationDetail();
                    objTemp.ProductId = product.Id;
                    objTemp.CASNo = product.ManufacturerPartNumber;
                    objTemp.CreatedDate = DateTime.Now;
                    objTemp.IsUploadServer = true;
                    //objTemp.BackNoDetail = string.Join(", ", product.InventoryModel.Select(x => x.BatchNo + " (" + x.Qty + ")"));
                    objTemp.ImagePath = product.DefaultPictureModel.ImageUrl;
                    objTemp.ProductName = product.Name;
                    objTemp.CATNo = product.Sku;
                    objTemp.QuoteId = quoteId;
                    objTemp.IsSynthesisLog = false;
                    objTemp.ProductRemark = pRemark;
                    if (product != null && product.InventoryModel.Count() > 0)
                    {
                        objTemp.LeadTime = "In-Stock";
                    }

                    if (companyId != null)
                    {
                        var oldproductData = (from i in db.SZ_Quotation
                                              join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                                              where t2.MoveToProject == true && !string.IsNullOrEmpty(i.PONo) && i.CompanyId == companyId &&
                                              t2.ProductId == objTemp.ProductId
                                              select i).Distinct().ToList();
                        if (oldproductData != null && oldproductData.Count > 0 && !string.IsNullOrEmpty(objTemp.CATNo))
                        {
                            objTemp.ProductRemark += " Earlier PO Ref # " + string.Join(", ", oldproductData.Select(x => x.PONo));
                            objTemp.ProductRemark += "  Ref # " + string.Join(", ", oldproductData.Select(x => x.Ref));
                        }
                    }
                    //var pricedata = db.SZ_PriceList.Where(x => x.ProductId == product.Id).FirstOrDefault();
                    //if (pricedata != null)
                    //{
                    //    int discount = 0;
                    //    if (!string.IsNullOrEmpty(pricedata.DiscountINR))
                    //    {
                    //        discount = Convert.ToInt32(discount);
                    //    }

                    //    List<string> objData = new List<string>();
                    //    if (!string.IsNullOrEmpty(pricedata.TenPrice))
                    //    {
                    //        objData.Add("10 mg@" + calculatePerc(pricedata.TenPrice, discount) + " INR+");
                    //    }
                    //    if (!string.IsNullOrEmpty(pricedata.TwentyFivePrice))
                    //    {
                    //        objData.Add("25 mg@" + calculatePerc(pricedata.TwentyFivePrice, discount) + " INR+");
                    //    }
                    //    if (!string.IsNullOrEmpty(pricedata.FiftyPrice))
                    //    {
                    //        objData.Add("50 mg@" + calculatePerc(pricedata.FiftyPrice, discount) + " INR+");
                    //    }
                    //    if (!string.IsNullOrEmpty(pricedata.HundredPrice))
                    //    {
                    //        objData.Add("100 mg@" + calculatePerc(pricedata.HundredPrice, discount) + " INR+");
                    //    }
                    //    if (!string.IsNullOrEmpty(pricedata.TwoHundredPrice))
                    //    {
                    //        objData.Add("200 mg@" + calculatePerc(pricedata.TwoHundredPrice, discount) + " INR+");
                    //    }
                    //    if (!string.IsNullOrEmpty(pricedata.LeadTime))
                    //    {
                    //        objTemp.LeadTime = pricedata.LeadTime;
                    //    }
                    //    objTemp.Price = string.Join(", ", objData);
                    //}
                    objTemp.DisplayOrder = maxDisplayOrderNo;

                    var productdata = db.Products.Where(x => x.Id == product.Id).FirstOrDefault();
                    if (productdata != null)
                    {
                        if (!string.IsNullOrEmpty(objTemp.ProductRemark))
                        {
                            objTemp.ProductRemark += " ,";
                        }
                        if (productdata.ShippingCondition == "Cold Shipment")
                        {
                            objTemp.ProductRemark += " Cold Shipment Required";
                        }
                        if (!string.IsNullOrEmpty(productdata.ProductRemark))
                        {
                            objTemp.ProductRemark = productdata.ProductRemark + ", " + objTemp.ProductRemark;
                        }
                    }

                    db.SZ_QuotationDetail.Add(objTemp);
                    maxDisplayOrderNo += 1;
                }
                db.SaveChanges();
            }
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { type = "success" }
            };
        }

        public ActionResult CheckDuplicateQuote(int companyId, string catno)
        {
            catno = catno.Trim().ToLower();
            var compData = db.SZ_CompanyList.Where(x => x.Id == companyId).FirstOrDefault();
            if (compData == null)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "notfound" }
                };
            }
            //var data = db.SZ_Quotation.Where(x => x.CompanyName.ToLower() == compData.Name.ToLower() && string.IsNullOrEmpty(x.PONo)).FirstOrDefault();
            var data = (from i in db.SZ_Quotation
                        join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                        where string.IsNullOrEmpty(i.PONo) && i.CompanyName.Trim().ToLower() == compData.Name.Trim().ToLower()
                        && t2.CATNo.ToLower() == catno
                        //&& t2.CreatedDate.AddDays(7).Date >= DateTime.Now.Date  
                        orderby t2.CreatedDate descending
                        select t2).ToList();
            if (data != null && data.Count() > 0)
            {
                var filterdata = (from t2 in data
                                  where t2.CreatedDate.Date >= DateTime.Now.Date.AddDays(-7)
                                  select t2).ToList();

                if (filterdata != null && filterdata.Count() > 0)
                {
                    SZ_Quotation objquote = new SZ_Quotation();
                    objquote.CompanyName = filterdata[0].SZ_Quotation.CompanyName;
                    objquote.EmailAddress = filterdata[0].SZ_Quotation.EmailAddress;
                    objquote.Ref = filterdata[0].SZ_Quotation.Ref;
                    objquote.Id = filterdata[0].SZ_Quotation.Id;
                    List<SZ_QuotationDetail> objdetails = new List<SZ_QuotationDetail>();

                    foreach (var i in filterdata)
                    {
                        SZ_QuotationDetail obj = new SZ_QuotationDetail();
                        obj.ProductName = i.ProductName;
                        obj.CASNo = i.CASNo;
                        obj.CATNo = i.CATNo;
                        obj.Price = i.Price;
                        obj.LeadTime = i.LeadTime;
                        objdetails.Add(obj);
                    }
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "available", quotation = objquote, quotationdetail = objdetails }
                    };
                }
            }

            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { type = "notfound" }
            };
        }


        public int calculatePerc(string price, int discount)
        {

            var divide = (Convert.ToDecimal(price) * discount / 100);

            var calcPrice = Convert.ToInt32((Convert.ToDecimal(price) - divide));
            return calcPrice;
        }

        public ActionResult GetPurchaseExcelData(string casno)
        {
            casno = casno.ToLower().Trim();
            var data = db.SZ_PurchaseSupplierCatalogue.Where(x => x.CASNo.Trim().ToLower() == casno).ToList();
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ProductDetailsBynamecasandcat(string ProductName, string casno = null, string catNo = null)
        {
            var product = db.Products.Where(x => x.Sku == ProductName && x.Published == true && x.Deleted == false).FirstOrDefault();
            if (product != null)
            {
                if (!string.IsNullOrEmpty(product.ManufacturerPartNumber))
                {
                    product.ManufacturerPartNumber = product.ManufacturerPartNumber.Trim();
                }
                if (product.ManufacturerPartNumber.ToLower() != "na" && product.ManufacturerPartNumber.ToLower() != "n/a")
                {
                    ProductName = product.ManufacturerPartNumber;
                }
            }
            string uri = Domain + "/api/RestAPI/ProductDetailsBynamecasandcat?ProductName=" + ProductName.Trim() + "&casno=" + casno + "&catNo=" + catNo;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    if (string.IsNullOrEmpty(response.Result))
                    {
                        return new JsonResult()
                        {
                            JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                            Data = new { type = "fail", data = "Response result blank" + response.Result }
                        };
                    }
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductOutputModel = JsonConvert.DeserializeObject<List<ProductOverviewModel>>(productModel);

                    if (ProductOutputModel.Count == 1)
                    {
                        if (!string.IsNullOrEmpty(ProductOutputModel[0].CasNo) && ProductOutputModel[0].CasNo.ToLower().Trim() != "na" && ProductOutputModel[0].CasNo.ToLower().Trim() != "n/a")
                        {
                            string urisecond = Domain + "/api/RestAPI/ProductDetailsBynamecasandcat?ProductName=" + ProductOutputModel[0].CasNo.Trim() + "&casno=" + casno + "&catNo=" + catNo;

                            using (HttpClient httpClientsecond = new HttpClient())
                            {
                                Task<String> responsesecond = httpClientsecond.GetStringAsync(urisecond);
                                if (!string.IsNullOrEmpty(responsesecond.Result))
                                {
                                    string productModelsecond = JsonConvert.DeserializeObjectAsync<string>(responsesecond.Result).Result;
                                    ProductOutputModel = JsonConvert.DeserializeObject<List<ProductOverviewModel>>(productModelsecond);
                                }
                            }
                        }
                    }

                    var isApi = db.Categories.Where(x => x.Name.Trim().ToLower() == ProductName.Trim().ToLower()).Any();

                    foreach (var i in ProductOutputModel)
                    {
                        if (i.InventoryModel != null && i.InventoryModel.Count > 0)
                        {
                            foreach (var item in i.InventoryModel)
                            {
                                if (item.AvailableQty.HasValue)
                                {
                                    decimal availQty = Convert.ToDecimal(item.AvailableQty.Value);
                                    if (availQty < 0)
                                    {
                                        availQty = 0;
                                    }
                                    item.Qty = availQty;
                                }
                                else
                                {
                                    item.Qty = 0;
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(casno) && i.CasNo != "N/A" && i.CasNo != "NA")
                        {
                            var allproductcas = db.Products.Where(x => x.ManufacturerPartNumber.Trim() == i.CasNo.Trim() && x.Id != i.Id && x.Published == true && x.Deleted == false).ToList();
                            if (allproductcas != null && allproductcas.Count > 0)
                            {
                                foreach (var allp in allproductcas)
                                {
                                    var inventory = db.SZ_Inventory.Where(x => x.ProductId == allp.Id).ToList();
                                    if (inventory != null && inventory.Count > 0)
                                    {
                                        foreach (var k in inventory)
                                        {
                                            Synzeal_Inventory.Models.ProductDetailsModel.ProductSZInventoryModel obj = new ProductDetailsModel.ProductSZInventoryModel();
                                            obj.BatchNo = k.BatchNo;
                                            obj.Qty = k.Qty.HasValue ? k.Qty.Value : 0;
                                            if (k.AvailableQty.HasValue)
                                            {
                                                decimal availQty = Convert.ToDecimal(k.AvailableQty.Value);
                                                if (availQty < 0)
                                                {
                                                    availQty = 0;
                                                }
                                                obj.Qty = availQty;
                                            }
                                            i.InventoryModel.Add(obj);
                                        }
                                    }
                                }
                            }
                        }

                        var pricedata = db.SZ_PriceList.Where(x => x.ProductId == i.Id && (x.IsUsd == false || x.IsUsd == null)).FirstOrDefault();
                        if (pricedata != null)
                        {
                            i.PriceModel = new ProductPriceModel();
                            i.PriceModel.Id = pricedata.Id;
                            i.PriceModel.DiscountINR = pricedata.DiscountINR;
                            i.PriceModel.DiscountUSD = pricedata.DiscountUSD;
                            i.PriceModel.LeadTime = pricedata.LeadTime;
                            i.PriceModel.TenPrice = pricedata.TenPrice;
                            i.PriceModel.TenUSD = pricedata.TenUSD;
                            i.PriceModel.TwentyFivePrice = pricedata.TwentyFivePrice;
                            i.PriceModel.TwentyfiveUSD = pricedata.TwentyfiveUSD;
                            i.PriceModel.FiftyPrice = pricedata.FiftyPrice;
                            i.PriceModel.FiftyUSD = pricedata.FiftyUSD;
                            i.PriceModel.HundredPrice = pricedata.HundredPrice;
                            i.PriceModel.OnehundredUSD = pricedata.OnehundredUSD;
                            i.PriceModel.TwoHundredPrice = pricedata.TwoHundredPrice;
                            i.PriceModel.TwohundredFiftyUSD = pricedata.TwohundredFiftyUSD;
                            i.PriceModel.FivehundredPrice = pricedata.FivehundredPrice;
                            i.PriceModel.FivehundredUSD = pricedata.FivehundredUSD;
                            i.PriceModel.OneThousandPrice = pricedata.OneThousandPrice;
                            i.PriceModel.OneThousandUSD = pricedata.OneThousandUSD;
                            i.PriceModel.IsPriceApproved = pricedata.IsPriceApproved;
                            int discount = 0;
                            if (!string.IsNullOrEmpty(pricedata.DiscountINR))
                            {
                                discount = Convert.ToInt32(pricedata.DiscountINR);
                            }
                            List<string> objData = new List<string>();
                            if (!string.IsNullOrEmpty(pricedata.TenPrice))
                            {
                                objData.Add("10 mg@" + calculatePerc(pricedata.TenPrice, discount) + " INR+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.TwentyFivePrice))
                            {
                                objData.Add("25 mg@" + calculatePerc(pricedata.TwentyFivePrice, discount) + " INR+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.FiftyPrice))
                            {
                                objData.Add("50 mg@" + calculatePerc(pricedata.FiftyPrice, discount) + " INR+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.HundredPrice))
                            {
                                objData.Add("100 mg@" + calculatePerc(pricedata.HundredPrice, discount) + " INR+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.TwoHundredPrice))
                            {
                                objData.Add("200 mg@" + calculatePerc(pricedata.TwoHundredPrice, discount) + " INR+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.LeadTime))
                            {
                                i.LeadTime = pricedata.LeadTime;
                            }

                            i.INRPrice = string.Join(", ", objData);
                        }

                        var priceusddata = db.SZ_PriceList.Where(x => x.ProductId == i.Id && x.IsUsd == true).FirstOrDefault();
                        if (priceusddata != null)
                        {
                            if (i.PriceModel == null)
                            {
                                i.PriceModel = new ProductPriceModel();
                            }
                            i.PriceModel.Id = pricedata.Id;
                            i.PriceModel.DiscountUSD = pricedata.DiscountUSD;
                            i.PriceModel.LeadTime = pricedata.LeadTime;
                            i.PriceModel.TenUSD = pricedata.TenUSD;
                            i.PriceModel.TwentyfiveUSD = pricedata.TwentyfiveUSD;
                            i.PriceModel.FiftyUSD = pricedata.FiftyUSD;
                            i.PriceModel.OnehundredUSD = pricedata.OnehundredUSD;
                            i.PriceModel.TwohundredFiftyUSD = pricedata.TwohundredFiftyUSD;
                            i.PriceModel.FivehundredUSD = pricedata.FivehundredUSD;
                            i.PriceModel.OneThousandUSD = pricedata.OneThousandUSD;

                            int discount = 0;
                            if (!string.IsNullOrEmpty(pricedata.DiscountINR))
                            {
                                discount = Convert.ToInt32(pricedata.DiscountINR);
                            }
                            List<string> objData = new List<string>();
                            if (!string.IsNullOrEmpty(pricedata.TenUSD))
                            {
                                objData.Add("10 mg@" + calculatePerc(pricedata.TenUSD, discount) + " USD+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.TwentyfiveUSD))
                            {
                                objData.Add("25 mg@" + calculatePerc(pricedata.TwentyfiveUSD, discount) + " USD+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.FiftyUSD))
                            {
                                objData.Add("50 mg@" + calculatePerc(pricedata.FiftyUSD, discount) + " USD+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.OnehundredUSD))
                            {
                                objData.Add("100 mg@" + calculatePerc(pricedata.OnehundredUSD, discount) + " USD+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.TwohundredFiftyUSD))
                            {
                                objData.Add("250 mg@" + calculatePerc(pricedata.TwohundredFiftyUSD, discount) + " USD+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.FivehundredUSD))
                            {
                                objData.Add("500 mg@" + calculatePerc(pricedata.FivehundredUSD, discount) + " USD+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.OneThousandUSD))
                            {
                                objData.Add("1000 mg@" + calculatePerc(pricedata.OneThousandUSD, discount) + " USD+");
                            }
                            if (!string.IsNullOrEmpty(pricedata.LeadTime))
                            {
                                i.LeadTime = pricedata.LeadTime;
                            }
                            i.USDPrice = string.Join(", ", objData);
                        }
                    }

                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        MaxJsonLength = Int32.MaxValue,
                        Data = new { type = "success", data = ProductOutputModel, isApi = isApi }
                    };
                }
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    MaxJsonLength = Int32.MaxValue,
                    Data = new { type = "fail", data = ex.Message + " / Stack :" + ex.StackTrace + " / URL : " + uri }
                };
            }
        }

        public ActionResult getProductDetailsByQuoteDetailsId(int id)
        {
            try
            {
                var model = (from x in db.SZ_QuotationDetail
                             where x.Id == id
                             select x).FirstOrDefault();
                var obj = new
                {
                    ProductId = model.ProductId,
                    ProductName = model.ProductName,
                    CASNo = model.CASNo,
                    ImagePath = model.ImagePath,
                    Price = model.Price,
                    LeadTime = model.LeadTime,
                    CATNo = model.CATNo,
                };

                if (!string.IsNullOrEmpty(model.CATNo))
                {
                    string uri = Domain + "/api/RestAPI/ProductDetailsBySku?sku=" + model.CATNo;
                    using (HttpClient httpClient = new HttpClient())
                    {
                        Task<String> response = httpClient.GetStringAsync(uri);
                        string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                        var ProductOutputModel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                        return new JsonResult()
                        {
                            JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                            Data = new { record = obj, inventoryModel = ProductOutputModel.InventoryModel, success = true }
                        };
                    }
                }
                else
                {
                    var ProductOutputModel = new ProductDetailsModel();
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { record = obj, inventoryModel = ProductOutputModel.InventoryModel, success = true }
                    };
                }
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { record = ex.Message, success = false }
                };
            }
        }

        public ActionResult addPreviousProductByQuoteDetailsId(int id, int quoteId)
        {
            try
            {
                var model = (from x in db.SZ_QuotationDetail
                             where x.Id == id
                             select x).FirstOrDefault();
                var obj = new SZ_QuotationDetail
                {
                    ProductId = model.ProductId,
                    ProductName = model.ProductName,
                    CASNo = model.CASNo,
                    ImagePath = model.ImagePath,
                    Price = model.Price,
                    LeadTime = model.LeadTime,
                    CATNo = model.CATNo,
                    QuoteId = quoteId,
                    CreatedDate = DateTime.Now
                };

                db.SZ_QuotationDetail.Add(obj);
                db.SaveChanges();

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { record = obj, success = true }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { record = ex.Message, success = false }
                };
            }
        }

        public ActionResult addMultipleProduct(string catno, int company, int QuoteId)
        {
            try
            {
                int? maxDisplayOrderNo = db.SZ_QuotationDetail.Where(x => x.QuoteId == QuoteId).Max(x => x.DisplayOrder);
                if (maxDisplayOrderNo.HasValue)
                {
                    maxDisplayOrderNo += 1;
                }
                else
                {
                    maxDisplayOrderNo = 1;
                }
                string[] allCatNos = catno.Split(',');
                foreach (var sku in allCatNos)
                {
                    var skuno = sku.ToLower().Trim();
                    var model = db.Products.Where(x => x.Sku.ToLower() == skuno && x.Published == true && x.Deleted == false).FirstOrDefault();

                    //Insert logic save in temp table
                    SZ_QuotationDetail objTemp = new SZ_QuotationDetail();
                    objTemp.ProductId = model.Id;
                    objTemp.CASNo = model.ManufacturerPartNumber;
                    objTemp.CreatedDate = DateTime.Now;
                    objTemp.IsUploadServer = true;
                    objTemp.LeadTime = "";
                    objTemp.ProductName = model.Name;
                    objTemp.CATNo = model.Sku;
                    objTemp.QuoteId = QuoteId;
                    //objTemp.UniqueId = new Guid(UniqueId);
                    objTemp.IsSynthesisLog = false;
                    string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + model.Id;
                    using (HttpClient httpClient = new HttpClient())
                    {
                        Task<String> response = httpClient.GetStringAsync(uri);
                        string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                        var product = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                        if (product != null && product.InventoryModel != null)
                        {
                            objTemp.LeadTime = "In Stock";
                        }
                    }

                    var oldproductData = (from i in db.SZ_Quotation
                                          join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                                          where t2.MoveToProject == true && !string.IsNullOrEmpty(i.PONo) && i.CompanyId == company &&
                                          t2.ProductId == model.Id
                                          select i).Distinct().ToList();
                    if (oldproductData != null && oldproductData.Count > 0 && !string.IsNullOrEmpty(objTemp.CATNo))
                    {
                        objTemp.ProductRemark += " Earlier PO Ref # " + string.Join(", ", oldproductData.Select(x => x.PONo));
                        objTemp.ProductRemark += "  Ref # " + string.Join(", ", oldproductData.Select(x => x.Ref));
                    }
                    objTemp.DisplayOrder = maxDisplayOrderNo;

                    var productdata = db.Products.Where(x => x.Id == model.Id).FirstOrDefault();
                    if (productdata != null)
                    {
                        if (!string.IsNullOrEmpty(objTemp.ProductRemark))
                        {
                            objTemp.ProductRemark += " ,";
                        }
                        if (productdata.ShippingCondition == "Cold Shipment")
                        {
                            objTemp.ProductRemark += " Cold Shipment Required";
                        }
                        if (!string.IsNullOrEmpty(productdata.ProductRemark))
                        {
                            objTemp.ProductRemark = productdata.ProductRemark + ", " + objTemp.ProductRemark;
                        }
                    }
                    db.SZ_QuotationDetail.Add(objTemp);

                    maxDisplayOrderNo += 1;
                    db.SaveChanges();
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetSuggestedPrice(string searchValue, string company, int quotedetailsid = 0)
        {
            try
            {
                string countryType = "";
                int processQuoteId = 0;
                var quotedetailsPriceList = new List<SuggestedPriceListModel>();
                var quotationDetailsData = db.SZ_QuotationDetail.Where(x => x.Id == quotedetailsid).FirstOrDefault();
                if (quotationDetailsData != null && !string.IsNullOrEmpty(quotationDetailsData.Price))
                {
                    countryType = quotationDetailsData.SZ_Quotation.CountryType;
                    processQuoteId = quotationDetailsData.QuoteId;
                    var allpricedata = quotationDetailsData.Price.Split(',');
                    foreach (var item in allpricedata)
                    {
                        var submodel = new SuggestedPriceListModel();
                        var qty = System.Text.RegularExpressions.Regex.Match(item.Split('@')[0], @"\d+").Value;
                        var price = System.Text.RegularExpressions.Regex.Match(item.Split('@')[1], @"\d+").Value;
                        if (item.Split('X').Count() > 1)
                        {
                            if (item.Split('X')[1].Contains("="))
                            {
                                qty = Convert.ToString(Convert.ToInt32(qty) * Convert.ToInt32(item.Split('X')[1].Split('=')[0]));
                            }
                            else
                            {
                                qty = Convert.ToString(Convert.ToInt32(qty) * Convert.ToInt32(item.Split('X')[1]));
                            }
                        }
                        quotedetailsPriceList.Add(new SuggestedPriceListModel() { MG = Convert.ToInt32(qty) });
                    }
                }
                if (quotedetailsPriceList.Count == 0)
                {
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "fail", data = "Please enter qty of selected product" }
                    };
                }

                string outputprice = "";
                DateTime startDate = DateTime.Now.AddYears(-1);
                DateTime endDate = DateTime.Now;

                outputprice = PreparedPrice(startDate, endDate, company, searchValue, quotedetailsPriceList, processQuoteId, quotedetailsid, countryType);
                if (string.IsNullOrEmpty(outputprice))
                {
                    outputprice = PreparedPrice(DateTime.MinValue, DateTime.Now.AddYears(-1), company, searchValue, quotedetailsPriceList, processQuoteId, quotedetailsid, countryType);
                }
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "success", data = outputprice }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "fail", data = ex.Message }
                };
            }
        }

        public string PreparedPrice(DateTime startDate, DateTime endDate, string company, string searchValue, List<SuggestedPriceListModel> quotedetailsPriceList, int processQuoteId, int quotedetailsid, string countryType)
        {
            bool isQtyMatched = false;
            string outputprice = "";
            var model = (from x in db.SZ_QuotationDetail
                         where x.CreatedDate >= startDate && x.CreatedDate <= endDate && x.Id != quotedetailsid
                         && x.QuoteId != processQuoteId && x.SZ_Quotation.CountryType == countryType
                         select x).AsQueryable();

            if (!string.IsNullOrEmpty(searchValue))
            {
                searchValue = searchValue.Trim();
                if (searchValue.ToLower().StartsWith("sz-"))
                {
                    model = model.Where(x => x.CATNo.ToLower().Contains(searchValue.ToLower()) || x.SZ_Quotation.Ref.Trim().ToLower().Contains(searchValue.ToLower()));
                }
                else if (Regex.IsMatch(searchValue.Replace("-", ""), @"^-?\d+$"))
                {
                    model = model.Where(x => x.CASNo.ToLower().Contains(searchValue.ToLower()) || x.SZ_Quotation.Ref.Trim().ToLower().Contains(searchValue.ToLower()));
                }
                else
                {
                    model = model.Where(x => x.ProductName.ToLower().Contains(searchValue.ToLower()) || x.SZ_Quotation.Ref.Trim().ToLower().Contains(searchValue.ToLower()));
                }
                //model = model.Where(x => x.ProductName.Trim().ToLower().Contains(searchValue.ToLower()) || x.CASNo.Trim().ToLower().Contains(searchValue.ToLower()) || x.CATNo.Trim().ToLower().Contains(searchValue.ToLower()) || x.SZ_Quotation.Ref.Trim().ToLower().Contains(searchValue.ToLower()));
            }

            int cid = Convert.ToInt32(company);
            var outputModel = new List<SuggestedPriceModel>();
            if (!string.IsNullOrEmpty(company) && company != "undefined")
            {

                var companyPORecords = model.Where(x => x.SZ_Quotation.CompanyId == cid && !string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                if (companyPORecords.Count() > 0)
                {
                    companyPORecords.ForEach(x => outputModel.Add(PrepareSuggestedPriceModel(x)));
                    if (outputModel.Count == 0)
                    {
                        foreach (var priceqty in quotedetailsPriceList)
                        {
                            var range = PrepareRange(priceqty.MG);
                            var pricelistdata = outputModel.Select(x => x.PriceList).ToList();
                            var allrecordspricelist = new List<SuggestedPriceListModel>();
                            if (pricelistdata != null && pricelistdata.Count > 0)
                            {
                                foreach (var pld in outputModel)
                                {
                                    if (pld.PriceList != null && pld.PriceList.Count > 0)
                                    {
                                        allrecordspricelist.AddRange(pld.PriceList);
                                    }
                                }
                            }
                            var matcheddata = allrecordspricelist.Where(c => c.MG >= range.StartRange
                                                                        && c.MG <= range.EndRange).FirstOrDefault();
                            if (matcheddata != null)
                            {
                                outputprice += matcheddata.MG + " - " + matcheddata.Price + ", ";
                            }
                            else
                            {
                                if (allrecordspricelist != null && allrecordspricelist.Count > 0)
                                {
                                    var outputpricedata = CalculationMasterPrice(allrecordspricelist[0].MG, allrecordspricelist[0].Price, priceqty.MG, countryType);
                                    outputprice += priceqty.MG + " - " + outputpricedata + ", ";
                                }
                            }
                        }
                    }
                }
            }
            if (outputModel.Count > 0)
            {
                outputModel = outputModel.Where(x => x != null).ToList();
            }

            if (outputModel.Count == 0)
            {
                //Diff company same qty
                var othercompanywithpoRecords = model.Where(x => x.SZ_Quotation.CompanyId != cid && !string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                if (othercompanywithpoRecords.Count() > 0)
                {
                    othercompanywithpoRecords.ForEach(x => outputModel.Add(PrepareSuggestedPriceModel(x)));
                    if (outputModel.Count == 0)
                    {
                        foreach (var priceqty in quotedetailsPriceList)
                        {
                            var range = PrepareRange(priceqty.MG);
                            var pricelistdata = outputModel.Select(x => x.PriceList).ToList();
                            var allrecordspricelist = new List<SuggestedPriceListModel>();
                            if (pricelistdata != null && pricelistdata.Count > 0)
                            {
                                foreach (var pld in outputModel)
                                {
                                    if (pld.PriceList != null && pld.PriceList.Count > 0)
                                    {
                                        allrecordspricelist.AddRange(pld.PriceList);
                                    }
                                }
                            }
                            var matcheddata = allrecordspricelist.Where(c => c.MG >= range.StartRange
                                                                        && c.MG <= range.EndRange).FirstOrDefault();
                            if (matcheddata != null)
                            {
                                outputprice += matcheddata.MG + " - " + matcheddata.Price + ", ";
                            }
                            else
                            {
                                if (allrecordspricelist != null && allrecordspricelist.Count > 0)
                                {
                                    var outputpricedata = CalculationMasterPrice(allrecordspricelist[0].MG, allrecordspricelist[0].Price, priceqty.MG, countryType);
                                    outputprice += priceqty.MG + " - " + outputpricedata + ", ";
                                }
                            }
                        }
                    }
                }
            }
            if (outputModel.Count == 0)
            {
                // same company without po
                var companyRecords = model.Where(x => x.SZ_Quotation.CompanyId == cid && string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                if (companyRecords.Count() > 0)
                {
                    companyRecords.ForEach(x => outputModel.Add(PrepareSuggestedPriceModel(x)));
                }
            }
            if (outputModel.Count == 0)
            {
                // diff company without po
                var othercompanyRecords = model.Where(x => x.SZ_Quotation.CompanyId != cid && string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                if (othercompanyRecords.Count() > 0)
                {
                    othercompanyRecords.ForEach(x => outputModel.Add(PrepareSuggestedPriceModel(x)));
                }
            }

            if (outputModel.Count > 0)
            {
                foreach (var priceqty in quotedetailsPriceList)
                {
                    var pricelistdata = outputModel.Select(x => x.PriceList).ToList();
                    var allrecordspricelist = new List<SuggestedPriceListModel>();
                    if (pricelistdata != null && pricelistdata.Count > 0)
                    {
                        foreach (var pld in outputModel)
                        {
                            if (pld.PriceList != null && pld.PriceList.Count > 0)
                            {
                                allrecordspricelist.AddRange(pld.PriceList);
                            }
                        }
                    }
                    var matcheddata = allrecordspricelist.Where(x => x.MG == priceqty.MG).FirstOrDefault();
                    if (matcheddata != null)
                    {
                        outputprice += matcheddata.MG + " - " + matcheddata.Price + ", ";
                        isQtyMatched = true;
                    }
                }
                //Range : 
                // 0 - 15 : 10
                // 16 - 35 : 25
                // 36 - 75 : 50
                // 76 - 175 : 100
                // 176 - 400 : 250
                // 401 - 750 : 500
                // 750 < : 1000
                if (string.IsNullOrEmpty(outputprice))
                {
                    //Check price materix range
                    foreach (var priceqty in quotedetailsPriceList)
                    {
                        var range = PrepareRange(priceqty.MG);
                        var pricelistdata = outputModel.Select(x => x.PriceList).ToList();
                        var allrecordspricelist = new List<SuggestedPriceListModel>();
                        if (pricelistdata != null && pricelistdata.Count > 0)
                        {
                            foreach (var pld in outputModel)
                            {
                                if (pld.PriceList != null && pld.PriceList.Count > 0)
                                {
                                    allrecordspricelist.AddRange(pld.PriceList);
                                }
                            }
                        }
                        var matcheddata = allrecordspricelist.Where(c => c.MG >= range.StartRange
                                                                    && c.MG <= range.EndRange).FirstOrDefault();
                        if (matcheddata != null)
                        {
                            var onemgprice = Convert.ToInt32(matcheddata.Price) / Convert.ToInt32(matcheddata.MG);
                            outputprice += priceqty.MG + " - " + (onemgprice * Convert.ToInt32(priceqty.MG)) + ", ";
                        }
                        else
                        {
                            if (allrecordspricelist != null && allrecordspricelist.Count > 0)
                            {
                                var outputpricedata = CalculationMasterPrice(allrecordspricelist[0].MG, allrecordspricelist[0].Price, priceqty.MG, countryType);
                                outputprice += priceqty.MG + " - " + outputpricedata + ", ";
                            }
                        }
                    }
                }
            }


            return outputprice;
        }


        public int? CalculationMasterPrice(int qty, int price, int requiredQty, string countryType)
        {
            var pricemasterlist = db.SZ_CategoryMaster.ToList();
            var pricelist = new SZ_CategoryMaster();
            if (string.IsNullOrEmpty(countryType))
            {
                countryType = "Domestic";
            }
            if (qty >= 0 && qty <= 15)
            {
                // 0 - 15 : 10
                if (countryType.ToLower() == "export")
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.TenUSD == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.TenUSD.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.TenUSD == closest).FirstOrDefault();
                    }
                }
                else
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.Ten == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.Ten.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.Ten == closest).FirstOrDefault();
                    }
                }
            }
            if (qty >= 16 && qty <= 35)
            {
                // 16 - 35 : 25
                if (countryType.ToLower() == "export")
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.TwentyfiveUSD == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.TwentyfiveUSD.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.TwentyfiveUSD == closest).FirstOrDefault();
                    }
                }
                else
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.Twentyfive == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.Twentyfive.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.Twentyfive == closest).FirstOrDefault();
                    }
                }
            }
            if (qty >= 36 && qty <= 75)
            {
                // 36 - 75 : 50
                if (countryType.ToLower() == "export")
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.FiftyUSD == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.FiftyUSD.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.FiftyUSD == closest).FirstOrDefault();
                    }
                }
                else
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.Fifty == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.Fifty.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.Fifty == closest).FirstOrDefault();
                    }
                }
            }
            if (qty >= 76 && qty <= 175)
            {
                // 76 - 175 : 100
                if (countryType.ToLower() == "export")
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.OnehundredUSD == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.OnehundredUSD.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.OnehundredUSD == closest).FirstOrDefault();
                    }
                }
                else
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.Onehundred == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.Onehundred.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.Onehundred == closest).FirstOrDefault();
                    }
                }
            }
            if (qty >= 176 && qty <= 400)
            {
                // 176 - 400 : 250
                if (countryType.ToLower() == "export")
                {
                    pricelist = pricemasterlist.Where(x => x.TwohundredFiftyUSD == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.TwohundredFiftyUSD.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.TwohundredFiftyUSD == closest).FirstOrDefault();
                    }
                }
                else
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.TwohundredFifty == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.TwohundredFifty.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.TwohundredFifty == closest).FirstOrDefault();
                    }
                }
            }
            if (qty >= 401 && qty <= 750)
            {
                // 401 - 750 : 500
                if (countryType.ToLower() == "export")
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.FivehundredUSD == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.FivehundredUSD.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.FivehundredUSD == closest).FirstOrDefault();
                    }
                }
                else
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.Fivehundred == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.Fivehundred.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.Fivehundred == closest).FirstOrDefault();
                    }
                }
            }
            if (qty >= 751)
            {
                // 750 < : 1000
                if (countryType.ToLower() == "export")
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.OneThousandUSD == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.OneThousandUSD.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.OneThousandUSD == closest).FirstOrDefault();
                    }
                }
                else
                {
                    pricelist = db.SZ_CategoryMaster.Where(x => x.OneThousand == price).FirstOrDefault();
                    if (pricelist == null)
                    {
                        List<int> priceListdata = new List<int>();
                        priceListdata.AddRange(pricemasterlist.Select(x => x.OneThousand.Value).AsEnumerable());
                        int closest = priceListdata.ClosestTo(price);
                        pricelist = pricemasterlist.Where(x => x.OneThousand == closest).FirstOrDefault();
                    }
                }
            }
            if (pricelist == null)
                return 0;

            return CalculationGetTheRangePrice(pricelist, requiredQty, countryType.ToLower());
        }

        public int? CalculationGetTheRangePrice(SZ_CategoryMaster pricelist, int qty, string countryType)
        {
            if (qty >= 0 && qty <= 15)
            {
                // 0 - 15 : 10
                if (countryType.ToLower() == "export")
                {
                    if (pricelist.TenUSD.HasValue)
                    {
                        return (pricelist.TenUSD / 10) * qty;
                    }
                }
                else
                {
                    if (pricelist.Ten.HasValue)
                    {
                        return (pricelist.Ten / 10) * qty;
                    }
                }
            }
            if (qty >= 16 && qty <= 35)
            {
                // 16 - 35 : 25
                if (countryType.ToLower() == "export")
                {
                    if (pricelist.TwentyfiveUSD.HasValue)
                    {
                        return (pricelist.TwentyfiveUSD / 25) * qty;
                    }
                }
                else
                {
                    if (pricelist.Twentyfive.HasValue)
                    {
                        return (pricelist.Twentyfive / 25) * qty;
                    }
                }
            }
            if (qty >= 36 && qty <= 75)
            {
                // 36 - 75 : 50
                if (countryType.ToLower() == "export")
                {
                    if (pricelist.FiftyUSD.HasValue)
                    {
                        return (pricelist.FiftyUSD / 50) * qty;
                    }
                }
                else
                {
                    if (pricelist.Fifty.HasValue)
                    {
                        return (pricelist.Fifty / 50) * qty;
                    }
                }
            }
            if (qty >= 76 && qty <= 175)
            {
                // 76 - 175 : 100
                if (countryType.ToLower() == "export")
                {
                    if (pricelist.OnehundredUSD.HasValue)
                    {
                        return (pricelist.OnehundredUSD / 100) * qty;
                    }
                }
                else
                {
                    if (pricelist.Onehundred.HasValue)
                    {
                        return (pricelist.Onehundred / 100) * qty;
                    }
                }
            }
            if (qty >= 176 && qty <= 400)
            {
                // 176 - 400 : 250
                if (countryType.ToLower() == "export")
                {
                    if (pricelist.TwohundredFiftyUSD.HasValue)
                    {
                        return (pricelist.TwohundredFiftyUSD / 250) * qty;
                    }
                }
                else
                {
                    if (pricelist.TwohundredFifty.HasValue)
                    {
                        return (pricelist.TwohundredFifty / 250) * qty;
                    }
                }
            }
            if (qty >= 401 && qty <= 750)
            {
                if (countryType.ToLower() == "export")
                {
                    if (pricelist.FivehundredUSD.HasValue)
                    {
                        return (pricelist.FivehundredUSD / 500) * qty;
                    }
                }
                else
                {
                    if (pricelist.Fivehundred.HasValue)
                    {
                        return (pricelist.Fivehundred / 500) * qty;
                    }
                }
            }
            // 750 < : 1000
            if (countryType.ToLower() == "export")
            {
                if (pricelist.OneThousandUSD.HasValue)
                {
                    return (pricelist.OneThousandUSD / 1000) * qty;
                }
            }
            else
            {
                if (pricelist.OneThousand.HasValue)
                {
                    return (pricelist.OneThousand / 1000) * qty;
                }
            }
            return 0;
        }

        public PriceMasterRange PrepareRange(int qty)
        {
            if (qty >= 0 && qty <= 15)
            {
                return new PriceMasterRange()
                {
                    StartRange = 0,
                    EndRange = 15
                };
            }
            if (qty >= 16 && qty <= 35)
            {
                return new PriceMasterRange()
                {
                    StartRange = 16,
                    EndRange = 35
                };
            }
            if (qty >= 36 && qty <= 75)
            {
                return new PriceMasterRange()
                {
                    StartRange = 36,
                    EndRange = 75
                };
            }
            if (qty >= 76 && qty <= 175)
            {
                return new PriceMasterRange()
                {
                    StartRange = 76,
                    EndRange = 175
                };
            }
            if (qty >= 176 && qty <= 400)
            {
                return new PriceMasterRange()
                {
                    StartRange = 176,
                    EndRange = 400
                };
            }
            if (qty >= 401 && qty <= 750)
            {
                return new PriceMasterRange()
                {
                    StartRange = 401,
                    EndRange = 750
                };
            }
            return new PriceMasterRange()
            {
                StartRange = 751,
                EndRange = 100000000
            };
        }

        public SuggestedPriceModel PrepareSuggestedPriceModel(SZ_QuotationDetail quoteDetail)
        {
            var model = new SuggestedPriceModel();
            if (string.IsNullOrEmpty(quoteDetail.Price))
            {
                return null;
            }
            model.QuotationDetailsId = quoteDetail.Id;
            model.QuoteId = quoteDetail.QuoteId;
            model.PriceList = new List<SuggestedPriceListModel>();
            var allpricedata = quoteDetail.Price.Split(',');
            if (allpricedata.Count() == 1)
            {
                var submodel = new SuggestedPriceListModel();
                var qty = "";
                var price = "";
                if (allpricedata[0].IndexOf("X") != -1)
                {
                    string packs = allpricedata[0].Split('X')[1];
                    int packsize = Convert.ToInt32(System.Text.RegularExpressions.Regex.Match(packs, @"\d+").Value);
                    qty = Convert.ToString(Convert.ToInt32(allpricedata[0].Split(' ')[0]) * Convert.ToInt32(packsize));
                    if (allpricedata[0].IndexOf("=") != -1)
                    {
                        price = System.Text.RegularExpressions.Regex.Match(allpricedata[0].Split('@')[1].Split('=')[1], @"\d+").Value;
                    }
                    else
                    {
                        price = System.Text.RegularExpressions.Regex.Match(allpricedata[0].Split('@')[1], @"\d+").Value;
                    }
                }
                else
                {
                    qty = allpricedata[0].Split(' ')[0];
                    price = System.Text.RegularExpressions.Regex.Match(allpricedata[0].Split('@')[1], @"\d+").Value;
                }
                submodel.MG = Convert.ToInt32(qty);
                if (string.IsNullOrEmpty(price))
                {
                    submodel.Price = 0;
                }
                else
                {
                    submodel.Price = Convert.ToInt32(price);
                }

                model.PriceList.Add(submodel);
            }
            else
            {
                var cnt = new List<string>();
                foreach (var item in allpricedata)
                {
                    var submodel = new SuggestedPriceListModel();
                    var qty = System.Text.RegularExpressions.Regex.Match(item.Split('@')[0], @"\d+").Value;
                    var price = System.Text.RegularExpressions.Regex.Match(item.Split('@')[1], @"\d+").Value;
                    if (item.Split('X').Count() > 1)
                    {
                        if (item.Split('X')[1].Contains("="))
                        {
                            qty = Convert.ToString(Convert.ToInt32(qty) * Convert.ToInt32(item.Split('X')[1].Split('=')[0]));
                        }
                        else
                        {
                            qty = Convert.ToString(Convert.ToInt32(qty) * Convert.ToInt32(item.Split('X')[1]));
                        }
                    }
                    if (!string.IsNullOrEmpty(price))
                    {
                        submodel.MG = Convert.ToInt32(qty);
                        submodel.Price = Convert.ToInt32(price);
                        model.PriceList.Add(submodel);
                    }
                }
            }
            return model;
        }

        public ActionResult getPreviousInfoFromDB(string ProductName, string casno, string catNo, string company, int QuoteId = 0, bool isApi = false)
        {
            try
            {
                ViewBag.isApi = isApi;

                int cid = 0;
                if (company != "undefined")
                {
                    cid = Convert.ToInt32(company);
                }
                if (!string.IsNullOrEmpty(ProductName))
                {
                    ProductName = ProductName.Trim().ToLower();
                }
                string uri = "http://szapi.synzeal.com/api/SZ/getPreviousInfoFromDB?ProductName=" + ProductName + "&casno=&catNo=&company=" + cid + "&QuoteId=" + QuoteId + "&isApi=" + isApi;

                using (WebClient webClient = new WebClient())
                {
                    var json = webClient.DownloadString(uri);
                    var list = JsonConvert.DeserializeObject<List<SZ_QuotationDetail>>(json);
                    return PartialView("_PartialPreviousProductList", list);
                }

                var model = (from x in db.SZ_QuotationDetail
                             select x).AsQueryable();
                var allmodel = model;
                if (!string.IsNullOrEmpty(ProductName))
                {
                    ProductName = ProductName.Trim();
                    if (ProductName.ToLower().StartsWith("sz-"))
                    {
                        model = model.Where(x => x.CATNo.ToLower().Contains(ProductName.ToLower()) || x.SZ_Quotation.Ref.Trim().ToLower().Contains(ProductName.ToLower()));
                    }
                    else if (Regex.IsMatch(ProductName.Replace("-", ""), @"^-?\d+$"))
                    {
                        model = model.Where(x => x.CASNo.ToLower().Contains(ProductName.ToLower()) || x.SZ_Quotation.Ref.Trim().ToLower().Contains(ProductName.ToLower()));
                    }
                    else
                    {
                        model = model.Where(x => x.ProductName.ToLower().Contains(ProductName.ToLower()) || x.SZ_Quotation.Ref.Trim().ToLower().Contains(ProductName.ToLower()));
                    }
                    //model = model.Where(x => x.ProductName.ToLower().Contains(ProductName.ToLower()) || x.CASNo.ToLower().Contains(ProductName.ToLower()) || x.CATNo.ToLower().Contains(ProductName.ToLower()) || x.SZ_Quotation.Ref.ToLower().Contains(ProductName.ToLower()));
                }

                if (isApi)
                {
                    var categoryData = db.Categories.ToList();
                    var productCategoryData = db.Product_Category_Mapping.ToList();
                    var product = db.Products.Where(x => x.Sku.ToLower().Contains(ProductName.ToLower()) && x.Published == true && x.Deleted == false).FirstOrDefault();
                    if (product != null)
                    {
                        var allcats = GetApiAllProduct(product.Id, categoryData, productCategoryData);
                        if (allcats != null && allcats.Count > 0)
                        {
                            model = (from x in db.SZ_QuotationDetail
                                     where allcats.Contains(x.CATNo)
                                     && x.SZ_Quotation.CompanyId == cid
                                     select x).AsQueryable();
                        }
                    }
                }

                var outputModel = new List<SZ_QuotationDetail>();
                if (!string.IsNullOrEmpty(company) && company != "undefined")
                {
                    var companyPORecords = model.Where(x => x.SZ_Quotation.CompanyId == cid && !string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                    if (companyPORecords.Count() > 0)
                    {
                        companyPORecords.ForEach(x => outputModel.Add(x));
                    }
                    var othercompanywithpoRecords = model.Where(x => x.SZ_Quotation.CompanyId != cid && !string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                    if (othercompanywithpoRecords.Count() > 0)
                    {
                        othercompanywithpoRecords.ForEach(x => outputModel.Add(x));
                    }
                    var companyRecords = model.Where(x => x.SZ_Quotation.CompanyId == cid && string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                    if (companyRecords.Count() > 0)
                    {
                        companyRecords.ForEach(x => outputModel.Add(x));
                    }
                    var othercompanyRecords = model.Where(x => x.SZ_Quotation.CompanyId != cid && string.IsNullOrEmpty(x.SZ_Quotation.PONo)).OrderByDescending(x => x.Id);
                    if (othercompanyRecords.Count() > 0)
                    {
                        othercompanyRecords.ForEach(x => outputModel.Add(x));
                    }
                }
                outputModel = model.OrderByDescending(x => x.MoveToProject).ThenByDescending(x => x.CreatedDate).ToList();

                var results = outputModel;
                if (QuoteId != 0)
                {
                    var szalreadydetails = allmodel.Where(x => x.QuoteId == QuoteId).ToList();
                    if (szalreadydetails != null && szalreadydetails.Count > 0)
                    {
                        var ids = szalreadydetails.Select(x => x.Id).ToList();
                        results = results.Where(x => !ids.Contains(x.Id)).ToList();
                    }
                }
                return PartialView("_PartialPreviousProductList", results);
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "fail", data = ex.Message }
                };
            }
        }
        public JsonResult GetProduct(string term)
        {
            List<ProductOverviewModel> model = new List<ProductOverviewModel>();
            var nationalityList = db.Products.Where(x => x.Name.Contains(term)).ToList();
            if (nationalityList.Count > 0)
            {
                foreach (var i in nationalityList)
                {
                    ProductOverviewModel subModel = new ProductOverviewModel();
                    subModel.Id = i.Id;
                    subModel.Name = i.Name;
                    model.Add(subModel);
                }
            }
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetAllEmailByCompanyId(int compId)
        {
            // var model = db.SZ_Quotation.Where(x => x.CompanyId == compId).Select(x => x.EmailAddress).Distinct().ToList();
            var model = db.GetAllEmail(compId).ToList();
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetAllEmail()
        {
            //var model = db.SZ_Quotation.Select(x => x.EmailAddress).OrderBy(x => x).Distinct().ToList();
            var model = db.GetAllEmail(0).ToList();
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetAllProductName(string value)
        {
            var model = db.getallproductname(value).ToList();
            // var model = db.Products.Where(x => x.Name.Contains(value) || x.Synonym.Contains(value)).Select(x => x.Name).OrderBy(x => x).Distinct().Take(10).ToList();
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public JsonResult MarkAsQc(int id)
        {
            try
            {
                var model = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (model != null)
                {
                    model.IsQC = true;
                    model.QCdate = DateTime.Now;
                    db.Entry(model).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult RemoveAsQc(int id)
        {
            try
            {
                var model = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (model != null)
                {
                    model.IsQC = false;
                    db.Entry(model).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }


        public JsonResult MarkAsPurchase(int id)
        {
            try
            {
                var model = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (model != null)
                {
                    model.IsPurchase = true;
                    model.QuotePurchaseDate = DateTime.Now;
                    db.Entry(model).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult RemoveAsPurchase(int id)
        {
            try
            {
                var model = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (model != null)
                {
                    model.IsPurchase = false;
                    db.Entry(model).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult GetCompanyDetailsFromEmail(string email)
        {
            // var model = db.SZ_Quotation.Where(x => x.EmailAddress.ToLower().Trim() == email.ToLower().Trim()).Select(x => x.CompanyId).Distinct().ToList();
            var model = db.GetCompanyDetailsFromEmail(email.ToLower().Trim()).ToList();
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Inventory()
        {
            if (!SessionCookieManagement.IsInventory)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }

        public ActionResult Dispatch()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsDispatch && !SessionCookieManagement.IsProjectLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            //var model = (from i in db.SZ_Quotation
            //             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
            //             where t2.MoveToDispatch == true && (t2.MoveToInvoice == false || t2.MoveToInvoice == null) && (t2.IsOnHold == false || t2.IsOnHold == null)
            //             orderby t2.MoveDispatchDate descending
            //             select t2).ToList();

            //var productids = model.Select(x => x.ProductId).ToList();
            //var masterCOAData = db.SZ_MasterCOA.Where(x => productids.Contains(x.ProductId)).ToList();
            var prostatusItem = new List<SelectListItem>();

            prostatusItem.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            foreach (EnumList.DispatchStatusDDl r in Enum.GetValues(typeof(EnumList.DispatchStatusDDl)))
            {
                var item = Enum.GetName(typeof(EnumList.DispatchStatusDDl), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.DispatchStatusDDl)(int)r);
                int val = (int)r;
                prostatusItem.Add(new SelectListItem
                {
                    Text = text,
                    Value = val.ToString()
                });
            }
            ViewBag.fltprostatusItem = prostatusItem;

            var proactivitystatusItem = new List<SelectListItem>();
            proactivitystatusItem.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            proactivitystatusItem.Add(new SelectListItem
            {
                Text = "Approval First",
                Value = "Approval First"
            });
            proactivitystatusItem.Add(new SelectListItem
            {
                Text = "Immediate Dispatch",
                Value = "Immediate Dispatch"
            });
            proactivitystatusItem.Add(new SelectListItem
            {
                Text = "Short Qty Dispatch",
                Value = "Short Qty Dispatch"
            });
            proactivitystatusItem.Add(new SelectListItem
            {
                Text = "Repeat Order",
                Value = "Repeat Order"
            });
            proactivitystatusItem.Add(new SelectListItem
            {
                Text = "Data Sent",
                Value = "Data Sent"
            });
            proactivitystatusItem.Add(new SelectListItem
            {
                Text = "Invoice Sent",
                Value = "Invoice Sent"
            });

            ViewBag.fltproactivitystatusItem = proactivitystatusItem;

            return View();
        }

        public ActionResult Invoice()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsInvoice)
            {
                return RedirectToAction("Index", "Home");
            }

            return View(new List<SZ_QuotationModel>());
        }

        public ActionResult ExportQuoteInvoiceList(string countryType)
        {
            int page = 1;
            int rows = Int32.MaxValue;
            var model = db.InvoiceList(countryType, "", page, rows).ToList();
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            var categoryData = db.Categories.ToList();
            var productCategoryData = db.Product_Category_Mapping.ToList();
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            var modelExportdata = (from q in db.SZ_Quotation
                                   join qd in db.SZ_QuotationDetail on q.Id equals qd.QuoteId
                                   where qd.MoveToInvoice == true
                                   select new ExportInvoiceModel()
                                   {
                                       APIName = "",
                                       ProductId = qd.ProductId,
                                       CountryType = q.CountryType,
                                       BatchNo = qd.InvoiceBatchNo,
                                       Courier = qd.Courier,
                                       DeliveryStatus = qd.DeliveryStatus,
                                       DataPending = qd.DataPending,
                                       PaymentStatus = qd.PaymentStatus,
                                       PurposeDispatch = qd.PurposeDispatch,
                                       TrackingNo = qd.TrackingNo,
                                       Location = qd.Location,
                                       DeliveryDate = qd.DeliveryDate,
                                       InvoiceNo = qd.InvoiceNo,
                                       InvoiceRemark = qd.InvoiceRemark,
                                       RefName = qd.RefName,
                                       PackDate = qd.PackDate,
                                       ProductName = qd.ProductName,
                                       RequiredQty = qd.RequiredQty,
                                       LeadTime = qd.LeadTime,
                                       ProductRemark = qd.ProductRemark,
                                       Price = qd.Price,
                                       CASNo = qd.CASNo,
                                       CATNo = qd.CATNo,
                                       InvoicedDate = qd.InvoicedDate,
                                       Ref = q.Ref,
                                       CompanyName = q.CompanyName,
                                       PONo = q.PONo,
                                       PODate = q.PODate,
                                       EmailAddress = q.EmailAddress,
                                       Remark = qd.Remark,
                                       OrderRemark = qd.OrderRemark,
                                       COARefNumber = qd.COARefNumber
                                   }).ToList();

            foreach (var item in modelExportdata)
            {
                item.APIName = GetApiNameOfProduct(item.ProductId.Value, categoryData, productCategoryData);
            }

            gv.DataSource = modelExportdata;
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Invoice_" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");
            string filePath = Server.MapPath("~/Content/ExportExcel/");
            string fileName = "Invoice_" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls";

            // Write the rendered content to a file.
            System.IO.File.WriteAllText(filePath + fileName, passstr);
            return Json("../Content/ExportExcel/" + fileName, JsonRequestBehavior.AllowGet);
        }

        public ActionResult LoadInvoiceData(string countryType)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }

                var model = db.InvoiceList(countryType, searchValue, pageNo, numberOfObjectsPerPage).ToList();
                int? recordsTotal = model.Select(x => x.TotalRecord).FirstOrDefault();

                var data = PrepareInvoiceListModel(model);
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult LoadRefstockData(string apiname)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                var model = new List<ProductModel>();
                int? recordsTotal = 0;
                var categoryData = db.Categories.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Name.ToLower() == apiname.Trim().ToLower()).FirstOrDefault();
                if (categoryData != null)
                {

                    var subcategoriesId = db.Categories.Where(x => x.ParentCategoryId == categoryData.Id && x.Deleted == false).Select(x => x.Id).ToList();

                    var query = (from p in db.Products
                                 join pc in db.Product_Category_Mapping on p.Id equals pc.ProductId
                                 where subcategoriesId.Contains(pc.CategoryId) &&
                                       !p.Deleted &&
                                       p.Published
                                 orderby p.Name
                                 select p).ToList();

                    model = (from q in query
                             select new ProductModel()
                             {
                                 Smile = "<input type='checkbox' value='" + q.Id + "' class='clsSaverow' />",
                                 ProductId = q.Id,
                                 Name = q.Name,
                                 Sku = q.Sku,
                                 Gtin = q.ManufacturerPartNumber,
                                 RefStockPrice = "<input type='text' id='RefStockPrice_" + q.Id + "' value='" + q.RefStockPrice + "' />"
                             }).Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();
                    recordsTotal = query.Count();
                }
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public ActionResult LoadPurchaseProducMasterData(string apiname, string search)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                var model = new List<ProductMasterModel>();
                int? recordsTotal = 0;
                var query = new List<Product>();
                if (!string.IsNullOrEmpty(search))
                {
                    query = (from p in db.Products
                             where p.Name.ToLower().Contains(search.ToLower())
                                   || p.Sku.ToLower().Contains(search.ToLower())
                                   || p.ManufacturerPartNumber.ToLower().Contains(search.ToLower())
                                   && (!p.Deleted &&
                                   p.Published)
                             orderby p.Sku
                             select p).ToList();
                }
                else
                {

                    var categoryData = db.Categories.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Name.ToLower() == apiname.Trim().ToLower()).FirstOrDefault();
                    if (categoryData != null)
                    {

                        var subcategoriesId = db.Categories.Where(x => x.ParentCategoryId == categoryData.Id && x.Deleted == false).Select(x => x.Id).ToList();

                        query = (from p in db.Products
                                 join pc in db.Product_Category_Mapping on p.Id equals pc.ProductId
                                 where subcategoriesId.Contains(pc.CategoryId) && !p.Deleted && p.Published
                                 orderby p.Sku
                                 select p).ToList();
                    }
                }
                var proids = query.Select(x => x.Id).ToList();
                var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();
                foreach (var q in query)
                {
                    var obj = new ProductMasterModel();
                    obj.ChkRow = "<input type='checkbox' value='" + q.Id + "' class='clsSaverow' /> ";
                    obj.ProductRemark = "<div><img src='" + obj.ImagePath + "' width='100%'></div>";
                    obj.Id = q.Id;
                    obj.ProductName = q.Name;
                    obj.catNo = q.Sku;
                    obj.casno = q.ManufacturerPartNumber;
                    obj.MW = q.MolecularWeight;
                    obj.MF = q.Gtin;
                    obj.Quotationreceived = "<textarea id='Quotationreceived_" + q.Id + "' value='" + q.Quotationreceived + "' data-value='" + q.Quotationreceived + "' class='clsquotationreceived' style='width:100%' rows='4' ></textarea>";
                    obj.PurchaseComment = "<textarea id='PurchaseComment_" + q.Id + "' value='" + q.PurchaseComment + "'  data-value='" + q.PurchaseComment + "' class='clspurchasecommnet' style='width:100%' rows='4'></textarea>";
                    model.Add(obj);
                }
                var instockother = Request.Form.GetValues("instockother")[0].ToString();
                if (!string.IsNullOrEmpty(instockother))
                {
                    var splitfilters = instockother.Split(',');
                    if (splitfilters[0] == "true" && splitfilters[1] == "true")
                    {

                    }
                    else
                    {
                        if (splitfilters[0] == "true")
                        {
                            model = model.Where(x => x.IsBatchAvailable).ToList();
                        }
                        if (splitfilters[1] == "true")
                        {
                            model = model.Where(x => !x.IsBatchAvailable).ToList();
                        }
                    }
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.casno != null && m.casno.ToLower().Contains(searchValue))
                                        || (m.catNo != null && m.catNo.ToLower().Contains(searchValue))
                                       || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))
                                       ).ToList();
                }

                model = model.Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();
                recordsTotal = query.Count();

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult LoadProducMasterData(string apiname, string search)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                var model = new List<ProductMasterModel>();
                int? recordsTotal = 0;
                var query = new List<Product>();
                if (!string.IsNullOrEmpty(search))
                {
                    query = (from p in db.Products
                             where p.Name.ToLower().Contains(search.ToLower())
                                   || p.Sku.ToLower().Contains(search.ToLower())
                                   || p.ManufacturerPartNumber.ToLower().Contains(search.ToLower())
                                   && (!p.Deleted &&
                                   p.Published)
                             orderby p.Sku
                             select p).ToList();
                }
                else
                {

                    var categoryData = db.Categories.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Name.ToLower() == apiname.Trim().ToLower()).FirstOrDefault();
                    if (categoryData != null)
                    {

                        var subcategoriesId = db.Categories.Where(x => x.ParentCategoryId == categoryData.Id && x.Deleted == false).Select(x => x.Id).ToList();

                        query = (from p in db.Products
                                 join pc in db.Product_Category_Mapping on p.Id equals pc.ProductId
                                 where subcategoriesId.Contains(pc.CategoryId) && !p.Deleted && p.Published
                                 orderby p.Sku
                                 select p).ToList();
                    }
                }
                var proids = query.Select(x => x.Id).ToList();
                var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();
                foreach (var q in query)
                {
                    var obj = new ProductMasterModel();
                    obj.ProductRemark = "<input type='text' id='ProductRemark_" + q.Id + "' value='" + q.ProductRemark + "' />";
                    obj.IsBatchAvailable = false;
                    obj.Id = q.Id;
                    obj.ProductName = q.Name;
                    obj.catNo = q.Sku;
                    obj.casno = q.ManufacturerPartNumber;
                    obj.ProductStatus = q.ProductStat;
                    obj.DdlStatus = "<select class='clsDllstatus' id='DdlStatus_" + q.Id + "' data-value='" + q.DdlStatus + "'> <option value='To be Synthesize'>To be Synthesize</option>" +
                        "<option value='Sourced'>Sourced</option>" +
                        "<option value='Bulk Source'>Bulk Source</option></select>";
                    obj.LeadTime = "<input type='text' id='LeadTime_" + q.Id + "' value='" + q.LeadTime + "' />";
                    obj.Appearance = "<input type='text' id='Appearance_" + q.Id + "' value='" + q.Appearance + "' />";
                    obj.ReTestRequired = "<input type='text' id='ReTestRequired_" + q.Id + "' value='" + q.ReTestRequired + "' />";
                    //obj.ShippingCondition = "<input type='text' id='ShippingCondition_" + q.Id + "' value='" + q.ShippingCondition + "' />";

                    obj.ShippingCondition = "<select class='clsshippingCondition' id='ShippingCondition_" + q.Id + "' data-value='" + q.ShippingCondition + "'> <option value=''>Select</option>" +
                        "<option value='Ambient Temperature'>Ambient Temperature</option>" +
                        "<option value='Ice Pack'>Ice Pack</option>" +
                        "<option value='Cold Shipment'>Cold Shipment</option></select>";

                    if (q.SourceRequired.HasValue && q.SourceRequired.Value)
                    {
                        obj.SourceRequired = "<input type='checkbox' id='SourceRequired_" + q.Id + "' checked />";
                    }
                    else
                    {
                        obj.SourceRequired = "<input type='checkbox' id='SourceRequired_" + q.Id + "' />";
                    }
                    if (q.IsControlledSubstance.HasValue && q.IsControlledSubstance.Value)
                    {
                        obj.ControlledSubstance = "<input type='checkbox' class='clsControlledSubstance' id='IsControlledSubstance_" + q.Id + "' checked />";
                    }
                    else
                    {
                        obj.ControlledSubstance = "<input type='checkbox' class='clsControlledSubstance' id='IsControlledSubstance_" + q.Id + "' />";
                    }
                    obj.Source = "<input type='text' id='Source_" + q.Id + "' value='" + q.Source + "' />";
                    obj.ChkRow = "<input type='checkbox' value='" + q.Id + "' class='clsSaverow' /> <div class='clsimageproduct' style='display:none'><img src='" + obj.ImagePath + "' width='100%'></div>";

                    obj.Description = "<input type='text' id='Description_" + q.Id + "' value='" + q.ShortDescription + "' />";
                    obj.HSNCode = "<input type='text'  class='clshsncode' id='HSNCode_" + q.Id + "' value='" + q.HSNCode + "' />";
                    obj.DangGoodToShip = "<input type='text' class='clsDangGoodToShip' id='DangGoodToShip_" + q.Id + "' value='" + q.DangGoodToShip + "' />";
                    obj.CountryOrigin = "<input type='text' class='clscountryorigin' id='CountryOrigin_" + q.Id + "' value='" + q.CountryOrigin + "' />";
                    obj.SameAs = "<input type='text' id='SameAs_" + q.Id + "' value='" + q.SameAs + "' />";
                    obj.ProductDdlStatus = "<select class='clsproductDllstatus' id='productDdlStatus_" + q.Id + "' data-value='" + q.ProductStat + "'> <option value=''>Select</option>" +
                        "<option value='In Stock'>In Stock</option>" +
                        "<option value='In Stock, 3-4 days for Dispatch'>In Stock, 3-4 days for Dispatch</option>" +
                        "<option value='Limited Stock'>Limited Stock</option>" +
                        "<option value='Out of Stock'>Out of Stock</option>" +
                        "<option value='Out of Stock, Under Synthesis'>Out of Stock, Under Synthesis</option>" +
                        "<option value='Under QC Approval'>Under QC Approval</option>" +
                        "<option value='Under Synthesis'>Under Synthesis</option>" +
                        "<option value='Custom Synthesis'>Custom Synthesis</option>" +
                        "<option value='Discontinued'>Discontinued</option></select>";

                    obj.AdditionalBatchNoText = "<select id='additionalBatch_" + q.Id + "' class='addbatch'><option value=''>--Select--</option>";
                    var proBatchData = inventorydata.Where(x => x.ProductId == q.Id).OrderBy(x => x.Id).ToList();
                    if (proBatchData.Count > 0)
                    {
                        int probatchcount = 1;
                        foreach (var r in proBatchData)
                        {
                            string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            if (r.IsApproved == false)
                            {
                                text = "*" + text;
                            }

                            obj.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "'>" + text + "</option>";
                            probatchcount += 1;
                        }
                        obj.IsBatchAvailable = true;
                    }
                    obj.AdditionalBatchNoText += "</select>";
                    obj.BatchDataCheck = "<i class='fa fa-pencil' onclick='batchpopup(" + q.Id + ")'></i>";

                    obj.IR = "<a href='' id='IR_" + q.Id + "' target='_blank'></a>";
                    obj.Mass = "<a href='' id='Mass_" + q.Id + "'  target='_blank'></a>";
                    obj.HPLCGCELSD = "<a href='' id='HPLCGCELSD_" + q.Id + "'  target='_blank'></a>";
                    obj.NMR = "<a href='' id='NMR_" + q.Id + "'  target='_blank'></a>";
                    obj.qNMR = "<a href='' id='qNMR_" + q.Id + "'  target='_blank'></a>";
                    obj.TGA = "<a href='' id='TGA_" + q.Id + "'  target='_blank'></a>";
                    obj.CMR = "<a href='' id='CMR_" + q.Id + "'  target='_blank'></a>";
                    obj.DEPT = "<a href='' id='DEPT_" + q.Id + "'  target='_blank'></a>";
                    obj.HRMS = "<a href='' id='HRMS_" + q.Id + "'  target='_blank'></a>";
                    obj.ROI = "<a href='' id='ROI_" + q.Id + "'  target='_blank'></a>";
                    obj.Elemental = "<a href='' id='Elemental_" + q.Id + "'  target='_blank'></a>";
                    obj.SER = "<a href='' id='SER_" + q.Id + "'  target='_blank'></a>";
                    obj.APCIMass = "<a href='' id='APCIMass_" + q.Id + "'  target='_blank'></a>";
                    obj.NMRInterpretaion = "<a href='' id='NMRInterpretaion_" + q.Id + "'  target='_blank'></a>";
                    obj.StabilitySolution = "<a href='' id='StabilitySolution_" + q.Id + "'  target='_blank'></a>";
                    obj.StabilityRT = "<a href='' id='StabilityRT_" + q.Id + "'  target='_blank'></a>";
                    obj.Photostability = "<a href='' id='Photostability_" + q.Id + "' ></a>";
                    obj.Hygroscopic = "<a href='' id='Hygroscopic_" + q.Id + "' ></a>";
                    obj.TempSensitive = "<a href='' id='TempSensitive_" + q.Id + "' ></a>";
                    obj.Lacrymatory = "<a href='' id='Lacrymatory_" + q.Id + "' ></a>";
                    model.Add(obj);
                }
                var instockother = Request.Form.GetValues("instockother")[0].ToString();
                if (!string.IsNullOrEmpty(instockother))
                {
                    var splitfilters = instockother.Split(',');
                    if (splitfilters[0] == "true" && splitfilters[1] == "true")
                    {

                    }
                    else
                    {
                        if (splitfilters[0] == "true")
                        {
                            model = model.Where(x => x.IsBatchAvailable).ToList();
                        }
                        if (splitfilters[1] == "true")
                        {
                            model = model.Where(x => !x.IsBatchAvailable).ToList();
                        }
                    }
                }
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.casno != null && m.casno.ToLower().Contains(searchValue))
                                        || (m.catNo != null && m.catNo.ToLower().Contains(searchValue))
                                       || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))
                                       ).ToList();
                }

                model = model.Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();
                recordsTotal = query.Count();

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdatePurchaseProductMasterList(int id, string quotecreceived, string comment)
        {
            var data = db.Products.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.Quotationreceived = quotecreceived;
                data.PurchaseComment = comment;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();

            }
            return Json("", JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateProductMasterList(int id, string DdlStatus, string LeadTime, string ReTestRequired,
            string ShippingCondition, bool SourceRequired,
            string Source, string Appearance, string CountryOrigin, string HSNCode, string DangGoodToShip, string ShortDescription,
            string SameAs, string productDdlStatus, bool IsControlledSubstance, string ProductRemark)
        {
            var data = db.Products.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.DdlStatus = DdlStatus;
                data.LeadTime = LeadTime;
                data.Appearance = Appearance;
                data.ReTestRequired = ReTestRequired;
                data.ShippingCondition = ShippingCondition;
                data.SourceRequired = SourceRequired;
                data.Source = Source;
                data.ProductStat = productDdlStatus;
                data.ShortDescription = ShortDescription;
                data.DangGoodToShip = DangGoodToShip;
                data.HSNCode = HSNCode;
                data.CountryOrigin = CountryOrigin;
                data.SameAs = SameAs;
                data.IsControlledSubstance = IsControlledSubstance;
                data.ProductRemark = ProductRemark;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();

            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        public int tabIndex()
        {
            tabindex = tabindex + 1;
            return tabindex;
        }
        public ActionResult LoadProductPriceData(string apiname, string search, bool isusd)
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                var model = new List<ProductPriceModel>();
                int? recordsTotal = 0;
                var query = new List<Product>();
                if (!string.IsNullOrEmpty(search))
                {
                    query = (from p in db.Products
                             where p.Name.ToLower().Contains(search.ToLower())
                                   || p.Sku.ToLower().Contains(search.ToLower())
                                   || p.ManufacturerPartNumber.ToLower().Contains(search.ToLower())
                                   && (!p.Deleted &&
                                   p.Published)
                             orderby p.Sku
                             select p).ToList();
                }
                else
                {

                    var categoryData = db.Categories.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Name.ToLower() == apiname.Trim().ToLower()).FirstOrDefault();
                    if (categoryData != null)
                    {

                        var subcategoriesId = db.Categories.Where(x => x.ParentCategoryId == categoryData.Id && x.Deleted == false).Select(x => x.Id).ToList();

                        query = (from p in db.Products
                                 join pc in db.Product_Category_Mapping on p.Id equals pc.ProductId
                                 where subcategoriesId.Contains(pc.CategoryId) &&
                                        !p.Deleted &&
                                       p.Published
                                 orderby p.Sku
                                 select p).ToList();
                    }
                }

                var priceList = db.SZ_PriceList.ToList();
                var categorymasterlist = db.SZ_CategoryMaster.OrderBy(x => x.Name).ToList();
                string synthesis = Convert.ToString((int)EnumList.ProjectType.Synthesis);
                string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                string purchase = Convert.ToString((int)EnumList.ProjectType.Purchase);
                var proids = query.Select(x => x.Id).ToList();
                var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();


                foreach (var q in query)
                {
                    var pricedata = priceList.Where(x => x.ProductId == q.Id && x.IsUsd == true).FirstOrDefault();
                    var pricedataINR = priceList.Where(x => x.ProductId == q.Id && x.IsUsd == false).FirstOrDefault();

                    var obj = new ProductPriceModel();
                    obj.Id = q.Id;
                    //obj.ProductName = q.Name;
                    obj.ProductName = "<a href='javascript:void(0)' onclick='GetProductInformationForCategoryMaster(" + q.Id + ")'>" + q.Name + "</a>";
                    obj.catNo = q.Sku;
                    obj.catNoLink = "<a href='https://synzeal.com/search?q=" + q.Sku + "' target='_blank'>" + q.Sku + "</a>";
                    obj.casno = q.ManufacturerPartNumber;
                    obj.IsBatchAvailable = false;

                    var isAvailableProductDetails = new List<SZ_QuotationDetail>();
                    if (!string.IsNullOrEmpty(obj.catNo) && obj.catNo != "na" && obj.catNo != "NA" && obj.catNo != "N/A")
                    {
                        isAvailableProductDetails = db.SZ_QuotationDetail.Where(x => x.ProductId == q.Id
                        && x.MoveToProject == true && (x.MoveToDispatch == false || x.MoveToDispatch == null) && string.IsNullOrEmpty(x.TrackingNo)
                        && (x.ProjectType == synthesis || x.ProjectType == purSynthesisProjectType || x.ProjectType == purchase)).ToList();
                    }
                    string titletag = "";
                    if (isAvailableProductDetails.Count > 0)
                    {
                        titletag = "PO No: ";
                        foreach (var item in isAvailableProductDetails)
                        {
                            titletag += item.SZ_Quotation.PONo + "(" + item.SZ_Quotation.CompanyName + ", " + item.RequiredQty + "), ";
                        }
                    }
                    if (!string.IsNullOrEmpty(titletag))
                    {
                        obj.catNoLink += "<i class='clstooltip fa fa-info-circle' title='" + titletag + "' style ='float:right' ></i>";
                    }
                    if (isusd)
                    {
                        obj.CategoryMasterUSDText = "<select id='categorymasterUSD_" + q.Id + "' class='addusdcategorymaster'><option value=''>--Select--</option>";

                        if (categorymasterlist.Count > 0)
                        {

                            int probatchcount = 1;
                            foreach (var r in categorymasterlist)
                            {
                                var selected = string.Empty;
                                if (pricedata != null && pricedata.CategoryMasterUSdId.HasValue && pricedata.CategoryMasterUSdId.Value == r.Id)
                                {
                                    obj.CategoryMasterUSDId = pricedata.CategoryMasterUSdId;
                                    selected = " selected ";

                                    var pricestr = "<table with='100%'><thead><tr><th>10</th><th>25</th><th>50</th><th>100</th><th>250</th><th>500</th><th>1000</th></tr></thead>";
                                    pricestr += "<tbody><tr><td>" + r.TenUSD + "</td><td>" + r.TwentyfiveUSD + "</td><td>" + r.FiftyUSD + "</td><td>" + r.OnehundredUSD + "</td><td>" + r.TwohundredFiftyUSD + "</td><td>" + r.FivehundredUSD + "</td><td>" + r.OneThousandUSD + "</td></tr></tbody>";
                                    pricestr += "</table>";

                                    pricestr = "10mg@" + r.TenUSD + " USD, 25mg@" + r.TwentyfiveUSD + " USD, 50mg@" + r.FiftyUSD + " USD, 100mg@" + r.OnehundredUSD + " USD, 250mg@" + r.TwentyfiveUSD + " USD, 500mg@" + r.FivehundredUSD + " USD, 1000mg@" + r.OneThousandUSD + " USD";
                                    pricestr += "10mg@" + r.Ten + " INR, 25mg@" + r.Twentyfive + " INR, 50mg@" + r.Fifty + " INR, 100mg@" + r.Onehundred + " INR, 250mg@" + r.Twentyfive + " INR, 500mg@" + r.Fivehundred + " INR, 1000mg@" + r.OneThousand + " INR";
                                    //obj.catNoLink = obj.catNoLink + " <i class='clstooltip fa fa-info-circle' title='" + pricestr + "'></i>";
                                }

                                obj.CategoryMasterUSDText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + r.Name + "</option>";
                                probatchcount += 1;
                            }
                        }
                        obj.CategoryMasterUSDText += "</select>";
                        obj.CategoryMasterUSDText += "<select id='categorymasterINR_" + q.Id + "' class='addinrcategorymaster'><option value=''>--Select--</option>";

                        if (categorymasterlist.Count > 0)
                        {

                            int probatchcount = 1;
                            foreach (var r in categorymasterlist)
                            {
                                var selected = string.Empty;
                                if (pricedata != null && pricedata.CategoryMasterINRId.HasValue && pricedata.CategoryMasterINRId.Value == r.Id)
                                {
                                    obj.CategoryMasterINRId = pricedata.CategoryMasterINRId;
                                    selected = " selected ";
                                    var pricestr = "<table with='100%'><thead><tr><th>10</th><th>25</th><th>50</th><th>100</th><th>250</th><th>500</th><th>1000</th></tr></thead>";
                                    pricestr += "<tbody><tr><td>" + r.Ten + "</td><td>" + r.Twentyfive + "</td><td>" + r.Fifty + "</td><td>" + r.Onehundred + "</td><td>" + r.TwohundredFifty + "</td><td>" + r.Fivehundred + "</td><td>" + r.OneThousand + "</td></tr></tbody>";
                                    pricestr += "</table>";

                                    pricestr = "10mg@" + r.Ten + ", 25mg@" + r.Twentyfive + ", 50mg@" + r.Fifty + ", 100mg@" + r.Onehundred + ", 250mg@" + r.TwohundredFifty + ", 500mg@" + r.Fivehundred + ", 1000mg@" + r.OneThousand;

                                    //obj.catNoLink = obj.catNoLink + " <i class='clstooltip fa fa-info-circle' title='" + pricestr + "'></i>";
                                }

                                obj.CategoryMasterUSDText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + r.Name + "</option>";
                                probatchcount += 1;
                            }
                        }
                        obj.CategoryMasterUSDText += "</select>";
                    }
                    else
                    {
                        obj.CategoryMasterINRText = "<select id='categorymasterINR_" + q.Id + "' class='addinrcategorymaster'><option value=''>--Select--</option>";

                        if (categorymasterlist.Count > 0)
                        {

                            int probatchcount = 1;
                            foreach (var r in categorymasterlist)
                            {
                                var selected = string.Empty;
                                if (pricedata != null && pricedata.CategoryMasterINRId.HasValue && pricedata.CategoryMasterINRId.Value == r.Id)
                                {
                                    obj.CategoryMasterINRId = pricedata.CategoryMasterINRId;
                                    selected = " selected ";
                                    var pricestr = "<table with='100%'><thead><tr><th>10</th><th>25</th><th>50</th><th>100</th><th>250</th><th>500</th><th>1000</th></tr></thead>";
                                    pricestr += "<tbody><tr><td>" + r.Ten + "</td><td>" + r.Twentyfive + "</td><td>" + r.Fifty + "</td><td>" + r.Onehundred + "</td><td>" + r.TwohundredFifty + "</td><td>" + r.Fivehundred + "</td><td>" + r.OneThousand + "</td></tr></tbody>";
                                    pricestr += "</table>";

                                    pricestr = "10mg@" + r.Ten + ", 25mg@" + r.Twentyfive + ", 50mg@" + r.Fifty + ", 100mg@" + r.Onehundred + ", 250mg@" + r.TwohundredFifty + ", 500mg@" + r.Fivehundred + ", 1000mg@" + r.OneThousand;

                                    //obj.catNoLink = obj.catNoLink + " <i class='clstooltip fa fa-info-circle' title='" + pricestr + "'></i>";
                                }

                                obj.CategoryMasterINRText += "<option value='" + r.Id.ToString() + "' " + selected + ">" + r.Name + "</option>";
                                probatchcount += 1;
                            }
                        }
                        obj.CategoryMasterINRText += "</select>";
                    }

                    obj.AdditionalBatchNoText = "<select id='additionalBatch_" + q.Id + "' class='addbatch'><option value=''>--Select--</option>";
                    var proBatchData = inventorydata.Where(x => x.ProductId == q.Id).OrderBy(x => x.Id).ToList();
                    if (proBatchData.Count > 0)
                    {
                        int probatchcount = 1;
                        foreach (var r in proBatchData)
                        {
                            string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            if (r.IsApproved == false)
                            {
                                text = "*" + text;
                            }

                            obj.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "'>" + text + "</option>";
                            probatchcount += 1;
                        }
                        obj.IsBatchAvailable = true;
                    }
                    obj.AdditionalBatchNoText += "</select>";

                    if (pricedata != null)
                    {
                        obj.IsPriceApproved = pricedata.IsPriceApproved;
                        string ischecked = "";
                        if (obj.IsPriceApproved.HasValue && obj.IsPriceApproved.Value)
                        {
                            obj.ApprovedText = "<input type='checkbox' id='isApproved_" + q.Id + "' value='" + q.Id + "' class='clsApprovedrow' checked />";
                        }
                        else
                        {
                            obj.ApprovedText = "<input type='checkbox' id='isApproved_" + q.Id + "' value='" + q.Id + "' class='clsApprovedrow' />";
                        }
                        obj.TenUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TenUSD_" + q.Id + "' value='" + pricedata.TenUSD + "' onkeypress='return isNumber(event)'/>";
                        obj.TwentyfiveUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwentyfiveUSD_" + q.Id + "' value='" + pricedata.TwentyfiveUSD + "'  onkeypress='return isNumber(event)'/>";
                        obj.FiftyUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FiftyUSD_" + q.Id + "' value='" + pricedata.FiftyUSD + "'  onkeypress='return isNumber(event)'/>";
                        obj.OnehundredUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='OnehundredUSD_" + q.Id + "' value='" + pricedata.OnehundredUSD + "'  onkeypress='return isNumber(event)'/>";
                        obj.TwohundredFiftyUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwohundredFiftyUSD_" + q.Id + "' value='" + pricedata.TwohundredFiftyUSD + "'  onkeypress='return isNumber(event)'/>";
                        obj.FivehundredUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FivehundredUSD_" + q.Id + "' value='" + pricedata.FivehundredUSD + "'  onkeypress='return isNumber(event)'/>";
                        obj.OneThousandUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='OneThousandUSD_" + q.Id + "' value='" + pricedata.OneThousandUSD + "'  onkeypress='return isNumber(event)'/>";
                        obj.DiscountUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='DiscountUSD_" + q.Id + "' value='" + pricedata.DiscountUSD + "'  onkeypress='return isNumber(event)'/>";
                        obj.LeadTime = "<input style='width: 90px;' type='text' id='LeadTime_" + q.Id + "' value='" + pricedata.LeadTime + "' />";
                        obj.ProductRemark = "<input style='width: 90px;' type='text' id='ProductRemark_" + q.Id + "' value='" + pricedata.ProductRemark + "' />";
                    }
                    else
                    {
                        obj.IsPriceApproved = false;
                        obj.ApprovedText = "<input type='checkbox' id='isApproved_" + q.Id + "' value='" + q.Id + "' class='clsApprovedrow' />";
                        obj.TenUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TenUSD_" + q.Id + "' value='' onkeypress='return isNumber(event)'/>";
                        obj.TwentyfiveUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwentyfiveUSD_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.FiftyUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FiftyUSD_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.OnehundredUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='OnehundredUSD_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.TwohundredFiftyUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwohundredFiftyUSD_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.FivehundredUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FivehundredUSD_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.OneThousandUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='OneThousandUSD_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.DiscountUSD = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='DiscountUSD_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.LeadTime = "<input style='width: 90px;' type='text' id='LeadTime_" + q.Id + "' value=''/>";
                        obj.ProductRemark = "<input style='width: 90px;' type='text' id='ProductRemark_" + q.Id + "' value='' />";
                    }
                    obj.CopyPaste = "<a href='javascript:void(0)' onclick='copyrecord(" + q.Id + ")' title='copy'><i class='fa fa-copy'></i></a>&nbsp;&nbsp;&nbsp;<a href='javascript:void(0)' onclick='pasterecord(" + q.Id + ")' title='paste'><i class='fa fa-paste'></i></a>";
                    if (pricedata != null)
                    {
                        obj.IsPriceApproved = pricedata.IsPriceApproved;
                        string ischecked = "";
                        if (obj.IsPriceApproved.HasValue && obj.IsPriceApproved.Value)
                        {
                            obj.ApprovedText = "<input type='checkbox' id='isApproved_" + q.Id + "' value='" + q.Id + "' class='clsApprovedrow' checked />";
                        }
                        else
                        {
                            obj.ApprovedText = "<input type='checkbox' id='isApproved_" + q.Id + "' value='" + q.Id + "' class='clsApprovedrow' />";
                        }
                        obj.TenPrice = "<input tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TenPrice_" + q.Id + "' value='" + pricedata.TenPrice + "' onkeypress='return isNumber(event)'/>";
                        obj.TwentyFivePrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwentyFivePrice_" + q.Id + "' value='" + pricedata.TwentyFivePrice + "'  onkeypress='return isNumber(event)'/>";
                        obj.FiftyPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FiftyPrice_" + q.Id + "' value='" + pricedata.FiftyPrice + "'  onkeypress='return isNumber(event)'/>";
                        obj.HundredPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='HundredPrice_" + q.Id + "' value='" + pricedata.HundredPrice + "'  onkeypress='return isNumber(event)'/>";
                        obj.TwoHundredPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwoHundredPrice_" + q.Id + "' value='" + pricedata.TwoHundredPrice + "'  onkeypress='return isNumber(event)'/>";
                        obj.FivehundredPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FivehundredPrice_" + q.Id + "' value='" + pricedata.FivehundredPrice + "'  onkeypress='return isNumber(event)'/>";
                        obj.OneThousandPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='OneThousandPrice_" + q.Id + "' value='" + pricedata.OneThousandPrice + "'  onkeypress='return isNumber(event)'/>";
                        obj.DiscountINR = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='DiscountINR_" + q.Id + "' value='" + pricedata.DiscountINR + "'  onkeypress='return isNumber(event)'/>";
                        obj.TenUSD += obj.TenPrice;
                        obj.TwentyfiveUSD += obj.TwentyFivePrice;
                        obj.FiftyUSD += obj.FiftyPrice;
                        obj.OnehundredUSD += obj.HundredPrice;
                        obj.TwohundredFiftyUSD += obj.TwoHundredPrice;
                        obj.FivehundredUSD += obj.FivehundredPrice;
                        obj.OneThousandUSD += obj.OneThousandPrice;
                        obj.DiscountUSD += obj.DiscountINR;
                    }
                    else
                    {
                        obj.IsPriceApproved = false;
                        obj.ApprovedText = "<input type='checkbox' id='isApproved_" + q.Id + "' value='" + q.Id + "' class='clsApprovedrow' />";
                        obj.TenPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TenPrice_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.TwentyFivePrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwentyFivePrice_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.FiftyPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FiftyPrice_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.HundredPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='HundredPrice_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.TwoHundredPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='TwoHundredPrice_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.FivehundredPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='FivehundredPrice_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.OneThousandPrice = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='OneThousandPrice_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.DiscountINR = "<input  tabindex='" + tabIndex() + "' class='clspri' style='width: 60px;' type='text' id='DiscountINR_" + q.Id + "' value=''  onkeypress='return isNumber(event)'/>";
                        obj.TenUSD += obj.TenPrice;
                        obj.TwentyfiveUSD += obj.TwentyFivePrice;
                        obj.FiftyUSD += obj.FiftyPrice;
                        obj.OnehundredUSD += obj.HundredPrice;
                        obj.TwohundredFiftyUSD += obj.TwoHundredPrice;
                        obj.FivehundredUSD += obj.FivehundredPrice;
                        obj.OneThousandUSD += obj.OneThousandPrice;
                        obj.DiscountUSD += obj.DiscountINR;
                    }
                    obj.LastRow = "<i class='fa fa-cube' title='Get Details' onclick ='Quote.getPreviousQuoteInformationByCatNoForPrice(&#39;" + q.Sku + "&#39;,&#39;" + q.ManufacturerPartNumber + "&#39;)' ></i>";
                    obj.ChkRow = "<input type='checkbox' value='" + q.Id + "' class='clsSaverow' /> <div class='clsimageproduct' style='display:none'><img src='" + obj.ImagePath + "' width='100%'></div>";

                    model.Add(obj);
                }
                var instockother = Request.Form.GetValues("instockother")[0].ToString();
                if (!string.IsNullOrEmpty(instockother))
                {
                    var splitfilters = instockother.Split(',');
                    if (splitfilters[0] == "true" && splitfilters[1] == "true")
                    {

                    }
                    else
                    {
                        if (splitfilters[0] == "true")
                        {
                            model = model.Where(x => x.IsBatchAvailable).ToList();
                        }
                        if (splitfilters[1] == "true")
                        {
                            model = model.Where(x => !x.IsBatchAvailable).ToList();
                        }
                    }
                }


                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();

                    model = model.Where(m => (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                    || (m.casno != null && m.casno.ToLower().Contains(searchValue))
                                    || (m.catNo != null && m.catNo.ToLower().Contains(searchValue))
                                    || (m.RefStock != null && m.RefStock.ToLower().Contains(searchValue))
                                    || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))
                                    || (m.TenUSD != null && m.TenUSD.ToLower().Contains(searchValue))
                                    || (m.TwentyfiveUSD != null && m.TwentyfiveUSD.ToLower().Contains(searchValue))
                                    || (m.FiftyUSD != null && m.FiftyUSD.ToLower().Contains(searchValue))
                                    || (m.OnehundredUSD != null && m.OnehundredUSD.ToLower().Contains(searchValue))
                                    || (m.FivehundredUSD != null && m.FivehundredUSD.ToLower().Contains(searchValue))
                                    || (m.OneThousandUSD != null && m.OneThousandUSD.ToLower().Contains(searchValue))
                                    || (m.TwohundredFiftyUSD != null && m.TwohundredFiftyUSD.ToLower().Contains(searchValue))
                                    || (m.TenPrice != null && m.TenPrice.ToLower().Contains(searchValue))
                                    || (m.TwentyFivePrice != null && m.TwentyFivePrice.ToLower().Contains(searchValue))
                                    || (m.FiftyPrice != null && m.FiftyPrice.ToLower().Contains(searchValue))
                                    || (m.HundredPrice != null && m.HundredPrice.ToLower().Contains(searchValue))
                                    || (m.FivehundredPrice != null && m.FivehundredPrice.ToLower().Contains(searchValue))
                                    || (m.OneThousandPrice != null && m.OneThousandPrice.ToLower().Contains(searchValue))
                                    || (m.TwoHundredPrice != null && m.TwoHundredPrice.ToLower().Contains(searchValue))).ToList();
                }

                model = model.Skip((pageNo - 1) * numberOfObjectsPerPage).Take(numberOfObjectsPerPage).ToList();
                recordsTotal = query.Count();

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpGet]
        public ActionResult GetCategoryMasterByCategoryMasterName(int id)
        {
            var data = db.SZ_CategoryMaster.Where(x => x.Id == id).FirstOrDefault();
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public List<InvoiceListModel> PrepareInvoiceListModel(List<InvoiceList_Result> data)
        {
            string courierDll = string.Empty;
            var invoiceDetailsData = db.SZ_InvoiceDetailsData.ToList();
            var compData = db.SZ_Courier.OrderBy(x => x.Name).ToList();
            var paymenttermsData = db.PaymentTerms.ToList();
            foreach (var term in compData)
            {
                courierDll += "<option value='" + term.Id.ToString() + "'> " + term.Name + "</option>";
            }
            var model = (from i in data
                         select new InvoiceListModel()
                         {
                             InvoiceBatchNo = i.InvoiceBatchNo,
                             ProductCount = i.ProductCount,
                             QuoteDetailsId = i.QuoteDetailsId,
                             QuoteId = i.QuoteId,
                             CASNo = i.CASNo,
                             CATNo = i.CATNo,
                             FirstRow = "<input type='checkbox' value='" + i.QuoteDetailsId + "' class='clsSaverow' />",
                             SecondRow = !string.IsNullOrEmpty(i.TrackingNo) ? "<input type='checkbox' value='" + i.QuoteDetailsId + "' class='clsMovePrint' />" : "",
                             ThirdRow = "<a href='javascript:void(0)' id='save_" + i.QuoteDetailsId + "' onclick='SaveInvoiceDetails(\"" + i.QuoteDetailsId + "\")'> Save</a>",
                             PackDate = i.PackDate.HasValue ? i.PackDate.Value.ToShortDateString() : "",
                             InvoicedDate = i.InvoicedDate.HasValue ? i.InvoicedDate.Value.ToShortDateString() : "",
                             PONo = i.PONo,
                             ProductName = i.ProductName,
                             RequiredQty = i.RequiredQty,
                             BatchNo = i.BatchNo,
                             CompanyName = i.CompanyName,
                             TrackingNo = i.TrackingNo,
                             Location = i.Location,
                             RefName = i.RefName,
                             DeliveryDate = i.DeliveryDate,
                             DataPending = i.DataPending,
                             InvoiceRemark = i.InvoiceRemark,
                             InvoiceNo = i.InvoiceNo,
                             DeliveryStatus = i.DeliveryStatus,
                             PaymentStatus = i.PaymentStatus,
                             PurposeDispatch = i.PurposeDispatch,
                             Courier = i.Courier,
                             Remark = i.Remark,
                             OrderRemark = i.OrderRemark,
                             COARefNumber = i.COARefNumber,
                             IsPaymentExpired = false,
                             PaymentDays = paymenttermsData.Where(x => x.Id == i.TermsId).Select(x => x.Day).FirstOrDefault(),
                             InvoicePDF = PreareInvoicePDFData(i.QuoteDetailsId, invoiceDetailsData),
                             TrackingNoStr = "<input type='text' id='tracking_" + i.QuoteDetailsId + "' value='" + i.TrackingNo + "' />",
                             LocationStr = "<input type='text' id='location_" + i.QuoteDetailsId + "' value='" + i.Location + "' />",
                             RefNameStr = "<input type='text' id='refno_" + i.QuoteDetailsId + "' value='" + i.RefName + "' />",
                             DeliveryDateStr = "<input type='text' data-value='" + i.DeliveryDate + "' id='deliverydate_" + i.QuoteDetailsId + "' class='datepickerinvoice' />",
                             DataPendingStr = "<input type='text' id='datapending_" + i.QuoteDetailsId + "' value='" + i.DataPending + "' />",
                             InvoiceRemarkStr = "<input type='text' id='remark_" + i.QuoteDetailsId + "' value='" + i.Remark + "' />",
                             InvoiceNoStr = "<input type='text' id='invoiceno_" + i.QuoteDetailsId + "' value='" + i.InvoiceNo + "' class='clsInvoiceno'/>",
                             DeliveryStatusStr = "<select id='deliverystatus_" + i.QuoteDetailsId + "'><option> --Select-- </option><option value='Delivered'> Delivered </option><option value='Intransit' selected > Intransit </option></select>",
                             PaymentStatusStr = "<select id='paymentStatus_" + i.QuoteDetailsId + "'><option value=''>--Select--</option><option value='UnPaid'> UnPaid</option><option value='Paid'>Paid</option></select>",
                             PurposeDispatchStr = "<select id='purposeofdispatch_" + i.QuoteDetailsId + "'><option>--Select--</option><option value='Commercial'>Commercial</option><option value='Replacement'>Replacement</option><option value='Sample Apporval'>Sample Apporval</option></select>",
                             CourierStr = "<select id='courier_" + i.QuoteDetailsId + "'><option>--Select--</option>" + courierDll + "</select>",
                             COAPath = !string.IsNullOrEmpty(i.COAPath) ? "<a href='" + i.COAPath + "' target='_blank'>Download</a>" : "",
                             AnalyticalData = !string.IsNullOrEmpty(i.AnalyticalData) ? "<a href='" + i.AnalyticalData + "' target='_blank'>Download</a>" : ""
                         }).ToList();

            if (model != null && model.Count > 0)
            {
                model.ForEach(x =>
                {
                    if (x.PaymentDays != null && x.PaymentDays != 0 && x.PaymentStatus == "UnPaid" && !string.IsNullOrEmpty(x.InvoicedDate))
                    {
                        DateTime invoicedates = Convert.ToDateTime(x.InvoicedDate).AddDays(x.PaymentDays.Value).Date;
                        DateTime dates = DateTime.Now.Date;
                        if (invoicedates < dates)
                        {
                            x.IsPaymentExpired = true;
                        }
                    }
                });
            }

            return model;
        }

        public string PreareInvoicePDFData(int quoteDetailsId, List<SZ_InvoiceDetailsData> szInvoiceDetailsData)
        {
            var isAvailable = szInvoiceDetailsData.Where(x => x.QuoteDetailsId == quoteDetailsId).FirstOrDefault();
            if (isAvailable == null)
            {
                return "";
            }
            return "<a href='/Form/GenerateInvoicePdf?id=" + quoteDetailsId + "' target='_blank'>Download</a>";
        }

        public ActionResult ManageInvoice(int pdid, int id = 0)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_Invoice.FirstOrDefault(x => x.Id == id);
            if (model == null)
            {
                model = new SZ_Invoice();
                model.DispatchDate = DateTime.Now;
            }

            var szproductdetails = db.SZ_ProjectDetail.Where(x => x.Id == pdid).FirstOrDefault();
            if (szproductdetails != null)
            {
                string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + szproductdetails.ProductId;
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    ViewBag.ProductModel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);

                }

                var szpo = db.SZ_Project.Where(x => x.Id == szproductdetails.ProjectId).FirstOrDefault();
                if (szpo != null)
                {
                    ViewBag.PONo = szpo.PONo;
                    ViewBag.PODate = szpo.PODate;
                }
                model.ProjectId = szproductdetails.ProjectId;
            }
            model.ProjectDetailsId = pdid;

            return View(model);
        }

        public ActionResult GetQtyByBatchId(int id)
        {
            var batchData = db.SZ_Inventory.Where(x => x.Id == id).FirstOrDefault();
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { type = "success", data = batchData.Qty }
            };
        }

        [HttpPost]
        public ActionResult ManageInvoice(SZ_Invoice model)
        {
            if (model.Id == 0)
            {
                model.CreatedDate = DateTime.Now;
                db.SZ_Invoice.Add(model);
                db.SaveChanges();
                string Msg = "Invoice added successfully.";
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "success", msg = Msg }
                };
            }
            else
            {
                var data = db.SZ_Invoice.Where(x => x.Id == model.Id).FirstOrDefault();
                if (data != null)
                {
                    data.BasicValue = model.BasicValue;
                    data.InvoiceNo = model.InvoiceNo;
                    data.PaymentTerm = model.PaymentTerm;
                    data.DueDate = model.DueDate;
                    data.Courier = model.Courier;
                    data.TrackingNo = model.TrackingNo;
                    data.DispatchDetail = model.DispatchDetail;
                    data.DeliveryConfirmation = model.DeliveryConfirmation;
                    data.PaymentFollowUp = model.PaymentFollowUp;
                    data.PaymentDetail = model.PaymentDetail;
                    data.CForm = model.CForm;
                    data.FirstEMail = model.FirstEMail;
                    data.SecondEmail = model.SecondEmail;
                    data.ContactNo = model.ContactNo;
                    data.PaymentStatus = model.PaymentStatus;
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                    string Msg = "Invoice updated successfully.";
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "success", msg = Msg }
                    };
                }
            }

            return View(model);
        }

        public ActionResult UpdateProductdetails(int id)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            SZ_ProjectDetail model = db.SZ_ProjectDetail.FirstOrDefault(x => x.Id == id);
            return PartialView(model);
        }

        public ActionResult Notification()
        {
            if (!SessionCookieManagement.IsClient)
            {
                return RedirectToAction("Index", "Home");
            }
            if (string.IsNullOrEmpty(SessionCookieManagement.LoginCompanyName))
            {
                return RedirectToAction("Index", "Home");
            }
            string logCompName = Request.Cookies["LoginCompanyName"].Value;
            var id = db.SZ_CompanyList.Where(x => x.Name.ToLower() == logCompName).Select(x => x.Id).FirstOrDefault();
            var model = db.SZ_Notification.Where(x => x.CompanyId == id).ToList();
            return View(model);
        }

        [HttpGet]
        public ActionResult NotificationCount()
        {
            if (!SessionCookieManagement.IsClient)
            {
                return RedirectToAction("Index", "Home");
            }
            if (string.IsNullOrEmpty(SessionCookieManagement.LoginCompanyName))
            {
                return RedirectToAction("Index", "Home");
            }

            string logCompName = Request.Cookies["LoginCompanyName"].Value;
            var id = db.SZ_CompanyList.Where(x => x.Name.ToLower() == logCompName).Select(x => x.Id).FirstOrDefault();
            var model = db.SZ_Notification.Where(x => x.CompanyId == id && !x.IsRead).ToList();
            return Json(model.Count(), JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SaveClientModuleInfo(int id, string clientstatus, string currentStatus, string clientremark, string clientaddress)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {

                if (data.ClientStatus != clientstatus)
                {
                    string adminemail = ConfigurationManager.AppSettings["EmailAddress"];
                    if (adminemail != null)
                    {
                        try
                        {
                            MailMessage mail = new MailMessage();
                            SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");

                            mail.From = new MailAddress("noreply.synzeal@gmail.com", "SynZeal Project Management");
                            string[] emails = adminemail.Split(';');
                            foreach (var i in emails)
                            {
                                mail.To.Add(i);
                            }
                            string logCompName = Request.Cookies["LoginCompanyName"].Value;
                            mail.Subject = logCompName + " has updated client status. PO NUmber : " + data.SZ_Quotation.PONo + " / Product Name : " + data.ProductName;
                            mail.Body = "Dear Admin, <br> " + logCompName + " has updated client status. Please have a look on it. <br> Thanks";
                            mail.IsBodyHtml = true;
                            SmtpServer.Port = 587;
                            SmtpServer.Credentials = new System.Net.NetworkCredential("noreply.synzeal@gmail.com", "Synzeal@123");
                            SmtpServer.EnableSsl = true;

                            SmtpServer.Send(mail);
                        }
                        catch (Exception ex)
                        {
                            sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                        }
                    }

                    if (clientstatus == "COA/Data Approved")
                    {
                        data.COAApprovedDate = DateTime.Now;
                    }
                }

                data.ClientStatus = clientstatus;
                if (clientremark != "undefined")
                {
                    if (string.IsNullOrEmpty(data.ClientRemark) && !string.IsNullOrEmpty(clientremark))
                    {
                        data.ClientStatus = "COA/Data Correction";
                    }
                    data.ClientRemark = clientremark;
                }

                data.ClientAddress = clientaddress;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

            return Json("", JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult SaveClientAdminInfo(int id, string clientstatus, string currentStatus, string lastStatus, string clientremark, string clientaddress)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.ClientStatus = clientstatus;
                data.AdminScientistStatus = currentStatus;
                data.LastStatus = lastStatus;

                if (clientremark != "undefined")
                {
                    if (string.IsNullOrEmpty(data.ClientRemark) && !string.IsNullOrEmpty(clientremark))
                    {
                        data.ClientStatus = "COA/Data Correction";
                    }

                    if (data.ClientRemark != clientremark)
                    {
                        data.ResponseClientRemarkDate = DateTime.Now;
                    }

                    data.ClientRemark = clientremark;
                }

                data.ClientAddress = clientaddress;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveInstockPurchaseAction(int? additionalBatch, string batchNo, int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.AdditionalBatchNo = additionalBatch;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult saveChildRecord(string availablequantity, string analysisdate, string HPLCGCELSD,
            string TGALoss, string ResidueOnIgnition, string Potency,
            string PhysicalState, string SOLUBILITY, string IR,
            string Mass, string HPLC, string NMR,
            string CMR, string Dept, string TGA,
            string StorageCon, string ReTestDate, string SpecialInstruction,
            string Remark1, string Remark2, int id, string Purity)
        {
            try
            {

                var masterrecord = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
                if (masterrecord != null)
                {
                    masterrecord.HPLC = HPLC;
                    masterrecord.QuantityAvailable = availablequantity;
                    if (!string.IsNullOrEmpty(analysisdate))
                    {
                        masterrecord.AnalysisDate = Convert.ToDateTime(analysisdate);
                    }
                    else
                    {
                        masterrecord.AnalysisDate = null;
                    }
                    masterrecord.CMR = CMR;
                    masterrecord.Dept = Dept;
                    masterrecord.HPLC = HPLC;
                    masterrecord.HPLCGCELSD = HPLCGCELSD;
                    masterrecord.IR = IR;
                    masterrecord.Mass = Mass;
                    masterrecord.NMR = NMR;
                    masterrecord.PhysicalState = PhysicalState;
                    masterrecord.Potency = Potency;
                    masterrecord.QuantityAvailable = masterrecord.QuantityAvailable;
                    masterrecord.Remark1 = Remark1;
                    masterrecord.Remark2 = Remark2;
                    masterrecord.ResidueOnIgnition = ResidueOnIgnition;
                    if (!string.IsNullOrEmpty(ReTestDate))
                    {
                        masterrecord.ReTestDate = Convert.ToDateTime(ReTestDate);
                    }
                    else
                    {
                        masterrecord.ReTestDate = null;
                    }
                    masterrecord.SOLUBILITY = SOLUBILITY;
                    masterrecord.SpecialInstruction = SpecialInstruction;
                    masterrecord.StorageCon = StorageCon;
                    masterrecord.TGA = TGA;
                    masterrecord.TGALoss = TGALoss;
                    masterrecord.UpdatedDate = DateTime.Now;
                    masterrecord.Purity = Purity;
                    db.Entry(masterrecord).State = EntityState.Modified;
                    db.SaveChanges();
                }
                else
                {
                    masterrecord = new SZ_ChildCOA();
                    masterrecord.RefNo = "SZ-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM");
                    masterrecord.Purity = Purity;
                    masterrecord.HPLC = HPLC;
                    masterrecord.QuantityAvailable = availablequantity;
                    if (!string.IsNullOrEmpty(analysisdate))
                    {
                        masterrecord.AnalysisDate = Convert.ToDateTime(analysisdate);
                    }
                    else
                    {
                        masterrecord.AnalysisDate = null;
                    }
                    masterrecord.CMR = CMR;
                    masterrecord.Dept = Dept;
                    masterrecord.HPLC = HPLC;
                    masterrecord.HPLCGCELSD = HPLCGCELSD;
                    masterrecord.IR = IR;
                    masterrecord.Mass = Mass;
                    masterrecord.NMR = NMR;
                    masterrecord.PhysicalState = PhysicalState;
                    masterrecord.Potency = Potency;
                    masterrecord.QuantityAvailable = masterrecord.QuantityAvailable;
                    masterrecord.Remark1 = Remark1;
                    masterrecord.Remark2 = Remark2;
                    masterrecord.ResidueOnIgnition = ResidueOnIgnition;
                    if (!string.IsNullOrEmpty(ReTestDate))
                    {
                        masterrecord.ReTestDate = Convert.ToDateTime(ReTestDate);
                    }
                    else
                    {
                        masterrecord.ReTestDate = null;
                    }
                    masterrecord.SOLUBILITY = SOLUBILITY;
                    masterrecord.SpecialInstruction = SpecialInstruction;
                    masterrecord.StorageCon = StorageCon;
                    masterrecord.TGA = TGA;
                    masterrecord.TGALoss = TGALoss;
                    masterrecord.CreatedDate = DateTime.Now;
                    masterrecord.UpdatedDate = DateTime.Now;
                    db.SZ_ChildCOA.Add(masterrecord);
                    db.SaveChanges();
                }

            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(new
            {
                success = true,
                message = "Information saved successfully."
            }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveMasterRecord(string availablequantity, string analysisdate, string HPLCGCELSD,
            string TGALoss, string ResidueOnIgnition, string Potency,
            string PhysicalState, string SOLUBILITY, string IR,
            string Mass, string HPLC, string NMR,
            string CMR, string Dept, string TGA,
            string StorageCon, string ReTestDate, string SpecialInstruction,
            string Remark1, string Remark2, int id, string Purity)
        {
            try
            {
                var batchlist = db.SZ_Inventory.Where(x => x.Id == id).FirstOrDefault();
                if (batchlist != null)
                {
                    var masterrecord = db.SZ_MasterCOA.Where(x => x.BatchId == batchlist.Id).FirstOrDefault();
                    if (masterrecord != null)
                    {
                        masterrecord.HPLC = HPLC;
                        masterrecord.QuantityAvailable = availablequantity;
                        if (!string.IsNullOrEmpty(analysisdate))
                        {
                            masterrecord.AnalysisDate = Convert.ToDateTime(analysisdate);
                        }
                        else
                        {
                            masterrecord.AnalysisDate = null;
                        }
                        masterrecord.CMR = CMR;
                        masterrecord.Dept = Dept;
                        masterrecord.HPLC = HPLC;
                        masterrecord.HPLCGCELSD = HPLCGCELSD;
                        masterrecord.IR = IR;
                        masterrecord.Mass = Mass;
                        masterrecord.NMR = NMR;
                        masterrecord.PhysicalState = PhysicalState;
                        masterrecord.Potency = Potency;
                        masterrecord.QuantityAvailable = masterrecord.QuantityAvailable;
                        masterrecord.Remark1 = Remark1;
                        masterrecord.Remark2 = Remark2;
                        masterrecord.Purity = Purity;
                        masterrecord.ResidueOnIgnition = ResidueOnIgnition;
                        if (!string.IsNullOrEmpty(ReTestDate))
                        {
                            masterrecord.ReTestDate = Convert.ToDateTime(ReTestDate);
                        }
                        else
                        {
                            masterrecord.ReTestDate = null;
                        }
                        masterrecord.SOLUBILITY = SOLUBILITY;
                        masterrecord.SpecialInstruction = SpecialInstruction;
                        masterrecord.StorageCon = StorageCon;
                        masterrecord.TGA = TGA;
                        masterrecord.TGALoss = TGALoss;
                        masterrecord.UpdatedDate = DateTime.Now;
                        db.Entry(masterrecord).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                    else
                    {
                        masterrecord = new SZ_MasterCOA();
                        masterrecord.RefNo = "SZ-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM");

                        masterrecord.HPLC = HPLC;
                        masterrecord.QuantityAvailable = availablequantity;
                        if (!string.IsNullOrEmpty(analysisdate))
                        {
                            masterrecord.AnalysisDate = Convert.ToDateTime(analysisdate);
                        }
                        else
                        {
                            masterrecord.AnalysisDate = null;
                        }
                        masterrecord.BatchId = batchlist.Id;
                        masterrecord.BatchNo = batchlist.BatchNo;
                        masterrecord.ProductName = db.Products.Where(x => x.Id == batchlist.ProductId).Select(x => x.Name).FirstOrDefault();
                        masterrecord.CMR = CMR;
                        masterrecord.Dept = Dept;
                        masterrecord.HPLC = HPLC;
                        masterrecord.HPLCGCELSD = HPLCGCELSD;
                        masterrecord.IR = IR;
                        masterrecord.Mass = Mass;
                        masterrecord.NMR = NMR;
                        masterrecord.PhysicalState = PhysicalState;
                        masterrecord.Potency = Potency;
                        masterrecord.QuantityAvailable = masterrecord.QuantityAvailable;
                        masterrecord.Remark1 = Remark1;
                        masterrecord.Remark2 = Remark2;
                        masterrecord.Purity = Purity;
                        masterrecord.ResidueOnIgnition = ResidueOnIgnition;
                        if (!string.IsNullOrEmpty(ReTestDate))
                        {
                            masterrecord.ReTestDate = Convert.ToDateTime(ReTestDate);
                        }
                        else
                        {
                            masterrecord.ReTestDate = null;
                        }
                        masterrecord.SOLUBILITY = SOLUBILITY;
                        masterrecord.SpecialInstruction = SpecialInstruction;
                        masterrecord.StorageCon = StorageCon;
                        masterrecord.TGA = TGA;
                        masterrecord.TGALoss = TGALoss;
                        masterrecord.CreatedDate = DateTime.Now;
                        masterrecord.UpdatedDate = DateTime.Now;
                        db.SZ_MasterCOA.Add(masterrecord);
                        db.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(new
            {
                success = true,
                message = "Information saved successfully."
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SavePendingAction(int? scId, string projectType, int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                if ((data.ScientistCustomerId == null || data.ScientistCustomerId == 0) && (scId != null && scId != 0))
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToScientist;
                }
                if ((data.ScientistCustomerId != null && data.ScientistCustomerId != 0) && (scId == null || scId == 0))
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                }

                if (!data.ScientistCustomerId.HasValue && scId.HasValue)
                {
                    data.MoveToScientistDate = DateTime.Now;
                }
                if (data.ScientistCustomerId.HasValue && scId.HasValue && data.ScientistCustomerId.Value != scId.Value)
                {
                    //assign another scientist then update date
                    data.MoveToScientistDate = DateTime.Now;
                }

                data.ScientistCustomerId = scId;
                data.ProjectType = projectType;

                if (string.IsNullOrEmpty(projectType))
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                }

                if (!string.IsNullOrEmpty(projectType) && Convert.ToInt32(projectType) == (int)EnumList.ProjectType.InStock)
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToInstock;
                    if (data.ProcessState <= (int)EnumList.ProcessState.MoveToInStock)
                    {
                        data.ProcessState = (int)EnumList.ProcessState.MoveToInStock;
                    }
                }
                if (!string.IsNullOrEmpty(projectType) && Convert.ToInt32(projectType) == (int)EnumList.ProjectType.Purchase)
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToPurchase;
                    if (data.ProcessState <= (int)EnumList.ProcessState.MoveToPurchase)
                    {
                        data.ProcessState = (int)EnumList.ProcessState.MoveToPurchase;
                    }
                }

                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateProjectPurchaseRFQInfo(PurchaseRFQModel model)
        {
            var data = db.SZ_PurchaseRFQ.Where(x => x.Id == model.Id).FirstOrDefault();
            if (data != null)
            {
                data.PurchaseRemark = model.PurchaseRemark;

                data.Comment = model.Comment;
                data.Summary = model.Summary;
                data.PurchaseStatus = model.PurchaseStatus;
                data.ChemicalName = model.ChemicalName;
                data.CASNo = model.CASNo;
                data.CATNo = model.CATNo;
                data.Estdate = model.Estdate;

                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateProjectPurchaseInfo(SZ_QuotationProductModel model)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == model.QuoteDetailsId).FirstOrDefault();
            if (data != null)
            {
                data.PurchaseRemark = model.PurchaseRemark;

                data.Reason = model.Reason;
                data.PurchaseDDLStatus = model.PurchaseDDLStatus;
                data.PurchaseStatus = model.PurchaseStatus;
                data.EstimateCompleteDate = model.EstimateCompleteDate;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateProjectInfo(ProjectInfoModel model)
        {
            int? scId = model.scId;
            string projectType = model.projectType;
            string qty = model.qty;
            int id = model.id;
            string batchno = model.batchno;
            string remark = model.remark;
            string additionalBatch = model.additionalBatch;
            string scientistStatus = model.scientistStatus;
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                var oldModel = LogManagement.PrepareQuoteDetailEntity(data);
                if ((data.ScientistCustomerId == null || data.ScientistCustomerId == 0) && (scId != null && scId != 0))
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToScientist;
                }
                if ((data.ScientistCustomerId != null && data.ScientistCustomerId != 0) && (scId == null || scId == 0))
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                }
                if (!data.ScientistCustomerId.HasValue && scId.HasValue)
                {
                    data.MoveToScientistDate = DateTime.Now;
                }
                if (data.ScientistCustomerId.HasValue && scId.HasValue && data.ScientistCustomerId.Value != scId.Value)
                {
                    data.MoveToScientistDate = DateTime.Now;
                }
                data.ScientistCustomerId = scId;
                if (!string.IsNullOrEmpty(additionalBatch))
                {
                    data.AdditionalBatchNo = Convert.ToInt32(additionalBatch);
                }
                else
                {
                    data.AdditionalBatchNo = null;
                }
                data.RequiredQty = qty;
                if (model.tabname == "purchase")
                {
                    data.PurchaseStatus = model.purchaseStatus;
                    data.Reason = model.reason;
                    data.PurchaseRemark = model.purchaseremark;
                    data.PurchaseDDLStatus = model.purchaseDDLStatus;
                    if (!string.IsNullOrEmpty(model.estDate))
                    {
                        var estimateCompleteDate = Convert.ToDateTime(model.estDate);
                        if (estimateCompleteDate != data.EstimateCompleteDate)
                        {
                            data.PreviousEstCompleteDate = data.EstimateCompleteDate;
                        }
                        data.EstimateCompleteDate = estimateCompleteDate;
                    }
                }
                else
                {
                    if (data.ProjectType == Convert.ToString((int)EnumList.ProjectType.InStock) && (projectType == Convert.ToString((int)EnumList.ProjectType.Synthesis) || projectType == Convert.ToString((int)EnumList.ProjectType.Purchase) || projectType == Convert.ToString((int)EnumList.ProjectType.PurSynthesis)))
                    {
                        data.ScientistStatus = null;
                    }
                    data.Remark = remark;
                    data.ProjectType = projectType;
                    if (string.IsNullOrEmpty(projectType))
                    {
                        data.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                    }
                    if (!string.IsNullOrEmpty(projectType) && Convert.ToInt32(projectType) == (int)EnumList.ProjectType.InStock)
                    {
                        data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToInstock;
                        if (data.ProcessState <= (int)EnumList.ProcessState.MoveToInStock)
                        {
                            data.ProcessState = (int)EnumList.ProcessState.MoveToInStock;
                        }
                    }
                    if (!string.IsNullOrEmpty(projectType) && oldModel.ProjectType != projectType && (Convert.ToInt32(projectType) == (int)EnumList.ProjectType.Purchase || Convert.ToInt32(projectType) == (int)EnumList.ProjectType.PurSynthesis))
                    {
                        data.PurchaseDate = DateTime.Now;
                        data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToPurchase;
                        if (data.ProcessState <= (int)EnumList.ProcessState.MoveToPurchase)
                        {
                            data.ProcessState = (int)EnumList.ProcessState.MoveToPurchase;
                        }
                    }
                    if (model.tabname != "purchase")
                    {
                        data.LastStatus = data.AdminScientistStatus;
                        data.AdminScientistStatus = scientistStatus;
                        var estimateCompleteDate = Convert.ToDateTime(model.estDate);
                        if (estimateCompleteDate != DateTime.MinValue)
                        {
                            if (estimateCompleteDate != data.EstimateCompleteDate)
                            {
                                data.PreviousEstCompleteDate = data.EstimateCompleteDate;
                            }
                            data.EstimateCompleteDate = estimateCompleteDate;
                        }
                        else
                        {
                            data.EstimateCompleteDate = null;
                        }
                    }
                    if (model.tabname == "all" || model.tabname == "noaction" || model.tabname == "synthesis" || model.tabname == "domestic" || model.tabname == "export" || model.tabname == "purchase" || model.tabname == "instock")
                    {
                        data.Reason = model.reason;
                    }
                    if (model.tabname == "all" || model.tabname == "noaction" || model.tabname == "instock" || model.tabname == "domestic" || model.tabname == "synthesis" || model.tabname == "export")
                    {
                        data.OrderRemark = model.orderremark;
                        data.SubScientistName = model.subScientistId;
                    }
                    if (model.tabname == "export")
                    {
                        if (!string.IsNullOrEmpty(model.reportinvoiceDate))
                        {
                            data.ReportInvoiceDate = Convert.ToDateTime(model.reportinvoiceDate);
                        }
                        else
                        {
                            data.ReportInvoiceDate = null;
                        }
                    }
                    if (model.tabname == "all" || model.tabname == "noaction" || model.tabname == "noaction")
                    {
                        data.DifficultyLevel = model.difflevel;
                        var product = db.Products.Where(x => x.Id == data.ProductId).FirstOrDefault();
                        if (product != null)
                        {
                            product.DifficultyLevel = model.difflevel;
                            db.Entry(product).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                    }
                    if (model.tabname == "all" || model.tabname == "synthesis")
                    {
                        if (data.ProStatus != model.prostatus)
                        {
                            data.PreviousStatus = data.ProStatus;
                        }
                        if (!string.IsNullOrEmpty(data.OtherProStatus))
                        {
                            data.LastProStatus = data.OtherProStatus;
                        }
                        data.ProStatus = model.prostatus;
                        data.OtherProStatus = model.prostatus;
                        data.DispatchStatus = model.prostatus;
                        data.ReviewSciStatus = Convert.ToString(model.prostatus);

                        //string selectedStatus = "";
                        //foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                        //{
                        //    var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                        //    var test = r.ToString();
                        //    string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                        //    int val = (int)r;
                        //    if (val == Convert.ToInt32(model.prostatus))
                        //    {
                        //        selectedStatus = text;
                        //    }
                        //}
                        //foreach (EnumList.ScientistReviewStatusDDL r in Enum.GetValues(typeof(EnumList.ScientistReviewStatusDDL)))
                        //{
                        //    var item = Enum.GetName(typeof(EnumList.ScientistReviewStatusDDL), r);
                        //    var test = r.ToString();
                        //    string text = SZ_Helper.GetEnumDescription((EnumList.ScientistReviewStatusDDL)(int)r);
                        //    int val = (int)r;
                        //    if (selectedStatus == text)
                        //    {
                        data.ReviewSciStatus = model.prostatus;
                        //    }
                        //}
                    }
                    if (model.tabname == "all")
                    {
                        if (data.ExplainationSecond != model.explainationsecond)
                        {
                            data.LastWeekUpdate = data.ExplainationSecond;
                        }
                        data.ExplainationSecond = model.explainationsecond;
                    }
                    if (model.tabname == "all" || model.tabname == "domestic" || model.tabname == "export" || model.tabname == "instock")
                    {
                        data.ActivityStatus = model.activity;
                    }
                    if (model.tabname == "domestic" || model.tabname == "export" || model.tabname == "instock")
                    {
                        if (!string.IsNullOrEmpty(data.OtherProStatus))
                        {
                            data.LastProStatus = data.OtherProStatus;
                        }
                        data.OtherProStatus = model.otherprostatus;
                        data.ProStatus = model.otherprostatus;
                        data.DispatchStatus = model.otherprostatus;
                        data.ReviewSciStatus = Convert.ToString(model.otherprostatus);
                    }
                }

                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();

                PrepareQuoteDetailsLog(data, oldModel);
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdatePrepHPLC(ProjectInfoModel model)
        {
            int id = model.id;
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                var oldModel = LogManagement.PrepareQuoteDetailEntity(data);
                if (!string.IsNullOrEmpty(model.estDate))
                {
                    var estimateCompleteDate = Convert.ToDateTime(model.estDate);
                    if (estimateCompleteDate != data.EstimateCompleteDate)
                    {
                        data.PreviousEstCompleteDate = data.EstimateCompleteDate;
                    }
                    data.EstimateCompleteDate = estimateCompleteDate;
                }
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();

                PrepareQuoteDetailsLog(data, oldModel);
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult addNewPurchaseRFQData(PurchaseRFQModel model)
        {
            string customerName = "";
            var customer = db.Customers.Where(x => x.Id == SessionCookieManagement.UserId && x.Deleted == false && x.Active == true).FirstOrDefault();
            if (customer != null)
            {
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == customer.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
            }

            string value = string.Empty;
            string matchingstring = "SZ-RFQ-";
            var szPurchase = (from i in db.SZ_PurchaseRFQ
                              select i).ToList();
            int refNo = 0;
            if (szPurchase.Count > 0)
            {
                refNo = szPurchase.Select(x => ExtractPurchaseRfqNumber(x.RfqNo)).Max(w => w);
                int newbrokerrewf = Convert.ToInt32(refNo) + 1;
                value = "SZ-RFQ-" + newbrokerrewf.ToString().PadLeft(3, '0');
            }
            else
            {
                value = "SZ-RFQ-001";
            }

            SZ_PurchaseRFQ objPRfq = new SZ_PurchaseRFQ();
            objPRfq.CreatedBy = customerName;
            objPRfq.CreatedDate = DateTime.Now;
            objPRfq.AssignedDate = DateTime.Now;
            objPRfq.CASNo = model.CASNo;
            objPRfq.CATNo = model.CATNo;
            objPRfq.ChemicalName = model.ChemicalName;
            objPRfq.Comment = model.Comment;
            objPRfq.RfqNo = value;
            objPRfq.RefBy = model.RefBy;
            db.SZ_PurchaseRFQ.Add(objPRfq);
            db.SaveChanges();

            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult BackMoveFromProject(int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.TrackingNo = null;
                data.MoveToProject = false;
                data.MoveToDispatch = false;
                data.MoveToInvoice = false;
                data.MoveDispatchDate = null;
                data.MoveProjectDate = null;
                data.MoveToInvoiceDate = null;
                data.MoveToScientistDate = null;
                data.ScientistCustomerId = null;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult ChangeProductPriority(bool status, int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.IsPriority = status;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult ParkQuotationdetail(bool status, int id, string parkreason)
        {
            var data = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.IsPark = status;
                data.ParkReason = parkreason;
                data.IsInstock = false;
                data.IsCustomSynthesis = false;
                data.IsToBe = false;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateDataapprovedInfo(string status, int id, string additionalBatch)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.DataApprovedStatus = status;
                if (!string.IsNullOrEmpty(additionalBatch))
                {
                    data.AdditionalBatchNo = Convert.ToInt32(additionalBatch);
                }
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateRefStock(string refstock, int id)
        {
            var data = db.Products.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.RefStockPrice = refstock;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        public ActionResult UpdateMasterPriceList(int id, string TenPrice, string TwentyFivePrice, string FiftyPrice, string HundredPrice,
            string LeadTime, string ProductRemark,
            string categorymaster, bool isUSD,
            string TenPriceUSD, string TwentyFivePriceUSD, string FiftyPriceUSD, string HundredPriceUSD, string categorymasterUSD, bool isApproved)
        {
            if (categorymaster == "undefined")
            {
                categorymaster = "";
            }
            var data = db.Products.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                var pricedata = db.SZ_PriceList.Where(x => x.ProductId == id && x.IsUsd == true).FirstOrDefault();
                if (pricedata != null)
                {
                    pricedata.TenUSD = TenPriceUSD;
                    pricedata.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedata.FiftyUSD = FiftyPriceUSD;
                    pricedata.OnehundredUSD = HundredPriceUSD;
                    pricedata.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;

                    pricedata.TenPrice = TenPrice;
                    pricedata.TwentyFivePrice = TwentyFivePrice;
                    pricedata.FiftyPrice = FiftyPrice;
                    pricedata.HundredPrice = HundredPrice;
                    pricedata.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;
                    pricedata.ProductRemark = ProductRemark;
                    pricedata.LeadTime = LeadTime;
                    pricedata.IsPriceApproved = isApproved;
                    pricedata.IsUsd = true;
                    pricedata.LeadTime = LeadTime;
                    pricedata.ProductRemark = ProductRemark;
                    db.Entry(pricedata).State = EntityState.Modified;
                    db.SaveChanges();
                }
                else
                {
                    pricedata = new SZ_PriceList();
                    pricedata.ProductId = data.Id;
                    pricedata.TenUSD = TenPriceUSD;
                    pricedata.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedata.FiftyUSD = FiftyPriceUSD;
                    pricedata.OnehundredUSD = HundredPriceUSD;
                    pricedata.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;

                    pricedata.TenPrice = TenPrice;
                    pricedata.TwentyFivePrice = TwentyFivePrice;
                    pricedata.FiftyPrice = FiftyPrice; pricedata.HundredPrice = HundredPrice;
                    pricedata.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;
                    pricedata.IsPriceApproved = isApproved;
                    pricedata.IsUsd = true;
                    pricedata.LeadTime = LeadTime;
                    pricedata.ProductRemark = ProductRemark;
                    db.Entry(pricedata).State = EntityState.Added;
                }

                var pricedataINR = db.SZ_PriceList.Where(x => x.ProductId == id && x.IsUsd == false).FirstOrDefault();
                if (pricedataINR != null)
                {

                    pricedataINR.TenUSD = TenPriceUSD;
                    pricedataINR.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedataINR.FiftyUSD = FiftyPriceUSD;
                    pricedataINR.OnehundredUSD = HundredPriceUSD;
                    pricedataINR.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;

                    pricedataINR.TenPrice = TenPrice;
                    pricedataINR.TwentyFivePrice = TwentyFivePrice;
                    pricedataINR.FiftyPrice = FiftyPrice;
                    pricedataINR.HundredPrice = HundredPrice;
                    pricedataINR.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;

                    pricedataINR.LeadTime = LeadTime;
                    pricedataINR.ProductRemark = ProductRemark;
                    pricedataINR.IsPriceApproved = isApproved;
                    pricedataINR.IsUsd = false;
                    pricedataINR.LeadTime = LeadTime;
                    pricedataINR.ProductRemark = ProductRemark;
                    db.Entry(pricedataINR).State = EntityState.Modified;
                }
                else
                {
                    pricedataINR = new SZ_PriceList();
                    pricedataINR.ProductId = data.Id;
                    pricedataINR.TenUSD = TenPriceUSD;
                    pricedataINR.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedataINR.FiftyUSD = FiftyPriceUSD;
                    pricedataINR.OnehundredUSD = HundredPriceUSD;
                    pricedataINR.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;
                    pricedataINR.TenPrice = TenPrice;
                    pricedataINR.TwentyFivePrice = TwentyFivePrice;
                    pricedataINR.FiftyPrice = FiftyPrice; pricedataINR.HundredPrice = HundredPrice;
                    pricedataINR.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;
                    pricedataINR.IsPriceApproved = isApproved;
                    pricedataINR.IsUsd = false;
                    pricedataINR.LeadTime = LeadTime;
                    pricedataINR.ProductRemark = ProductRemark;
                    db.Entry(pricedataINR).State = EntityState.Added;
                }
                db.SaveChanges();
            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdatePriceList(int id, string TenPrice, string TwentyFivePrice, string FiftyPrice,
            string HundredPrice, string TwoHundredPrice,
            string Discount, string LeadTime, string ProductRemark,
            string categorymaster, string FivehundredPrice, string OneThousandPrice, bool isUSD,

            string TenPriceUSD, string TwentyFivePriceUSD, string FiftyPriceUSD, string HundredPriceUSD, string TwoHundredPriceUSD,
            string DiscountUSD, string categorymasterUSD, string FivehundredPriceUSD, string OneThousandPriceUSD, bool isApproved
            )
        {
            if (categorymaster == "undefined")
            {
                categorymaster = "";
            }
            var data = db.Products.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                var pricedata = db.SZ_PriceList.Where(x => x.ProductId == id && x.IsUsd == true).FirstOrDefault();
                if (pricedata != null)
                {

                    pricedata.DiscountUSD = DiscountUSD;
                    pricedata.TenUSD = TenPriceUSD;
                    pricedata.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedata.FiftyUSD = FiftyPriceUSD;
                    pricedata.OnehundredUSD = HundredPriceUSD;
                    pricedata.TwohundredFiftyUSD = TwoHundredPriceUSD;
                    pricedata.OneThousandUSD = OneThousandPriceUSD;
                    pricedata.FivehundredUSD = FivehundredPriceUSD;
                    pricedata.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymasterUSD) ? Convert.ToInt32(categorymasterUSD) : 0;
                    pricedata.FivehundredPrice = FivehundredPrice;
                    pricedata.OneThousandPrice = OneThousandPrice;
                    pricedata.TenPrice = TenPrice;
                    pricedata.TwentyFivePrice = TwentyFivePrice;
                    pricedata.FiftyPrice = FiftyPrice;
                    pricedata.HundredPrice = HundredPrice;
                    pricedata.TwoHundredPrice = TwoHundredPrice;
                    pricedata.DiscountINR = Discount;
                    pricedata.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;
                    pricedata.ProductRemark = ProductRemark;
                    pricedata.LeadTime = LeadTime;
                    pricedata.IsPriceApproved = isApproved;
                    pricedata.IsUsd = true;
                    pricedata.LeadTime = LeadTime;
                    pricedata.ProductRemark = ProductRemark;
                    db.Entry(pricedata).State = EntityState.Modified;
                    db.SaveChanges();
                }
                else
                {
                    pricedata = new SZ_PriceList();
                    pricedata.ProductId = data.Id;
                    pricedata.DiscountUSD = DiscountUSD;
                    pricedata.TenUSD = TenPriceUSD;
                    pricedata.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedata.FiftyUSD = FiftyPriceUSD;
                    pricedata.OnehundredUSD = HundredPriceUSD;
                    pricedata.TwohundredFiftyUSD = TwoHundredPriceUSD;
                    pricedata.OneThousandUSD = OneThousandPriceUSD;
                    pricedata.FivehundredUSD = FivehundredPriceUSD;
                    pricedata.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymasterUSD) ? Convert.ToInt32(categorymasterUSD) : 0;
                    pricedata.FivehundredPrice = FivehundredPrice;
                    pricedata.OneThousandPrice = OneThousandPrice;
                    pricedata.TenPrice = TenPrice;
                    pricedata.TwentyFivePrice = TwentyFivePrice;
                    pricedata.FiftyPrice = FiftyPrice;
                    pricedata.HundredPrice = HundredPrice;
                    pricedata.TwoHundredPrice = TwoHundredPrice;
                    pricedata.DiscountINR = Discount;
                    pricedata.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;
                    pricedata.IsPriceApproved = isApproved;
                    pricedata.IsUsd = true;
                    pricedata.LeadTime = LeadTime;
                    pricedata.ProductRemark = ProductRemark;
                    db.Entry(pricedata).State = EntityState.Added;
                }

                var pricedataINR = db.SZ_PriceList.Where(x => x.ProductId == id && x.IsUsd == false).FirstOrDefault();
                if (pricedataINR != null)
                {

                    pricedataINR.DiscountUSD = DiscountUSD;
                    pricedataINR.TenUSD = TenPriceUSD;
                    pricedataINR.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedataINR.FiftyUSD = FiftyPriceUSD;
                    pricedataINR.OnehundredUSD = HundredPriceUSD;
                    pricedataINR.TwohundredFiftyUSD = TwoHundredPriceUSD;
                    pricedataINR.OneThousandUSD = OneThousandPriceUSD;
                    pricedataINR.FivehundredUSD = FivehundredPriceUSD;
                    pricedataINR.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymasterUSD) ? Convert.ToInt32(categorymasterUSD) : 0;

                    pricedataINR.FivehundredPrice = FivehundredPrice;
                    pricedataINR.OneThousandPrice = OneThousandPrice;
                    pricedataINR.TenPrice = TenPrice;
                    pricedataINR.TwentyFivePrice = TwentyFivePrice;
                    pricedataINR.FiftyPrice = FiftyPrice;
                    pricedataINR.HundredPrice = HundredPrice;
                    pricedataINR.TwoHundredPrice = TwoHundredPrice;
                    pricedataINR.DiscountINR = Discount;
                    pricedataINR.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;


                    pricedataINR.LeadTime = LeadTime;
                    pricedataINR.ProductRemark = ProductRemark;
                    pricedataINR.IsPriceApproved = isApproved;
                    pricedataINR.IsUsd = false;
                    pricedataINR.LeadTime = LeadTime;
                    pricedataINR.ProductRemark = ProductRemark;
                    db.Entry(pricedataINR).State = EntityState.Modified;
                }
                else
                {
                    pricedataINR = new SZ_PriceList();
                    pricedataINR.ProductId = data.Id;
                    pricedataINR.DiscountUSD = DiscountUSD;
                    pricedataINR.TenUSD = TenPriceUSD;
                    pricedataINR.TwentyfiveUSD = TwentyFivePriceUSD;
                    pricedataINR.FiftyUSD = FiftyPriceUSD;
                    pricedataINR.OnehundredUSD = HundredPriceUSD;
                    pricedataINR.TwohundredFiftyUSD = TwoHundredPriceUSD;
                    pricedataINR.OneThousandUSD = OneThousandPriceUSD;
                    pricedataINR.FivehundredUSD = FivehundredPriceUSD;
                    pricedataINR.CategoryMasterUSdId = !string.IsNullOrEmpty(categorymasterUSD) ? Convert.ToInt32(categorymasterUSD) : 0;

                    pricedataINR.FivehundredPrice = FivehundredPrice;
                    pricedataINR.OneThousandPrice = OneThousandPrice;
                    pricedataINR.TenPrice = TenPrice;
                    pricedataINR.TwentyFivePrice = TwentyFivePrice;
                    pricedataINR.FiftyPrice = FiftyPrice;
                    pricedataINR.HundredPrice = HundredPrice;
                    pricedataINR.TwoHundredPrice = TwoHundredPrice;
                    pricedataINR.DiscountINR = Discount;
                    pricedataINR.CategoryMasterINRId = !string.IsNullOrEmpty(categorymaster) ? Convert.ToInt32(categorymaster) : 0;
                    pricedataINR.IsPriceApproved = isApproved;
                    pricedataINR.IsUsd = false;
                    pricedataINR.LeadTime = LeadTime;
                    pricedataINR.ProductRemark = ProductRemark;
                    db.Entry(pricedataINR).State = EntityState.Added;
                }

                db.SaveChanges();

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdatePurchaseStatus(string status, int id, string date)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.PurchaseStatus = status;
                data.EstimateCompleteDate = Convert.ToDateTime(date);
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateScientistProjectInfo(int? scStatus, string batchcode1, string qty1, string batchcode2, string qty2, int id, string esticompleteDate, string remark = null, string subscientist = null, string reason = null, string tabname = null, string chemist = null, string reviewscistatus = null)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                if (tabname == "scientist-All" || tabname == "scientist-NOACTION")
                {
                    data.Chemist = chemist;
                }
                if (tabname == "scientist-All")
                {
                    data.ReviewSciStatus = reviewscistatus;
                    //string selectedStatus = "";

                    //foreach (EnumList.ScientistReviewStatusDDL r in Enum.GetValues(typeof(EnumList.ScientistReviewStatusDDL)))
                    //{
                    //    var item = Enum.GetName(typeof(EnumList.ScientistReviewStatusDDL), r);
                    //    var test = r.ToString();
                    //    string text = SZ_Helper.GetEnumDescription((EnumList.ScientistReviewStatusDDL)(int)r);
                    //    int val = (int)r;
                    //    if(val == Convert.ToInt32(reviewscistatus))
                    //    {
                    //        selectedStatus = text;
                    //    }
                    //}
                    //foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                    //{
                    //    var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                    //    var test = r.ToString();
                    //    string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                    //    int val = (int)r;
                    //    if (text == selectedStatus)
                    //    {
                    data.ProStatus = reviewscistatus;
                    data.OtherProStatus = reviewscistatus;
                    //    }
                    //}
                }
                if (data.ScientistStatus != scStatus)
                {
                    data.LastStatus = data.AdminScientistStatus;
                    data.AdminScientistStatus = db.SZ_ScientistStatus.Where(x => x.Id == scStatus).Select(x => x.Name).FirstOrDefault();
                }
                data.ScientistStatus = scStatus;
                if (!string.IsNullOrEmpty(remark))
                {
                    data.Remark = remark;
                }

                //if (scStatus == db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault())
                //{
                //    if (data.ProjectType != Convert.ToString((int)EnumList.ProjectType.InHouse))
                //    {
                //        if (data.ProjectType != Convert.ToString((int)EnumList.ProjectType.InStock))
                //        {
                //            data.Instockdate = DateTime.Now;
                //        }
                //        data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToInstock;
                //        data.ProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);
                //    }

                //    if (data.ProcessState <= (int)EnumList.ProcessState.MoveToInStock)
                //    {
                //        data.ProcessState = (int)EnumList.ProcessState.MoveToInStock;
                //    }

                //}
                data.SubScientistName = subscientist;
                if (batchcode1 != "undefined")
                {
                    data.BatchCode1 = batchcode1;
                }
                if (qty1 != "undefined")
                {
                    data.Qty1 = qty1;
                }
                data.BatchCode2 = batchcode2;
                data.Qty2 = qty2;
                if (!string.IsNullOrEmpty(esticompleteDate))
                {
                    data.EstimateCompleteDate = Convert.ToDateTime(esticompleteDate);
                }
                else
                {
                    data.EstimateCompleteDate = null;
                }
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateScientistProductInfoForHold(int? scStatus, int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.ScientistStatus = scStatus;
                data.IsHoldManually = true;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }



        [HttpPost]
        public ActionResult SetProjectOnHold(int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.ProjectStatus = (int)EnumList.ProjectStatus.Hold;
                data.IsOnHold = true;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SetProjectOnResume(int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                data.IsOnHold = false;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult UploadedOnServer(int id, string catno, string casno)
        {
            catno = catno.Trim();
            var product = db.Products.Where(x => x.Sku == catno).FirstOrDefault();
            if (product == null)
                return Json("noproduct", JsonRequestBehavior.AllowGet);

            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.CATNo = catno;
                data.CASNo = casno;
                data.ProductId = product.Id;
                data.IsUploadServer = true;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult SubmittedUploadProduct(List<int> id)
        {
            foreach (var item in id)
            {
                var data = db.SZ_QuotationDetail.Where(x => x.Id == item).FirstOrDefault();
                if (data != null)
                {
                    data.IsForceUpload = false;
                    db.Entry(data).State = EntityState.Modified;
                }
            }

            db.SaveChanges();

            return Json(new
            {
                success = true,
                message = "Product upload submitted"
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateInvoiceInformation(string courier, string tracking, string location, string refno, string purposeofdispatch,
            string deliverydate, string deliverystatus, string datapending, int id, string remark, string paymentStatus, string invoiceno)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                if (string.IsNullOrEmpty(data.TrackingNo) && !string.IsNullOrEmpty(tracking))
                {
                    data.TrackingNoDate = DateTime.Now;
                    data.InvoicedDate = DateTime.Now;
                }
                data.PaymentStatus = paymentStatus;
                data.InvoiceNo = invoiceno;
                data.Courier = courier;
                data.TrackingNo = tracking;
                data.Location = location;
                data.RefName = refno;
                data.PurposeDispatch = purposeofdispatch;
                data.DeliveryStatus = deliverystatus;
                data.DataPending = datapending;
                if (!string.IsNullOrEmpty(deliverydate))
                {
                    data.DeliveryDate = Convert.ToDateTime(deliverydate);
                }
                data.Remark = remark;
                db.Entry(data).State = EntityState.Modified;

                if (!string.IsNullOrEmpty(paymentStatus) && paymentStatus == "Paid")
                {
                    var chkdata = db.SZ_QuotationDetail.Where(x => x.InvoiceNo == invoiceno).ToList();
                    if (chkdata != null && chkdata.Count > 0)
                    {
                        foreach (var item in chkdata)
                        {
                            item.PaymentStatus = "Paid";
                            db.Entry(item).State = EntityState.Modified;
                        }
                    }
                }
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoDispatch(int id)
        {
            try
            {
                var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {
                    data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToDispatch;
                    data.ProcessState = (int)EnumList.ProcessState.MoveToDispatch;
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Moved successfully.." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message }
                };
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveDeliveredDispatch(int id, string additionalBatch, string coa = null)
        {
            try
            {
                var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {

                    if (!string.IsNullOrEmpty(additionalBatch))
                    {
                        data.AdditionalBatchNo = Convert.ToInt32(additionalBatch);
                        var invData = db.SZ_Inventory.Where(x => x.Id == data.AdditionalBatchNo).FirstOrDefault();
                        if (invData != null)
                        {
                            data.InvoiceBatchNo = invData.BatchNo;
                            data.BatchNo = invData.BatchNo;
                        }
                    }
                    else
                    {
                        data.AdditionalBatchNo = null;
                    }
                    if (!string.IsNullOrEmpty(coa))
                    {
                        data.COAId = Convert.ToInt32(coa);
                        data.COARefNumber = db.SZ_ChildCOA.Where(x => x.Id == data.COAId).Select(x => x.RefNo).FirstOrDefault();
                    }
                    else
                    {
                        data.COAId = null;
                        data.COARefNumber = "";
                    }

                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Moved successfully.." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message }
                };
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveDispatchAll(int id, string additionalBatch, string reason = null, string esticompleteDate = null, string coa = null, string dispatchstatus = null)
        {
            try
            {
                var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {
                    var inventoryData = db.SZ_Inventory.Where(x => x.Id == data.AdditionalBatchNo).FirstOrDefault();
                    if (inventoryData != null)
                    {
                        data.ApprovalComment = inventoryData.QCRemark;
                    }

                    if (!string.IsNullOrEmpty(esticompleteDate))
                    {
                        data.EstimateCompleteDate = Convert.ToDateTime(esticompleteDate);
                    }
                    else
                    {
                        data.EstimateCompleteDate = null;
                    }
                    data.Reason = reason;
                    if (!string.IsNullOrEmpty(additionalBatch))
                    {
                        data.AdditionalBatchNo = Convert.ToInt32(additionalBatch);
                    }
                    else
                    {
                        data.AdditionalBatchNo = null;
                    }
                    if (!string.IsNullOrEmpty(coa))
                    {
                        data.COAId = Convert.ToInt32(coa);
                        data.COARefNumber = db.SZ_ChildCOA.Where(x => x.Id == data.COAId).Select(x => x.RefNo).FirstOrDefault();
                    }
                    else
                    {
                        data.COAId = null;
                        data.COARefNumber = "";
                    }
                    data.DispatchStatus = dispatchstatus;
                    data.ProStatus = dispatchstatus;
                    data.OtherProStatus = dispatchstatus;
                    if (data.DispatchStatus == Convert.ToString((int)EnumList.DispatchStatusDDl.QCApproval))
                    {
                        data.ApprovalStatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproval);
                        data.QcApprovalDate = DateTime.Now;

                        if (inventoryData != null && !inventoryData.ApprovalDate.HasValue)
                        {
                            inventoryData.ApprovalDate = DateTime.Now;
                            db.Entry(inventoryData).State = EntityState.Modified;
                        }
                    }
                    if (data.DispatchStatus == Convert.ToString((int)EnumList.DispatchStatusDDl.ReadyforDispatch))
                    {
                        data.IsDispatchApprove = true;
                    }
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Moved successfully.." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message }
                };
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ChangeDispatchStatus(int id, int status, string additionalBatch, int? sortQty, string batchNo, string remark, string reason = null, string coa = null, string orderremark = null, string tabname = null)
        {
            try
            {
                bool isSortQty = false;
                int newQty = 0;
                if (status == (int)EnumList.DispatchStatus.SortQty)
                {
                    isSortQty = true;
                }
                var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {
                    if (tabname == "all")
                    {
                        data.Reason = reason;
                        data.OrderRemark = orderremark;
                    }
                    if (tabname == "list")
                    {
                        data.Reason = reason;
                    }
                    else
                    {
                        data.Remark = remark;
                        data.OrderRemark = orderremark;
                    }
                    data.BatchNo = batchNo;
                    data.DispatchedStatus = status;

                    if (!string.IsNullOrEmpty(additionalBatch))
                    {
                        data.AdditionalBatchNo = Convert.ToInt32(additionalBatch);
                    }
                    else
                    {
                        data.AdditionalBatchNo = null;
                    }
                    if (!string.IsNullOrEmpty(coa))
                    {
                        data.COAId = Convert.ToInt32(coa);
                        data.COARefNumber = db.SZ_ChildCOA.Where(x => x.Id == data.COAId).Select(x => x.RefNo).FirstOrDefault();
                    }
                    else
                    {
                        data.COARefNumber = null;
                        data.COAId = null;
                    }
                    if (isSortQty)
                    {
                        if (sortQty.HasValue)
                        {
                            newQty = Convert.ToInt32(data.RequiredQty) - sortQty.Value;
                            data.RequiredQty = Convert.ToString(newQty);
                            data.DispatchedStatus = (int)EnumList.DispatchStatus.Unpacked;

                            SZ_QuotationDetail objquoteDetails = new SZ_QuotationDetail();
                            objquoteDetails.QuoteId = data.QuoteId;
                            objquoteDetails.ProductId = data.ProductId;
                            objquoteDetails.ProductName = data.ProductName;
                            objquoteDetails.CASNo = data.CASNo;
                            objquoteDetails.ImagePath = data.ImagePath;
                            objquoteDetails.Price = data.Price;
                            objquoteDetails.LeadTime = data.LeadTime;
                            objquoteDetails.IsUploadServer = data.IsUploadServer;
                            objquoteDetails.CreatedDate = DateTime.Now;
                            objquoteDetails.CATNo = data.CATNo;
                            objquoteDetails.DisplayOrder = data.DisplayOrder;
                            objquoteDetails.ProjectType = data.ProjectType;
                            objquoteDetails.ScientistCustomerId = data.ScientistCustomerId;
                            objquoteDetails.ProjectStatus = data.ProjectStatus;
                            objquoteDetails.ScientistStatus = data.ScientistStatus;
                            objquoteDetails.BatchCode1 = data.BatchCode1;
                            objquoteDetails.Qty1 = data.Qty1;
                            objquoteDetails.BatchCode2 = data.BatchCode2;
                            objquoteDetails.Qty2 = data.Qty2;
                            objquoteDetails.Courier = data.Courier;
                            objquoteDetails.TrackingNo = data.TrackingNo;
                            objquoteDetails.Location = data.Location;
                            objquoteDetails.RefName = data.RefName;
                            objquoteDetails.PurposeDispatch = data.PurposeDispatch;
                            objquoteDetails.DeliveryDate = data.DeliveryDate;
                            objquoteDetails.DispatchedStatus = (int)EnumList.DispatchStatus.SortQty;
                            objquoteDetails.ProcessState = data.ProcessState;
                            objquoteDetails.PackDate = data.PackDate;
                            objquoteDetails.DeliveryStatus = data.DeliveryStatus;
                            objquoteDetails.DataPending = data.DataPending;
                            objquoteDetails.TrackingNoDate = data.TrackingNoDate;
                            objquoteDetails.EstimateCompleteDate = data.EstimateCompleteDate;
                            objquoteDetails.MoveToProject = data.MoveToProject;
                            objquoteDetails.MoveToDispatch = data.MoveToDispatch;
                            objquoteDetails.MoveProjectDate = data.MoveProjectDate;
                            objquoteDetails.MoveDispatchDate = data.MoveDispatchDate;
                            objquoteDetails.MoveToScientistDate = data.MoveToScientistDate;
                            objquoteDetails.BatchNo = data.BatchNo;
                            objquoteDetails.AdditionalBatchNo = data.AdditionalBatchNo;
                            objquoteDetails.Remark = data.Remark;
                            objquoteDetails.MoveToInvoice = data.MoveToInvoice;
                            objquoteDetails.AdminScientistStatus = data.AdminScientistStatus;
                            var quotedetailsPO = db.SZ_QuotationDetail.Where(x => x.QuoteId == data.QuoteId).Max(x => x.SrPo);
                            int srPo = 0;
                            if (quotedetailsPO != null && quotedetailsPO != 0 && quotedetailsPO.HasValue)
                            {
                                srPo = quotedetailsPO.Value + 1;
                            }
                            else
                            {
                                srPo = 1;
                            }
                            objquoteDetails.SrPo = srPo;
                            objquoteDetails.InvoiceRemark = data.InvoiceRemark;
                            objquoteDetails.InvoiceNo = data.InvoiceNo;
                            objquoteDetails.PaymentStatus = data.PaymentStatus;
                            objquoteDetails.RequiredQty = Convert.ToString(sortQty.Value);
                            objquoteDetails.Reason = data.Reason;
                            db.SZ_QuotationDetail.Add(objquoteDetails);
                            db.SaveChanges();
                        }
                    }
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Moved successfully.." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message }
                };
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult RejectApproveProductDetail(int id)
        {
            try
            {
                var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {
                    data.IsDispatchApprove = false;
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Moved successfully.." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message }
                };
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ApproveProductDetail(int id)
        {
            try
            {
                var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {
                    data.IsDispatchApprove = true;
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Moved successfully.." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message }
                };
            }

        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ReverseStatus(int id, string status)
        {
            try
            {
                var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (data != null)
                {
                    if (status == "project")
                    {
                        data.MoveToProject = true;
                        data.MoveToDispatch = null;
                        data.MoveDispatchDate = null;
                        data.DispatchedStatus = null;
                        data.ProcessState = (int)EnumList.ProcessState.MoveToProject;
                        data.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                    }
                    db.Entry(data).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Moved successfully.." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message }
                };
            }

        }

        public ActionResult SubmitForm(int id, int formid = 0, bool isprint = false, bool isdispatch = false, bool isnewform = false, bool newprodumastr = false)
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsProject && !SessionCookieManagement.IsDispatch && !SessionCookieManagement.IsScientist && !SessionCookieManagement.IsSubScientist)
            {
                return RedirectToAction("Index", "Home");
            }



            ViewBag.NewProductMaster = newprodumastr;
            ViewBag.QuotationDetailsId = id;
            ViewBag.FormId = formid;
            var model = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (!isnewform)
            {
                var formdata = db.SZ_QuoteDetailForm.Where(x => x.Id == formid).FirstOrDefault();
                ViewBag.FormData = formdata;
                ViewBag.IsPrint = isprint;
                ViewBag.Isdispatch = isdispatch;
                ViewBag.QuoteDetailsComment = db.SZ_QuoteDetailsComment.Where(x => x.QuotationDetailsId == id).OrderBy(x => x.CreatedDate).ToList();
                if (formdata != null)
                {
                    ViewBag.islockForm = db.SZ_Inventory.Where(x => x.BatchNo.Trim().ToLower() == formdata.BatchCode.Trim().ToLower()).Any();
                }
            }
            var listItems = new List<SelectListItem>();
            MemoryCacheManager objCache = new MemoryCacheManager();

            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });

            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });

            var subscienList = objCache.Get("cache.subscienList", () =>
            {
                return db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            });
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });


            foreach (var term in subscienList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }

                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });

            }
            if (!string.IsNullOrEmpty(model.SubScientistName))
            {
                var subsci = System.Text.RegularExpressions.Regex.IsMatch(model.SubScientistName, @"\d+");
                if (subsci)
                {
                    if (System.Text.RegularExpressions.Regex.Match(model.SubScientistName, @"\d+").Value == model.SubScientistName)
                    {
                        var subsciids = Convert.ToInt32(model.SubScientistName);
                        foreach (var r in listItems)
                        {
                            string selected = string.Empty;
                            if (r.Value == Convert.ToString(subsciids))
                            {
                                model.SubScientistName = r.Text;
                            }
                        }
                    }
                }
            }

            return View(model);
        }

        public ActionResult ViewForm(int id)
        {
            if (!SessionCookieManagement.IsScientist && !SessionCookieManagement.IsSubScientist)
            {
                return RedirectToAction("Index", "Home");
            }

            ViewBag.ProcessId = id;
            ViewBag.ProductName = db.SZ_QuotationDetail.Where(x => x.Id == id).Select(x => x.ProductName).FirstOrDefault();
            var formid = db.SZ_QuoteDetails_Form.Where(x => x.QuoteDetailsId == id).Select(x => x.FormId).FirstOrDefault();
            var catno = db.SZ_QuotationDetail.Where(x => x.Id == id).Select(x => x.CATNo).FirstOrDefault();
            catno = catno.ToLower().Trim();
            var model = db.SZ_QuoteDetailForm.Where(x => x.CATNo.Trim().ToLower() == catno).ToList();
            return View(model);
        }

        public string SaveFileByName(string fileuploadname)
        {
            HttpPostedFileBase file = Request.Files[fileuploadname];
            string fname;
            string extension = Path.GetExtension(file.FileName);
            string newfname = Guid.NewGuid().ToString() + extension;
            fname = Path.Combine(Server.MapPath("~/Content/NewProducts/"), newfname);
            file.SaveAs(fname);
            return "../Content/NewProducts/" + newfname;
        }

        public ActionResult GetPDFFromId(int id)
        {
            string path = string.Empty;
            var data = db.SZ_QuoteDetailForm.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                // var htmlstring = PartialViewdata(this, "_PartialSubmittionFormPdf", data);
                var htmlstring = PartialViewdata(this, "_PartialSubmittionFormPdf", data);
                path = printpdf(htmlstring, "testcoa-" + data.Id.ToString() + "_" + DateTime.Now.ToString().Replace(":", "_").Replace(" ", "_").Replace("/", "_"));
            }
            return Content(path);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SubmitAvailableDataForm(FormCollection form, string radiorbTypeCompound)
        {
            try
            {
                int frmId = 0;
                string formId = form.Get("formId");
                string submissionDate = form.Get("SubmissionDate");
                string catelogueNo = form.Get("CatelogueNo");
                string projectName = form.Get("ProjectName");
                string CASNo = form.Get("CASNo");
                string productName = form.Get("ProductName");
                string NameOfScientist = form.Get("NameOfScientist");
                string BatchCode = form.Get("BatchCode");
                string NMRCodeStatus = form.Get("NMRCodeStatus");
                string JournalDate = form.Get("JournalDate");
                string DatePurity = form.Get("DatePurity");
                string MoleWeight = form.Get("MoleWeight");
                string CodeESIAPCI = form.Get("CodeESIAPCI");
                string MolecularFormula = form.Get("MolecularFormula");
                string AnalysisCode = form.Get("AnalysisCode");
                string rbTypeCompound = form.Get("radiorbTypeCompound") != "undefined" ? form.Get("radiorbTypeCompound") : null;
                string rbStateOfCompound = form.Get("radiorbStateOfCompound") != "undefined" ? form.Get("radiorbStateOfCompound") : null;
                string rbSaltMentionName = form.Get("radiorbSaltMentionName") != "undefined" ? form.Get("radiorbSaltMentionName") : null;
                string radiorbAdditionalAnalysis = form.Get("radiorbAdditionalAnalysis") != "undefined" ? form.Get("radiorbAdditionalAnalysis") : null;
                string SaltName = form.Get("SaltName");
                string DrawStructureHere = form.Get("DrawStructureHere");
                string QuantitySubmitted = form.Get("QuantitySubmitted");
                string AppearanceOtherRemarks = form.Get("AppearanceOtherRemarks");
                string NameSignofScientist = form.Get("NameSignofScientist");
                string NameSignofTeamLeader = form.Get("NameSignofTeamLeader");
                string SignofQualityAssuranceDept = form.Get("SignofQualityAssuranceDept");
                string NameSignOfReviewerwithDate = form.Get("NameSignOfReviewerwithDate");
                string SignofDocDepartment = form.Get("SignofDocDepartment");
                int QuotationDetailsId = Convert.ToInt32(form.Get("QuotationDetailsId"));
                string chkHygroscopic = form.Get("chkHygroscopic");
                string TLName = form.Get("TLName");
                string HPLCDate = form.Get("HPLCDate");
                string HPLCPurity = form.Get("HPLCPurity");
                string Error = form.Get("Error");
                string imagePath = form.Get("detFromDBImage");
                string molecularFormula = form.Get("MolecularFormula");
                string Chemist = form.Get("Chemist");
                string SolutionForm = form.Get("radioSolutionForm") != "undefined" ? form.Get("radioSolutionForm") : null;
                string SolidForm = form.Get("radioSolidForm") != "undefined" ? form.Get("radioSolidForm") : null;
                string State = form.Get("ddlState");
                string radioEarlierSynthesized = form.Get("radioEarlierSynthesized") != "undefined" ? form.Get("radioEarlierSynthesized") : null;
                string NoOfFinalStep = form.Get("NoOfFinalStep");
                string PurificationBy = form.Get("PurificationBy");
                string spectralDataAttachment = string.Empty;
                string IRAttachment = string.Empty;
                string MassAttachment = string.Empty;
                string PLCAttachment = string.Empty;
                string NMRAttchment = string.Empty;
                string QNMRAttchment = string.Empty;
                string TGAAttachment = string.Empty;
                string CMRAttchment = string.Empty;
                string DEPTAttachment = string.Empty;
                string HRMSAttachment = string.Empty;
                string ROIAttachment = string.Empty;
                string ElementralAttachment = string.Empty;
                string SERAttachment = string.Empty;
                string GCAttachment = string.Empty;
                string ELSDAttachment = string.Empty;
                string ChiralAttachmenrt = string.Empty;
                string chkNMRDone = form.Get("chkNMRDone");
                string chkCrystallizationDone = form.Get("chkCrystallizationDone");

                if (formId != null && formId != "0")
                {
                    int fId = Convert.ToInt32(formId);
                    frmId = fId;
                    SZ_QuoteDetailForm objForm = db.SZ_QuoteDetailForm.Where(x => x.Id == fId).FirstOrDefault();
                    if (objForm != null)
                    {
                        if (Request.Files.Count > 0)
                        {
                            if (Request.Files["IRAttachment"] != null)
                            {
                                IRAttachment = SaveFileByName("IRAttachment");
                                objForm.IRAttachment = IRAttachment;
                            }
                            if (Request.Files["MassAttachment"] != null)
                            {
                                MassAttachment = SaveFileByName("MassAttachment");
                                objForm.MassAttachment = MassAttachment;
                            }
                            if (Request.Files["PLCAttachment"] != null)
                            {
                                PLCAttachment = SaveFileByName("PLCAttachment");
                                objForm.PLCAttachment = PLCAttachment;
                            }
                            if (Request.Files["NMRAttchment"] != null)
                            {
                                NMRAttchment = SaveFileByName("NMRAttchment");
                                objForm.NMRAttchment = NMRAttchment;
                            }
                            if (Request.Files["QNMRAttchment"] != null)
                            {
                                QNMRAttchment = SaveFileByName("QNMRAttchment");
                                objForm.QNMRAttchment = QNMRAttchment;
                            }
                            if (Request.Files["TGAAttachment"] != null)
                            {
                                TGAAttachment = SaveFileByName("TGAAttachment");
                                objForm.TGAAttachment = TGAAttachment;
                            }
                            if (Request.Files["CMRAttchment"] != null)
                            {
                                CMRAttchment = SaveFileByName("CMRAttchment");
                                objForm.CMRAttchment = CMRAttchment;
                            }
                            if (Request.Files["DEPTAttachment"] != null)
                            {
                                DEPTAttachment = SaveFileByName("DEPTAttachment");
                                objForm.DEPTAttachment = DEPTAttachment;
                            }
                            if (Request.Files["HRMSAttachment"] != null)
                            {
                                HRMSAttachment = SaveFileByName("HRMSAttachment");
                                objForm.HRMSAttachment = HRMSAttachment;
                            }
                            if (Request.Files["ROIAttachment"] != null)
                            {
                                ROIAttachment = SaveFileByName("ROIAttachment");
                                objForm.ROIAttachment = ROIAttachment;
                            }
                            if (Request.Files["ElementralAttachment"] != null)
                            {
                                ElementralAttachment = SaveFileByName("ElementralAttachment");
                                objForm.ElementralAttachment = ElementralAttachment;
                            }
                            if (Request.Files["SERAttachment"] != null)
                            {
                                SERAttachment = SaveFileByName("SERAttachment");
                                objForm.SERAttachment = SERAttachment;
                            }
                            if (Request.Files["GCAttachment"] != null)
                            {
                                GCAttachment = SaveFileByName("GCAttachment");
                                objForm.GCAttachment = GCAttachment;
                            }
                            if (Request.Files["ELSDAttachment"] != null)
                            {
                                ELSDAttachment = SaveFileByName("ELSDAttachment");
                                objForm.ELSDAttachment = ELSDAttachment;
                            }
                            if (Request.Files["ChiralAttachmenrt"] != null)
                            {
                                ChiralAttachmenrt = SaveFileByName("ChiralAttachmenrt");
                                objForm.ChiralAttachmenrt = ChiralAttachmenrt;
                            }
                        }

                        string oldBatchNo = objForm.BatchCode;

                        objForm.RbAdditionalAnalysis = radiorbAdditionalAnalysis;
                        db.Entry(objForm).State = EntityState.Modified;
                        db.SaveChanges();

                    }
                    else
                    {
                        return new JsonResult()
                        {
                            JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                            Data = new { success = false, message = "Sorry!!! No Data found for update." }
                        };
                    }
                }


                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, formId = frmId, message = "Form created Successfully." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.Message.ToString() }
                };
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SubmitForm(FormCollection form, string radiorbTypeCompound)
        {
            try
            {
                //Email send to QC team
                MailMessage mail = new MailMessage();
                int frmId = 0;
                string formId = form.Get("QuotationDetailsFormId");
                string submissionDate = form.Get("SubmissionDate");
                string catelogueNo = form.Get("CatelogueNo");
                string projectName = form.Get("ProjectName");
                string CASNo = form.Get("CASNo");
                string productName = form.Get("ProductName");
                string NameOfScientist = form.Get("NameOfScientist");
                string BatchCode = form.Get("BatchCode");
                string NMRCodeStatus = form.Get("NMRCodeStatus");
                string JournalDate = form.Get("JournalDate");
                string DatePurity = form.Get("DatePurity");
                string MoleWeight = form.Get("MoleWeight");
                string CodeESIAPCI = form.Get("CodeESIAPCI");
                string MolecularFormula = form.Get("MolecularFormula");
                string AnalysisCode = form.Get("AnalysisCode");
                string rbTypeCompound = form.Get("radiorbTypeCompound") != "undefined" ? form.Get("radiorbTypeCompound") : null;
                string rbStateOfCompound = form.Get("radiorbStateOfCompound") != "undefined" ? form.Get("radiorbStateOfCompound") : null;
                string rbSaltMentionName = form.Get("radiorbSaltMentionName") != "undefined" ? form.Get("radiorbSaltMentionName") : null;
                string radiorbAdditionalAnalysis = form.Get("radiorbAdditionalAnalysis") != "undefined" ? form.Get("radiorbAdditionalAnalysis") : null;
                string SaltName = form.Get("SaltName");
                string DrawStructureHere = form.Get("DrawStructureHere");
                string QuantitySubmitted = form.Get("QuantitySubmitted");
                string AppearanceOtherRemarks = form.Get("AppearanceOtherRemarks");
                string NameSignofScientist = form.Get("NameSignofScientist");
                string NameSignofTeamLeader = form.Get("NameSignofTeamLeader");
                string SignofQualityAssuranceDept = form.Get("SignofQualityAssuranceDept");
                string NameSignOfReviewerwithDate = form.Get("NameSignOfReviewerwithDate");
                string SignofDocDepartment = form.Get("SignofDocDepartment");
                int QuotationDetailsId = Convert.ToInt32(form.Get("QuotationDetailsId"));
                string chkHygroscopic = form.Get("chkHygroscopic");
                string PurificationBy = form.Get("PurificationBy");
                string TLName = form.Get("TLName");
                string HPLCDate = form.Get("HPLCDate");
                string HPLCPurity = form.Get("HPLCPurity");
                string Error = form.Get("Error");
                string imagePath = form.Get("detFromDBImage");
                string molecularFormula = form.Get("MolecularFormula");
                string Chemist = form.Get("Chemist");
                string SolutionForm = form.Get("radioSolutionForm") != "undefined" ? form.Get("radioSolutionForm") : null;
                string SolidForm = form.Get("radioSolidForm") != "undefined" ? form.Get("radioSolidForm") : null;
                string State = form.Get("ddlState");
                string radioEarlierSynthesized = form.Get("radioEarlierSynthesized") != "undefined" ? form.Get("radioEarlierSynthesized") : null;
                string NoOfFinalStep = form.Get("NoOfFinalStep");
                string Photostability = form.Get("Photostability");
                string spectralDataAttachment = string.Empty;
                string IRAttachment = string.Empty;
                string MassAttachment = string.Empty;
                string PLCAttachment = string.Empty;
                string NMRAttchment = string.Empty;
                string QNMRAttchment = string.Empty;
                string TGAAttachment = string.Empty;
                string CMRAttchment = string.Empty;
                string DEPTAttachment = string.Empty;
                string HRMSAttachment = string.Empty;
                string ROIAttachment = string.Empty;
                string ElementralAttachment = string.Empty;
                string SERAttachment = string.Empty;
                string GCAttachment = string.Empty;
                string ELSDAttachment = string.Empty;
                string ChiralAttachmenrt = string.Empty;
                string UVSpectraAttachment = string.Empty;
                string OtherAnalysisAttachment = string.Empty;
                string N1NMRAttachment = string.Empty;
                string ChiralHPLCAttachment = string.Empty;
                string IsotropicpurityAttachment = string.Empty;
                string TwoDNMRAttachment = string.Empty;

                string COSYAttachment = string.Empty;
                string CHNSAttachment = string.Empty;
                string StabilitydataAttachment = string.Empty;
                bool IsNewProductMaster = false;
                if (!string.IsNullOrEmpty(form.Get("IsNewProductMaster")))
                {
                    IsNewProductMaster = true;
                }

                string chkNMRDone = form.Get("chkNMRDone");
                string chkCrystallizationDone = form.Get("chkCrystallizationDone");
                string LightSensitivity = form.Get("LightSensitivity");
                string ChemdrawFileAttachment = string.Empty;
                string APCIMassAttachment = string.Empty;
                string WeightingSlipAttachment = string.Empty;
                string NMRInterpretaionAttachment = string.Empty;
                string TempSensitive = form.Get("TempSensitive");
                string Lacrymatory = form.Get("Lacrymatory");
                string IsLight = form.Get("IsLight");
                bool submitedFormDispatch = Convert.ToBoolean(form.Get("submitedFormDispatch"));
                string specdatafilename = Guid.NewGuid().ToString() + ".pdf";
                string outputPdfPath = Server.MapPath("~/Content/NewProducts/" + specdatafilename);
                var output = new FileStream(outputPdfPath, FileMode.Create);

                List<string> fileArray = new List<string>();
                if (Request.Files.Count > 0)
                {
                    if (Request.Files["PLCAttachment"] != null)
                    {
                        PLCAttachment = SaveFileByName("PLCAttachment");
                        fileArray.Add(PLCAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + PLCAttachment.Replace("..", "")));
                        attachment.Name = "HPLC.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["MassAttachment"] != null)
                    {
                        MassAttachment = SaveFileByName("MassAttachment");
                        fileArray.Add(MassAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + MassAttachment.Replace("..", "")));
                        attachment.Name = "Mass.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["NMRAttchment"] != null)
                    {
                        NMRAttchment = SaveFileByName("NMRAttchment");
                        fileArray.Add(NMRAttchment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + NMRAttchment.Replace("..", "")));
                        attachment.Name = "NMR.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["TGAAttachment"] != null)
                    {
                        TGAAttachment = SaveFileByName("TGAAttachment");
                        fileArray.Add(NMRAttchment);

                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + TGAAttachment.Replace("..", "")));
                        attachment.Name = "TGA.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["IRAttachment"] != null)
                    {
                        IRAttachment = SaveFileByName("IRAttachment");
                        fileArray.Add(IRAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + IRAttachment.Replace("..", "")));
                        attachment.Name = "IR.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["UVSpectra"] != null)
                    {
                        UVSpectraAttachment = SaveFileByName("UVSpectra");
                        fileArray.Add(UVSpectraAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + UVSpectraAttachment.Replace("..", "")));
                        attachment.Name = "UVSpectra.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["CMRAttchment"] != null)
                    {
                        CMRAttchment = SaveFileByName("CMRAttchment");
                        fileArray.Add(CMRAttchment);

                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + CMRAttchment.Replace("..", "")));
                        attachment.Name = "CMR.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["QNMRAttchment"] != null)
                    {
                        QNMRAttchment = SaveFileByName("QNMRAttchment");
                        fileArray.Add(QNMRAttchment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + QNMRAttchment.Replace("..", "")));
                        attachment.Name = "QNMR.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["OtherAnalysisAttachment"] != null)
                    {
                        OtherAnalysisAttachment = SaveFileByName("OtherAnalysisAttachment");
                        fileArray.Add(OtherAnalysisAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + OtherAnalysisAttachment.Replace("..", "")));
                        attachment.Name = "OtherAnalysis.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["DEPTAttachment"] != null)
                    {
                        DEPTAttachment = SaveFileByName("DEPTAttachment");
                        fileArray.Add(DEPTAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + DEPTAttachment.Replace("..", "")));
                        attachment.Name = "DEPT.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["HRMSAttachment"] != null)
                    {
                        HRMSAttachment = SaveFileByName("HRMSAttachment");
                        fileArray.Add(HRMSAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + HRMSAttachment.Replace("..", "")));
                        attachment.Name = "HRMS.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["ROIAttachment"] != null)
                    {
                        ROIAttachment = SaveFileByName("ROIAttachment");
                        fileArray.Add(ROIAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + ROIAttachment.Replace("..", "")));
                        attachment.Name = "ROI.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["ElementralAttachment"] != null)
                    {
                        ElementralAttachment = SaveFileByName("ElementralAttachment");
                        fileArray.Add(ElementralAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + ElementralAttachment.Replace("..", "")));
                        attachment.Name = "Elementral.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["SERAttachment"] != null)
                    {
                        SERAttachment = SaveFileByName("SERAttachment");
                        fileArray.Add(SERAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + SERAttachment.Replace("..", "")));
                        attachment.Name = "SER.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["GCAttachment"] != null)
                    {
                        GCAttachment = SaveFileByName("GCAttachment");
                        fileArray.Add(GCAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + GCAttachment.Replace("..", "")));
                        attachment.Name = "GC.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["ELSDAttachment"] != null)
                    {
                        ELSDAttachment = SaveFileByName("ELSDAttachment");
                        fileArray.Add(ELSDAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + ELSDAttachment.Replace("..", "")));
                        attachment.Name = "ELSD.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["ChiralAttachmenrt"] != null)
                    {
                        ChiralAttachmenrt = SaveFileByName("ChiralAttachmenrt");
                        fileArray.Add(ChiralAttachmenrt);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + ChiralAttachmenrt.Replace("..", "")));
                        attachment.Name = "Chiral.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["APCIMassAttachment"] != null)
                    {
                        APCIMassAttachment = SaveFileByName("APCIMassAttachment");
                        fileArray.Add(NMRAttchment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + APCIMassAttachment.Replace("..", "")));
                        attachment.Name = "APCI_Mass.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["ChemdrawFileAttachment"] != null)
                    {
                        ChemdrawFileAttachment = SaveFileByName("ChemdrawFileAttachment");
                        string startPath = Server.MapPath(ChemdrawFileAttachment.Replace("..", "~"));
                        string zipPath = Server.MapPath("~/Content/NewProducts/" + Guid.NewGuid().ToString() + ".zip");
                        string[] Filenames = new string[] { startPath };
                        using (ZipFile zip = new ZipFile())
                        {
                            zip.AddFiles(Filenames, "Chemdraw File");//Zip file inside filename  
                            zip.Save(zipPath);//location and name for creating zip file  
                        }
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(zipPath);
                        attachment.Name = "Chemdraw.zip";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["WeightingSlipAttachment"] != null)
                    {
                        WeightingSlipAttachment = SaveFileByName("WeightingSlipAttachment");
                        fileArray.Add(WeightingSlipAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + WeightingSlipAttachment.Replace("..", "")));
                        attachment.Name = "Weighting_Slip.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["NMRInterpretaionAttachment"] != null)
                    {
                        NMRInterpretaionAttachment = SaveFileByName("NMRInterpretaionAttachment");
                        fileArray.Add(NMRInterpretaionAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + NMRInterpretaionAttachment.Replace("..", "")));
                        attachment.Name = "NMR_Interpretaion.pdf";
                        mail.Attachments.Add(attachment);
                    }

                    if (Request.Files["N1NMR"] != null)
                    {
                        N1NMRAttachment = SaveFileByName("N1NMR");
                        fileArray.Add(N1NMRAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + N1NMRAttachment.Replace("..", "")));
                        attachment.Name = "N1NMR.pdf";
                        mail.Attachments.Add(attachment);
                    }


                    if (Request.Files["ChiralHPLC"] != null)
                    {
                        ChiralHPLCAttachment = SaveFileByName("ChiralHPLC");
                        fileArray.Add(ChiralHPLCAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + ChiralHPLCAttachment.Replace("..", "")));
                        attachment.Name = "ChiralHPLC.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["Isotropicpurity"] != null)
                    {
                        IsotropicpurityAttachment = SaveFileByName("Isotropicpurity");
                        fileArray.Add(IsotropicpurityAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + IsotropicpurityAttachment.Replace("..", "")));
                        attachment.Name = "Isotropicpurity.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["2DNMR"] != null)
                    {
                        TwoDNMRAttachment = SaveFileByName("2DNMR");
                        fileArray.Add(TwoDNMRAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + TwoDNMRAttachment.Replace("..", "")));
                        attachment.Name = "2DNMR.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["COSYAttachment"] != null)
                    {
                        COSYAttachment = SaveFileByName("COSYAttachment");
                        fileArray.Add(COSYAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + COSYAttachment.Replace("..", "")));
                        attachment.Name = "COSYAttachment.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["CHNSAttachment"] != null)
                    {
                        CHNSAttachment = SaveFileByName("CHNSAttachment");
                        fileArray.Add(CHNSAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + CHNSAttachment.Replace("..", "")));
                        attachment.Name = "CHNSAttachment.pdf";
                        mail.Attachments.Add(attachment);
                    }
                    if (Request.Files["StabilitydataAttachment"] != null)
                    {
                        StabilitydataAttachment = SaveFileByName("StabilitydataAttachment");
                        fileArray.Add(StabilitydataAttachment);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(Server.MapPath("~/" + StabilitydataAttachment.Replace("..", "")));
                        attachment.Name = "StabilitydataAttachment.pdf";
                        mail.Attachments.Add(attachment);
                    }
                }

                if (formId != null && formId != "0")
                {
                    int fId = Convert.ToInt32(formId);
                    frmId = fId;
                    SZ_QuoteDetailForm objForm = db.SZ_QuoteDetailForm.Where(x => x.Id == fId).FirstOrDefault();
                    if (objForm != null)
                    {
                        string oldBatchNo = objForm.BatchCode;
                        objForm.QuotationDetailsId = QuotationDetailsId;
                        objForm.CATNo = catelogueNo.Trim();
                        objForm.CASNo = CASNo;
                        objForm.Apearance = AppearanceOtherRemarks;
                        objForm.BatchCode = BatchCode;
                        //objForm.CreatedDate = System.DateTime.Now;
                        objForm.Error = Error;
                        objForm.HPCLCode = DatePurity;
                        objForm.ProductName = productName;
                        objForm.ProjectName = projectName;
                        objForm.JournalDate = Convert.ToDateTime(JournalDate);
                        objForm.MolFormula = MolecularFormula;
                        objForm.MolWeight = MoleWeight;
                        objForm.MSCode = CodeESIAPCI;
                        objForm.NMRCode = NMRCodeStatus;
                        objForm.OtherAnalysis = AnalysisCode;
                        objForm.Qty = QuantitySubmitted;
                        objForm.SaltName = SaltName;
                        objForm.ScientistName = NameOfScientist;
                        objForm.StateCompound = rbStateOfCompound;
                        objForm.StructurePath = imagePath;
                        objForm.SubmissionDate = Convert.ToDateTime(submissionDate);
                        objForm.TypeCompound = rbTypeCompound;
                        objForm.RbSaltMentionName = rbSaltMentionName;
                        objForm.UpdatedDate = DateTime.Now;
                        objForm.SubmittedBy = SessionCookieManagement.UserId;
                        objForm.MolecularFormula = molecularFormula;
                        objForm.TLName = TLName;
                        objForm.HPLCDate = HPLCDate;
                        objForm.HPLCPurity = HPLCPurity;
                        objForm.ChkHygroscopic = Convert.ToBoolean(chkHygroscopic);
                        objForm.RbAdditionalAnalysis = radiorbAdditionalAnalysis;
                        objForm.SolidForm = SolidForm;
                        objForm.SolutionForm = SolutionForm;
                        objForm.State = State;
                        if (fileArray.Count > 0)
                        {
                            objForm.SpectralDataAttachment = spectralDataAttachment;
                        }
                        if (!string.IsNullOrEmpty(IRAttachment))
                        {
                            objForm.IRAttachment = IRAttachment;
                        }
                        if (!string.IsNullOrEmpty(MassAttachment))
                        {
                            objForm.MassAttachment = MassAttachment;
                        }

                        if (!string.IsNullOrEmpty(PLCAttachment))
                        {
                            objForm.PLCAttachment = PLCAttachment;
                        }

                        if (!string.IsNullOrEmpty(NMRAttchment))
                        {
                            objForm.NMRAttchment = NMRAttchment;
                        }

                        if (!string.IsNullOrEmpty(QNMRAttchment))
                        {
                            objForm.QNMRAttchment = QNMRAttchment;
                        }

                        if (!string.IsNullOrEmpty(TGAAttachment))
                        {
                            objForm.TGAAttachment = TGAAttachment;
                        }

                        if (!string.IsNullOrEmpty(CMRAttchment))
                        {
                            objForm.CMRAttchment = CMRAttchment;
                        }

                        if (!string.IsNullOrEmpty(DEPTAttachment))
                        {
                            objForm.DEPTAttachment = DEPTAttachment;
                        }

                        if (!string.IsNullOrEmpty(HRMSAttachment))
                        {
                            objForm.HRMSAttachment = HRMSAttachment;
                        }

                        if (!string.IsNullOrEmpty(ROIAttachment))
                        {
                            objForm.ROIAttachment = ROIAttachment;
                        }

                        if (!string.IsNullOrEmpty(ElementralAttachment))
                        {
                            objForm.ElementralAttachment = ElementralAttachment;
                        }

                        if (!string.IsNullOrEmpty(SERAttachment))
                        {
                            objForm.SERAttachment = SERAttachment;
                        }

                        if (!string.IsNullOrEmpty(GCAttachment))
                        {
                            objForm.GCAttachment = GCAttachment;
                        }

                        if (!string.IsNullOrEmpty(ELSDAttachment))
                        {
                            objForm.ELSDAttachment = ELSDAttachment;
                        }

                        if (!string.IsNullOrEmpty(ChiralAttachmenrt))
                        {
                            objForm.ChiralAttachmenrt = ChiralAttachmenrt;
                        }

                        if (!string.IsNullOrEmpty(ChiralHPLCAttachment))
                        {
                            objForm.ChiralHPLCAttachment = ChiralHPLCAttachment;
                        }

                        if (!string.IsNullOrEmpty(IsotropicpurityAttachment))
                        {
                            objForm.IsotropicpurityAttachment = IsotropicpurityAttachment;
                        }
                        if (!string.IsNullOrEmpty(TwoDNMRAttachment))
                        {
                            objForm.TwoDNMRAttachment = TwoDNMRAttachment;
                        }
                        if (!string.IsNullOrEmpty(N1NMRAttachment))
                        {
                            objForm.N1NmrAttachment = N1NMRAttachment;
                        }

                        if (!string.IsNullOrEmpty(NMRInterpretaionAttachment))
                        {
                            objForm.NMRInterpretaionAttachment = NMRInterpretaionAttachment;
                        }

                        if (!string.IsNullOrEmpty(APCIMassAttachment))
                        {
                            objForm.APCIMassAttachment = APCIMassAttachment;
                        }

                        if (!string.IsNullOrEmpty(COSYAttachment))
                        {
                            objForm.COSYAttachment = COSYAttachment;
                        }
                        if (!string.IsNullOrEmpty(CHNSAttachment))
                        {
                            objForm.CHNSAttachment = CHNSAttachment;
                        }
                        if (!string.IsNullOrEmpty(StabilitydataAttachment))
                        {
                            objForm.StabilitydataAttachment = StabilitydataAttachment;
                        }
                        objForm.EarlierSynthesized = radioEarlierSynthesized;
                        objForm.NoOfFinalStep = !string.IsNullOrEmpty(NoOfFinalStep) ? Convert.ToInt32(NoOfFinalStep) : 0;
                        objForm.PurificationBy = PurificationBy;
                        objForm.Chemist = Chemist;
                        objForm.chkCrystallizationDone = Convert.ToBoolean(chkCrystallizationDone);
                        objForm.chkNMRDone = Convert.ToBoolean(chkNMRDone);
                        objForm.TempSensitive = Convert.ToBoolean(TempSensitive);
                        objForm.Lacrymatory = Convert.ToBoolean(Lacrymatory);
                        objForm.LightSensitivity = Convert.ToBoolean(LightSensitivity);
                        objForm.IsLight = Convert.ToBoolean(IsLight);
                        objForm.APCIMassAttachment = APCIMassAttachment;
                        objForm.ChemdrawFileAttachment = ChemdrawFileAttachment;
                        objForm.WeightingSlipAttachment = WeightingSlipAttachment;
                        objForm.NMRInterpretaionAttachment = NMRInterpretaionAttachment;
                        objForm.IsDispatchedEntry = submitedFormDispatch;
                        objForm.Photostability = Convert.ToBoolean(Photostability);

                        objForm.UVSpectra = UVSpectraAttachment;
                        objForm.OtherAnalysisAttachment = OtherAnalysisAttachment;

                        var productData = db.Products.Where(x => x.Sku.Trim().ToLower() == catelogueNo.Trim().ToLower() && x.Deleted == false && x.Published == true).FirstOrDefault();
                        if (productData != null)
                        {
                            SZ_Inventory objInv = db.SZ_Inventory.Where(x => x.BatchNo.Trim().ToLower() == oldBatchNo.Trim().ToLower()).FirstOrDefault();
                            if (objInv != null)
                            {
                                objInv.ProductId = productData.Id;
                                objInv.BatchNo = BatchCode;
                                if (!string.IsNullOrEmpty(QuantitySubmitted))
                                {
                                    objInv.Qty = Convert.ToDecimal(QuantitySubmitted);
                                }
                                objInv.IsApproved = false;
                                objInv.CreatedDate = DateTime.Now;
                                objInv.Remarks = State;
                                db.Entry(objInv).State = EntityState.Modified;
                                db.SaveChanges();


                            }
                            else
                            {
                                //objInv = new SZ_Inventory();
                                //objInv.ProductId = productData.Id;
                                //objInv.BatchNo = BatchCode;
                                //if (!string.IsNullOrEmpty(QuantitySubmitted))
                                //{
                                //    objInv.Qty = Convert.ToDecimal(QuantitySubmitted);
                                //}
                                //objInv.IsApproved = false;
                                //objInv.CreatedDate = DateTime.Now;
                                //objInv.Remarks = State;
                                //db.SZ_Inventory.Add(objInv);
                                //db.SaveChanges();

                                //var data = db.SZ_QuotationDetail.Where(x => x.Id == objForm.QuotationDetailsId).FirstOrDefault();
                                //if (data != null)
                                //{
                                //    if (data.ProjectType != Convert.ToString((int)EnumList.ProjectType.InHouse))
                                //    {
                                //        if (data.ProjectType != Convert.ToString((int)EnumList.ProjectType.InStock))
                                //        {
                                //            data.Instockdate = DateTime.Now;
                                //        }
                                //        data.ProjectStatus = (int)EnumList.ProjectStatus.MoveToInstock;
                                //        data.ProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);
                                //    }
                                //    if (data.ProcessState <= (int)EnumList.ProcessState.MoveToInStock)
                                //    {
                                //        data.ProcessState = (int)EnumList.ProcessState.MoveToInStock;
                                //    }
                                //    db.Entry(data).State = EntityState.Modified;
                                //}
                            }
                            db.Entry(objForm).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                        else
                        {
                            return new JsonResult()
                            {
                                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                                Data = new { success = false, message = "Sorry!!! System can not find any products from this sku. Please try again later." }
                            };
                        }
                    }
                    else
                    {
                        return new JsonResult()
                        {
                            JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                            Data = new { success = false, message = "Sorry!!! No Data found for update." }
                        };
                    }
                }
                else
                {
                    var checkBatchData =
                    (from i in this.db.SZ_Inventory
                     where i.BatchNo.Trim().ToLower() == BatchCode.Trim().ToLower()
                     select i).FirstOrDefault();
                    if (checkBatchData != null && !IsNewProductMaster)
                    {
                        return new JsonResult()
                        {
                            JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                            Data = new { success = false, message = "Batch No already available in system." }
                        };
                    }

                    SZ_QuoteDetailForm objForm = new SZ_QuoteDetailForm();
                    objForm.QuotationDetailsId = QuotationDetailsId;
                    objForm.CATNo = catelogueNo.Trim();
                    objForm.CASNo = CASNo;
                    objForm.Apearance = AppearanceOtherRemarks;
                    objForm.BatchCode = BatchCode;
                    objForm.CreatedDate = System.DateTime.Now;
                    objForm.Error = Error;
                    objForm.HPCLCode = DatePurity;
                    objForm.ProductName = productName;
                    objForm.ProjectName = projectName;
                    objForm.JournalDate = Convert.ToDateTime(JournalDate);
                    objForm.MolFormula = MolecularFormula;
                    objForm.MolWeight = MoleWeight;
                    objForm.MSCode = CodeESIAPCI;
                    objForm.NMRCode = NMRCodeStatus;
                    objForm.OtherAnalysis = AnalysisCode;
                    objForm.Qty = QuantitySubmitted;
                    objForm.SaltName = SaltName;
                    objForm.ScientistName = NameOfScientist;
                    objForm.StateCompound = rbStateOfCompound;
                    objForm.StructurePath = imagePath;
                    objForm.SubmissionDate = Convert.ToDateTime(submissionDate);
                    objForm.TypeCompound = rbTypeCompound;
                    objForm.RbSaltMentionName = rbSaltMentionName;
                    objForm.UpdatedDate = DateTime.Now;
                    objForm.SubmittedBy = SessionCookieManagement.UserId;
                    objForm.MolecularFormula = molecularFormula;
                    objForm.TLName = TLName;
                    objForm.HPLCDate = HPLCDate;
                    objForm.HPLCPurity = HPLCPurity;
                    objForm.ChkHygroscopic = Convert.ToBoolean(chkHygroscopic);
                    objForm.RbAdditionalAnalysis = radiorbAdditionalAnalysis;
                    objForm.Chemist = Chemist;
                    objForm.SolidForm = SolidForm;
                    objForm.SolutionForm = SolutionForm;
                    objForm.State = State;
                    objForm.SpectralDataAttachment = spectralDataAttachment;
                    objForm.IRAttachment = IRAttachment;
                    objForm.MassAttachment = MassAttachment;
                    objForm.PLCAttachment = PLCAttachment;
                    objForm.NMRAttchment = NMRAttchment;
                    objForm.QNMRAttchment = QNMRAttchment;
                    objForm.TGAAttachment = TGAAttachment;
                    objForm.CMRAttchment = CMRAttchment;
                    objForm.DEPTAttachment = DEPTAttachment;
                    objForm.HRMSAttachment = HRMSAttachment;
                    objForm.ROIAttachment = ROIAttachment;
                    objForm.ElementralAttachment = ElementralAttachment;
                    objForm.SERAttachment = SERAttachment;
                    objForm.GCAttachment = GCAttachment;
                    objForm.ELSDAttachment = ELSDAttachment;
                    objForm.ChiralAttachmenrt = ChiralAttachmenrt;
                    objForm.UVSpectra = UVSpectraAttachment;
                    objForm.OtherAnalysisAttachment = OtherAnalysisAttachment;
                    objForm.N1NmrAttachment = N1NMRAttachment;
                    objForm.ChiralHPLCAttachment = ChiralHPLCAttachment;
                    objForm.IsotropicpurityAttachment = IsotropicpurityAttachment;
                    objForm.TwoDNMRAttachment = TwoDNMRAttachment;

                    objForm.COSYAttachment = COSYAttachment;
                    objForm.CHNSAttachment = CHNSAttachment;
                    objForm.StabilitydataAttachment = StabilitydataAttachment;

                    objForm.EarlierSynthesized = radioEarlierSynthesized;
                    if (!IsNewProductMaster)
                    {
                        objForm.IsDraftEntry = true;
                    }
                    else
                    {
                        objForm.IsDraftEntry = false;
                    }
                    objForm.NoOfFinalStep = !string.IsNullOrEmpty(NoOfFinalStep) ? Convert.ToInt32(NoOfFinalStep) : 0;
                    objForm.PurificationBy = PurificationBy;
                    objForm.APCIMassAttachment = APCIMassAttachment;
                    objForm.ChemdrawFileAttachment = ChemdrawFileAttachment;
                    objForm.WeightingSlipAttachment = WeightingSlipAttachment;
                    objForm.NMRInterpretaionAttachment = NMRInterpretaionAttachment;
                    objForm.chkCrystallizationDone = Convert.ToBoolean(chkCrystallizationDone);
                    objForm.chkNMRDone = Convert.ToBoolean(chkNMRDone);
                    objForm.TempSensitive = Convert.ToBoolean(TempSensitive);
                    objForm.IsLight = Convert.ToBoolean(IsLight);
                    objForm.Lacrymatory = Convert.ToBoolean(Lacrymatory);
                    objForm.IsDispatchedEntry = submitedFormDispatch;
                    objForm.LightSensitivity = Convert.ToBoolean(LightSensitivity);
                    objForm.Photostability = Convert.ToBoolean(Photostability);
                    objForm.ApprovalStatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproval);
                    var bodyStr = "<table width='100%' border='1'>";
                    bodyStr += "<thead> <tr><th>#</th><th>Product Name</th><th>CAS No</th><th>Cat No</th><th>Product Quantity (in mg)</th><th>Physical State</th><th>Product Colour</th><th>Data Recorded</th></tr></thead>";
                    bodyStr += "<tbody><tr><td>1</td><td>" + objForm.ProductName + "</td><td>" + objForm.CASNo + "</td><td>" + objForm.CATNo + "</td><td>" + objForm.Qty + "</td><td>" + objForm.State + "</td><td>" + objForm.Apearance + "</td><td>" + objForm.RbAdditionalAnalysis + "</td></tr></tbody>";
                    bodyStr += "</table>";

                    db.SZ_QuoteDetailForm.Add(objForm);
                    db.SaveChanges();

                    if (!IsNewProductMaster)
                    {
                        var szquotedetailsdata = db.SZ_QuotationDetail.Where(x => x.Id == objForm.QuotationDetailsId).FirstOrDefault();
                        if (szquotedetailsdata != null)
                        {
                            szquotedetailsdata.ApprovalStatus = Convert.ToString((int)EnumList.ApprovedStatus.QCApproval);
                            szquotedetailsdata.DispatchStatus = Convert.ToString((int)EnumList.DispatchStatusDDl.QCApproval);
                            szquotedetailsdata.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.QCApproval);
                            szquotedetailsdata.OtherProStatus = Convert.ToString((int)EnumList.ProInstockexportStatusDDL.QCApproval);

                            db.Entry(szquotedetailsdata).State = EntityState.Modified;
                        }
                    }

                    SZ_QuoteDetails_Form objdetform = new SZ_QuoteDetails_Form();
                    objdetform.CreatedDate = DateTime.Now;
                    objdetform.FormId = objForm.Id;
                    objdetform.QuoteDetailsId = objForm.QuotationDetailsId;
                    db.SZ_QuoteDetails_Form.Add(objdetform);

                    db.SaveChanges();

                    if (Request.Files.Count > 0)
                    {
                        PdfReader reader = null;
                        Document sourceDocument = null;
                        PdfCopy pdfCopyProvider = null;
                        PdfImportedPage importedPage;
                        sourceDocument = new Document();
                        pdfCopyProvider = new PdfCopy(sourceDocument, output);
                        //output file Open  
                        sourceDocument.Open();

                        var htmlstring = PartialViewdata(this, "_PartialSubmittionFormPdf", objForm);
                        var path = printpdf(htmlstring, "testcoa-" + formId.ToString() + "_" + DateTime.Now.ToString().Replace(":", "_").Replace(" ", "_").Replace("/", "_"), true);
                        fileArray.Insert(0, ".." + path);
                        System.Net.Mail.Attachment attachmentform = new System.Net.Mail.Attachment(Server.MapPath("~/" + path.Replace("..", "")));
                        attachmentform.Name = "SubmissionForm.pdf";
                        mail.Attachments.Add(attachmentform);
                        foreach (var item in fileArray)
                        {
                            var fPath = Server.MapPath(item.Replace("..", "~"));
                            int pages = Common.TotalPageCount(fPath);

                            reader = new PdfReader(fPath);
                            //Add pages in new file  
                            for (int i = 1; i <= pages; i++)
                            {
                                try
                                {
                                    importedPage = pdfCopyProvider.GetImportedPage(reader, i);
                                    pdfCopyProvider.AddPage(importedPage);
                                }
                                catch (Exception ex)
                                {
                                    continue;
                                }
                            }
                            reader.Close();
                        }
                        sourceDocument.Close();
                        spectralDataAttachment = "../content/NewProducts/" + specdatafilename;

                        objForm.SpectralDataAttachment = spectralDataAttachment;
                        db.Entry(objForm).State = EntityState.Modified;
                        db.SaveChanges();

                    }

                    SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                    mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.SynthesisUsername"], "SynZeal Standards");

                    var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                    if (isDevelopment.ToLower().Contains("true"))
                    {
                        mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                    }
                    else
                    {
                        mail.To.Add("qc@synzeal.com");
                        mail.CC.Add("standards@synzeal.com");
                    }

                    if (!string.IsNullOrEmpty(spectralDataAttachment))
                    {
                        mail.Attachments.Add(new Attachment(Server.MapPath("~/" + spectralDataAttachment.Replace("..", ""))));
                    }
                    mail.Subject = objForm.ScientistName + " - " + objForm.ProductName + " - " + objForm.CASNo + " - " + objForm.CATNo;

                    mail.IsBodyHtml = true;
                    SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                    SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.SynthesisUsername"], ConfigurationManager.AppSettings["Email.SynthesisPassword"]);
                    mail.Body = "Dear QC Team, <br> Following product is submitted for approval. Kindly check and let us know the update. <br><br><br>";
                    mail.Body += bodyStr;
                    mail.Body += "<br><br>Let me know if you have any comments/suggestions.<br><br> <br>Kind  Regards, <br> SynZeal Research PVT. LTD";
                    SmtpServer.EnableSsl = true;
                    //if (!IsNewProductMaster)
                    //{
                    SmtpServer.Send(mail);
                    //}
                    frmId = objForm.Id;
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, formId = frmId, message = "Form created Successfully." }
                };
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = ex.LineNumber() + " " + ex.Message.ToString() }
                };
            }
        }

        public ActionResult PrintForm(int id)
        {
            var model = db.SZ_QuoteDetailForm.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
            {
                return RedirectToAction("ScientistForm");
            }

            var formid = db.SZ_QuoteDetails_Form.Where(x => x.QuoteDetailsId == model.QuotationDetailsId).Select(x => x.FormId).FirstOrDefault();
            var formdata = db.SZ_QuoteDetailForm.Where(x => x.Id == formid).FirstOrDefault();
            var quotedetails = db.SZ_QuotationDetail.Where(x => x.Id == model.QuotationDetailsId).FirstOrDefault();
            if (quotedetails.ProductId.HasValue)
            {
                var productData = db.Products.Where(x => x.Sku.Trim().ToLower() == model.CATNo.Trim().ToLower().Replace("\t", "") && x.Deleted == false && x.Published == true).FirstOrDefault();
                SZ_Inventory objInv = db.SZ_Inventory.Where(x => x.BatchNo.Trim().ToLower() == model.BatchCode.Trim().ToLower()).FirstOrDefault();
                if (objInv == null)
                {
                    objInv = new SZ_Inventory();
                    objInv.ProductId = productData.Id;
                    objInv.BatchNo = model.BatchCode;
                    if (!string.IsNullOrEmpty(model.Qty))
                    {
                        objInv.Qty = Convert.ToDecimal(model.Qty);
                    }
                    objInv.IsApproved = false;
                    objInv.CreatedDate = DateTime.Now;
                    objInv.Remarks = model.State;
                    db.SZ_Inventory.Add(objInv);

                    if (quotedetails.ProjectType != Convert.ToString((int)EnumList.ProjectType.InHouse))
                    {
                        if (quotedetails.ProjectType != Convert.ToString((int)EnumList.ProjectType.InStock))
                        {
                            quotedetails.Instockdate = DateTime.Now;
                        }
                        quotedetails.ProjectStatus = (int)EnumList.ProjectStatus.MoveToInstock;
                        quotedetails.ProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);
                        quotedetails.IsPriority = false;
                    }
                    if (quotedetails.ProcessState <= (int)EnumList.ProcessState.MoveToInStock)
                    {
                        quotedetails.ProcessState = (int)EnumList.ProcessState.MoveToInStock;
                    }
                    if (formdata != null && formdata.ApprovalStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCApproved))
                    {
                        quotedetails.AdditionalBatchNo = objInv.Id;
                        quotedetails.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.ReadyforDispatch);
                        quotedetails.OtherProStatus = Convert.ToString("15");
                        quotedetails.DispatchStatus = Convert.ToString("15");
                        quotedetails.ReviewSciStatus = Convert.ToString("15");
                        quotedetails.IsDispatchApprove = true;
                    }
                    db.Entry(quotedetails).State = EntityState.Modified;
                    db.SaveChanges();

                    MemoryCacheManager objCache = new MemoryCacheManager();
                    objCache.Remove("cache.inventoryData");
                }
            }
            return View(model);
        }

        public ActionResult DeleteSubmittedForm(int id)
        {
            var model = db.SZ_QuoteDetailForm.Where(x => x.Id == id).FirstOrDefault();
            if (model != null)
            {
                db.Entry(model).State = EntityState.Deleted;
                db.SaveChanges();
            }
            return Json("success", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult UpdateProductdetails(SZ_ProjectDetail model)
        {
            SZ_ProjectDetail data = db.SZ_ProjectDetail.FirstOrDefault(x => x.Id == model.Id);
            if (data != null)
            {
                data.Status = model.Status;
                data.CompletationDate = model.CompletationDate;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "success", msg = "updated successfully." }
                };
            }
            else
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "error", msg = "There are some problem to add inventory." }
                };
            }
        }

        public ActionResult ManageProject(int id = 0)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }

            var model = db.SZ_Project.FirstOrDefault(x => x.Id == id);
            if (model == null)
            {
                model = new SZ_Project();
                model.Status = "In Progress";
            }

            return PartialView(model);
        }

        public ActionResult ManageProjectDetails(int id)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_ProjectDetail.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
            {
                return RedirectToAction("Project");
            }

            string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + model.ProductId;
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                ViewBag.ProductModel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);

            }

            var BatchList = new List<SelectListItem>();
            var batchListmodel = db.SZ_Inventory.Where(x => x.ProductId == model.ProductId).ToList();
            BatchList.Add(new SelectListItem { Text = "--Select--", Value = "" });
            foreach (var item in batchListmodel)
            {
                BatchList.Add(new SelectListItem { Text = item.BatchNo, Value = item.Id.ToString() });
            }
            ViewBag.BatchList = BatchList;

            if (model.BatchId.HasValue && model.BatchId != 0)
            {
                ViewBag.batchQty = batchListmodel.Where(x => x.Id == model.BatchId).Select(x => x.Qty).FirstOrDefault();
            }

            return PartialView(model);
        }

        [HttpPost]
        public ActionResult ManageProjectDetails(SZ_ProjectDetail model, FormCollection form)
        {
            var batchdata = db.SZ_Inventory.FirstOrDefault(x => x.Id == model.BatchId);
            if (batchdata != null)
            {
                if (batchdata.Qty < model.Qty)
                {
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "error", msg = "Qty is not available for this batch no." }
                    };
                }
            }
            SZ_ProjectDetail objdetails = db.SZ_ProjectDetail.FirstOrDefault(x => x.Id == model.Id);
            if (objdetails != null)
            {
                objdetails.BatchId = model.BatchId;
                objdetails.NoOfPack = model.NoOfPack;
                objdetails.Qty = model.Qty;
                objdetails.PackSize = model.PackSize;
                objdetails.LeadTime = model.LeadTime;
                objdetails.LabelRequirement = model.LabelRequirement;
                objdetails.DataRequired = model.DataRequired;
                objdetails.ScheduleDispatch = model.ScheduleDispatch;
                objdetails.Scientist = model.Scientist;
                objdetails.Othervalue = model.Othervalue;
                objdetails.Remark = model.Remark;
                objdetails.ProjectType = model.ProjectType;
                db.Entry(objdetails).State = EntityState.Modified;
                db.SaveChanges();
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "success", msg = "Details updated successfully." }
                };
            }
            else
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "error", msg = "There are some problem to update Details." }
                };
            }
        }

        [HttpPost]
        public ActionResult ManageProject(SZModel model, FormCollection form)
        {
            model.Status = "In Progress";
            int noOfproduct = Convert.ToInt32(form.Get("Noofproduct"));
            List<Product> productList = new List<Product>();
            for (int i = 1; i <= noOfproduct; i++)
            {
                var sku = form.Get("pro_" + i);
                if (!string.IsNullOrEmpty(sku))
                {
                    var productData = db.Products.Where(x => x.Sku == sku && x.Deleted == false && x.Published == true).First();
                    if (productData == null)
                    {
                        var msg =
                            "Please enter proper catalog no. catalog no is not available in database. Issue in Catalog No : " +
                            sku;
                        return new JsonResult()
                        {
                            JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                            Data = new { type = "error", msg = msg }
                        };
                    }
                    else
                    {
                        productList.Add(productData);
                    }
                }
                else
                {
                    var msg = "Please enter catalog no.";
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "error", msg = msg }
                    };
                }

            }

            if (model.Id == 0)
            {
                SZ_Project objszProject = new SZ_Project();
                objszProject.Status = model.Status;
                objszProject.PONo = model.PONo;
                objszProject.PODate = model.PODate;
                objszProject.Company = model.Company;
                objszProject.Revised1 = model.Revised1;
                objszProject.Revised2 = model.Revised2;
                objszProject.Revised3 = model.Revised3;
                objszProject.ActualDispatch = model.ActualDispatch;

                objszProject.CreatedDate = DateTime.Now;
                db.SZ_Project.Add(objszProject);
                db.SaveChanges();

                foreach (var product in productList)
                {
                    SZ_ProjectDetail objdetails = new SZ_ProjectDetail();
                    objdetails.ProjectId = objszProject.Id;
                    objdetails.ProductId = product.Id;
                    objdetails.Status = "In Progress";
                    db.SZ_ProjectDetail.Add(objdetails);
                    db.SaveChanges();
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "success", msg = "Project added successfully." }
                };
            }
            else
            {
                var szproject = db.SZ_Project.FirstOrDefault(x => x.Id == model.Id);
                if (szproject != null)
                {
                    szproject.PONo = model.PONo;
                    szproject.PODate = model.PODate;
                    szproject.Company = model.Company;
                    szproject.Revised1 = model.Revised1;
                    szproject.Revised2 = model.Revised2;
                    szproject.Revised3 = model.Revised3;
                    szproject.ActualDispatch = model.ActualDispatch;

                    db.Entry(szproject).State = EntityState.Modified;
                    db.SaveChanges();

                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "success", msg = "Project updated successfully." }
                    };

                }
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "error", msg = "There are some problem to update Project." }
                };
            }


        }

        public ActionResult CreateInventory(int id)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            SZ_Inventory model = new SZ_Inventory();
            model.ProductId = id;

            string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + model.ProductId;
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                ViewBag.ProductModel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);

            }
            model.ReTestDate = DateTime.Now.AddYears(3).Date;
            return PartialView(model);
        }

        [HttpPost]
        public ActionResult CreateInventory(SZ_Inventory model)
        {
            if (model.BatchNo != null)
            {
                if (Request.Files.Count > 0)
                {
                    var file = Request.Files["COA"];

                    if (file != null && file.ContentLength > 0)
                    {
                        var filename = Guid.NewGuid();
                        var fileext = Path.GetExtension(file.FileName);
                        var wholepath = "../Document/" + filename + "" + fileext;
                        var path = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                        file.SaveAs(path);
                        model.COAPath = wholepath;
                    }

                    var SDFfile = Request.Files["SDF"];

                    if (SDFfile != null && SDFfile.ContentLength > 0)
                    {
                        var filename = Guid.NewGuid();
                        var fileext = Path.GetExtension(SDFfile.FileName);
                        var wholepath = "../Document/" + filename + "" + fileext;
                        var path = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                        SDFfile.SaveAs(path);
                        model.StdDataPath = wholepath;
                    }

                    var ADDFilefile = Request.Files["ADDFile"];

                    if (ADDFilefile != null && ADDFilefile.ContentLength > 0)
                    {
                        var filename = Guid.NewGuid();
                        var fileext = Path.GetExtension(ADDFilefile.FileName);
                        var wholepath = "../Document/" + filename + "" + fileext;
                        var path = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                        ADDFilefile.SaveAs(path);
                        model.AddDataPath = wholepath;
                    }
                    model.CreatedDate = DateTime.Now;
                    db.SZ_Inventory.Add(model);
                    db.SaveChanges();
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { type = "success", msg = "Inventory add successfully." }
                    };
                }
                model.CreatedDate = DateTime.Now;
                db.SZ_Inventory.Add(model);
                db.SaveChanges();

                MemoryCacheManager objCache = new MemoryCacheManager();
                objCache.Remove("cache.inventoryData");
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "success", msg = "Inventory add successfully." }
                };
            }
            else
            {
                TempData["Message"] = "There are some problem to update inventory.";
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "error", msg = "There are some problem to add inventory." }
                };
            }
        }

        public ActionResult EditInventory(int id)
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            SZ_Inventory model = db.SZ_Inventory.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                return PartialView(model);

            string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + model.ProductId;
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                ViewBag.ProductModel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);

            }
            return PartialView(model);
        }

        [HttpPost]
        public ActionResult EditInventory(SZ_Inventory model)
        {
            var inv = db.SZ_Inventory.Where(x => x.Id == model.Id).FirstOrDefault();
            if (inv != null)
            {
                inv.Appearance = model.Appearance;
                inv.Remarks = model.Remarks;
                inv.Qty = model.Qty;
                inv.ReTestDate = model.ReTestDate;
                if (Request.Files.Count > 0)
                {
                    var file = Request.Files["COA"];

                    if (file != null && file.ContentLength > 0)
                    {
                        var filename = Guid.NewGuid();
                        var fileext = Path.GetExtension(file.FileName);
                        var wholepath = "../Document/" + filename + "" + fileext;
                        var path = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                        file.SaveAs(path);
                        inv.COAPath = wholepath;
                    }

                    var SDFfile = Request.Files["SDF"];

                    if (SDFfile != null && SDFfile.ContentLength > 0)
                    {
                        var filename = Guid.NewGuid();
                        var fileext = Path.GetExtension(SDFfile.FileName);
                        var wholepath = "../Document/" + filename + "" + fileext;
                        var path = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                        SDFfile.SaveAs(path);
                        inv.StdDataPath = wholepath;
                    }

                    var ADDFilefile = Request.Files["ADDFile"];

                    if (ADDFilefile != null && ADDFilefile.ContentLength > 0)
                    {
                        var filename = Guid.NewGuid();
                        var fileext = Path.GetExtension(ADDFilefile.FileName);
                        var wholepath = "../Document/" + filename + "" + fileext;
                        var path = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                        ADDFilefile.SaveAs(path);
                        inv.AddDataPath = wholepath;
                    }

                }
                db.Entry(inv).State = EntityState.Modified;
                db.SaveChanges();
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "success", msg = "Inventory updated successfully." }
                };
            }
            else
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { type = "error", msg = "There are some problem to update inventory." }
                };
            }
        }

        public string GetMainCatName(Product product)
        {
            string MainCatNamestr = "";
            var productCategories = GetProductCategoriesByProductId(product.Id);
            if (productCategories.Count > 0)
            {
                foreach (var catBr in productCategories)
                {
                    if (catBr.ParentCategoryId == 0)
                    {
                        MainCatNamestr = catBr.Name;
                    }
                    else
                    {
                        var category = db.Categories.Where(x => x.Id == catBr.ParentCategoryId).FirstOrDefault();
                        if (category != null)
                        {
                            if (category.ParentCategoryId == 0)
                            {
                                MainCatNamestr = category.Name;
                            }
                        }
                    }
                }
            }
            return MainCatNamestr;
        }

        public IList<Category> GetProductCategoriesByProductId(int productId)

        {
            var query = from pc in db.Product_Category_Mapping
                        join c in db.Categories on pc.CategoryId equals c.Id
                        where pc.ProductId == productId &&
                              !c.Deleted &&
                              c.Published
                        orderby pc.DisplayOrder
                        select pc;

            var allProductCategories = query.ToList();
            var result = new List<Category>();
            foreach (var pc in allProductCategories)
            {
                var category = pc.Category;
                result.Add(category);
            }

            return result;
        }

        public virtual IList<Picture> GetPicturesByProductId(int productId, int recordsToReturn = 0)
        {
            if (productId == 0)
                return new List<Picture>();


            var query = from p in db.Pictures
                        join pp in db.Product_Picture_Mapping on p.Id equals pp.PictureId
                        orderby pp.DisplayOrder
                        where pp.ProductId == productId
                        select p;

            if (recordsToReturn > 0)
                query = query.Take(recordsToReturn);

            var pics = query.ToList();
            return pics;
        }

        public JsonResult GetInventoryList(string sidx, string sord, int page, int rows, string searchString, string searchField)  //Gets the todo Lists.
        {
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            string uri = Domain + "/api/RestAPI/GetInventoryList?sidx=" + sidx + "&sord=" + sord + "&page=" + page + "&rows=" + rows + "&searchString=" + searchString + "&searchField=" + searchField; //+ model.ProductId;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductModel = JsonConvert.DeserializeObject<InventoryOutput>(productModel);
                    var jsonData = new
                    {
                        total = ProductModel.total,
                        page = ProductModel.page,
                        records = ProductModel.records,
                        rows = ProductModel.rows
                    };

                    return Json(jsonData, JsonRequestBehavior.AllowGet);

                }
            }
            catch (Exception ex)
            {

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DeleteInventory(int id)
        {
            try
            {
                var inv = db.SZ_Inventory.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    var projectdetailsData = db.SZ_ProjectDetail.Where(x => x.BatchId == inv.Id).ToList();
                    foreach (var item in projectdetailsData)
                    {
                        db.Entry(item).State = EntityState.Deleted;
                        db.SaveChanges();
                    }
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteQuotation(int id)
        {
            try
            {
                var inv = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    var detailsData = db.SZ_QuotationDetail.Where(x => x.QuoteId == inv.Id).ToList();
                    foreach (var item in detailsData)
                    {
                        db.Entry(item).State = EntityState.Deleted;
                        db.SaveChanges();
                    }
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult RemoveSynthesisLog(int id)
        {
            try
            {
                var inv = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    inv.IsSynthesisLog = false;
                    db.Entry(inv).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteNameMaster(int id)
        {
            try
            {
                var inv = db.SZ_NameMaster.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }
                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteScientistStatus(int id)
        {
            try
            {
                var inv = db.SZ_ScientistStatus.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteSampleReason(int id)
        {
            try
            {
                var inv = db.SZ_SampleReason.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }


        [HttpPost]
        public ActionResult DeletePaymentTerms(int id)
        {
            try
            {
                var inv = db.PaymentTerms.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult DeletePhysicalState(int id)
        {
            try
            {
                var inv = db.SZ_Physicalstate.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteTerms(int id)
        {
            try
            {
                var inv = db.SZ_Terms.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteCompany(int id)
        {
            try
            {
                var inv = db.SZ_CompanyList.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    var detailsData = db.SZ_Quotation.Where(x => x.CompanyId == inv.Id).Count();
                    if (detailsData > 0)
                    {
                        return Json(new { success = false, multiple = true }, JsonRequestBehavior.AllowGet);

                    }
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteQuickAdd(int id)
        {
            try
            {
                var inv = db.SZ_TempQuickAdd.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteMasterCOA(int id)
        {
            try
            {
                var inv = db.SZ_MasterCOA.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    var childata = db.SZ_ChildCOA.Where(x => x.MasterCOAID == inv.Id).ToList();
                    if (childata != null && childata.Count > 0)
                    {
                        foreach (var item in childata)
                        {
                            db.Entry(item).State = EntityState.Deleted;
                            db.SaveChanges();
                        }

                    }
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult DeleteChildCOA(int id)
        {
            try
            {
                var inv = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
                if (inv != null)
                {
                    db.Entry(inv).State = EntityState.Deleted;
                    db.SaveChanges();
                }

                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        public ActionResult Expire()
        {
            Session["ShowPrice"] = "false";
            return RedirectToAction("Price");
        }

        [HttpPost]
        public ActionResult EnterPassword(string page, string password)
        {
            if (password == "Rv5VB1")
            {
                Session["ShowPrice"] = "true";
            }
            else
            {
                TempData["Message"] = "Enter Proper Password";
                Session["ShowPrice"] = "false";
            }
            return RedirectToAction("Price");
        }

        public JsonResult GetFollowUpOverview(string value)
        {
            var data = db.FollowupOverview(value).ToList();
            return Json(data, JsonRequestBehavior.AllowGet);
        }
        public JsonResult MainCategory(string id, bool isonlycategory = false)
        {
            if (id == "ALL")
            {
                var dataall = db.Categories.Where(x => x.ParentCategoryId == 0 && x.Deleted == false && x.Published == true).OrderBy(x => x.Name);
                var modelall = (from entity in dataall
                                select new CategoryModel
                                {
                                    Id = entity.Id,
                                    Name = entity.Name.Trim(),
                                }).OrderBy(x => x.Name).AsQueryable();

                var jsonallData = new
                {
                    records = modelall
                };
                return Json(jsonallData, JsonRequestBehavior.AllowGet);
            }
            var data = db.Categories.Where(x => x.Name.StartsWith(id) && x.ParentCategoryId == 0 && x.Deleted == false && x.Published == true);
            var model = (from entity in data
                         select new CategoryModel
                         {
                             Id = entity.Id,
                             Name = entity.Name,
                         }).OrderBy(x => x.Name).AsQueryable();
            if (isonlycategory)
            {
                var jsonDatas = new
                {
                    records = model
                };

                return Json(jsonDatas, JsonRequestBehavior.AllowGet);
            }


            var categoryIds = model.Select(x => x.Id).ToList();
            var productRecord = (from p in db.Products
                                 join pc in db.Product_Category_Mapping on p.Id equals pc.ProductId
                                 join c in db.Categories on pc.CategoryId equals c.Id
                                 join mc in db.Categories on c.ParentCategoryId equals mc.Id
                                 where categoryIds.Contains(c.ParentCategoryId) && !p.Deleted && p.Published
                                 && !mc.Deleted && mc.Published
                                 && !c.Deleted && c.Published
                                 group mc by mc.Name into pt1
                                 select new
                                 {
                                     CategoryName = pt1.Key,
                                     ProductCount = pt1.Count()
                                 }).ToList();

            var productids = db.SZ_PriceList.Select(x => x.ProductId).ToList();
            var pricelistRecordUSD = (
                                      //  from p in db.SZ_PriceList
                                      //join pc in db.Product_Category_Mapping on p.ProductId equals pc.ProductId
                                      from pc in db.Product_Category_Mapping
                                      join c in db.Categories on pc.CategoryId equals c.Id
                                      join mc in db.Categories on c.ParentCategoryId equals mc.Id
                                      where categoryIds.Contains(c.ParentCategoryId)
                                     && !c.Deleted && c.Published
                                     && !mc.Deleted && mc.Published
                                     && productids.Contains(pc.ProductId)
                                      group mc by mc.Name into pt1
                                      select new
                                      {
                                          CategoryName = pt1.Key,
                                          ProductCount = pt1.Count()
                                      }).ToList();
            var pricelistRecordINR = pricelistRecordUSD;
            //var pricelistRecordUSD = (from p in db.SZ_PriceList
            //                          join pc in db.Product_Category_Mapping on p.ProductId equals pc.ProductId
            //                          join c in db.Categories on pc.CategoryId equals c.Id
            //                          join mc in db.Categories on c.ParentCategoryId equals mc.Id
            //                          //where categoryIds.Contains(c.ParentCategoryId) && p.IsUsd == true
            //                          where categoryIds.Contains(c.ParentCategoryId)
            //                          && !mc.Deleted && mc.Published
            //                         && !c.Deleted && c.Published
            //                         && !string.IsNullOrEmpty(p.TenUSD)
            //                          group mc by mc.Name into pt1
            //                          select new
            //                          {
            //                              CategoryName = pt1.Key,
            //                              ProductCount = pt1.Count()
            //                          }).ToList();

            //var pricelistRecordINR = (from p in db.SZ_PriceList
            //                          join pc in db.Product_Category_Mapping on p.ProductId equals pc.ProductId
            //                          join c in db.Categories on pc.CategoryId equals c.Id
            //                          join mc in db.Categories on c.ParentCategoryId equals mc.Id
            //                          where categoryIds.Contains(c.ParentCategoryId)
            //                          && !mc.Deleted && mc.Published
            //                          && !c.Deleted && c.Published && !string.IsNullOrEmpty(p.TenPrice)
            //                          group mc by mc.Name into pt1
            //                          select new
            //                          {
            //                              CategoryName = pt1.Key,
            //                              ProductCount = pt1.Count()
            //                          }).ToList();

            var pricerecord = new List<PriceDashboardModel>();

            foreach (var item in productRecord)
            {
                var obj = new PriceDashboardModel();
                obj.CategoryName = item.CategoryName;
                obj.ProductCount = item.ProductCount;
                obj.PriceFilledUSDCount = pricelistRecordUSD.Where(x => x.CategoryName == item.CategoryName).Select(x => x.ProductCount).FirstOrDefault();
                obj.PricePendingUSDCount = item.ProductCount - obj.PriceFilledUSDCount;
                obj.PriceFilledINRCount = pricelistRecordINR.Where(x => x.CategoryName == item.CategoryName).Select(x => x.ProductCount).FirstOrDefault();
                obj.PricePendingINRCount = item.ProductCount - obj.PriceFilledINRCount;
                pricerecord.Add(obj);
            }


            var test = (from p in db.Products
                        join pc in db.Product_Category_Mapping on p.Id equals pc.ProductId
                        join c in db.Categories on pc.CategoryId equals c.Id
                        where categoryIds.Contains(c.ParentCategoryId)
                        select p).ToList();

            var jsonData = new
            {
                records = model,
                pricerecord = pricerecord
            };

            return Json(jsonData, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult Upload(FormCollection formCollection)
        {
            if (Request != null)
            {
                HttpPostedFileBase file = Request.Files["UploadedFile"];
                if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                {
                    string fileName = file.FileName;
                    string fileContentType = file.ContentType;
                    byte[] fileBytes = new byte[file.ContentLength];
                    var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                    using (var package = new ExcelPackage(file.InputStream))
                    {
                        var currentSheet = package.Workbook.Worksheets;
                        var workSheet = currentSheet.First();
                        var noOfCol = workSheet.Dimension.End.Column;
                        var noOfRow = workSheet.Dimension.End.Row;
                        for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                        {
                            var user = new ExcelInventoryModel();
                            string catno = workSheet.Cells[rowIterator, 1].Value.ToString();
                            string batch = workSheet.Cells[rowIterator, 2].Value.ToString();
                            string Qty = workSheet.Cells[rowIterator, 3].Value.ToString();
                            string Appearance = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : "";
                            string COA = workSheet.Cells[rowIterator, 5].Value != null ? workSheet.Cells[rowIterator, 5].Value.ToString() : "";
                            string StandardData = workSheet.Cells[rowIterator, 6].Value != null ? workSheet.Cells[rowIterator, 6].Value.ToString() : "";
                            string AdditionalData = workSheet.Cells[rowIterator, 7].Value != null ? workSheet.Cells[rowIterator, 7].Value.ToString() : "";
                            string ReTestDate = workSheet.Cells[rowIterator, 8].Value != null ? workSheet.Cells[rowIterator, 8].Value.ToString() : "";
                            string Remarks = workSheet.Cells[rowIterator, 9].Value != null ? workSheet.Cells[rowIterator, 9].Value.ToString() : "";
                            string COAPath = "";
                            string StandardDataPath = "";
                            string AdditionalDataPath = "";
                            if (!string.IsNullOrEmpty(COA))
                            {
                                var filename = Guid.NewGuid();
                                var fileext = Path.GetExtension(COA);
                                COAPath = "../Document/" + filename + "" + fileext;
                                var targetpath = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                                var sourcepath = Server.MapPath(COA);
                                System.IO.File.Copy(sourcepath, targetpath, true);
                            }
                            if (!string.IsNullOrEmpty(StandardData))
                            {
                                var filename = Guid.NewGuid();
                                var fileext = Path.GetExtension(StandardData);
                                StandardDataPath = "../Document/" + filename + "" + fileext;
                                var targetpath = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                                var sourcepath = Server.MapPath(StandardData);
                                System.IO.File.Copy(sourcepath, targetpath, true);
                            }
                            if (!string.IsNullOrEmpty(AdditionalData))
                            {
                                var filename = Guid.NewGuid();
                                var fileext = Path.GetExtension(AdditionalData);
                                AdditionalDataPath = "../Document/" + filename + "" + fileext;
                                var targetpath = Path.Combine(Server.MapPath("~/Document/"), filename + "" + fileext);
                                var sourcepath = Server.MapPath(AdditionalData);
                                System.IO.File.Copy(sourcepath, targetpath, true);
                            }


                            var productdata = db.Products.Where(x => x.Sku == catno && x.Deleted == false && x.Published == true).FirstOrDefault();
                            if (productdata != null)
                            {
                                var inventorydata = db.SZ_Inventory.Where(x => x.ProductId == productdata.Id && x.BatchNo == batch).FirstOrDefault();
                                if (inventorydata != null)
                                {
                                    // update logic
                                    inventorydata.BatchNo = batch;
                                    inventorydata.Qty = Convert.ToDecimal(Qty);
                                    inventorydata.Appearance = Appearance;
                                    inventorydata.COAPath = COAPath;
                                    inventorydata.StdDataPath = StandardDataPath;
                                    inventorydata.AddDataPath = AdditionalDataPath;
                                    if (!string.IsNullOrEmpty(ReTestDate))
                                    {
                                        inventorydata.ReTestDate = Convert.ToDateTime(ReTestDate);
                                    }
                                    inventorydata.Remarks = Remarks;
                                    db.Entry(inventorydata).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                                else
                                {
                                    //insert logic
                                    SZ_Inventory objinv = new SZ_Inventory();
                                    objinv.BatchNo = batch;
                                    objinv.ProductId = productdata.Id;
                                    objinv.Qty = Convert.ToDecimal(Qty);
                                    objinv.Appearance = Appearance;
                                    objinv.COAPath = COAPath;
                                    objinv.StdDataPath = StandardDataPath;
                                    objinv.AddDataPath = AdditionalDataPath;
                                    if (!string.IsNullOrEmpty(ReTestDate))
                                    {
                                        objinv.ReTestDate = Convert.ToDateTime(ReTestDate);
                                    }
                                    objinv.Remarks = Remarks;
                                    objinv.CreatedDate = DateTime.Now;
                                    db.Entry(objinv).State = EntityState.Added;
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            return RedirectToAction("Inventory");
        }

        [HttpPost]
        public ActionResult UploadPrice(FormCollection formCollection)
        {
            if (Request != null)
            {
                HttpPostedFileBase file = Request.Files["UploadedFile"];
                if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                {
                    string fileName = file.FileName;
                    string fileContentType = file.ContentType;
                    byte[] fileBytes = new byte[file.ContentLength];
                    var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                    using (var package = new ExcelPackage(file.InputStream))
                    {
                        var currentSheet = package.Workbook.Worksheets;
                        var workSheet = currentSheet.First();
                        var noOfCol = workSheet.Dimension.End.Column;
                        var noOfRow = workSheet.Dimension.End.Row;
                        for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                        {
                            var user = new ExcelInventoryModel();
                            string catno = workSheet.Cells[rowIterator, 1].Value.ToString();
                            string category = workSheet.Cells[rowIterator, 2].Value != null ? workSheet.Cells[rowIterator, 2].Value.ToString().ToLower() : "";
                            string Permgprice = workSheet.Cells[rowIterator, 3].Value.ToString();
                            string Inrprice = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : "";
                            string RevisedPrice = workSheet.Cells[rowIterator, 5].Value != null ? workSheet.Cells[rowIterator, 5].Value.ToString() : "";
                            string Leadtime = workSheet.Cells[rowIterator, 6].Value != null ? workSheet.Cells[rowIterator, 6].Value.ToString() : "";
                            string Remark = workSheet.Cells[rowIterator, 7].Value != null ? workSheet.Cells[rowIterator, 7].Value.ToString() : "";

                            var productdata = db.Products.Where(x => x.Sku == catno && x.Deleted == false && x.Published == true).FirstOrDefault();
                            if (productdata != null)
                            {
                                //insert logic
                                SZ_Price objpri = new SZ_Price();
                                objpri.Price = !string.IsNullOrEmpty(Permgprice) ? Convert.ToDecimal(Permgprice) : 0;
                                objpri.ProductId = productdata.Id;
                                objpri.INRPrice = Inrprice;
                                objpri.USDPrice = RevisedPrice;
                                objpri.LeadTime = Leadtime;
                                objpri.Remark = Remark;
                                objpri.CreatedDate = DateTime.Now;

                                var catData = db.SZ_Category_Price.Where(x => x.Category.ToLower() == category).FirstOrDefault();
                                if (catData != null)
                                {
                                    objpri.CategoryPriceId = catData.Id;
                                }
                                db.Entry(objpri).State = EntityState.Added;
                                db.SaveChanges();
                            }
                        }
                    }
                }
            }
            return RedirectToAction("Price");
        }

        #region Price Section
        public ActionResult Price()
        {
            if (!SessionCookieManagement.IsPrice)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }

        public ActionResult ManagePrice(int id, int InvId)
        {
            var model = new InventoryModel();
            if (InvId == 0)
            {
                model = (from p in db.Products
                         join invv in db.SZ_Inventory on p.Id equals invv.ProductId
                         into invs
                         from inv in invs.DefaultIfEmpty()
                         join pr in db.SZ_Price on p.Id equals pr.ProductId
                         into ps
                         from pri in ps.DefaultIfEmpty()
                         join cp in db.SZ_Category_Price on pri.CategoryPriceId equals cp.Id
                         into cptb
                         from cpp in cptb.DefaultIfEmpty()
                         where p.Deleted != true && p.Published == true && p.Id == id
                         select new InventoryModel
                         {
                             ProductId = p.Id,
                             DrugApiCode = p.DrugApiCode,
                             Gtin = p.Gtin,
                             ManufacturerPartNumber = p.ManufacturerPartNumber,
                             MolecularWeight = p.MolecularWeight,
                             Name = p.Name,
                             Sku = p.Sku,
                             Smile = p.Smile,
                             Synonym = p.Synonym,
                             Product = p,
                             //  MainCatName = GetMainCatName(p),
                             BatchNo = inv.BatchNo,
                             Qty = inv.Qty,
                             COAPath = inv.COAPath,
                             StdDataPath = inv.StdDataPath,
                             AddDataPath = inv.AddDataPath,
                             Remarks = inv.Remarks,
                             Appearance = inv.Appearance,
                             InvId = inv.Id,
                             ReTestDate = inv.ReTestDate,
                             PriceId = pri.Id,
                             Price = pri.Price,
                             PriceRemark = pri.Remark,
                             Currancy = pri.Currancy,
                             INRPrice = cpp.Pricing,
                             USDPrice = pri.USDPrice,
                             LeadTime = pri.LeadTime,
                             MaxDiscount = pri.MaxDiscount,
                             CategoryPriceId = pri.CategoryPriceId != null ? (int)pri.CategoryPriceId : 0
                         }).FirstOrDefault();
            }
            else
            {
                model = (from p in db.Products
                         join invv in db.SZ_Inventory on p.Id equals invv.ProductId
                         into invs
                         from inv in invs.DefaultIfEmpty()
                         join pr in db.SZ_Price on p.Id equals pr.ProductId
                         into ps
                         from pri in ps.DefaultIfEmpty()
                         join cp in db.SZ_Category_Price on pri.CategoryPriceId equals cp.Id
                         into cptb
                         from cpp in cptb.DefaultIfEmpty()
                         where p.Deleted != true && p.Published == true && p.Id == id && inv.Id == InvId
                         select new InventoryModel
                         {
                             ProductId = p.Id,
                             DrugApiCode = p.DrugApiCode,
                             Gtin = p.Gtin,
                             ManufacturerPartNumber = p.ManufacturerPartNumber,
                             MolecularWeight = p.MolecularWeight,
                             Name = p.Name,
                             Sku = p.Sku,
                             Smile = p.Smile,
                             Synonym = p.Synonym,
                             Product = p,
                             //  MainCatName = GetMainCatName(p),
                             BatchNo = inv.BatchNo,
                             Qty = inv.Qty,
                             COAPath = inv.COAPath,
                             StdDataPath = inv.StdDataPath,
                             AddDataPath = inv.AddDataPath,
                             Remarks = inv.Remarks,
                             Appearance = inv.Appearance,
                             InvId = inv.Id,
                             ReTestDate = inv.ReTestDate,
                             PriceId = pri.Id,
                             Price = pri.Price,
                             PriceRemark = pri.Remark,
                             Currancy = pri.Currancy,
                             INRPrice = cpp.Pricing,
                             USDPrice = pri.USDPrice,
                             LeadTime = pri.LeadTime,
                             //  MaxDiscount = pri.MaxDiscount,
                             CategoryPriceId = pri.CategoryPriceId != null ? (int)pri.CategoryPriceId : 0
                         }).FirstOrDefault();
            }


            if (model == null)
                return RedirectToAction("Price");


            string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + model.ProductId;
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                ViewBag.ProductModel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
            }
            model.CategoryPriceList.Add(new SelectListItem
            {
                Text = "Select",
                Value = "0"
            });

            var categoryPrice = db.SZ_Category_Price.ToList();
            foreach (var c in categoryPrice)
            {
                model.CategoryPriceList.Add(new SelectListItem
                {
                    Text = c.Category,
                    Value = c.Id.ToString()
                });
            }

            return View(model);
        }

        [HttpPost]
        public ActionResult ManagePrice(InventoryModel model)
        {
            if (model.PriceId > 0)
            {
                var pricedata = db.SZ_Price.Where(x => x.Id == model.PriceId).FirstOrDefault();
                if (pricedata != null)
                {
                    pricedata.Currancy = model.Currancy;
                    pricedata.Price = model.Price;
                    pricedata.Remark = model.PriceRemark;
                    pricedata.UpdatedDate = System.DateTime.Now;

                    pricedata.INRPrice = model.INRPrice;
                    pricedata.USDPrice = model.USDPrice;
                    pricedata.LeadTime = model.LeadTime;
                    pricedata.MaxDiscount = model.MaxDiscount;
                    pricedata.CategoryPriceId = model.CategoryPriceId;

                    db.Entry(pricedata).State = EntityState.Modified;
                    var categoryPrice = db.SZ_Category_Price.Where(x => x.Id == model.CategoryPriceId).FirstOrDefault();
                    if (categoryPrice != null)
                    {
                        categoryPrice.Pricing = model.INRPrice;
                        db.Entry(categoryPrice).State = EntityState.Modified;
                    }

                    db.SaveChanges();
                }
            }
            else
            {
                SZ_Price objprice = new SZ_Price();
                objprice.ProductId = model.ProductId;
                objprice.CreatedDate = System.DateTime.Now;
                objprice.Currancy = model.Currancy;
                objprice.Price = model.Price;
                objprice.Remark = model.PriceRemark;
                objprice.UpdatedDate = System.DateTime.Now;

                objprice.INRPrice = model.INRPrice;
                objprice.USDPrice = model.USDPrice;
                objprice.LeadTime = model.LeadTime;
                objprice.MaxDiscount = model.MaxDiscount;
                objprice.CategoryPriceId = model.CategoryPriceId;

                db.SZ_Price.Add(objprice);

                var categoryPrice = db.SZ_Category_Price.Where(x => x.Id == model.CategoryPriceId).FirstOrDefault();
                if (categoryPrice != null)
                {
                    categoryPrice.Pricing = model.INRPrice;
                    db.Entry(categoryPrice).State = EntityState.Modified;
                }

                db.SaveChanges();
            }
            return new JsonResult()
            {
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                Data = new { type = "success", msg = "Information saved successfully." }
            };


        }

        public JsonResult GetCategoryPriceById(int categoryId)
        {

            try
            {

                var data = db.SZ_Category_Price.Where(x => x.Id == categoryId).FirstOrDefault();
                if (data != null)
                {
                    var jsonData = new
                    {
                        Price = data.Pricing,
                        LeadTime = data.LeadTime
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        //delete price list
        [HttpPost]
        public ActionResult DeletePrice(int id)
        {
            try
            {
                var pri = db.SZ_Price.Where(x => x.Id == id).FirstOrDefault();
                if (pri != null)
                {
                    db.Entry(pri).State = EntityState.Deleted;
                    db.SaveChanges();
                }


                return Json(new { success = true, message = "Price deleted successfully." }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message }, JsonRequestBehavior.AllowGet);

            }
        }

        public JsonResult GetPriceList(string sidx, string sord, int page, int rows, string searchString, string searchField)
        {
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            string uri = Domain + "/api/RestAPI/GetPriceList?sidx=" + sidx + "&sord=" + sord + "&page=" + page + "&rows=" + rows + "&searchString=" + searchString + "&searchField=" + searchField; //+ model.ProductId;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductModel = JsonConvert.DeserializeObject<InventoryOutput>(productModel);
                    var jsonData = new
                    {
                        total = ProductModel.total,
                        page = ProductModel.page,
                        records = ProductModel.records,
                        rows = ProductModel.rows
                    };

                    return Json(jsonData, JsonRequestBehavior.AllowGet);

                }
            }
            catch (Exception ex)
            {

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }
        #endregion

        public JsonResult GetProjectListTest(string status)
        {
            string uri = Domain + "/api/RestAPI/GetProjectListTest?status=" + status;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductModel = JsonConvert.DeserializeObject<InventoryOutput>(productModel);
                    var jsonData = new
                    {
                        records = ProductModel.records,
                        rows = ProductModel.rows
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetProjectList(string sidx, string sord, int page, int rows, string searchString, string searchField)
        {
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            string uri = Domain + "/api/RestAPI/GetProjectList?sidx=" + sidx + "&sord=" + sord + "&page=" + page + "&rows=" + rows + "&searchString=" + searchString + "&searchField=" + searchField; //+ model.ProductId;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductModel = JsonConvert.DeserializeObject<InventoryOutput>(productModel);
                    var jsonData = new
                    {
                        total = ProductModel.total,
                        page = ProductModel.page,
                        records = ProductModel.records,
                        rows = ProductModel.rows
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetInvoiceList(string sidx, string sord, int page, int rows, string searchString, string searchField)
        {
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            string uri = Domain + "/api/RestAPI/GetInvoiceList?sidx=" + sidx + "&sord=" + sord + "&page=" + page + "&rows=" + rows + "&searchString=" + searchString + "&searchField=" + searchField; //+ model.ProductId;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductModel = JsonConvert.DeserializeObject<InventoryOutput>(productModel);
                    var jsonData = new
                    {
                        total = ProductModel.total,
                        page = ProductModel.page,
                        records = ProductModel.records,
                        rows = ProductModel.rows
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetDispatchList(string sidx, string sord, int page, int rows, string searchString, string searchField)
        {
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            string uri = Domain + "/api/RestAPI/GetDispatchList?sidx=" + sidx + "&sord=" + sord + "&page=" + page + "&rows=" + rows + "&searchString=" + searchString + "&searchField=" + searchField; //+ model.ProductId;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductModel = JsonConvert.DeserializeObject<InventoryOutput>(productModel);
                    var jsonData = new
                    {
                        total = ProductModel.total,
                        page = ProductModel.page,
                        records = ProductModel.records,
                        rows = ProductModel.rows
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult PackedStatus(int id)
        {
            var projectdetailsdata = db.SZ_ProjectDetail.Where(x => x.Id == id).FirstOrDefault();
            if (projectdetailsdata != null)
            {
                var objSZInventory = db.SZ_Inventory.Where(x => x.Id == projectdetailsdata.BatchId).FirstOrDefault();
                if (objSZInventory == null)
                {
                    return Json(new { success = false, msg = "Please select batch number" }, JsonRequestBehavior.AllowGet);

                }
                if (objSZInventory.Qty < projectdetailsdata.Qty)
                {
                    return Json(new { success = false, msg = "Qty is not available for this batch no." }, JsonRequestBehavior.AllowGet);
                }

                objSZInventory.Qty = objSZInventory.Qty - projectdetailsdata.Qty;
                db.Entry(objSZInventory).State = EntityState.Modified;

                projectdetailsdata.Status = "Packed";
                db.Entry(projectdetailsdata).State = EntityState.Modified;

                db.SaveChanges();

                return Json(new { success = true, msg = "Product is packed." }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = false, msg = "Invalid Product id" }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ReadyForDispatch(int id)
        {
            var projectdetailsdata = db.SZ_ProjectDetail.Where(x => x.Id == id).FirstOrDefault();
            if (projectdetailsdata != null)
            {
                var objSZInventory = db.SZ_Inventory.Where(x => x.Id == projectdetailsdata.BatchId).FirstOrDefault();
                if (objSZInventory == null)
                {
                    return Json(new { success = false, msg = "Please assign batch number for dispatch this product" }, JsonRequestBehavior.AllowGet);

                }
                projectdetailsdata.Status = "Ready for dispatch";
                db.Entry(projectdetailsdata).State = EntityState.Modified;
                db.SaveChanges();
                return Json(new { success = true, msg = "Product is ready for dispatch." }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = false, msg = "Invalid Product id" }, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public ActionResult ReadyForInvoice(int id)
        {
            var projectdetailsdata = db.SZ_ProjectDetail.Where(x => x.Id == id).FirstOrDefault();
            if (projectdetailsdata != null)
            {
                projectdetailsdata.Status = "Ready For Invoice";
                db.Entry(projectdetailsdata).State = EntityState.Modified;
                db.SaveChanges();
                return Json(new { success = true, msg = "Product is ready for invoice." }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = false, msg = "Invalid Product id" }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DeleteProductDetails(int ProjectId, int ProjectDetailId = 0)
        {

            if (ProjectDetailId == 0)
            {
                var projectdata = db.SZ_Project.Where(x => x.Id == ProjectId).FirstOrDefault();
                if (projectdata != null)
                {
                    db.Entry(projectdata).State = EntityState.Deleted;
                    db.SaveChanges();
                }
            }
            else
            {
                try
                {
                    var projectdetailsdata = db.SZ_ProjectDetail.Where(x => x.Id == ProjectDetailId).FirstOrDefault();
                    if (projectdetailsdata != null)
                    {
                        db.Entry(projectdetailsdata).State = EntityState.Deleted;
                        db.SaveChanges();
                    }
                    return Json(new { success = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    return Json(new
                    {
                        success = false,
                        message = ex.Message
                    }, JsonRequestBehavior.AllowGet);

                }
            }
            return Json(new { success = true }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult RecentAddition()
        {
            return View();
        }

        public JsonResult RecentAdditionList(string sidx, string sord, int page, int rows)
        {
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            string uri = Domain + "/api/RestAPI/RecentAdditionList?sidx=" + sidx + "&sord=" + sord + "&page=" + page + "&rows=" + rows;
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    var ProductModel = JsonConvert.DeserializeObject<InventoryOutput>(productModel);
                    var jsonData = new
                    {
                        total = ProductModel.total,
                        page = ProductModel.page,
                        records = ProductModel.records,
                        rows = ProductModel.rows
                    };

                    return Json(jsonData, JsonRequestBehavior.AllowGet);

                }
            }
            catch (Exception ex)
            {

            }
            return Json("", JsonRequestBehavior.AllowGet);
        }
        public ActionResult ExportInventoryList()
        {
            string sidx = "";
            string sord = "";
            int page = 1;
            int rows = 0;

            string searchString = "";
            string searchField = "";
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (
                   from c in db.Categories
                   join cp in db.Product_Category_Mapping on c.Id equals cp.CategoryId
                   join p in db.Products on cp.ProductId equals p.Id
                   join i in db.SZ_Inventory on p.Id equals i.ProductId into ps
                   from inv in ps.DefaultIfEmpty().AsEnumerable()
                   where p.Deleted != true && p.Published == true
                   select new
                   {
                       Name = p.Name,
                       Sku = p.Sku,
                       ManufacturerPartNumber = p.ManufacturerPartNumber,
                       MolecularWeight = p.MolecularWeight,
                       BatchNo = inv.BatchNo,
                       Qty = inv.Qty,
                       ReTestDate = inv.ReTestDate,
                       COAPath = inv.COAPath,
                       StdDataPath = inv.StdDataPath,
                       AddDataPath = inv.AddDataPath,
                       Remarks = inv.Remarks
                   }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=inventory" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");

            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Inventory");
        }

        public ActionResult ExportPriceList()
        {
            string sidx = "";
            string sord = "";
            int page = 1;
            int rows = 0;

            string searchString = "";
            string searchField = "";
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (
                from c in db.Categories
                join cp in db.Product_Category_Mapping on c.Id equals cp.CategoryId
                join p in db.Products on cp.ProductId equals p.Id
                join i in db.SZ_Inventory on p.Id equals i.ProductId into ps
                from inv in ps.DefaultIfEmpty().AsEnumerable()
                join pr in db.SZ_Price on p.Id equals pr.ProductId into pris
                from pri in pris.DefaultIfEmpty()
                join cpCat in db.SZ_Category_Price on pri.CategoryPriceId equals cpCat.Id
                 into cptb
                from cpp in cptb.DefaultIfEmpty()
                where p.Deleted != true && p.Published == true
                select new InventoryModel
                {
                    Name = p.Name,
                    Sku = p.Sku,
                    Qty = inv.Qty,
                    INRPrice = cpp.Pricing,
                    USDPrice = pri.USDPrice,
                    LeadTime = pri.LeadTime,
                    Category = cpp.Category
                }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=price" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");

            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Price");
        }

        public ActionResult ExportProjectList()
        {
            string sidx = "";
            string sord = "";
            int page = 1;
            int rows = 0;

            string searchString = "";
            string searchField = "";
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from sp in db.SZ_Project
                             join spd in db.SZ_ProjectDetail on sp.Id equals spd.ProjectId into ps
                             from spdd in ps.DefaultIfEmpty()
                             join p in db.Products on spdd.ProductId equals p.Id into pss
                             from pd in pss.DefaultIfEmpty()
                             join i in db.SZ_Inventory on spdd.BatchId equals i.Id into inv
                             from invc in inv.DefaultIfEmpty()
                             where pd.Deleted != true && pd.Published == true
                             select new
                             {
                                 PONo = sp.PONo,
                                 Company = sp.Company,
                                 ScheduleDispatch = spdd.ScheduleDispatch,
                                 Name = pd.Name,
                                 LabelRequirement = spdd.LabelRequirement,
                                 Sku = pd.Sku,
                                 BatchNo = invc.BatchNo,
                                 Scientist = spdd.Scientist,
                                 Qty = invc.Qty,
                                 Status = spdd.Status,
                                 Remarks = invc.Remarks
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Project" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");

            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Project");
        }
        public ActionResult ExportProjectDomesticinstockList()
        {
            if (SessionCookieManagement.UserEmail != "sagar@synzeal.com"
                && SessionCookieManagement.UserEmail != "rajen@synzeal.com")
            {
                return RedirectToAction("Project");
            }
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            string instockProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);

            // Getting all Customer data  
            var model = (from i in db.SZ_Quotation
                         join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                         where (t2.MoveToProject == true) && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                         && (t2.ProjectType == instockProjectType)
                         && i.CountryType == "Domestic"
                         orderby t2.MoveProjectDate descending
                         select t2).Distinct(); MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });

            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });

            var subscienList = objCache.Get("cache.subscienList", () =>
            {
                return db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            });

            var listItems = new List<SelectListItem>();

            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });
            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 PONumber = t2.SZ_Quotation.PONo,
                                 CompanyName = t2.SZ_Quotation.CompanyName,
                                 ProductName = t2.ProductName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Qty = t2.RequiredQty,
                                 Activity = t2.ActivityStatus,
                                 DataRemark = t2.Remark,
                                 Reason = t2.Reason,
                                 OrderRemark = t2.OrderRemark
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Domestic-Instock-" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Project");
        }

        public ActionResult ExportProjectPurchaseList()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            var model = (from i in db.SZ_Quotation
                         join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                         where string.IsNullOrEmpty(t2.TrackingNo)
                         && (t2.ProjectType == inhouseProjectType || t2.ProjectType == purSynthesisProjectType)
                         && (t2.IsOnHold == false || t2.IsOnHold == null)
                         orderby t2.PurchaseDate descending
                         select t2).OrderByDescending(x => x.PurchaseDate).Distinct().ToList();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });

            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });

            var listItems = new List<SelectListItem>();

            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });
            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 Date = t2.PurchaseDate.HasValue ? t2.PurchaseDate.Value.ToShortDateString() : "",
                                 CompanyName = t2.SZ_Quotation.CompanyName,
                                 PurchaseStatus = t2.PurchaseDDLStatus,
                                 ScientistName = listItems.Where(x => x.Value == Convert.ToString(t2.ScientistCustomerId)).Select(x => x.Text).FirstOrDefault(),
                                 ProductName = t2.ProductName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Qty = t2.RequiredQty,
                                 //DataRemark = t2.Remark,
                                 ESTDate = t2.EstimateCompleteDate,
                                 Summary = t2.PurchaseStatus,
                                 PurchaseRemark = t2.PurchaseRemark,
                                 Reason = t2.Reason
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Purchase" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Purchase");
        }

        public ActionResult ExportProjectPurchaseRFQList()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            var model = (from i in db.SZ_PurchaseRFQ
                         orderby i.CreatedDate descending
                         select i).Distinct();

            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 PurchaseStatus = t2.PurchaseStatus,
                                 AssDate = t2.AssignedDate.HasValue ? t2.AssignedDate.Value.ToShortDateString() : "",
                                 ChemicalName = t2.ChemicalName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Comment = t2.Comment,
                                 Summary = t2.Summary,
                                 EstDate = t2.Estdate.HasValue ? t2.Estdate.Value.ToShortDateString() : "",
                                 PurchaseRemark = t2.PurchaseRemark
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=PurchaseRfq" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Purchase");
        }

        public ActionResult ExportPurchaseList()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            var model = (from i in db.SZ_Quotation
                         join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                         where string.IsNullOrEmpty(t2.TrackingNo)
                         && (t2.ProjectType == inhouseProjectType || t2.ProjectType == purSynthesisProjectType)
                         && (t2.IsOnHold == false || t2.IsOnHold == null)
                         orderby t2.PurchaseDate descending
                         select t2).OrderByDescending(x => x.PurchaseDate).Distinct().ToList();

            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 Date = t2.PurchaseDate.HasValue ? t2.PurchaseDate.Value.ToShortDateString() : "",
                                 PurchaseStatus = t2.PurchaseDDLStatus,
                                 PONo = t2.SZ_Quotation.PONo,
                                 ProductName = t2.ProductName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Qty = t2.RequiredQty,
                                 DataRemark = t2.Remark,
                                 ESTDate = t2.EstimateCompleteDate,
                                 Status = t2.PurchaseStatus,
                                 PurchaseRemark = t2.PurchaseRemark,
                                 Reason = t2.Reason
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Purchase" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Purchase");
        }

        public ActionResult ExportDispatchList()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from sp in db.SZ_Project
                             join spd in db.SZ_ProjectDetail on sp.Id equals spd.ProjectId into ps
                             from spdd in ps.DefaultIfEmpty()
                             join p in db.Products on spdd.ProductId equals p.Id into pss
                             from pd in pss.DefaultIfEmpty()
                             join i in db.SZ_Inventory on spdd.BatchId equals i.Id into inv
                             from invc in inv.DefaultIfEmpty()
                             where pd.Deleted != true && pd.Published == true && spdd.Status == "Ready for dispatch"
                             select new
                             {
                                 PONo = sp.PONo,
                                 ScheduleDispatch = spdd.ScheduleDispatch,
                                 Name = pd.Name,
                                 LabelRequirement = spdd.LabelRequirement,
                                 Sku = pd.Sku,
                                 BatchNo = invc.BatchNo,
                                 Scientist = spdd.Scientist,
                                 PackSize = spdd.PackSize,
                                 NoOfPack = spdd.NoOfPack,
                                 Qty = invc.Qty,
                                 Status = spdd.Status,
                                 DataRequired = spdd.DataRequired,
                                 Remarks = invc.Remarks
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Dispatch" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Dispatch");
        }

        public ActionResult ExportInvoiceList()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from sp in db.SZ_Project
                             join spd in db.SZ_ProjectDetail on sp.Id equals spd.ProjectId into ps
                             from spdd in ps.DefaultIfEmpty()
                             join p in db.Products on spdd.ProductId equals p.Id into pss
                             from pd in pss.DefaultIfEmpty()
                             join i in db.SZ_Inventory on spdd.BatchId equals i.Id into inv
                             from invc in inv.DefaultIfEmpty()
                             join invss in db.SZ_Invoice on spdd.Id equals invss.ProjectDetailsId into invcs
                             from invoice in invcs.DefaultIfEmpty()
                             where pd.Deleted != true && pd.Published == true && spdd.Status == "Ready For Invoice"
                             select new
                             {
                                 PODate = sp.PODate,
                                 PONo = sp.PONo,
                                 DispatchDate = invoice.DispatchDate,
                                 Company = sp.Company,
                                 Name = pd.Name,
                                 LabelRequirement = spdd.LabelRequirement,
                                 Sku = pd.Sku,
                                 PackSize = spdd.PackSize,
                                 NoOfPack = spdd.NoOfPack,
                                 Qty = invc.Qty,
                                 BasicValue = invoice.BasicValue,
                                 InvoiceNo = invoice.InvoiceNo,
                                 Remarks = invc.Remarks
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Invoice" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");

            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("Invoice");
        }

        [HttpPost]
        public JsonResult ExportDispatchList(List<int> id)
        {
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();

            var data = (from i in db.SZ_Quotation
                        join p in db.SZ_QuotationDetail on i.Id equals p.QuoteId
                        where p.MoveToDispatch == true && (p.MoveToInvoice == false || p.MoveToInvoice == null)
                        && id.Contains(p.Id)
                        orderby p.MoveDispatchDate descending
                        select new
                        {
                            ProductId = p.ProductId,
                            Name = p.ProductName,
                            CatNo = p.CATNo,
                            CasNo = p.CASNo,
                            Qty = p.RequiredQty,
                            AdditionalBatchNo = p.AdditionalBatchNo,
                            BatchNo = "",
                            Barcode = "",
                            PONo = i.PONo
                        }).ToList();

            List<ExportDispatchModel> model = new List<ExportDispatchModel>();

            foreach (var item in data)
            {
                ExportDispatchModel obj = new ExportDispatchModel();
                obj.ProductName = item.Name;
                obj.Qty = item.Qty;
                obj.CASNo = item.CasNo;
                obj.CATNo = item.CatNo;
                var proData = db.Products.Where(x => x.Id == item.ProductId && x.Published == true && x.Deleted == false).Count();
                var proBatchData = db.SZ_Inventory.Where(x => x.ProductId == item.ProductId).ToList();
                if (proBatchData.Count > 0 && proData > 0)
                {

                    var compData = db.SZ_CompanyList.ToList();
                    foreach (var term in proBatchData)
                    {
                        if (item.AdditionalBatchNo == term.Id)
                        {
                            obj.BatchNo = term.BatchNo;
                        }
                    }
                }
                obj.Barcode = "https://www.synzeal.com/search?q=" + item.CatNo;
                obj.PONo = item.PONo;
                model.Add(obj);
            }

            gv.DataSource = model;
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=RecentAddition" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");

            string filePath = Server.MapPath("~/Content/ExportExcel/");
            string fileName = "Dispatch_" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls";

            // Write the rendered content to a file.
            System.IO.File.WriteAllText(filePath + fileName, passstr);
            return Json("../Content/ExportExcel/" + fileName, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ExportRecentAdditionList()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from c in db.Categories
                             join cp in db.Product_Category_Mapping on c.Id equals cp.CategoryId
                             join p in db.Products on cp.ProductId equals p.Id
                             join i in db.SZ_Inventory on p.Id equals i.ProductId
                             where p.Deleted != true && p.Published == true
                             select new
                             {
                                 Name = p.Name,
                                 Sku = p.Sku,
                                 ManufacturerPartNumber = p.ManufacturerPartNumber,
                                 MolecularWeight = p.MolecularWeight,
                                 BatchNo = i.BatchNo,
                                 Qty = i.Qty,
                                 ReTestDate = i.ReTestDate,
                                 Remarks = i.Remarks
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=RecentAddition" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);

            string passstr = sw.ToString().Replace(" 00:00:00", "");

            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("RecentAddition");
        }

        [HttpPost]
        public ActionResult UploadProject(FormCollection formCollection)
        {
            if (Request != null)
            {
                HttpPostedFileBase file = Request.Files["UploadedFile"];
                if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                {
                    string fileName = file.FileName;
                    string fileContentType = file.ContentType;
                    byte[] fileBytes = new byte[file.ContentLength];
                    var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                    using (var package = new ExcelPackage(file.InputStream))
                    {
                        var currentSheet = package.Workbook.Worksheets;
                        var workSheet = currentSheet.First();
                        var noOfCol = workSheet.Dimension.End.Column;
                        var noOfRow = workSheet.Dimension.End.Row;
                        for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                        {
                            if (workSheet.Cells[rowIterator, 1].Value == null)
                            {
                                break;
                            }
                            var user = new ExcelInventoryModel();
                            string pono = workSheet.Cells[rowIterator, 1].Value.ToString().Trim();
                            string company = workSheet.Cells[rowIterator, 2].Value.ToString();
                            string scheduleDispatch = Convert.ToString(workSheet.Cells[rowIterator, 3].Value);
                            string name = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : "";
                            string labelrequirement = workSheet.Cells[rowIterator, 5].Value != null ? workSheet.Cells[rowIterator, 5].Value.ToString() : "";
                            string sku = workSheet.Cells[rowIterator, 6].Value != null ? workSheet.Cells[rowIterator, 6].Value.ToString().Trim() : "";
                            string batchno = workSheet.Cells[rowIterator, 7].Value != null ? workSheet.Cells[rowIterator, 7].Value.ToString() : "";
                            string scientist = workSheet.Cells[rowIterator, 8].Value != null ? workSheet.Cells[rowIterator, 8].Value.ToString() : "";
                            string qty = workSheet.Cells[rowIterator, 9].Value != null ? workSheet.Cells[rowIterator, 9].Value.ToString() : "";
                            string status = workSheet.Cells[rowIterator, 10].Value != null ? workSheet.Cells[rowIterator, 10].Value.ToString() : "";
                            string remarks = workSheet.Cells[rowIterator, 11].Value != null ? workSheet.Cells[rowIterator, 11].Value.ToString() : "";

                            var project = db.SZ_Project.Where(x => x.PONo.Contains(pono)).FirstOrDefault();
                            if (project == null)
                            {
                                project = new SZ_Project();
                                project.PONo = pono;
                                project.Company = company;
                                project.Status = status;
                                project.CreatedDate = DateTime.Now;
                                db.SZ_Project.Add(project);
                                db.SaveChanges();

                                var product = db.Products.Where(x => x.Sku.Contains(sku) && x.Published == true && x.Deleted != true).FirstOrDefault();
                                if (product != null)
                                {
                                    var projectDetails = new SZ_ProjectDetail();
                                    projectDetails.ProjectId = project.Id;
                                    projectDetails.ProductId = product.Id;
                                    projectDetails.LabelRequirement = labelrequirement;
                                    projectDetails.Scientist = scientist;
                                    if (!string.IsNullOrEmpty(qty))
                                    {
                                        projectDetails.Qty = Convert.ToDecimal(qty);
                                    }
                                    projectDetails.Status = status;
                                    projectDetails.Remark = remarks;
                                    db.SZ_ProjectDetail.Add(projectDetails);
                                    db.SaveChanges();
                                }
                            }
                            else
                            {
                                project.Company = company;
                                project.Status = status;
                                db.Entry(project).State = EntityState.Modified;
                                db.SaveChanges();

                                var product = db.Products.Where(x => x.Sku == sku && x.Published == true && x.Deleted != true).FirstOrDefault();
                                if (product != null)
                                {
                                    var projectDetails = db.SZ_ProjectDetail.Where(x => x.ProjectId == project.Id && x.ProductId == product.Id).FirstOrDefault();
                                    if (projectDetails == null)
                                    {
                                        projectDetails = new SZ_ProjectDetail();
                                        projectDetails.ProjectId = project.Id;
                                        projectDetails.ProductId = product.Id;
                                        projectDetails.LabelRequirement = labelrequirement;
                                        projectDetails.Scientist = scientist;
                                        if (!string.IsNullOrEmpty(qty))
                                        {
                                            projectDetails.Qty = Convert.ToDecimal(qty);
                                        }
                                        projectDetails.Status = status;
                                        projectDetails.Remark = remarks;
                                        db.SZ_ProjectDetail.Add(projectDetails);
                                        db.SaveChanges();
                                    }
                                    else
                                    {
                                        projectDetails.LabelRequirement = labelrequirement;
                                        projectDetails.Scientist = scientist;
                                        if (!string.IsNullOrEmpty(qty))
                                        {
                                            projectDetails.Qty = Convert.ToDecimal(qty);
                                        }
                                        projectDetails.Status = status;
                                        projectDetails.Remark = remarks;
                                        db.Entry(projectDetails).State = EntityState.Modified;
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                }
            }

            TempData["Message"] = "Excel import successfully.";
            return RedirectToAction("Project");
        }


        public byte[] PDFNopcomemrce(SZ_Quotation data)
        {
            byte[] bytes;
            using (var stream = new MemoryStream())
            {
                if (stream == null)
                    throw new ArgumentNullException("stream");

                var pageSize = PageSize.A4;
                var doc = new Document(pageSize);
                var pdfWriter = PdfWriter.GetInstance(doc, stream);
                doc.Open();

                //fonts

                var titleFont = FontFactory.GetFont("Tahoma");
                titleFont.SetStyle(iTextSharp.text.Font.BOLD);
                titleFont.Color = BaseColor.BLACK;
                titleFont.Size = 12;

                var font = FontFactory.GetFont("Tahoma");
                font.SetStyle(iTextSharp.text.Font.NORMAL);
                font.Color = BaseColor.BLACK;
                font.Size = 10;

                var boldfont = FontFactory.GetFont("Tahoma");
                boldfont.SetStyle(iTextSharp.text.Font.BOLD);
                boldfont.Color = BaseColor.BLACK;
                boldfont.Size = 11;

                #region Header
                //logo
                var logoPicture = Server.MapPath("~/img/logo.png");

                //header
                var headerTable = new PdfPTable(2);
                headerTable.RunDirection = PdfWriter.RUN_DIRECTION_LTR;
                headerTable.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;

                //store info
                var storeUrl = "https://www.synzeal.com/";
                var anchor = new Anchor(storeUrl.Trim(new[] { '/' }), font);
                anchor.Reference = storeUrl;

                var cellHeader = new PdfPCell();
                cellHeader.ExtraParagraphSpace = 4;
                cellHeader.Phrase = new Phrase();
                cellHeader.Phrase.Add(new Phrase("SynZeal Research Private Ltd", titleFont));
                cellHeader.Phrase.Add(new Phrase(Environment.NewLine));
                cellHeader.Phrase.Add(new Phrase("Plot No. F, Shree Ganesh Industrial Estate,", font));
                cellHeader.Phrase.Add(new Phrase(Environment.NewLine));
                cellHeader.Phrase.Add(new Phrase("423/24/8, Mahagujarat Industrial Estate,", font));
                cellHeader.Phrase.Add(new Phrase(Environment.NewLine));
                cellHeader.Phrase.Add(new Phrase("Sarkhej-Bavla Road,Moraiya,Ahmedabad-382213", font));
                cellHeader.Phrase.Add(new Phrase(Environment.NewLine));
                cellHeader.Phrase.Add(new Phrase("Email:", boldfont));
                cellHeader.Phrase.Add(new Phrase("standards@synzeal.com", font));
                cellHeader.Phrase.Add(new Phrase(Environment.NewLine));
                cellHeader.Phrase.Add(new Phrase("Phone:", boldfont));
                cellHeader.Phrase.Add(new Phrase("+91-757-500-2050", font));
                cellHeader.Phrase.Add(new Phrase(Environment.NewLine));
                cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;
                cellHeader.Border = iTextSharp.text.Rectangle.NO_BORDER;

                headerTable.AddCell(cellHeader);
                headerTable.SetWidths(new[] { 0.6f, 0.4f });
                headerTable.WidthPercentage = 100f;

                //logo               

                var logo = iTextSharp.text.Image.GetInstance(logoPicture);
                logo.Alignment = Element.ALIGN_LEFT;
                logo.ScaleToFit(200f, 200f);

                var cellLogo = new PdfPCell();
                cellLogo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                cellLogo.AddElement(logo);
                headerTable.AddCell(cellLogo);

                doc.Add(headerTable);

                PdfPTable table = new PdfPTable(2);
                var cellHeaderBlank = new PdfPCell(new Phrase());
                cellHeaderBlank.Border = iTextSharp.text.Rectangle.NO_BORDER;
                cellHeaderBlank.Phrase.Add(new Phrase(Environment.NewLine));
                var color = new iTextSharp.text.BaseColor(System.Drawing.ColorTranslator.FromHtml("#A9A9A9"));
                DrawLine(pdfWriter, 20f, doc.Top - 92f, doc.PageSize.Width - 25f, doc.Top - 92f, color);
                table.AddCell(cellHeaderBlank);
                doc.Add(table);

                PdfPTable Firsttable = new PdfPTable(2);
                Firsttable.PaddingTop = 0;
                var cellQuote = new PdfPCell(new Phrase("Quote# : " + data.Ref, font));
                cellQuote.Border = iTextSharp.text.Rectangle.NO_BORDER;

                cellQuote.Phrase.Add(new Phrase(Environment.NewLine));
                cellQuote.Phrase.Add(new Phrase("Customer : " + data.SZ_CompanyList.Name, font));
                cellQuote.HorizontalAlignment = Element.ALIGN_LEFT;
                cellQuote.ExtraParagraphSpace = 4;
                Firsttable.AddCell(cellQuote);

                var celldate = new PdfPCell(new Phrase("Date : " + data.CreatedDate.Value.ToShortDateString(), font));
                celldate.ExtraParagraphSpace = 4;
                celldate.Border = iTextSharp.text.Rectangle.NO_BORDER;
                celldate.Phrase.Add(new Phrase(Environment.NewLine));
                celldate.HorizontalAlignment = Element.ALIGN_RIGHT;
                Firsttable.WidthPercentage = 100f;
                Firsttable.AddCell(celldate);
                doc.Add(Firsttable);

                PdfPTable secondlinetable = new PdfPTable(2);
                var celllineBlank = new PdfPCell(new Phrase());
                celllineBlank.Border = iTextSharp.text.Rectangle.NO_BORDER;
                celllineBlank.Phrase.Add(new Phrase(Environment.NewLine));
                var colorlimne = new iTextSharp.text.BaseColor(System.Drawing.ColorTranslator.FromHtml("#A9A9A9"));
                DrawLine(pdfWriter, 20f, doc.Top - 123f, doc.PageSize.Width - 25f, doc.Top - 123f, colorlimne);
                celllineBlank.Phrase.Add(new Phrase(Environment.NewLine));
                secondlinetable.AddCell(celllineBlank);
                doc.Add(secondlinetable);

                if (data.IsImageAttach)
                {
                    PdfPTable secondtable = new PdfPTable(3);
                    secondtable.PaddingTop = 0;
                    secondtable.WidthPercentage = 100f;
                    secondtable.SetWidths(new[] { 0.1f, 0.4f, 0.5f });
                    int srno = 1;
                    foreach (var item in data.SZ_QuotationDetail)
                    {
                        var cellinfo = new PdfPCell(new Phrase(srno.ToString(), font));
                        cellinfo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        cellinfo.HorizontalAlignment = Element.ALIGN_LEFT;
                        cellinfo.ExtraParagraphSpace = 4;
                        secondtable.AddCell(cellinfo);

                        if (item.ImagePath != null)
                        {
                            if (item.ImagePath.StartsWith("http"))
                            {
                                var proimage = iTextSharp.text.Image.GetInstance(new Uri(item.ImagePath));
                                proimage.Alignment = Element.ALIGN_LEFT;
                                proimage.ScaleToFit(200f, 200f);

                                var ProLogo = new PdfPCell();
                                ProLogo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                ProLogo.AddElement(proimage);
                                secondtable.AddCell(ProLogo);
                            }
                            else
                            {
                                var proimage = iTextSharp.text.Image.GetInstance(item.ImagePath);
                                proimage.Alignment = Element.ALIGN_LEFT;
                                proimage.ScaleToFit(200f, 200f);

                                var ProLogo = new PdfPCell();
                                ProLogo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                ProLogo.AddElement(proimage);
                                secondtable.AddCell(ProLogo);
                            }
                        }
                        else
                        {
                            var ProLogo = new PdfPCell();
                            ProLogo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            secondtable.AddCell(ProLogo);
                        }
                        var proinfo = new PdfPCell(new Phrase("Name : " + item.ProductName, font));
                        proinfo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        proinfo.Phrase.Add(new Phrase(Environment.NewLine));
                        proinfo.Phrase.Add(new Phrase("CAS# : " + item.CASNo, font));
                        proinfo.Phrase.Add(new Phrase(Environment.NewLine));
                        proinfo.Phrase.Add(new Phrase("Price : " + item.Price, font));
                        proinfo.Phrase.Add(new Phrase(Environment.NewLine));
                        proinfo.Phrase.Add(new Phrase("Lead Time : " + item.LeadTime, font));
                        proinfo.HorizontalAlignment = Element.ALIGN_LEFT;
                        proinfo.ExtraParagraphSpace = 4;
                        secondtable.AddCell(proinfo);
                        srno += 1;
                    }
                    doc.Add(secondtable);
                }
                else
                {
                    PdfPTable secondtable = new PdfPTable(5);
                    secondtable.PaddingTop = 0;
                    secondtable.WidthPercentage = 100f;
                    secondtable.SetWidths(new[] { 0.1f, 0.4f, 0.2f, 0.2f, 0.1f });
                    int srno = 1;
                    foreach (var item in data.SZ_QuotationDetail)
                    {
                        var cellinfo = new PdfPCell(new Phrase(srno.ToString(), font));
                        cellinfo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        cellinfo.HorizontalAlignment = Element.ALIGN_LEFT;
                        cellinfo.ExtraParagraphSpace = 4;
                        secondtable.AddCell(cellinfo);

                        var cellfirstinfo = new PdfPCell(new Phrase(item.ProductName, font));
                        cellfirstinfo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        cellfirstinfo.HorizontalAlignment = Element.ALIGN_LEFT;
                        cellfirstinfo.ExtraParagraphSpace = 4;
                        secondtable.AddCell(cellfirstinfo);

                        var cellsecondinfo = new PdfPCell(new Phrase(item.CASNo, font));
                        cellsecondinfo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        cellsecondinfo.HorizontalAlignment = Element.ALIGN_LEFT;
                        cellsecondinfo.ExtraParagraphSpace = 4;
                        secondtable.AddCell(cellsecondinfo);


                        var cellthirdinfo = new PdfPCell(new Phrase(item.Price, font));
                        cellthirdinfo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        cellthirdinfo.HorizontalAlignment = Element.ALIGN_LEFT;
                        cellthirdinfo.ExtraParagraphSpace = 4;
                        secondtable.AddCell(cellthirdinfo);

                        var cellforthinfo = new PdfPCell(new Phrase(item.LeadTime, font));
                        cellforthinfo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        cellforthinfo.HorizontalAlignment = Element.ALIGN_LEFT;
                        cellforthinfo.ExtraParagraphSpace = 4;
                        secondtable.AddCell(cellforthinfo);
                        srno += 1;
                    }
                    doc.Add(secondtable);
                }

                #region Terms

                var termsData = db.SZ_Terms.Where(x => x.Id == data.TermsId).FirstOrDefault();
                if (termsData != null)
                {
                    PdfPTable Termstable = new PdfPTable(1);
                    Termstable.WidthPercentage = 100f;

                    var TermstableBlank = new PdfPCell(new Phrase("Terms and Conditions", boldfont));
                    TermstableBlank.ExtraParagraphSpace = 4;
                    TermstableBlank.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Termstable.AddCell(TermstableBlank);
                    doc.Add(Termstable);




                    //make an arraylist ....with STRINGREADER since its no IO reading file...
                    var htmlarraylist = iTextSharp.text.html.simpleparser.HTMLWorker.ParseToList(new StringReader(termsData.Value), null);
                    //add the collection to the document
                    for (int k = 0; k < htmlarraylist.Count; k++)
                    {
                        if (htmlarraylist[k].Chunks.Count > 0)
                        {
                            foreach (var paragraphdetails in htmlarraylist[k].Chunks)
                            {
                                if (paragraphdetails != null)
                                {
                                    Paragraph mypara = new Paragraph(paragraphdetails.Content, paragraphdetails.Font.Size == 12 ? font : null);//make an emtphy paragraph as "holder"
                                    mypara.IndentationLeft = 0;
                                    doc.Add(mypara);
                                }
                            }
                        }
                    }
                }
                #endregion

                #endregion

                doc.Close();

                bytes = stream.ToArray();
            }
            return bytes;
        }

        public void DrawLine(PdfWriter writer, float x1, float y1, float x2, float y2, BaseColor color)
        {
            PdfContentByte contentByte = writer.DirectContent;
            contentByte.SetColorStroke(color);
            contentByte.MoveTo(x1, y1);
            contentByte.LineTo(x2, y2);
            contentByte.Stroke();
        }
        public string FixBrokenMarkup(string broken)
        {
            HtmlDocument h = new HtmlDocument()
            {
                OptionAutoCloseOnEnd = true,
                OptionFixNestedTags = true,
                OptionWriteEmptyNodes = true
            };
            h.LoadHtml(broken);

            // UPDATED to remove HtmlCommentNode
            var comments = h.DocumentNode.SelectNodes("//comment()");
            if (comments != null)
            {
                foreach (var node in comments) { node.Remove(); }
            }

            return h.DocumentNode.SelectNodes("child::*") != null
                //                            ^^^^^^^^^^
                // XPath above: string plain-text or contains markup/tags
                ? h.DocumentNode.WriteTo()
                : string.Format("<span>{0}</span>", broken);
        }
        public ReturnValue ConvertHtmlToPdfAsBytes(string HtmlData)
        {
            // variables  
            ReturnValue Result = new ReturnValue();

            // do some additional cleansing to handle some scenarios that are out of control with the html data  
            HtmlData = HtmlData.Replace("<br>", "<br />");

            // convert html to pdf  
            try
            {
                // create a stream that we can write to, in this case a MemoryStream  
                using (var stream = new MemoryStream())
                {
                    // create an iTextSharp Document which is an abstraction of a PDF but **NOT** a PDF  
                    using (var document = new Document())
                    {
                        // create a writer that's bound to our PDF abstraction and our stream  
                        using (var writer = PdfWriter.GetInstance(document, stream))
                        {
                            // open the document for writing  
                            document.Open();

                            string htmlcodestr = FixBrokenMarkup(HtmlData);
                            // read html data to StringReader  
                            using (var html = new StringReader(htmlcodestr))
                            {
                                XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, html);
                            }

                            // close document  
                            document.Close();
                        }
                    }

                    // get bytes from stream  
                    Result.Data = stream.ToArray();

                    // success  
                    Result.Success = true;
                }
            }
            catch (Exception ex)
            {
                Result.Success = false;
                Result.Message = ex.Message;
            }

            // return  
            return Result;
        }
        public string ConvertHTMLToPDF(string HTMLCode, string refNo, bool waterark = false, bool isreturnfile = false)
        {
            refNo = refNo + "_" + DateTime.Now.ToString("yyyyMMddhhmmss");
            string WatermarkLocation = "https://www.synzeal.com/Themes/DefaultClean/Content/images/logo.png";

            //Render PlaceHolder to temporary stream
            System.IO.StringWriter stringWrite = new StringWriter();
            System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite);

            /********************************************************************************/
            //Try adding source strings for each image in content
            string tempPostContent = HTMLCode;
            /*********************************************************************************/
            //string filePath = HostingEnvironment.MapPath("~/Content/Quotation/");
            string filePath = Server.MapPath("~/Content/Quotation/");

            try
            {
                StringReader html = new StringReader(HTMLCode);
                using (Document document = new Document())
                {
                    if (HTMLCode.Contains("logoattached"))
                    {
                        document.SetMargins(25f, 25f, 10f, 35f);
                    }
                    else
                    {
                        document.SetMargins(25f, 25f, 20f, 35f);
                        //document.SetMargins(25f, 25f, 48f, 35f);
                    }
                    document.NewPage();
                    PdfWriter writer = PdfWriter.GetInstance(document, new FileStream(filePath + refNo + ".pdf", FileMode.Create));

                    document.Open();

                    var example_css = @"BODY{font: andalus !important}  h1{font: andalus !important}";
                    string fontFolderPath = Server.MapPath("~/fonts/");
                    int fontSize = 12;
                    BaseFont baseFont = BaseFont.CreateFont(fontFolderPath + "andlso.ttf", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                    iTextSharp.text.Font font = new iTextSharp.text.Font(baseFont, 12, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
                    using (var msCss = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(example_css)))
                    {
                        using (var msHtml = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(HTMLCode)))
                        {

                            //Parse the HTML
                            iTextSharp.tool.xml.XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, msHtml, msCss, new XMLWorkerFontProvider(Server.MapPath("~/fonts/")));
                        }
                    }
                    document.Close();

                    if (waterark)
                    {
                        string FileLocation = filePath + "\\" + refNo + ".pdf";
                        PdfReader pdfReader = new PdfReader(FileLocation);
                        PdfStamper stamp = new PdfStamper(pdfReader, new FileStream(FileLocation.Replace(".pdf", "[temp][file].pdf"), FileMode.Create));

                        iTextSharp.text.Image img = iTextSharp.text.Image.GetInstance(WatermarkLocation);
                        float w = img.ScaledWidth;
                        float h = img.ScaledHeight;

                        img.SetAbsolutePosition(125, 400);
                        // img.RotationDegrees = ((float)Math.PI / 2);

                        PdfContentByte waterMark;
                        iTextSharp.text.Rectangle pagesize;
                        float x, y;
                        for (int page = 1; page <= pdfReader.NumberOfPages; page++)
                        {
                            // get page size and position
                            pagesize = pdfReader.GetPageSizeWithRotation(page);
                            x = (pagesize.Left + pagesize.Right) / 2;
                            y = (pagesize.Top + pagesize.Bottom) / 2;
                            waterMark = stamp.GetOverContent(page);
                            waterMark.SaveState();

                            // set transparency
                            PdfGState state = new PdfGState();
                            state.FillOpacity = 0.2f;
                            waterMark.SetGState(state);
                            waterMark.AddImage(img);
                            waterMark.RestoreState();
                        }
                        stamp.FormFlattening = true;
                        stamp.Close();

                        return FileLocation.Replace(".pdf", "[temp][file].pdf");
                    }
                }
            }
            catch (Exception ex)
            {
                throw;
            }

            if (isreturnfile)
            {
                return "/Content/Quotation/" + refNo + ".pdf";
            }

            return filePath + "\\" + refNo + ".pdf";
        }

        public string getSrc(string input)
        {
            string pattern = "src=[\'|\"](.+?)[\'|\"]";
            System.Text.RegularExpressions.Regex reImg = new System.Text.RegularExpressions.Regex(pattern,
            System.Text.RegularExpressions.RegexOptions.IgnoreCase |

            System.Text.RegularExpressions.RegexOptions.Multiline);
            System.Text.RegularExpressions.Match mImg = reImg.Match(input);
            if (mImg.Success)
            {
                return mImg.Value.Replace("src=", "").Replace("\"", ""); ;
            }
            return string.Empty;
        }

        public ActionResult ClubQuote()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }

            var model = (from i in db.SZ_ClubQuote
                         join t2 in db.SZ_QuotationDetail on i.QuotationDetailsId equals t2.Id
                         select t2).ToList();

            return View(model);
        }

        public ActionResult AddClubQuotation()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }

            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_Terms.ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.termsList = listItems;


            var listCompItems = new List<SelectListItem>();
            listCompItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var compData = db.SZ_CompanyList.ToList();
            foreach (var term in compData)
            {
                listCompItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.listCompItems = listCompItems;

            var model = new SZ_Quotation();
            return View(model);
        }


        #region Project Screen
        public virtual List<SZ_QuotationProductModel> PrepareSZ_QuotationProductModel(Project_HoldTab_Result k, List<SZ_Inventory> inventoryData, IEnumerable<Product> productData, IEnumerable<SZ_ScientistStatus> scientistStatusData, IEnumerable<Customer> customerData, IEnumerable<GenericAttribute> genericData)
        {
            List<SZ_QuotationProductModel> obj = new List<SZ_QuotationProductModel>();
            SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
            objlist.QuoteDetailsId = k.QuoteDetailsId;

            objlist.CASNo = k.CASNo;
            objlist.CATNo = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
            objlist.CreatedDate = k.CreatedDate;
            objlist.ImagePath = k.ImagePath;
            objlist.IsUploadServer = k.IsUploadServer;
            objlist.LeadTime = k.LeadTime;
            objlist.Price = k.Price;
            objlist.ProductId = k.ProductId;
            objlist.ProductName = k.ProductName;
            objlist.QuoteId = k.QuoteId;
            objlist.ProjectType = k.ProjectType;
            objlist.ScientistCustomerId = k.ScientistCustomerId;
            objlist.ScientistRemark = k.ScientistRemark;
            objlist.DifficultyLevel = k.DifficultyLevel;
            objlist.DifficultyLevelText = "";
            foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
            {
                var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                int val = (int)r;
                if (Convert.ToString(val) == k.DifficultyLevel)
                {
                    objlist.DifficultyLevelText = text;
                }
            }
            if (k.ScientistCustomerId.HasValue)
            {
                string customerName = string.Empty;
                var customer = customerData.Where(x => x.Id == k.ScientistCustomerId && x.Deleted == false && x.Active == true).FirstOrDefault();
                if (customer != null)
                {
                    var genericAttr = genericData.Where(x => x.KeyGroup == "Customer" && x.EntityId == customer.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                }
                objlist.ScientistName = customerName;
            }
            objlist.RequiredQty = k.RequiredQty;
            objlist.ProjectStatus = k.ProjectStatus;
            objlist.IsOnHold = k.IsOnHold;
            if (k.ProjectStatus != null)
            {
                objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
            }
            objlist.ScientistStatus = k.ScientistStatus;
            objlist.EstimateCompleteDate = k.EstimateCompleteDate;
            objlist.BatchNo = k.BatchNo;
            objlist.AdditionalBatchNo = k.AdditionalBatchNo;
            if (k.AdditionalBatchNo.HasValue)
            {
                objlist.AdditionalBatchNoText = inventoryData.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
            }
            objlist.MoveToDispatch = k.MoveToDispatch;
            objlist.MoveToProject = k.MoveToProject;
            objlist.Remark = k.Remark;
            objlist.SrPo = k.SrPo;
            objlist.AdminScientistStatus = k.AdminScientistStatus;
            objlist.InvoiceNo = k.InvoiceNo;
            objlist.InvoiceRemark = k.InvoiceRemark;
            objlist.ReadyToDeliverScientistStatusId = scientistStatusData.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
            if (objlist.ProductId.HasValue)
            {
                objlist.ListBatchNo = new List<SelectListItem>();
                objlist.ListBatchNo.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                var proData = productData.Where(x => x.Id == objlist.ProductId && x.Published == true && x.Deleted == false).Count();
                var proBatchData = inventoryData.Where(x => x.ProductId == objlist.ProductId).ToList();
                if (proBatchData.Count > 0 && proData > 0)
                {
                    foreach (var term in proBatchData)
                    {
                        objlist.ListBatchNo.Add(new SelectListItem
                        {
                            Text = term.BatchNo + " (" + term.Qty + ")",
                            Value = term.Id.ToString(),
                            Selected = objlist.AdditionalBatchNo == term.Id ? true : false
                        });
                    }
                }
            }

            objlist.MoveProjectDate = k.MoveProjectDate;
            objlist.SubScientistName = k.SubScientistName;
            objlist.LastRaw = "<a href='javascript:void(0)' id='onhold_" + k.QuoteDetailsId + "' onclick='SetOnresume(\"" + k.QuoteDetailsId + "\")'>Resume</a>";
            objlist.CheckboxRaw = "<input type='checkbox' value='" + k.QuoteDetailsId + "' class='clsSaverow' />";
            if (k.EstimateCompleteDate.HasValue)
            {
                objlist.EstimateCompleteDateText = k.EstimateCompleteDate.Value.ToShortDateString();
            }
            if (k.MoveToScientistDate.HasValue)
            {
                objlist.MoveToScientistDateText = k.MoveToScientistDate.Value.ToShortDateString();
            }
            foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
            {
                var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                int val = (int)r;
                if (Convert.ToString(val) == k.ProjectType)
                {
                    objlist.ProjectType = text;
                }
            }
            objlist.Reason = k.Reason;
            obj.Add(objlist);
            return obj;
        }
        public ActionResult Project()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsProjectLogin)
            {
                return RedirectToAction("Index", "Home");
            }

            MemoryCacheManager objCache = new MemoryCacheManager();
            var listItems = new List<SelectListItem>();
            var subscilistItems = new List<SelectListItem>();
            var prostatusItem = new List<SelectListItem>();
            var protypeItem = new List<SelectListItem>();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });
            var subscienList = objCache.Get("cache.subscienList", () =>
            {
                return db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            });
            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            subscilistItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            prostatusItem.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            protypeItem.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });

            ViewBag.ScientistListItem = listItems;

            foreach (var term in subscienList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }
            ViewBag.SubScientistListItem = subscilistItems;

            foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
            {
                var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                int val = (int)r;
                prostatusItem.Add(new SelectListItem
                {
                    Text = text,
                    Value = val.ToString()
                });
            }
            ViewBag.fltprostatusItem = prostatusItem;

            foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
            {
                var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                int val = (int)r;
                protypeItem.Add(new SelectListItem
                {
                    Text = text,
                    Value = val.ToString()
                });
            }
            ViewBag.fltprotypeItem = protypeItem;

            var dbb = new synzealEntities();
            using (var connection = dbb.Database.Connection)
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = "EXEC [dbo].[Project_Count]";

                using (var reader = command.ExecuteReader())
                {
                    var AllCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList();
                    ViewBag.AllCount = AllCount[0];
                    reader.NextResult();

                    ViewBag.InHouseCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.SynthesisCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.DomesticCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.PurchaseCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();
                    ViewBag.NoActionCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();
                    ViewBag.InStockCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.ExportCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.QueryCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.HoldCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.SynthesisLogCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                }
            }
            return View(new List<SZ_QuotationModel>());
            //return View(list.OrderByDescending(x => x.MoveProjectDate).ToList());
        }

        [HttpPost]
        public ActionResult LoadProductHoldData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;
                var searchby = string.Empty;
                var searchbyvalue = string.Empty;
                if (Request.Form.GetValues("radiobuton") != null)
                {
                    searchby = Request.Form.GetValues("radiobuton")[0].ToString();
                }
                if (Request.Form.GetValues("searchbox") != null)
                {
                    searchbyvalue = Request.Form.GetValues("searchbox")[0].ToString().Trim();
                }
                MemoryCacheManager objCache = new MemoryCacheManager();
                var genericData = objCache.Get("cache.genericData", () =>
                {
                    return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
                });
                var listItems = new List<SelectListItem>();
                var scienList = objCache.Get("cache.GetScientistId", () =>
                {
                    return db.GetScientistId().ToList();
                });
                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.ToString()
                    });
                });

                ViewBag.ScientistList = listItems;
                var customerData = db.Customers.ToList();
                var list = new List<SZ_QuotationModel>();
                var holdData = db.Project_HoldTab().ToList();
                var pids = holdData.Select(x => x.ProductId).ToList();
                var inventoryData = db.SZ_Inventory.Where(x => pids.Contains(x.ProductId)).ToList();
                var productData = db.Products.Where(x => pids.Contains(x.Id)).ToList();
                var scientistStatusData = db.SZ_ScientistStatus.ToList();
                list = (from k in holdData
                        select new SZ_QuotationModel()
                        {

                            CompanyName = k.CompanyName,
                            QuoteId = k.QuoteId,
                            IsImageAttach = k.IsImageAttach,
                            Email = k.Email,
                            PONumber = k.PONumber,
                            Ref = k.Ref,
                            Remark = k.Remark,
                            MoveProjectDate = k.MoveProjectDate,
                            SZ_QuotationProductModel = PrepareSZ_QuotationProductModel(k, inventoryData, productData, scientistStatusData, customerData, genericData)
                        }).ToList();

                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    list = list.Where(m => (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                                        || (m.Ref != null && m.Ref.ToLower().Contains(searchValue))
                                        || (m.SZ_QuotationProductModel.Select(x => x.CATNo).FirstOrDefault() != null && m.SZ_QuotationProductModel.Select(x => x.CATNo.ToLower()).Contains(searchValue))
                                        || (m.SZ_QuotationProductModel.Select(x => x.CASNo).FirstOrDefault() != null && m.SZ_QuotationProductModel.Select(x => x.CASNo.ToLower()).Contains(searchValue))
                                        || (m.SZ_QuotationProductModel.Select(x => x.ProductName).FirstOrDefault() != null && m.SZ_QuotationProductModel.Select(x => x.ProductName.ToLower()).Contains(searchValue))
                                        || (m.SZ_QuotationProductModel.Select(x => x.ScientistName).FirstOrDefault() != null && m.SZ_QuotationProductModel.Select(x => x.ScientistName.ToLower()).Contains(searchValue))).ToList();
                }
                if (!string.IsNullOrEmpty(searchby) && !string.IsNullOrEmpty(searchbyvalue))
                {
                    searchbyvalue = searchbyvalue.ToLower();
                    if (searchby == "quoteid")
                    {
                        list = list.Where(x => x.Ref != null ? x.Ref.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "ponumber")
                    {
                        list = list.Where(x => x.PONumber != null ? (x.PONumber.ToLower().Contains(searchbyvalue)) : false).ToList();
                    }
                    if (searchby == "company")
                    {
                        list = list.Where(x => x.CompanyName != null ? x.CompanyName.ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "productname")
                    {
                        list = list.Where(x => x.SZ_QuotationProductModel.Select(z => z.ProductName).FirstOrDefault().ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cas")
                    {
                        list = list.Where(x => x.SZ_QuotationProductModel.Select(z => z.CASNo).FirstOrDefault() != null ? x.SZ_QuotationProductModel.Select(z => z.CASNo).FirstOrDefault().ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cat")
                    {
                        list = list.Where(x => x.SZ_QuotationProductModel.Select(z => z.CATNo).FirstOrDefault() != null ? x.SZ_QuotationProductModel.Select(z => z.CATNo).FirstOrDefault().ToLower().Contains(searchbyvalue) : false).ToList();
                    }
                    if (searchby == "cas")
                    {
                        list = list.Where(x => x.SZ_QuotationProductModel.Select(z => z.CASNo).FirstOrDefault().ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "cat")
                    {
                        list = list.Where(x => x.SZ_QuotationProductModel.Select(z => z.CATNo).FirstOrDefault().ToLower().Contains(searchbyvalue)).ToList();
                    }
                    if (searchby == "batchno")
                    {
                        list = list.Where(x => x.SZ_QuotationProductModel.Select(z => z.BatchNo).FirstOrDefault().ToLower().Contains(searchbyvalue)).ToList();
                    }
                }
                //total number of rows count   
                recordsTotal = list.Count();
                //Paging   
                var data = list.Skip(skip).Take(pageSize).ToList();
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        #endregion

        public ActionResult QuoteDailyReport()
        {
            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("quote")).ToList();
            foreach (var term in scienList)
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.listCompItems = listItems;
            return View();
        }

        public ActionResult POReport()
        {
            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var scienList = db.SZ_CompanyList.OrderBy(x => x.Name).ToList();
            foreach (var term in scienList)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.listCompItems = listItems;
            return View();
        }

        public ActionResult NewCompanyReport()
        {
            return View();
        }

        public ActionResult FollowupReport()
        {
            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var scienList = db.SZ_CompanyList.OrderBy(x => x.Name).ToList();
            foreach (var term in scienList)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.listCompItems = listItems;
            return View();
        }
        public SZ_QuotationModel PrepareQuotationModel(SZ_Quotation i)
        {
            var list = new SZ_QuotationModel();
            //foreach (var i in model)
            //{
            SZ_QuotationModel subList = new SZ_QuotationModel();
            subList.QuoteId = i.Id;
            subList.IsImageAttach = i.IsImageAttach;
            subList.CompanyName = i.SZ_CompanyList.Name;
            subList.Email = i.EmailAddress;
            subList.PONumber = i.PONo;
            subList.Ref = i.Ref;
            subList.Remark = i.Remark;
            subList.SZ_QuotationProductModel = new List<SZ_QuotationProductModel>();
            var proData = db.SZ_QuotationDetail.Where(x => x.QuoteId == i.Id).ToList();
            foreach (var k in proData)
            {
                SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
                objlist.QuoteDetailsId = k.Id;
                objlist.CASNo = k.CASNo;
                objlist.CATNo = k.CATNo;
                objlist.CreatedDate = k.CreatedDate;
                objlist.ImagePath = k.ImagePath;
                objlist.IsUploadServer = k.IsUploadServer;
                objlist.LeadTime = k.LeadTime;
                objlist.Price = k.Price;
                objlist.ProductId = k.ProductId;
                objlist.ProductName = k.ProductName;
                objlist.QuoteId = k.QuoteId;
                objlist.ProjectType = k.ProjectType;
                objlist.ScientistCustomerId = k.ScientistCustomerId;
                objlist.RequiredQty = k.RequiredQty;
                objlist.ProjectStatus = k.ProjectStatus;
                objlist.ScientistStatus = k.ScientistStatus;
                objlist.BatchCode1 = k.BatchCode1;
                objlist.BatchCode2 = k.BatchCode2;
                objlist.Qty1 = k.Qty1;
                objlist.Qty2 = k.Qty2;
                objlist.EstimateCompleteDate = k.EstimateCompleteDate;
                objlist.BatchNo = k.BatchNo;
                objlist.AdditionalBatchNo = k.AdditionalBatchNo;
                objlist.MoveToDispatch = k.MoveToDispatch;
                objlist.MoveToProject = k.MoveToProject;
                objlist.Remark = k.Remark;
                objlist.SrPo = k.SrPo;
                objlist.AdminScientistStatus = k.AdminScientistStatus;
                objlist.InvoiceNo = k.InvoiceNo;
                objlist.InvoiceRemark = k.InvoiceRemark;
                if (k.ProjectStatus != null)
                {
                    objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                }
                subList.SZ_QuotationProductModel.Add(objlist);
            }
            return list;
        }

        public List<SZ_QuotationModel> PrepareQuotationModel(List<SZ_Quotation> model)
        {
            var list = new List<SZ_QuotationModel>();
            var quoteIds = model.Select(x => x.Id).ToList();
            var quotedetailsData = db.SZ_QuotationDetail.Where(x => quoteIds.Contains(x.QuoteId)).ToList();
            foreach (var i in model)
            {
                SZ_QuotationModel subList = new SZ_QuotationModel();
                subList.QuoteId = i.Id;
                subList.IsImageAttach = i.IsImageAttach;
                subList.CompanyName = i.SZ_CompanyList.Name;
                subList.Email = i.EmailAddress;
                subList.PONumber = i.PONo;
                subList.Ref = i.Ref;
                subList.Remark = i.Remark;
                subList.SZ_QuotationProductModel = new List<SZ_QuotationProductModel>();
                // var proData = db.SZ_QuotationDetail.Where(x => x.QuoteId == i.Id).ToList();
                var proData = quotedetailsData.Where(x => x.QuoteId == i.Id).ToList();
                foreach (var k in proData)
                {
                    SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
                    objlist.QuoteDetailsId = k.Id;
                    objlist.CASNo = k.CASNo;
                    objlist.CATNo = k.CATNo;
                    objlist.CreatedDate = k.CreatedDate;
                    objlist.ImagePath = k.ImagePath;
                    objlist.IsUploadServer = k.IsUploadServer;
                    objlist.LeadTime = k.LeadTime;
                    objlist.Price = k.Price;
                    objlist.ProductId = k.ProductId;
                    objlist.ProductName = k.ProductName;
                    objlist.QuoteId = k.QuoteId;
                    objlist.ProjectType = k.ProjectType;
                    objlist.ScientistCustomerId = k.ScientistCustomerId;
                    objlist.RequiredQty = k.RequiredQty;
                    objlist.ProjectStatus = k.ProjectStatus;
                    objlist.ScientistStatus = k.ScientistStatus;
                    objlist.BatchCode1 = k.BatchCode1;
                    objlist.BatchCode2 = k.BatchCode2;
                    objlist.Qty1 = k.Qty1;
                    objlist.Qty2 = k.Qty2;
                    objlist.EstimateCompleteDate = k.EstimateCompleteDate;
                    objlist.BatchNo = k.BatchNo;
                    objlist.AdditionalBatchNo = k.AdditionalBatchNo;
                    objlist.MoveToDispatch = k.MoveToDispatch;
                    objlist.MoveToProject = k.MoveToProject;
                    objlist.Remark = k.Remark;
                    objlist.SrPo = k.SrPo;
                    objlist.AdminScientistStatus = k.AdminScientistStatus;
                    objlist.InvoiceNo = k.InvoiceNo;
                    objlist.InvoiceRemark = k.InvoiceRemark;
                    if (k.ProjectStatus != null)
                    {
                        objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                    }
                    subList.SZ_QuotationProductModel.Add(objlist);
                }
                list.Add(subList);
            }
            return list;
        }


        #region Scientist
        public ActionResult ScientistNewForm()
        {
            var listItems = new List<SelectListItem>();
            var subscientistlistItems = new List<SelectListItem>();
            var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("scientist")).ToList();
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
                subscientistlistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            });
            ViewBag.tlItems = listItems;
            var subscienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            subscienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }

                subscientistlistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            });

            ViewBag.scientistItems = subscientistlistItems;
            var dbb = new synzealEntities();
            using (var connection = dbb.Database.Connection)
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = "EXEC [dbo].[Scientist_Count] " + SessionCookieManagement.UserId + "," + Convert.ToString(SessionCookieManagement.UserId);

                using (var reader = command.ExecuteReader())
                {
                    var NoActionCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList();
                    ViewBag.NoActionCount = NoActionCount[0];
                    reader.NextResult();

                    ViewBag.All = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.Scaleup = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.Hold = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.Cancelled = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();
                    ViewBag.SynthesisLog = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];
                }
            }

            return View();
        }

        [HttpPost]
        public ActionResult LoadNoActionScientistData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var quotationDetailsdata = db.SZ_QuotationDetail.AsQueryable();
                // Getting all Customer data  
                string subscientistname = Convert.ToString(SessionCookieManagement.UserId);

                MemoryCacheManager objCache = new MemoryCacheManager();
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var model = (from i in db.SZ_Quotation
                             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                             where t2.ScientistCustomerId == SessionCookieManagement.UserId
                             || t2.SubScientistName == subscientistname
                             //&& (t2.IsOnHold == false || t2.IsOnHold == null)
                             orderby t2.MoveToScientistDate descending
                             select t2).AsQueryable();

                var quotedetailIds = model.Select(x => x.Id).ToList();

                var formIdList = db.SZ_QuoteDetails_Form.Where(x => quotedetailIds.Contains(x.QuoteDetailsId)).Select(x => x.FormId).ToArray();
                var quotedetailsformList = db.SZ_QuoteDetailForm.Where(x => formIdList.Contains(x.Id)).ToList();
                var scientistStatusList = db.SZ_ScientistStatus.ToList();
                var proIds = model.Select(x => x.ProductId).ToList();
                var szInventory = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
                var productdatas = db.Products.Where(x => proIds.Contains(x.Id)).ToList();
                var listItems = new List<SelectListItem>();
                var subscientistlistItems = new List<SelectListItem>();
                var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("scientist")).ToList();

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                    subscientistlistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                });
                ViewBag.tlItems = listItems;
                var subscienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();

                subscienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscientistlistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                });

                ViewBag.scientistItems = subscientistlistItems;
                var listCompItems = new List<SelectListItem>();
                listCompItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                var compData = scientistStatusList;

                compData.ForEach(term =>
                {
                    listCompItems.Add(new SelectListItem
                    {
                        Text = term.Name,
                        Value = term.Id.ToString()
                    });
                });

                ViewBag.listScientistStatus = listCompItems;
                var loop = 0;
                var list = new List<ScientistDetailModel>();
                model.ForEach(k =>
                {
                    loop += 1;
                    var objModel = new ScientistDetailModel();
                    objModel.FirstRow = "<input type='checkbox' class='clssaveall' value='" + k.Id + "'>";
                    objModel.SrNo = loop;
                    objModel.QuoteId = k.QuoteId;
                    objModel.QuoteDetailsId = k.Id;
                    objModel.CASNo = k.CASNo;
                    objModel.CATNo = k.CATNo;
                    objModel.CATText = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    objModel.ProductId = k.ProductId;
                    objModel.ProductName = k.ProductName;
                    objModel.SubScientistName = k.SubScientistName;
                    objModel.SubScientistNameText = "<select subscientistname='" + k.SubScientistName + "' id='subScientistName_" + k.Id + "' quotedetailsid='" + k.Id + "'  name='subScientistName_" + k.Id + "' class='scientist'><option value=''>--Select--</option>";
                    if (subscientistlistItems.Count > 0)
                    {
                        int probatchcount = 1;
                        subscientistlistItems.ForEach(r =>
                        {
                            string selected = "";
                            if (k.SubScientistName == r.Value)
                            {
                                selected = " selected ";
                            }
                            objModel.SubScientistNameText += "<option value='" + r.Value.ToString() + "' " + selected + ">" + r.Text + "</option>";
                            probatchcount += 1;
                        });
                    }
                    objModel.SubScientistNameText += "</select>";
                    objModel.Chemist = k.Chemist;
                    objModel.Qty = k.RequiredQty;
                    objModel.ChemistText = "<input id='chemist_" + 151372 + "' type='text' style='width: 80px;' readonly='' value=''>";
                    objModel.LeadTime = k.LeadTime;
                    objModel.Status = k.ScientistStatus;
                    objModel.StatusText = "<select  id='scientistStatus_" + k.Id + "' quotedetailsid='" + k.Id + "'  name='scientistStatus_" + k.Id + "' class='form-control scientistStatusddl'><option value=''>--Select--</option>";
                    if (listCompItems.Count > 0)
                    {
                        int probatchcount = 1;
                        listCompItems.ForEach(r =>
                        {
                            string selected = "";
                            if (Convert.ToString(k.ScientistStatus) == Convert.ToString(r.Value))
                            {
                                selected = " selected ";
                            }
                            objModel.StatusText += "<option value='" + r.Value.ToString() + "' " + selected + ">" + r.Text + "</option>";
                            probatchcount += 1;
                        });
                    }
                    objModel.StatusText += "</select>";
                    objModel.Explaination = "<i class='fa fa-pencil' onclick='explainationGenerate(" + k.Id + ")' ></i>";
                    objModel.MoveToScientistDate = k.MoveToScientistDate;
                    objModel.Remark = k.Remark;
                    objModel.ProjectType = k.ProjectType;
                    if (k.MoveToScientistDate.HasValue)
                    {
                        objModel.AssignDate = k.MoveToScientistDate.Value.ToShortDateString();
                    }
                    if(k.EstimateCompleteDate.HasValue)
                    {
                        objModel.EstimateCompDate = "<input id='esticompleteDate_" + k.Id + "' type='text' data-value='" + k.EstimateCompleteDate.Value.ToShortDateString() + "' class='datepicker' style='width: 80px' > ";
                    }

                    if (k.ProductId.HasValue)
                    {
                        string selected = string.Empty;
                        objModel.AdditionalBatchNoText = "<select id='additionalBatch_" + k.ProductId + "' class='addbatch'><option value=''>--Select--</option>";
                        var proBatchData = szInventory.Where(x => x.ProductId == k.ProductId).OrderBy(x => x.Id).ToList();
                        if (proBatchData.Count > 0)
                        {
                            int probatchcount = 1;
                            proBatchData.ForEach(r =>
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }

                                if (k.AdditionalBatchNo.HasValue && k.AdditionalBatchNo.Value == r.Id)
                                {
                                    selected = " selected ";
                                }
                                objModel.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "' " + selected + ">" + text + "</option>";
                                probatchcount += 1;
                            });
                        }
                        objModel.AdditionalBatchNoText += "</select>";
                        objModel.APIName = productdatas.Where(x => x.Id == k.ProductId.Value).Select(x => x.MainCatName).FirstOrDefault();
                    }
                    if (!string.IsNullOrEmpty(k.DifficultyLevel))
                    {
                        EnumList.DifficultyLevel oldfoo = (EnumList.DifficultyLevel)Enum.ToObject(typeof(EnumList.DifficultyLevel), Convert.ToInt32(k.DifficultyLevel));
                        objModel.DifficultyLevel = Common.GetDescription<EnumList.DifficultyLevel>(oldfoo);
                    }
                    list.Add(objModel);

                });
                list = list.OrderByDescending(x => x.MoveToScientistDate).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    //model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                    //                    || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                    //                    || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                    //                    || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                    //                    || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                    //                    || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                    //                    || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                    //                    || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                    //                    || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                    //                    || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                    //                    || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                    //                    || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                    //                    || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                    //                    || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                    //                    || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                    //                    || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                    //                    || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                    //                    || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                    //                    || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = list.Count();
                //Paging   
                var data = list.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }

        [HttpPost]
        public ActionResult LoadAllScientistData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                var sciname = Request.Form.GetValues("sciname").FirstOrDefault();
                
                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var quotationDetailsdata = db.SZ_QuotationDetail.AsQueryable();
                // Getting all Customer data  
                string subscientistname = Convert.ToString(SessionCookieManagement.UserId);

                MemoryCacheManager objCache = new MemoryCacheManager();
                var ReadyToDeliverScientistStatusId = objCache.Get("cache.ReadyToDeliverScientistStatusId", () =>
                {
                    return db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
                });
                var model = (from i in db.SZ_Quotation
                             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                             where (t2.ScientistCustomerId == SessionCookieManagement.UserId
                             || t2.SubScientistName == subscientistname)
                             && !string.IsNullOrEmpty(t2.SubScientistName)
                             && (ReadyToDeliverScientistStatusId != t2.ScientistStatus || t2.ScientistStatus == null)
                             && t2.ProjectType != inhouseProjectType
                             && (t2.IsOnHold == false || t2.IsOnHold == null)
                             && (t2.IsHoldManually == false || t2.IsHoldManually == null)
                             && string.IsNullOrEmpty(t2.TrackingNo)
                             orderby t2.MoveToScientistDate descending
                             select t2).AsQueryable();

                if(!string.IsNullOrEmpty(sciname))
                {
                    model = model.Where(x=>x.SubScientistName == sciname).AsQueryable();
                }

                var quotedetailIds = model.Select(x => x.Id).ToList();
                var formIdList = db.SZ_QuoteDetails_Form.Where(x => quotedetailIds.Contains(x.QuoteDetailsId)).Select(x => x.FormId).ToArray();
                var quotedetailsformList = db.SZ_QuoteDetailForm.Where(x => formIdList.Contains(x.Id)).ToList();
                var scientistStatusList = db.SZ_ScientistStatus.ToList();
                var proIds = model.Select(x => x.ProductId).ToList();
                var szInventory = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
                var productdatas = db.Products.Where(x => proIds.Contains(x.Id)).ToList();
                var listItems = new List<SelectListItem>();
                var subscientistlistItems = new List<SelectListItem>();
                var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("scientist")).ToList();

                scienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                    subscientistlistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                });
                ViewBag.tlItems = listItems;
                var subscienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();

                subscienList.ForEach(term =>
                {
                    string customerName = string.Empty;
                    var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }

                    subscientistlistItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                });

                ViewBag.scientistItems = subscientistlistItems;
                var listCompItems = new List<SelectListItem>();
                listCompItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                var compData = scientistStatusList;

                compData.ForEach(term =>
                {
                    listCompItems.Add(new SelectListItem
                    {
                        Text = term.Name,
                        Value = term.Id.ToString()
                    });
                });

                ViewBag.listScientistStatus = listCompItems;
                var loop = 0;
                var list = new List<ScientistDetailModel>();
                model.ForEach(k =>
                {
                    loop += 1;
                    var objModel = new ScientistDetailModel();
                    objModel.FirstRow = "<input type='checkbox' class='clssaveall' value='" + k.Id + "'>";
                    objModel.SrNo = loop;
                    objModel.QuoteId = k.QuoteId;
                    objModel.QuoteDetailsId = k.Id;
                    objModel.CASNo = k.CASNo;
                    objModel.CATNo = k.CATNo;
                    objModel.CATText = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                    objModel.ProductId = k.ProductId;
                    objModel.ProductName = k.ProductName;
                    objModel.SubScientistName = k.SubScientistName;
                    objModel.SubScientistNameText = "<select subscientistname='" + k.SubScientistName + "' id='subScientistName_" + k.Id + "' quotedetailsid='" + k.Id + "'  name='subScientistName_" + k.Id + "' class='scientist'><option value=''>--Select--</option>";
                    if (subscientistlistItems.Count > 0)
                    {
                        int probatchcount = 1;
                        subscientistlistItems.ForEach(r =>
                        {
                            string selected = "";
                            if (k.SubScientistName == r.Value)
                            {
                                selected = " selected ";
                            }
                            objModel.SubScientistNameText += "<option value='" + r.Value.ToString() + "' " + selected + ">" + r.Text + "</option>";
                            probatchcount += 1;
                        });
                    }
                    objModel.SubScientistNameText += "</select>";
                    objModel.Chemist = k.Chemist;
                    objModel.Qty = k.RequiredQty;
                    objModel.ChemistText = "<input id='chemist_" + 151372 + "' type='text' style='width: 80px;' readonly='' value=''>";
                    objModel.LeadTime = k.LeadTime;

                    objModel.ActivityStatus = k.ReviewSciStatus;
                    objModel.ActivityStatusText = "<select  id='reviewscistatus_" + k.Id + "' data-value='" + k.ReviewSciStatus + "'  name='reviewscistatus_" + k.Id + "' class='clsreviewscistatus'><option value=''>--Select--</option>";

                    foreach (EnumList.ScientistReviewStatusDDL r in Enum.GetValues(typeof(EnumList.ScientistReviewStatusDDL)))
                    {
                        var item = Enum.GetName(typeof(EnumList.ScientistReviewStatusDDL), r);
                        var test = r.ToString();
                        string text = SZ_Helper.GetEnumDescription((EnumList.ScientistReviewStatusDDL)(int)r);
                        int val = (int)r;
                        string selected = "";
                        if (k.ReviewSciStatus == Convert.ToString(val))
                        {
                            selected = " selected ";
                        }
                        objModel.ActivityStatusText += "<option value='" + val.ToString() + "' " + selected + ">" + text + "</option>";
                    }
                    objModel.ActivityStatusText += "</select>";

                    objModel.Status = k.ScientistStatus;
                    objModel.StatusText = "<select  id='scientistStatus_" + k.Id + "' quotedetailsid='" + k.Id + "'  name='scientistStatus_" + k.Id + "' class='form-control scientistStatusddl'><option value=''>--Select--</option>";
                    if (listCompItems.Count > 0)
                    {
                        int probatchcount = 1;
                        listCompItems.ForEach(r =>
                        {
                            string selected = "";
                            if (Convert.ToString(k.ScientistStatus) == Convert.ToString(r.Value))
                            {
                                selected = " selected ";
                            }
                            objModel.StatusText += "<option value='" + r.Value.ToString() + "' " + selected + ">" + r.Text + "</option>";
                            probatchcount += 1;
                        });
                    }
                    objModel.StatusText += "</select>";
                    objModel.Explaination = "<i class='fa fa-pencil' onclick='explainationGenerate(" + k.Id + ")' ></i>";
                    objModel.MoveToScientistDate = k.MoveToScientistDate;
                    objModel.Remark = k.Remark;
                    objModel.ProjectType = k.ProjectType;
                    if (k.MoveToScientistDate.HasValue)
                    {
                        objModel.AssignDate = k.MoveToScientistDate.Value.ToShortDateString();
                    }
                    if (k.EstimateCompleteDate.HasValue)
                    {
                        objModel.EstimateCompDate = "<input id='esticompleteDate_" + k.Id + "' type='text' data-value='" + k.EstimateCompleteDate.Value.ToShortDateString() + "' class='datepicker' style='width: 80px' > ";
                    }

                    if (k.ProductId.HasValue)
                    {
                        string selected = string.Empty;
                        objModel.AdditionalBatchNoText = "<select id='additionalBatch_" + k.ProductId + "' class='addbatch'><option value=''>--Select--</option>";
                        var proBatchData = szInventory.Where(x => x.ProductId == k.ProductId).OrderBy(x => x.Id).ToList();
                        if (proBatchData.Count > 0)
                        {
                            int probatchcount = 1;
                            proBatchData.ForEach(r =>
                            {
                                string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                                if (r.IsApproved == false)
                                {
                                    text = "*" + text;
                                }

                                if (k.AdditionalBatchNo.HasValue && k.AdditionalBatchNo.Value == r.Id)
                                {
                                    selected = " selected ";
                                }
                                objModel.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "' " + selected + ">" + text + "</option>";
                                probatchcount += 1;
                            });
                        }
                        objModel.AdditionalBatchNoText += "</select>";
                        objModel.APIName = productdatas.Where(x => x.Id == k.ProductId.Value).Select(x => x.MainCatName).FirstOrDefault();
                    }
                    if (!string.IsNullOrEmpty(k.DifficultyLevel))
                    {
                        EnumList.DifficultyLevel oldfoo = (EnumList.DifficultyLevel)Enum.ToObject(typeof(EnumList.DifficultyLevel), Convert.ToInt32(k.DifficultyLevel));
                        objModel.DifficultyLevel = Common.GetDescription<EnumList.DifficultyLevel>(oldfoo);
                    }
                    list.Add(objModel);

                });
                list = list.OrderByDescending(x => x.MoveToScientistDate).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    //model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                    //                    || (m.SelectedSubScientistName != null && m.SelectedSubScientistName.ToLower().Contains(searchValue))
                    //                    || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                    //                    || (m.PONumber != null && m.PONumber.ToLower().Contains(searchValue))
                    //                    || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                    //                    || (m.Price != null && m.Price.ToLower().Contains(searchValue))
                    //                    || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                    //                    || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                    //                    || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(searchValue))
                    //                    || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                    //                    || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                    //                    || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                    //                    || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(searchValue))
                    //                    || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                    //                    || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                    //                    || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))
                    //                    || (m.Remark != null && m.Remark.ToLower().Contains(searchValue))
                    //                    || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(searchValue))
                    //                    || (m.LeadTime != null && m.LeadTime.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = list.Count();
                //Paging   
                var data = list.Skip(skip).Take(pageSize).ToList();
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                string errortext = "Line: " + ex.LineNumber();
                System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                throw ex;
            }
        }
        

        public ActionResult ScientistForm()
        {
            if (!SessionCookieManagement.IsScientist && !SessionCookieManagement.IsSubScientist)
            {
                return RedirectToAction("Index", "Home");
            }

            MemoryCacheManager objCache = new MemoryCacheManager();

            var categoryData = objCache.Get("cache.categoryData", () =>
            {
                return db.Categories.ToList();
            });
            var productCategoryData = objCache.Get("cache.productCategoryData", () =>
            {
                return db.Product_Category_Mapping.ToList();
            });
            //var categoryData = db.Categories.ToList();
            //var productCategoryData = db.Product_Category_Mapping.ToList();
            string subscientistname = Convert.ToString(SessionCookieManagement.UserId);
            var model = (from i in db.SZ_Quotation
                         join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                         where t2.ScientistCustomerId == SessionCookieManagement.UserId
                         || t2.SubScientistName == subscientistname
                         //&& (t2.IsOnHold == false || t2.IsOnHold == null)
                         orderby t2.MoveToScientistDate descending
                         select t2).AsQueryable();

            var quotedetailIds = model.Select(x => x.Id).ToList();

            var formIdList = db.SZ_QuoteDetails_Form.Where(x => quotedetailIds.Contains(x.QuoteDetailsId)).Select(x => x.FormId).ToArray();
            var quotedetailsformList = db.SZ_QuoteDetailForm.Where(x => formIdList.Contains(x.Id)).ToList();
            var scientistStatusList = db.SZ_ScientistStatus.ToList();
            var ReadyToDeliverScientistStatusId = scientistStatusList.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
            var proIds = model.Select(x => x.ProductId).ToList();
            var szInventory = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
            var productdatas = db.Products.Where(x => proIds.Contains(x.Id)).ToList();
            var listItems = new List<SelectListItem>();
            var subscientistlistItems = new List<SelectListItem>();
            var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("scientist")).ToList();
            //foreach (var term in scienList)
            //{
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
                subscientistlistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            });
            //}
            ViewBag.tlItems = listItems;
            var subscienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            //foreach (var term in subscienList)
            //{
            subscienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }

                subscientistlistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            });
            //}

            ViewBag.scientistItems = subscientistlistItems;

            var list = new List<SZ_QuotationModel>();
            model.ForEach(k =>
            {
                //foreach (var k in model)
                //{
                SZ_QuotationModel subList = new SZ_QuotationModel();
                subList.QuoteId = k.QuoteId;
                subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                subList.CompanyName = k.SZ_Quotation.CompanyName;
                subList.Email = k.SZ_Quotation.EmailAddress;
                subList.PONumber = k.SZ_Quotation.PONo;
                subList.Ref = k.SZ_Quotation.Ref;
                subList.Remark = k.SZ_Quotation.Remark;
                subList.MoveToScientistDate = k.MoveToScientistDate;
                subList.SZ_QuotationProductModel = new List<SZ_QuotationProductModel>();

                SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
                objlist.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                objlist.ScientistFormCount = quotedetailsformList.Where(x => x.QuotationDetailsId == k.Id).Count();
                objlist.QuoteDetailsId = k.Id;
                objlist.IsHoldManually = k.IsHoldManually;
                objlist.CASNo = k.CASNo;
                objlist.CATNo = k.CATNo;
                objlist.CATText = "<a href='https://synzeal.com/search?q=" + k.CATNo + "' target='_blank'>" + k.CATNo + "</a>";
                objlist.MoveToScientistDate = k.MoveToScientistDate;
                objlist.CreatedDate = k.CreatedDate;
                objlist.ImagePath = k.ImagePath;
                objlist.IsUploadServer = k.IsUploadServer;
                objlist.LeadTime = k.LeadTime;
                objlist.Price = k.Price;
                objlist.ProductId = k.ProductId;
                objlist.ProductName = k.ProductName;
                objlist.QuoteId = k.QuoteId;
                objlist.ProjectType = k.ProjectType;
                objlist.ScientistCustomerId = k.ScientistCustomerId;
                objlist.RequiredQty = k.RequiredQty;
                objlist.IntRequiredQty = 0;
                if (!string.IsNullOrEmpty(k.RequiredQty))
                {
                    try
                    {
                        objlist.IntRequiredQty = Convert.ToInt32(k.RequiredQty);
                    }
                    catch (Exception)
                    {
                        objlist.IntRequiredQty = 0;
                    }
                }
                objlist.ProjectStatus = k.ProjectStatus;
                objlist.ScientistStatus = k.ScientistStatus;
                objlist.BatchCode1 = k.BatchCode1;
                objlist.BatchCode2 = k.BatchCode2;
                objlist.Qty1 = k.Qty1;
                objlist.Qty2 = k.Qty2;
                objlist.BatchNo = k.BatchNo;
                objlist.AdditionalBatchNo = k.AdditionalBatchNo;
                objlist.MoveToDispatch = k.MoveToDispatch;
                objlist.MoveToProject = k.MoveToProject;
                objlist.Remark = k.Remark;
                objlist.IsSynthesisLog = k.IsSynthesisLog;
                objlist.EstimateCompleteDate = k.EstimateCompleteDate;
                if (k.ProjectStatus != null)
                {
                    objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                }
                objlist.ScientistStatustext = scientistStatusList.Where(x => x.Id == k.ScientistStatus).Select(x => x.Name).FirstOrDefault();
                objlist.SubScientistName = k.SubScientistName;
                if (k.ProductId.HasValue)
                {
                    string selected = string.Empty;
                    objlist.AdditionalBatchNoText = "<select id='additionalBatch_" + k.ProductId + "' class='addbatch'><option value=''>--Select--</option>";
                    var proBatchData = szInventory.Where(x => x.ProductId == k.ProductId).OrderBy(x => x.Id).ToList();
                    if (proBatchData.Count > 0)
                    {
                        int probatchcount = 1;
                        proBatchData.ForEach(r =>
                        {
                            //foreach (var r in proBatchData)
                            //{
                            string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            if (r.IsApproved == false)
                            {
                                text = "*" + text;
                            }

                            if (k.AdditionalBatchNo.HasValue && k.AdditionalBatchNo.Value == r.Id)
                            {
                                selected = " selected ";
                            }
                            objlist.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' data-value='" + r.BatchNo + "' " + selected + ">" + text + "</option>";
                            probatchcount += 1;
                            //}
                        });
                    }
                    objlist.AdditionalBatchNoText += "</select>";
                    objlist.APIName = productdatas.Where(x => x.Id == k.ProductId.Value).Select(x => x.MainCatName).FirstOrDefault();
                    //objlist.APIName = GetApiNameOfProduct(k.ProductId.Value, categoryData, productCategoryData);
                }
                objlist.Reason = k.Reason;
                objlist.IsOnHold = k.IsOnHold;
                objlist.TrackingNo = k.TrackingNo;
                objlist.QueryText = k.QueryText;
                objlist.QueryDate = k.QueryDate;
                objlist.IsAssignProjectQuery = k.IsAssignProjectQuery;
                objlist.IsAssignScientistQuery = k.IsAssignScientistQuery;
                objlist.IsQueryResolved = k.IsQueryResolved;
                objlist.IsPriority = k.IsPriority;
                objlist.Chemist = k.Chemist;

                objlist.ReviewSciStatus = k.ReviewSciStatus;
                if (!string.IsNullOrEmpty(k.DifficultyLevel))
                {
                    EnumList.DifficultyLevel oldfoo = (EnumList.DifficultyLevel)Enum.ToObject(typeof(EnumList.DifficultyLevel), Convert.ToInt32(k.DifficultyLevel));
                    objlist.DifficultyLevel = Common.GetDescription<EnumList.DifficultyLevel>(oldfoo);
                }
                subList.SZ_QuotationProductModel.Add(objlist);
                list.Add(subList);
                //}
            });

            var listCompItems = new List<SelectListItem>();
            listCompItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var compData = scientistStatusList;

            compData.ForEach(term =>
            {
                //foreach (var term in compData)
                //{
                listCompItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
                //}
            });

            ViewBag.listScientistStatus = listCompItems;
            //string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
            //ViewBag.NoActionCount = list.
            //    Select(z => z.SZ_QuotationProductModel.Where(x => string.IsNullOrEmpty(x.SubScientistName)
            //    && x.ReadyToDeliverScientistStatusId != x.ScientistStatus
            //    && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null)
            //    && string.IsNullOrEmpty(x.TrackingNo)).Count()).Sum(x => x);

            //ViewBag.All = list.
            //    Select(z => z.SZ_QuotationProductModel.Where(x => !string.IsNullOrEmpty(x.SubScientistName) && x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType != inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null) && (x.IsHoldManually == false || x.IsHoldManually == null) && string.IsNullOrEmpty(x.TrackingNo)).Count()).Sum(x => x);

            ////QcApproval
            ////ViewBag.Completed = list.
            ////    Select(z => z.SZ_QuotationProductModel.Where(x => x.ScientistStatus == x.ReadyToDeliverScientistStatusId && (x.IsOnHold == false || x.IsOnHold == null)).Count()).Sum(x => x);

            //ViewBag.Scaleup = list.
            //    Select(z => z.SZ_QuotationProductModel.Where(x => x.ReadyToDeliverScientistStatusId != x.ScientistStatus && x.ProjectType == inhouseProjectType && (x.IsOnHold == false || x.IsOnHold == null)).Count()).Sum(x => x);

            //ViewBag.Hold = list.
            //    Select(z => z.SZ_QuotationProductModel.Where(x => x.IsHoldManually == true).Count()).Sum(x => x);

            //ViewBag.Cancelled = list.
            //    Select(z => z.SZ_QuotationProductModel.Where(x => x.IsOnHold == true).Count()).Sum(x => x);

            //ViewBag.Query = list.
            //    Select(z => z.SZ_QuotationProductModel.Where(x => !string.IsNullOrEmpty(x.QueryText)).Count()).Sum(x => x);

            //ViewBag.SynthesisLog = list.
            //    Select(z => z.SZ_QuotationProductModel.Where(x => x.IsSynthesisLog == true && string.IsNullOrEmpty(z.PONumber)).Count()).Sum(x => x);


            var dbb = new synzealEntities();
            using (var connection = dbb.Database.Connection)
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = "EXEC [dbo].[Scientist_Count] " + SessionCookieManagement.UserId + "," + Convert.ToString(SessionCookieManagement.UserId);

                using (var reader = command.ExecuteReader())
                {
                    var NoActionCount = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList();
                    ViewBag.NoActionCount = NoActionCount[0];
                    reader.NextResult();

                    ViewBag.All = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.All = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.All = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();

                    ViewBag.Cancelled = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];

                    reader.NextResult();
                    ViewBag.SynthesisLog = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)dbb)
                            .ObjectContext
                            .Translate<int>(reader)
                            .ToList()[0];
                }
            }

            return View(list.OrderByDescending(x => x.MoveToScientistDate).ToList());
        }
        #endregion

        #region Company & Courier

        public ActionResult CourierList()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsMiniAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_Courier.ToList();
            return View(model);
        }

        public ActionResult AddCourier(int id = 0)
        {
            var model = db.SZ_Courier.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new SZ_Courier();

            return View(model);
        }
        [HttpPost]
        public JsonResult AddCourierData(string name, int id)
        {
            try
            {
                if (id == 0)
                {
                    SZ_Courier objComp = new SZ_Courier();
                    objComp.Name = name;
                    db.SZ_Courier.Add(objComp);
                    db.SaveChanges();
                }
                else
                {
                    var comp = db.SZ_Courier.Where(x => x.Id == id).FirstOrDefault();
                    if (comp != null)
                    {
                        comp.Name = name;
                        db.Entry(comp).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ScientistStatusList()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_ScientistStatus.ToList();
            return View(model);
        }

        public ActionResult AddScientistStatus(int id = 0)
        {
            var model = db.SZ_ScientistStatus.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new SZ_ScientistStatus();

            return View(model);
        }
        [HttpPost]
        public JsonResult ScientistStatusListData(string name, int id)
        {
            try
            {
                if (id == 0)
                {
                    SZ_ScientistStatus objComp = new SZ_ScientistStatus();
                    objComp.Name = name;
                    db.SZ_ScientistStatus.Add(objComp);
                    db.SaveChanges();
                }
                else
                {
                    var comp = db.SZ_ScientistStatus.Where(x => x.Id == id).FirstOrDefault();
                    if (comp != null)
                    {
                        comp.Name = name;
                        db.Entry(comp).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult SampleReasonList()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_SampleReason.ToList();
            return View(model);
        }

        public ActionResult AddSampleReason(int id = 0)
        {
            var model = db.SZ_SampleReason.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new SZ_SampleReason();

            return View(model);
        }
        [HttpPost]
        public JsonResult SampleReasonListData(string name, int id)
        {
            try
            {
                if (id == 0)
                {
                    SZ_SampleReason objComp = new SZ_SampleReason();
                    objComp.Name = name;
                    db.SZ_SampleReason.Add(objComp);
                    db.SaveChanges();
                }
                else
                {
                    var comp = db.SZ_SampleReason.Where(x => x.Id == id).FirstOrDefault();
                    if (comp != null)
                    {
                        comp.Name = name;
                        db.Entry(comp).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult PhysicalStateList()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_Physicalstate.ToList();
            return View(model);
        }

        public ActionResult PhysicalState(int id = 0)
        {
            var model = db.SZ_Physicalstate.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new SZ_Physicalstate();

            return View(model);
        }

        [HttpPost]
        public JsonResult PhysicalStateData(string name, int id)
        {
            try
            {
                if (id == 0)
                {
                    SZ_Physicalstate objComp = new SZ_Physicalstate();
                    objComp.Name = name;
                    db.SZ_Physicalstate.Add(objComp);
                    db.SaveChanges();
                }
                else
                {
                    var comp = db.SZ_Physicalstate.Where(x => x.Id == id).FirstOrDefault();
                    if (comp != null)
                    {
                        comp.Name = name;
                        db.Entry(comp).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult CompanyList()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsFollowUp)
            {
                return RedirectToAction("Index", "Home");
            }

            var model = db.SZ_CompanyList.ToList();

            //var modelAvailable = (from p in model
            //                      join pc in db.SZ_Quotation on p.Id equals pc.CompanyId
            //                      join c in db.SZ_QuotationDetail on pc.Id equals c.QuoteId
            //                      where (c.MoveToProject == true) && (c.MoveToDispatch == false || c.MoveToDispatch == null)
            //                      group p by p.Name into pt1
            //                      select new
            //                      {
            //                          CompanyName = pt1.Key,
            //                          ProductCount = pt1.Count()
            //                      }).ToList();

            var modelAvailable = db.CompanyMasterList().ToList();

            var modelnotinclude = (from i in model
                                   where !modelAvailable.Contains(i.Name)
                                   select i).ToList();
            //var modelnotinclude = (from i in model
            //                       where !modelAvailable.Select(x => x.CompanyName).Contains(i.Name)
            //                       select i).ToList();

            var result = new List<SZ_CompanyList>();
            foreach (var item in modelnotinclude)
            {
                item.Name = item.Name + "<sup>*</sup>";
                result.Add(item);
            }

            foreach (var item in modelAvailable)
            {
                var comp = model.Where(x => x.Name == item).FirstOrDefault();
                result.Add(comp);
            }


            var outputModel = result.OrderBy(x => x.Name).ToList();
            return View(outputModel);
        }

        public ActionResult TransferCompany(int id = 0)
        {
            var model = db.SZ_CompanyList.Where(x => x.Id == id).OrderBy(x => x.Name).FirstOrDefault();
            if (model == null)
                model = new SZ_CompanyList();

            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_CompanyList.Where(x => x.Id != id).ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }
            ViewBag.compList = listItems;
            return View(model);
        }

        public ActionResult AddCompany(int id = 0)
        {
            var model = db.SZ_CompanyList.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new SZ_CompanyList();

            var listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var terms = db.SZ_Terms.ToList();
            foreach (var term in terms)
            {
                listItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.termsList = listItems;
            var listPaymentTermsItems = new List<SelectListItem>();
            listPaymentTermsItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var paymentTermData = db.PaymentTerms.OrderBy(x => x.Id).ToList();
            foreach (var term in paymentTermData)
            {
                listPaymentTermsItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Name.ToString()
                });
            }

            ViewBag.listPaymentTermsItems = listPaymentTermsItems;

            var listCountryItems = new List<SelectListItem>();
            listCountryItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var countries = db.Countries.OrderBy(x => x.name).ToList();
            foreach (var term in countries)
            {
                listCountryItems.Add(new SelectListItem
                {
                    Text = term.name,
                    Value = term.name
                });
            }

            ViewBag.CountryList = listCountryItems;

            return View(model);
        }


        public ActionResult MSDS(int id = 0)
        {
            var model = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
            if (model != null)
            {
                ViewBag.productname = model.ProductName;
                ViewBag.childcoaid = id;
                ViewBag.casno = model.CASNo;
                ViewBag.chemicalname = model.Chemicalname;
                ViewBag.Synonyms = model.Synonym;
                ViewBag.molweight = model.MolecularWeight;
                ViewBag.molformula = model.MolFormula;
                ViewBag.Appearance = model.AppearanceProduct;
                ViewBag.Physicalstate = model.PhysicalState;
            }

            return View();
        }

        [HttpPost]
        public JsonResult AddMSDSData(FormCollection form)
        {
            int coaid = Convert.ToInt32(form.Get("childcoaid"));
            TempData["productname"] = form.Get("productname");
            TempData["casno"] = form.Get("casno");
            TempData["chemicalname"] = form.Get("chemicalname");
            TempData["Synonyms"] = form.Get("Synonyms");
            TempData["molweight"] = form.Get("molweight");
            TempData["molformula"] = form.Get("molformula");
            TempData["Appearance"] = form.Get("Appearance");
            TempData["Physicalstate"] = form.Get("Physicalstate");

            return Json(new { success = true }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DownloadMSDS()
        {
            var htmlstring = string.Empty;
            ViewBag.productname = TempData["productname"];
            ViewBag.casno = TempData["casno"];
            ViewBag.chemicalname = TempData["chemicalname"];
            ViewBag.Synonyms = TempData["Synonyms"];
            ViewBag.molweight = TempData["molweight"];
            ViewBag.molformula = TempData["molformula"];
            ViewBag.Appearance = TempData["Appearance"];
            ViewBag.Physicalstate = TempData["Physicalstate"];
            htmlstring = System.IO.File.ReadAllText(Server.MapPath("~/Mail/MSDS.html"));

            htmlstring = htmlstring.Replace("~physicalState", ViewBag.Physicalstate);
            htmlstring = htmlstring.Replace("~appearance", ViewBag.Appearance);
            htmlstring = htmlstring.Replace("~productname", ViewBag.productname);
            htmlstring = htmlstring.Replace("~casno", ViewBag.casno);
            htmlstring = htmlstring.Replace("~chemicalname", ViewBag.chemicalname);
            htmlstring = htmlstring.Replace("~synonum", ViewBag.Synonyms);
            htmlstring = htmlstring.Replace("~molweight", ViewBag.molweight);
            htmlstring = htmlstring.Replace("~molformula", ViewBag.molformula);

            string path = ConvertHTMLToPDF(htmlstring, "testmsds-" + DateTime.Now.ToShortDateString().Replace("/", "_"), true);
            return File(path, "application/pdf", Server.UrlEncode("MSDS-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM") + ".pdf"));
        }

        public ActionResult GenerateInvoicePdf(int id)
        {
            var obj = db.SZ_InvoiceDetailsData.Where(x => x.QuoteDetailsId == id).FirstOrDefault();
            var htmlstring = PartialViewdata(this, "_PartialInvoicePDF", obj.SZ_InvoiceData);
            htmlstring = "<html><head></head><body style='font-family:Tahoma, Verdana, Segoe, sans-serif;font-size:11px;'>" + htmlstring + "</body></html>";
            //string path = printpdf(htmlstring, "Invoice_SynZeal_Order_Confirmation", true);
            string path = ConvertHTMLToPDF(htmlstring, "Invoice_SynZeal_Order_Confirmation", false);
            return File(path, "application/pdf", Server.UrlEncode("MSDS-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM") + ".pdf"));
        }

        [HttpPost]
        public JsonResult AddNameMasterData(string sku, string ep, string usp, string other, string chemDraw, int id,
            string epchemicalname, string uspchemicalname, string OtherNameOne,
            string OtherNameSecond, string OtherNameThird, string OtherNameFour,
            string OtherNameFive, string OtherNameSix, string OtherNameSeven)
        {
            try
            {
                if (id == 0)
                {
                    SZ_NameMaster objComp = new SZ_NameMaster();
                    objComp.Sku = sku;
                    objComp.EP = ep;
                    objComp.USP = usp;
                    objComp.Other = other;
                    objComp.ChemDraw = chemDraw;
                    objComp.CreatedDate = DateTime.Now;
                    objComp.EPChemicalName = epchemicalname;
                    objComp.USPChemicalName = uspchemicalname;
                    objComp.OtherNameOne = OtherNameOne;
                    objComp.OtherNameSecond = OtherNameSecond;
                    objComp.OtherNameThird = OtherNameThird;
                    objComp.OtherNameFour = OtherNameFour;
                    objComp.OtherNameFive = OtherNameFive;
                    objComp.OtherNameSix = OtherNameSix;
                    objComp.OtherNameSeven = OtherNameSeven;
                    db.SZ_NameMaster.Add(objComp);
                    db.SaveChanges();
                }
                else
                {
                    var objComp = db.SZ_NameMaster.Where(x => x.Id == id).FirstOrDefault();
                    if (objComp != null)
                    {
                        objComp.Sku = sku;
                        objComp.EP = ep;
                        objComp.USP = usp;
                        objComp.Other = other;
                        objComp.ChemDraw = chemDraw;
                        objComp.EPChemicalName = epchemicalname;
                        objComp.USPChemicalName = uspchemicalname;
                        objComp.OtherNameOne = OtherNameOne;
                        objComp.OtherNameSecond = OtherNameSecond;
                        objComp.OtherNameThird = OtherNameThird;
                        objComp.OtherNameFour = OtherNameFour;
                        objComp.OtherNameFive = OtherNameFive;
                        objComp.OtherNameSix = OtherNameSix;
                        objComp.OtherNameSeven = OtherNameSeven;
                        objComp.UpdatedDate = DateTime.Now;
                        db.Entry(objComp).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult NameMasterList()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsDispatch)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.SZ_NameMaster.ToList();
            return View(model);
        }

        public ActionResult AddNameMasterCompany(int id = 0)
        {
            var model = db.SZ_NameMaster.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new SZ_NameMaster();

            return View(model);
        }

        public JsonResult GetCompanyInformationByCompanyId(int id)
        {
            CompanyModel model = new CompanyModel();
            var comp = db.SZ_CompanyList.Where(x => x.Id == id).FirstOrDefault();
            if (comp != null)
            {
                model.id = comp.Id;
                model.CountryType = comp.CountryType;
                model.masteremail = comp.MasterEmail;
                model.UserDistType = comp.UserDistType;
                model.TermsId = comp.TermsId.HasValue ? comp.TermsId.Value.ToString() : "";
                model.PaymentTerms = comp.PaymentTerms;
                model.IsBlockCompany = comp.IsBlockCompany;
            }

            return Json(model, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult TransferCompanyData(int id, int transferCompanyId, bool isDelete)
        {
            try
            {
                try
                {
                    var companyData = db.SZ_CompanyList.Where(x => x.Id == id).FirstOrDefault();
                    var transferedData = db.SZ_CompanyList.Where(x => x.Id == transferCompanyId).FirstOrDefault();

                    if (companyData != null && transferedData != null)
                    {
                        var allQuotes = db.SZ_Quotation.Where(x => x.CompanyId == companyData.Id).ToList();
                        allQuotes.ForEach(x =>
                        {
                            x.CompanyName = transferedData.Name;
                            x.CompanyId = transferedData.Id;
                        });
                        db.SaveChanges();

                        var allemailsuggestions = db.SZ_EmailSuggestion.Where(x => x.CompanyID == companyData.Id).ToList();
                        allemailsuggestions.ForEach(x =>
                        {
                            x.CompanyID = transferedData.Id;
                        });
                        db.SaveChanges();

                        if (isDelete)
                        {
                            db.Entry(companyData).State = EntityState.Deleted;
                            db.SaveChanges();
                        }
                    }
                }
                catch (Exception ex)
                {
                    return Json(new
                    {
                        success = false,
                        message = ex.Message
                    }, JsonRequestBehavior.AllowGet);
                }


                return Json(new
                {
                    success = true,
                    message = "Company transfered successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult AddCompanyData(CompanyModel model, FormCollection form)
        {
            try
            {
                if (model.id == 0)
                {
                    var checkcompanyavailable = db.SZ_CompanyList.Where(x => x.Name.ToLower() == model.name.ToLower()).FirstOrDefault();
                    if (checkcompanyavailable == null)
                    {
                        SZ_CompanyList objComp = new SZ_CompanyList();
                        objComp.Name = model.name;
                        objComp.Address = model.address;
                        objComp.Location = model.Location;
                        objComp.MasterEmail = model.masteremail;
                        objComp.CountryType = model.CountryType;
                        objComp.UserDistType = model.UserDistType;
                        objComp.TermsId = model.TermsId != null ? Convert.ToInt32(model.TermsId) : 0;
                        objComp.PaymentTerms = model.PaymentTerms;
                        objComp.FollowupTime = model.FollowupTime;
                        objComp.Contact = model.Contact;
                        objComp.Country = model.Country;
                        objComp.IsPaymentPending = model.IsPaymentPending;
                        objComp.Branch = model.Branch;
                        objComp.CreatedDate = DateTime.Now;
                        objComp.UpdatedDate = DateTime.Now;
                        objComp.IsBlockCompany = model.IsBlockCompany;
                        objComp.CreatedBy = SessionCookieManagement.UserName;
                        objComp.UpdatedBy = SessionCookieManagement.UserName;
                        objComp.Add1 = model.Add1;
                        objComp.Add2 = model.Add2;
                        objComp.City = model.City;
                        objComp.State = model.State;
                        objComp.PostCode = model.PostCode;
                        objComp.ShipAdd1 = model.ShipAdd1;
                        objComp.ShipAdd2 = model.ShipAdd2;
                        objComp.ShipCity = model.ShipCity;
                        objComp.ShipState = model.ShipState;
                        objComp.ShipCountry = model.ShipCountry;
                        objComp.Telno = model.Telno;
                        objComp.ShipTelno = model.ShipTelno;
                        objComp.ShipPostCode = model.ShipPostCode;
                        db.SZ_CompanyList.Add(objComp);
                        db.SaveChanges();

                        MailMessage mail = new MailMessage();
                        SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                        mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");
                        var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                        if (isDevelopment.ToLower().Contains("true"))
                        {
                            mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                        }
                        else
                        {
                            mail.To.Add("support@synzeal.com");
                        }
                        mail.Subject = "SynZeal Research PVT LTD New Company Added (" + model.name + ") :: Dated : " + System.DateTime.Now.ToShortDateString();
                        mail.IsBodyHtml = true;
                        SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                        SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                        mail.Body = "Hello, <br> New company added by " + SessionCookieManagement.UserEmail + "<br> Thanks";
                        SmtpServer.EnableSsl = true;
                        SmtpServer.Send(mail);
                    }
                    else
                    {
                        return Json(new
                        {
                            success = false,
                            message = "Company already available."
                        }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    var checkcompanyavailable = db.SZ_CompanyList.Where(x => x.Name.ToLower() == model.name.ToLower() && x.Id != model.id).FirstOrDefault();
                    if (checkcompanyavailable != null)
                    {
                        return Json(new
                        {
                            success = false,
                            message = "Company already available."
                        }, JsonRequestBehavior.AllowGet);
                    }
                    var comp = db.SZ_CompanyList.Where(x => x.Id == model.id).FirstOrDefault();
                    if (comp != null)
                    {
                        string previousName = comp.Name;
                        comp.Name = model.name;
                        comp.Address = model.address;
                        comp.Location = model.Location;
                        comp.MasterEmail = model.masteremail;
                        comp.CountryType = model.CountryType;
                        comp.UserDistType = model.UserDistType;
                        comp.TermsId = model.TermsId != null && model.TermsId != "null" ? Convert.ToInt32(model.TermsId) : 0;
                        comp.FollowupTime = model.FollowupTime;
                        comp.Contact = model.Contact;
                        comp.Country = model.Country;
                        comp.IsPaymentPending = model.IsPaymentPending;
                        comp.IsBlockCompany = model.IsBlockCompany;
                        comp.Branch = model.Branch;
                        comp.UpdatedDate = DateTime.Now;
                        comp.UpdatedBy = SessionCookieManagement.UserName;
                        comp.PaymentTerms = model.PaymentTerms;
                        comp.Add1 = model.Add1;
                        comp.Add2 = model.Add2;
                        comp.City = model.City;
                        comp.State = model.State;
                        comp.PostCode = model.PostCode;
                        comp.ShipAdd1 = model.ShipAdd1;
                        comp.ShipAdd2 = model.ShipAdd2;
                        comp.ShipCity = model.ShipCity;
                        comp.ShipState = model.ShipState;
                        comp.ShipCountry = model.ShipCountry;
                        comp.Telno = model.Telno;
                        comp.ShipTelno = model.ShipTelno;
                        comp.ShipPostCode = model.ShipPostCode;
                        db.Entry(comp).State = EntityState.Modified;
                        db.SaveChanges();
                        if (comp.Name != previousName)
                        {
                            var allQuotes = db.SZ_Quotation.Where(x => x.CompanyId == comp.Id).ToList();
                            allQuotes.ForEach(x => x.CompanyName = comp.Name);
                            db.SaveChanges();
                        }
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult AddNewCOARepresentative()
        {
            ViewBag.representativecoa = true;
            return View("_RightSideCOAInformation", new MasterCOAModel());
            //return View("AddMasterCOARepresentative", new SZ_ChildCOA());
        }


        [ValidateInput(false)]
        [HttpPost]
        public JsonResult AddNewCOARepresentative(TermsModel passdata, FormCollection form)
        {
            try
            {
                string uniqueId = Request.Form.Get("uniqueId");
                string imagePath = string.Empty;
                if (TempData["ImagePath"] != null)
                {
                    imagePath = Convert.ToString(TempData["ImagePath"]);
                }
                else
                {
                    imagePath = form.Get("form[imgsynzealsrcproduct]");
                }
                string catnumber = form.Get("form[catno]");
                var masterrecord = new SZ_ChildCOA();
                masterrecord.ImagePath = imagePath;
                masterrecord.RefNo = form.Get("form[sku]") + "-" + DateTime.Now.ToString("HHmm");
                masterrecord.ProductName = form.Get("form[productname]");
                masterrecord.CATNo = form.Get("form[sku]");
                masterrecord.ProductId = Convert.ToInt32(form.Get("form[ProductId]"));
                masterrecord.IsRepresentative = false;
                masterrecord.CASNo = form.Get("form[casno]");
                masterrecord.MolFormula = form.Get("form[molecularformula]");
                masterrecord.MolecularWeight = form.Get("form[molecularweight]");
                masterrecord.AdditionalInfor = form.Get("form[AdditionalInfor]");
                masterrecord.IsEquation = form.Get("form[IsEquation]") == "on" ? true : false;
                masterrecord.Dept = form.Get("form[Dept]");
                masterrecord.TGALoss = form.Get("form[TGALoss]");
                masterrecord.Attachment = form.Get("form[Attachment]");
                masterrecord.Chemicalname = form.Get("form[Chemicalname]");
                masterrecord.HPLCGCELSD = form.Get("form[HPLCGCELSD]");
                masterrecord.Purity = form.Get("form[Purity]");
                masterrecord.IR = form.Get("form[IR]");
                masterrecord.Mass = form.Get("form[Mass]");
                masterrecord.Potency = form.Get("form[Potency]");
                masterrecord.BatchNo = form.Get("form[batchno]");
                masterrecord.ResidueOnIgnition = form.Get("form[ResidueOnIgnition]");
                masterrecord.CMR = form.Get("form[CMR]");
                masterrecord.NMR = form.Get("form[NMR]");
                masterrecord.StorageCon = form.Get("form[StorageCon]");
                masterrecord.AppearanceProduct = form.Get("form[AppearanceProduct]");
                masterrecord.SOLUBILITY = form.Get("form[SOLUBILITY]");
                masterrecord.BatchNo = form.Get("form[batchno]");
                masterrecord.Synonym = form.Get("form[synonym]");
                //masterrecord.MolecularWeight = form.Get("form[molecularweight]");
                //masterrecord.MolFormula = form.Get("form[molecularformula]");
                masterrecord.CreatedDate = DateTime.Now;
                masterrecord.UpdatedDate = DateTime.Now;
                masterrecord.EquationType = form.Get("form[EquationType]");
                if (!string.IsNullOrEmpty(form.Get("form[AnalysisDate]")))
                {
                    masterrecord.AnalysisDate = Convert.ToDateTime(form.Get("form[AnalysisDate]"));
                }
                else
                {
                    masterrecord.AnalysisDate = null;
                }
                if (!string.IsNullOrEmpty(form.Get("form[ReTestDate]")))
                {
                    masterrecord.ReTestDate = Convert.ToDateTime(form.Get("form[ReTestDate]"));
                }
                else
                {
                    masterrecord.ReTestDate = null;
                }
                masterrecord.IsLogoAttached = form.Get("form[IsLogoAttached]") == "on" ? true : false;
                masterrecord.IsManufacture = form.Get("form[IsManufacture]") == "on" ? true : false;
                if (!string.IsNullOrEmpty(form.Get("form[ManufactureDate]")))
                {
                    masterrecord.ManufactureDate = Convert.ToDateTime(form.Get("form[ManufactureDate]"));
                }
                else
                {
                    masterrecord.ManufactureDate = null;
                }
                masterrecord.OtherValue = form.Get("form[OtherValue]");
                masterrecord.IsShipping = form.Get("form[IsShipping]") == "on" ? true : false;

                masterrecord.UpdatedBy = SessionCookieManagement.UserName;
                masterrecord.CTheroretical = form.Get("form[CTheroretical]");
                masterrecord.HTheroretical = form.Get("form[HTheroretical]");
                masterrecord.NTheroretical = form.Get("form[NTheroretical]");
                masterrecord.STheroretical = form.Get("form[STheroretical]");
                masterrecord.CPractical = form.Get("form[CPractical]");
                masterrecord.HPractical = form.Get("form[HPractical]");
                masterrecord.NPractical = form.Get("form[NPractical]");
                masterrecord.SPractical = form.Get("form[SPractical]");
                masterrecord.WegithLossBy = form.Get("form[WegithLossBy]");
                string htmlstring = PartialViewdata(this, "_PartialSampleRepresentativeCOAPdf", masterrecord);
                string path = ConvertHTMLToPDF(htmlstring, "SamplerepresentativeCOA-" + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss").Replace("/", "_"));

                return Json(new
                {
                    success = true,
                    path = path
                }, JsonRequestBehavior.AllowGet);
            }
            catch (DbEntityValidationException dbEx)
            {
                string str = string.Empty;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        str += "Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage + " /     ";
                    }
                }


                return Json(new
                {
                    success = false,
                    message = str
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult DownloadFile(string path)
        {
            return File(path, "application/pdf", Server.UrlEncode("sampleRepresentative_COA.pdf"));
        }

        public ActionResult AddMasterCOARepresentative(int id = 0)
        {
            var childrecord = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
            var batchlist = db.SZ_Inventory.Where(x => x.Id == childrecord.SZ_MasterCOA.BatchId).FirstOrDefault();
            var model = childrecord;
            string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + batchlist.ProductId;
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                var product = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);

                if (childrecord.IsImageUpload.HasValue && childrecord.IsImageUpload.Value)
                {
                    ViewBag.ImagePath = childrecord.ImagePath.Replace("~", "..");
                }
                else
                {
                    ViewBag.ImagePath = product.DefaultPictureModel.ImageUrl;
                }
                ViewBag.CATNo = product.Sku;
                ViewBag.CASNo = product.ManufacturerPartNumber;
                ViewBag.MolecularWeight = product.MolecularWeight;
                ViewBag.MolFormula = product.Gtin;
                var nameMaster = db.SZ_NameMaster.Where(x => x.Sku.ToLower().Trim() == product.Sku.ToLower().Trim()).FirstOrDefault();

                model.BatchNo = Convert.ToString(id);
                if (string.IsNullOrEmpty(childrecord.ProductName))
                {
                    model.ProductName = product.Name;
                }
                else
                {
                    model.ProductName = childrecord.ProductName;
                }

                if (!string.IsNullOrEmpty(model.CASNo))
                {
                    ViewBag.CASNo = model.CASNo;
                }
                if (!string.IsNullOrEmpty(model.MolecularWeight))
                {
                    ViewBag.MolecularWeight = model.MolecularWeight;
                }
                if (!string.IsNullOrEmpty(model.MolFormula))
                {
                    ViewBag.MolFormula = model.MolFormula;
                }
                if (!childrecord.IsRepresentative)
                {
                    if (nameMaster != null)
                    {
                        model.EP = nameMaster.EP;
                        model.USP = nameMaster.USP;
                        model.IUPAC = nameMaster.ChemDraw;
                        model.EPChemicalName = nameMaster.EPChemicalName;
                        model.USPChemicalName = nameMaster.USPChemicalName;
                        model.OtherNameOne = nameMaster.OtherNameOne;
                        model.OtherNameSecond = nameMaster.OtherNameSecond;
                        model.OtherNameThird = nameMaster.OtherNameThird;

                        model.ChemEP = nameMaster.EP;
                        model.ChemUSP = nameMaster.USP;
                        model.ChemIUPAC = nameMaster.ChemDraw;
                        model.ChemEPChemicalName = nameMaster.EPChemicalName;
                        model.ChemUSPChemicalName = nameMaster.USPChemicalName;
                        model.ChemOtherNameOne = nameMaster.OtherNameOne;
                        model.ChemOtherNameSecond = nameMaster.OtherNameSecond;
                        model.ChemOtherNameThird = nameMaster.OtherNameThird;

                        model.SynEP = nameMaster.EP;
                        model.SynUSP = nameMaster.USP;
                        model.SynIUPAC = nameMaster.ChemDraw;
                        model.SynEPChemicalName = nameMaster.EPChemicalName;
                        model.SynUSPChemicalName = nameMaster.USPChemicalName;
                        model.SynOtherNameOne = nameMaster.OtherNameOne;
                        model.SynOtherNameSecond = nameMaster.OtherNameSecond;
                        model.SynOtherNameThird = nameMaster.OtherNameThird;
                    }
                }
            }
            return View(model);
        }

        [HttpPost]
        public ActionResult UploadRepresentativeCOAImage()
        {
            string ImagePath = string.Empty;
            string uniqueId = Request.Form.Get("uniqueId");

            for (int i = 0; i < Request.Files.Count; i++)
            {
                var file = Request.Files[i];

                var fileName = Path.GetFileName(file.FileName);
                var extension = Path.GetExtension(file.FileName);
                string newfileName = uniqueId + "" + extension;
                var path = Path.Combine(Server.MapPath("~/Content/COAProducts/"), newfileName);
                file.SaveAs(path);

                TempData["ImagePath"] = "~/Content/COAProducts/" + newfileName;

            }

            return Json(new
            {
                success = true,
                data = uniqueId
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ChildCOAFileUpload()
        {
            int childId = Convert.ToInt32(Request.Form.Get("childId"));
            var childrecord = db.SZ_ChildCOA.Where(x => x.Id == childId).FirstOrDefault();

            for (int i = 0; i < Request.Files.Count; i++)
            {
                var file = Request.Files[i];

                var fileName = Path.GetFileName(file.FileName);
                var extension = Path.GetExtension(file.FileName);
                string newfileName = Guid.NewGuid().ToString() + "" + extension;
                var path = Path.Combine(Server.MapPath("~/Content/COAProducts/"), newfileName);
                file.SaveAs(path);

                childrecord.ImagePath = "~/Content/COAProducts/" + newfileName;
                childrecord.IsImageUpload = true;
                db.Entry<SZ_ChildCOA>(childrecord).State = EntityState.Modified;
                db.SaveChanges();
            }

            return Json(new
            {
                success = true,
                data = childrecord.Id
            }, JsonRequestBehavior.AllowGet);
        }

        [ValidateInput(false)]
        [HttpPost]
        public JsonResult SaveNewMasterRecord(FormCollection form)
        {
            try
            {
                //passdata[Message]

                int bId = Convert.ToInt32(form.Get("form[BatchId]"));
                var batchRecord = db.SZ_Inventory.Where(x => x.Id == bId).FirstOrDefault();
                string catnumber = form.Get("form[sku]");
                //int childRecordId = Convert.ToInt32(form.Get("form[Id]"));
                //var objchild = db.SZ_ChildCOA.Where(x => x.Id == childRecordId).FirstOrDefault();
                //if (objchild == null)
                //{
                int masterRecordId = Convert.ToInt32(form.Get("form[COAId]"));
                var masterrecord = db.SZ_MasterCOA.Where(x => x.Id == masterRecordId).FirstOrDefault();
                if (masterrecord == null)
                {
                    //Insert new Master and child
                    masterrecord = new SZ_MasterCOA();
                    masterrecord.RefNo = form.Get("form[sku]") + "-" + DateTime.Now.ToString("HHmm");
                    masterrecord.ProductName = form.Get("form[productname]");
                    masterrecord.CATNo = form.Get("form[sku]");
                    masterrecord.ProductId = Convert.ToInt32(form.Get("form[ProductId]"));
                    masterrecord.IsRepresentative = false;
                    masterrecord.CASNo = form.Get("form[casno]");
                    masterrecord.MolFormula = form.Get("form[molecularformula]");
                    masterrecord.MolecularWeight = form.Get("form[molecularweight]");
                    masterrecord.AdditionalInfor = form.Get("form[AdditionalInfor]");
                    masterrecord.IsEquation = form.Get("form[IsEquation]") == "on" ? true : false;
                    masterrecord.Dept = form.Get("form[Dept]");
                    masterrecord.TGALoss = form.Get("form[TGALoss]");
                    masterrecord.Attachment = form.Get("form[Attachment]");
                    masterrecord.Chemicalname = form.Get("form[Chemicalname]");
                    masterrecord.HPLCGCELSD = form.Get("form[HPLCGCELSD]");
                    masterrecord.Purity = form.Get("form[Purity]");
                    masterrecord.IR = form.Get("form[IR]");
                    masterrecord.Mass = form.Get("form[Mass]");
                    masterrecord.Potency = form.Get("form[Potency]");
                    masterrecord.BatchId = batchRecord.Id;
                    masterrecord.BatchNo = batchRecord.BatchNo;
                    masterrecord.ResidueOnIgnition = form.Get("form[ResidueOnIgnition]");
                    masterrecord.CMR = form.Get("form[CMR]");
                    masterrecord.NMR = form.Get("form[NMR]");
                    masterrecord.StorageCon = form.Get("form[StorageCon]");
                    masterrecord.AppearanceProduct = form.Get("form[AppearanceProduct]");
                    masterrecord.SOLUBILITY = form.Get("form[SOLUBILITY]");
                    masterrecord.BatchNo = form.Get("form[batchno]");
                    masterrecord.Synonym = form.Get("form[synonym]");
                    //masterrecord.MolecularWeight = form.Get("form[molecularweight]");
                    //masterrecord.MolFormula = form.Get("form[molecularformula]");
                    masterrecord.CreatedDate = DateTime.Now;
                    masterrecord.UpdatedDate = DateTime.Now;
                    masterrecord.QuantityAvailable = Convert.ToString(batchRecord.Qty);
                    masterrecord.EquationType = form.Get("form[EquationType]");
                    if (!string.IsNullOrEmpty(form.Get("form[AnalysisDate]")))
                    {
                        masterrecord.AnalysisDate = Convert.ToDateTime(form.Get("form[AnalysisDate]"));
                    }
                    else
                    {
                        masterrecord.AnalysisDate = null;
                    }
                    if (!string.IsNullOrEmpty(form.Get("form[ReTestDate]")))
                    {
                        masterrecord.ReTestDate = Convert.ToDateTime(form.Get("form[ReTestDate]"));
                    }
                    else
                    {
                        masterrecord.ReTestDate = null;
                    }
                    masterrecord.IsLogoAttached = form.Get("form[IsLogoAttached]") == "on" ? true : false;
                    masterrecord.IsManufacture = form.Get("form[IsManufacture]") == "on" ? true : false;
                    if (!string.IsNullOrEmpty(form.Get("form[ManufactureDate]")))
                    {
                        masterrecord.ManufactureDate = Convert.ToDateTime(form.Get("form[ManufactureDate]"));
                    }
                    else
                    {
                        masterrecord.ManufactureDate = null;
                    }
                    masterrecord.OtherValue = form.Get("form[OtherValue]");
                    masterrecord.IsShipping = form.Get("form[IsShipping]") == "on" ? true : false;

                    masterrecord.UpdatedBy = SessionCookieManagement.UserName;
                    masterrecord.CTheroretical = form.Get("form[CTheroretical]");
                    masterrecord.HTheroretical = form.Get("form[HTheroretical]");
                    masterrecord.NTheroretical = form.Get("form[NTheroretical]");
                    masterrecord.STheroretical = form.Get("form[STheroretical]");
                    masterrecord.CPractical = form.Get("form[CPractical]");
                    masterrecord.HPractical = form.Get("form[HPractical]");
                    masterrecord.NPractical = form.Get("form[NPractical]");
                    masterrecord.SPractical = form.Get("form[SPractical]");
                    masterrecord.WegithLossBy = form.Get("form[WegithLossBy]");
                    db.SZ_MasterCOA.Add(masterrecord);
                    db.SaveChanges();
                }
                else
                {
                    //Update Master
                    masterrecord.ProductName = form.Get("form[productname]");
                    masterrecord.CATNo = form.Get("form[sku]");
                    masterrecord.ProductId = Convert.ToInt32(form.Get("form[ProductId]"));
                    masterrecord.CASNo = form.Get("form[casno]");
                    masterrecord.MolFormula = form.Get("form[molecularformula]");
                    masterrecord.MolecularWeight = form.Get("form[molecularweight]");
                    masterrecord.AdditionalInfor = form.Get("form[AdditionalInfor]");
                    masterrecord.IsEquation = form.Get("form[IsEquation]") == "on" ? true : false;
                    masterrecord.Dept = form.Get("form[Dept]");
                    masterrecord.TGALoss = form.Get("form[TGALoss]");
                    masterrecord.Attachment = form.Get("form[Attachment]").ToString();
                    masterrecord.Chemicalname = form.Get("form[Chemicalname]");
                    masterrecord.HPLCGCELSD = form.Get("form[HPLCGCELSD]");
                    masterrecord.Purity = form.Get("form[Purity]");
                    masterrecord.IR = form.Get("form[IR]");
                    masterrecord.Mass = form.Get("form[Mass]");
                    masterrecord.Potency = form.Get("form[Potency]");
                    masterrecord.BatchId = batchRecord.Id;
                    masterrecord.BatchNo = batchRecord.BatchNo;
                    masterrecord.ResidueOnIgnition = form.Get("form[ResidueOnIgnition]");
                    masterrecord.CMR = form.Get("form[CMR]");
                    masterrecord.NMR = form.Get("form[NMR]");
                    masterrecord.StorageCon = form.Get("form[StorageCon]");
                    masterrecord.AppearanceProduct = form.Get("form[AppearanceProduct]");
                    masterrecord.SOLUBILITY = form.Get("form[SOLUBILITY]");
                    masterrecord.BatchNo = form.Get("form[batchno]");
                    masterrecord.Synonym = form.Get("form[synonym]");
                    //masterrecord.MolecularWeight = form.Get("form[molecularweight]");
                    //masterrecord.MolFormula = form.Get("form[molecularformula]");
                    masterrecord.EquationType = form.Get("form[EquationType]");
                    masterrecord.UpdatedDate = DateTime.Now;
                    if (!string.IsNullOrEmpty(form.Get("form[AnalysisDate]")))
                    {
                        masterrecord.AnalysisDate = Convert.ToDateTime(form.Get("form[AnalysisDate]"));
                    }
                    else
                    {
                        masterrecord.AnalysisDate = null;
                    }
                    if (!string.IsNullOrEmpty(form.Get("form[ReTestDate]")))
                    {
                        masterrecord.ReTestDate = Convert.ToDateTime(form.Get("form[ReTestDate]"));
                    }
                    else
                    {
                        masterrecord.ReTestDate = null;
                    }
                    masterrecord.IsLogoAttached = form.Get("form[IsLogoAttached]") == "on" ? true : false;

                    masterrecord.IsManufacture = form.Get("form[IsManufacture]") == "on" ? true : false;
                    if (!string.IsNullOrEmpty(form.Get("form[ManufactureDate]")))
                    {
                        masterrecord.ManufactureDate = Convert.ToDateTime(form.Get("form[ManufactureDate]"));
                    }
                    else
                    {
                        masterrecord.ManufactureDate = null;
                    }
                    masterrecord.OtherValue = form.Get("form[OtherValue]");
                    masterrecord.IsShipping = form.Get("form[IsShipping]") == "on" ? true : false;

                    masterrecord.CreatedBy = SessionCookieManagement.UserName;
                    masterrecord.UpdatedBy = SessionCookieManagement.UserName;
                    masterrecord.CTheroretical = form.Get("form[CTheroretical]");
                    masterrecord.HTheroretical = form.Get("form[HTheroretical]");
                    masterrecord.NTheroretical = form.Get("form[NTheroretical]");
                    masterrecord.STheroretical = form.Get("form[STheroretical]");
                    masterrecord.CPractical = form.Get("form[CPractical]");
                    masterrecord.HPractical = form.Get("form[HPractical]");
                    masterrecord.NPractical = form.Get("form[NPractical]");
                    masterrecord.SPractical = form.Get("form[SPractical]");
                    masterrecord.WegithLossBy = form.Get("form[WegithLossBy]");
                    db.Entry<SZ_MasterCOA>(masterrecord).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return Json(new
                {
                    success = true,
                    message = "COA updated successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (DbEntityValidationException dbEx)
            {
                string str = string.Empty;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        str += "Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage + " /     ";
                    }
                }
                return Json(new
                {
                    success = false,
                    message = str
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [ValidateInput(false)]
        [HttpPost]
        public JsonResult SaveNewChildRecord(FormCollection form)
        {
            try
            {
                int bId = Convert.ToInt32(form.Get("form[BatchId]"));
                var batchRecord = db.SZ_Inventory.Where(x => x.Id == bId).FirstOrDefault();
                string catnumber = form.Get("form[sku]");
                int masterRecordId = Convert.ToInt32(form.Get("form[COAId]"));
                int id = Convert.ToInt32(form.Get("form[Id]"));
                var masterrecord = db.SZ_MasterCOA.Where(x => x.Id == masterRecordId).FirstOrDefault();
                var childRecord = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
                if (childRecord != null)
                {
                    childRecord.ProductName = form.Get("form[productname]");
                    childRecord.CATNo = form.Get("form[sku]");
                    childRecord.ProductId = Convert.ToInt32(form.Get("form[ProductId]"));
                    childRecord.IsRepresentative = false;
                    childRecord.CASNo = form.Get("form[casno]");
                    childRecord.MolFormula = form.Get("form[molecularformula]");
                    childRecord.MolecularWeight = form.Get("form[molecularweight]");
                    childRecord.AdditionalInfor = form.Get("form[AdditionalInfor]");
                    childRecord.IsEquation = form.Get("form[IsEquation]") == "on" ? true : false;
                    childRecord.IsLogoAttached = form.Get("form[IsLogoAttached]") == "on" ? true : false;
                    childRecord.Dept = form.Get("form[Dept]");
                    childRecord.TGALoss = form.Get("form[TGALoss]");
                    childRecord.Attachment = form.Get("form[Attachment]");
                    childRecord.Chemicalname = form.Get("form[Chemicalname]");
                    childRecord.HPLCGCELSD = form.Get("form[HPLCGCELSD]");
                    childRecord.Purity = form.Get("form[Purity]");
                    childRecord.IR = form.Get("form[IR]");
                    childRecord.Mass = form.Get("form[Mass]");
                    childRecord.Potency = form.Get("form[Potency]");
                    childRecord.BatchNo = batchRecord.BatchNo;
                    childRecord.ResidueOnIgnition = form.Get("form[ResidueOnIgnition]");
                    childRecord.CMR = form.Get("form[CMR]");
                    childRecord.NMR = form.Get("form[NMR]");
                    childRecord.StorageCon = form.Get("form[StorageCon]");
                    childRecord.AppearanceProduct = form.Get("form[AppearanceProduct]");
                    childRecord.SOLUBILITY = form.Get("form[SOLUBILITY]");
                    childRecord.BatchNo = form.Get("form[batchno]");
                    childRecord.Synonym = form.Get("form[synonym]");
                    childRecord.EquationType = form.Get("form[EquationType]");

                    childRecord.CTheroretical = form.Get("form[CTheroretical]");
                    childRecord.HTheroretical = form.Get("form[HTheroretical]");
                    childRecord.NTheroretical = form.Get("form[NTheroretical]");
                    childRecord.STheroretical = form.Get("form[STheroretical]");
                    childRecord.CPractical = form.Get("form[CPractical]");
                    childRecord.HPractical = form.Get("form[HPractical]");
                    childRecord.NPractical = form.Get("form[NPractical]");
                    childRecord.SPractical = form.Get("form[SPractical]");
                    childRecord.UpdatedDate = DateTime.Now;
                    if (!string.IsNullOrEmpty(form.Get("form[AnalysisDate]")))
                    {
                        childRecord.AnalysisDate = Convert.ToDateTime(form.Get("form[AnalysisDate]"));
                    }
                    else
                    {
                        childRecord.AnalysisDate = null;
                    }
                    if (!string.IsNullOrEmpty(form.Get("form[ReTestDate]")))
                    {
                        childRecord.ReTestDate = Convert.ToDateTime(form.Get("form[ReTestDate]"));
                    }
                    else
                    {
                        childRecord.ReTestDate = null;
                    }
                    childRecord.IsManufacture = form.Get("form[IsManufacture]") == "on" ? true : false;
                    if (!string.IsNullOrEmpty(form.Get("form[ManufactureDate]")))
                    {
                        childRecord.ManufactureDate = Convert.ToDateTime(form.Get("form[ManufactureDate]"));
                    }
                    else
                    {
                        childRecord.ManufactureDate = null;
                    }
                    childRecord.OtherValue = form.Get("form[OtherValue]");
                    childRecord.IsShipping = form.Get("form[IsShipping]") == "on" ? true : false;
                    childRecord.UpdatedBy = SessionCookieManagement.UserName;
                    childRecord.WegithLossBy = form.Get("form[WegithLossBy]");
                    db.Entry<SZ_ChildCOA>(childRecord).State = EntityState.Modified;
                    db.SaveChanges();
                }
                else
                {
                    var cnt = db.SZ_ChildCOA.Where(x => x.MasterCOAID == masterrecord.Id).Count();
                    childRecord = new SZ_ChildCOA();
                    childRecord.RefNo = masterrecord.RefNo + "-" + (cnt + 1);
                    childRecord.MasterCOAID = masterrecord.Id;
                    childRecord.ProductName = form.Get("form[productname]");
                    childRecord.CATNo = form.Get("form[sku]");
                    childRecord.ProductId = Convert.ToInt32(form.Get("form[ProductId]"));
                    childRecord.IsRepresentative = false;
                    childRecord.CASNo = form.Get("form[casno]");
                    childRecord.MolFormula = form.Get("form[molecularformula]");
                    childRecord.MolecularWeight = form.Get("form[molecularweight]");
                    childRecord.AdditionalInfor = form.Get("form[AdditionalInfor]");
                    childRecord.IsEquation = form.Get("form[IsEquation]") == "on" ? true : false;
                    childRecord.Dept = form.Get("form[Dept]");
                    childRecord.TGALoss = form.Get("form[TGALoss]");
                    childRecord.Attachment = form.Get("form[Attachment]");
                    childRecord.Chemicalname = form.Get("form[Chemicalname]");
                    childRecord.HPLCGCELSD = form.Get("form[HPLCGCELSD]");
                    childRecord.Purity = form.Get("form[Purity]");
                    childRecord.IR = form.Get("form[IR]");
                    childRecord.Mass = form.Get("form[Mass]");
                    childRecord.Potency = form.Get("form[Potency]");
                    childRecord.BatchNo = batchRecord.BatchNo;
                    childRecord.ResidueOnIgnition = form.Get("form[ResidueOnIgnition]");
                    childRecord.CMR = form.Get("form[CMR]");
                    childRecord.NMR = form.Get("form[NMR]");
                    childRecord.StorageCon = form.Get("form[StorageCon]");
                    childRecord.AppearanceProduct = form.Get("form[AppearanceProduct]");
                    childRecord.SOLUBILITY = form.Get("form[SOLUBILITY]");
                    childRecord.BatchNo = form.Get("form[batchno]");
                    childRecord.Synonym = form.Get("form[synonym]");
                    childRecord.EquationType = form.Get("form[EquationType]");
                    childRecord.CreatedDate = DateTime.Now;
                    childRecord.UpdatedDate = DateTime.Now;
                    childRecord.OtherValue = form.Get("form[OtherValue]");
                    if (!string.IsNullOrEmpty(form.Get("form[AnalysisDate]")))
                    {
                        childRecord.AnalysisDate = Convert.ToDateTime(form.Get("form[AnalysisDate]"));
                    }
                    else
                    {
                        childRecord.AnalysisDate = null;
                    }
                    if (!string.IsNullOrEmpty(form.Get("form[ReTestDate]")))
                    {
                        childRecord.ReTestDate = Convert.ToDateTime(form.Get("form[ReTestDate]"));
                    }
                    else
                    {
                        childRecord.ReTestDate = null;
                    }
                    childRecord.IsLogoAttached = form.Get("form[IsLogoAttached]") == "on" ? true : false;
                    childRecord.IsManufacture = form.Get("form[IsManufacture]") == "on" ? true : false;
                    if (!string.IsNullOrEmpty(form.Get("form[ManufactureDate]")))
                    {
                        childRecord.ManufactureDate = Convert.ToDateTime(form.Get("form[ManufactureDate]"));
                    }
                    else
                    {
                        childRecord.ManufactureDate = null;
                    }
                    childRecord.IsShipping = form.Get("form[IsShipping]") == "on" ? true : false;
                    childRecord.CreatedBy = SessionCookieManagement.UserName;
                    childRecord.UpdatedBy = SessionCookieManagement.UserName;
                    childRecord.CTheroretical = form.Get("form[CTheroretical]");
                    childRecord.HTheroretical = form.Get("form[HTheroretical]");
                    childRecord.NTheroretical = form.Get("form[NTheroretical]");
                    childRecord.STheroretical = form.Get("form[STheroretical]");
                    childRecord.CPractical = form.Get("form[CPractical]");
                    childRecord.HPractical = form.Get("form[HPractical]");
                    childRecord.NPractical = form.Get("form[NPractical]");
                    childRecord.SPractical = form.Get("form[SPractical]");
                    childRecord.WegithLossBy = form.Get("form[WegithLossBy]");
                    db.SZ_ChildCOA.Add(childRecord);
                    db.SaveChanges();
                    id = childRecord.Id;
                }

                ///Update Master Record
                var updatedChildRecord = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
                if (updatedChildRecord != null)
                {
                    masterrecord.ReTestDate = updatedChildRecord.ReTestDate;
                    masterrecord.AnalysisDate = updatedChildRecord.AnalysisDate;
                    masterrecord.UpdatedBy = SessionCookieManagement.UserName;
                    db.Entry<SZ_MasterCOA>(masterrecord).State = EntityState.Modified;
                    db.SaveChanges();
                }

                return Json(new
                {
                    success = true,
                    message = "COA updated successfully.",
                    data = id,
                    batchId = bId,
                    masterCoaId = masterrecord.Id
                }, JsonRequestBehavior.AllowGet);
            }
            catch (DbEntityValidationException dbEx)
            {
                string str = string.Empty;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        str += "Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage + " /     ";
                    }
                }


                return Json(new
                {
                    success = false,
                    message = str
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [ValidateInput(false)]
        [HttpPost]
        public JsonResult AddMasterCOARepresentativeData(TermsModel passdata, FormCollection form)
        {
            try
            {
                //passdata[Message]
                string catnumber = form.Get("form[sku]");
                int childRecordId = Convert.ToInt32(form.Get("form[Id]"));
                var objchild = db.SZ_ChildCOA.Where(x => x.Id == childRecordId).FirstOrDefault();
                if (objchild == null)
                {
                    return Json(new
                    {
                        success = false,
                        message = "Data not found"
                    }, JsonRequestBehavior.AllowGet);
                }

                objchild.ProductName = form.Get("form[productname]");
                objchild.RefNo = "SZ-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM");
                objchild.IsRepresentative = true;

                objchild.CASNo = form.Get("form[casno]");
                objchild.MolFormula = form.Get("form[molecularformula]");
                objchild.MolecularWeight = form.Get("form[molecularweight]");

                objchild.EP = form.Get("form[EP]");
                objchild.USP = form.Get("form[USP]");
                objchild.EPChemicalName = form.Get("form[EPChemicalName]");
                objchild.USPChemicalName = form.Get("form[USPChemicalName]");
                objchild.IUPAC = form.Get("form[IUPAC]");
                objchild.OtherNameOne = form.Get("form[OtherNameOne]");
                objchild.OtherNameSecond = form.Get("form[OtherNameSecond]");
                objchild.OtherNameThird = form.Get("form[OtherNameThird]");

                objchild.ChemEP = form.Get("form[ChemEP]");
                objchild.ChemUSP = form.Get("form[ChemUSP]");
                objchild.ChemEPChemicalName = form.Get("form[ChemEPChemicalName]");
                objchild.ChemUSPChemicalName = form.Get("form[ChemUSPChemicalName]");
                objchild.ChemIUPAC = form.Get("form[ChemIUPAC]");
                objchild.ChemOtherNameOne = form.Get("form[ChemOtherNameOne]");
                objchild.ChemOtherNameSecond = form.Get("form[ChemOtherNameSecond]");
                objchild.ChemOtherNameThird = form.Get("form[ChemOtherNameThird]");

                objchild.SynEP = form.Get("form[SynEP]");
                objchild.SynUSP = form.Get("form[SynUSP]");
                objchild.SynEPChemicalName = form.Get("form[SynEPChemicalName]");
                objchild.SynUSPChemicalName = form.Get("form[SynUSPChemicalName]");
                objchild.SynIUPAC = form.Get("form[SynIUPAC]");
                objchild.SynOtherNameOne = form.Get("form[OtherNameOne]");
                objchild.SynOtherNameSecond = form.Get("form[SynOtherNameSecond]");
                objchild.SynOtherNameThird = form.Get("form[SynOtherNameThird]");

                objchild.PreparedBy = form.Get("form[preparedby]");
                objchild.ReviewdBy = form.Get("form[reviewedby]");
                objchild.ApprovedBy = form.Get("form[approvedby]");

                objchild.EPChk = false;
                objchild.USPChk = false;
                objchild.IUPACChk = false;
                objchild.ChkEPChemicalName = false;
                objchild.ChkUSPChemicalName = false;
                objchild.ChkOtherNameOne = false;
                objchild.ChkOtherNameSecond = false;
                objchild.ChkOtherNameThird = false;

                if (form.Get("form[EPchk]") == "on")
                {
                    objchild.EPChk = true;
                }
                if (form.Get("form[USPchk]") == "on")
                {
                    objchild.USPChk = true;
                }
                if (form.Get("form[ChkEPChemicalName]") == "on")
                {
                    objchild.ChkEPChemicalName = true;
                }
                if (form.Get("form[ChkUSPChemicalName]") == "on")
                {
                    objchild.ChkUSPChemicalName = true;
                }
                if (form.Get("form[IUPACchk]") == "on")
                {
                    objchild.IUPACChk = true;
                }
                if (form.Get("form[ChkOtherNameOne]") == "on")
                {
                    objchild.ChkOtherNameOne = true;
                }
                if (form.Get("form[ChkOtherNameSecond]") == "on")
                {
                    objchild.ChkOtherNameSecond = true;
                }
                if (form.Get("form[ChkOtherNameThird]") == "on")
                {
                    objchild.ChkOtherNameThird = true;
                }


                objchild.ChkChemEP = false;
                objchild.ChkChemUSP = false;
                objchild.ChkChemIUPAC = false;
                objchild.ChemChkEPChemicalName = false;
                objchild.ChemChkUSPChemicalName = false;
                objchild.ChemChkOtherNameOne = false;
                objchild.ChemChkOtherNameSecond = false;
                objchild.ChemChkOtherNameThird = false;

                if (form.Get("form[ChkChemEP]") == "on")
                {
                    objchild.ChkChemEP = true;
                }
                if (form.Get("form[ChkChemUSP]") == "on")
                {
                    objchild.ChkChemUSP = true;
                }
                if (form.Get("form[ChkChemIUPAC]") == "on")
                {
                    objchild.ChkChemIUPAC = true;
                }
                if (form.Get("form[ChemChkEPChemicalName]") == "on")
                {
                    objchild.ChemChkEPChemicalName = true;
                }
                if (form.Get("form[ChemChkUSPChemicalName]") == "on")
                {
                    objchild.ChemChkUSPChemicalName = true;
                }
                if (form.Get("form[ChemChkOtherNameOne]") == "on")
                {
                    objchild.ChemChkOtherNameOne = true;
                }
                if (form.Get("form[ChemChkOtherNameSecond]") == "on")
                {
                    objchild.ChemChkOtherNameSecond = true;
                }
                if (form.Get("form[ChemChkOtherNameThird]") == "on")
                {
                    objchild.ChemChkOtherNameThird = true;
                }

                objchild.ChkSynEP = false;
                objchild.ChkSynUSP = false;
                objchild.ChkSynIUPAC = false;
                objchild.SynChkEPChemicalName = false;
                objchild.SynChkUSPChemicalName = false;
                objchild.SynChkOtherNameOne = false;
                objchild.SynChkOtherNameSecond = false;
                objchild.SynChkOtherNameThird = false;

                if (form.Get("form[ChkSynEP]") == "on")
                {
                    objchild.ChkSynEP = true;
                }
                if (form.Get("form[ChkSynUSP]") == "on")
                {
                    objchild.ChkSynUSP = true;
                }
                if (form.Get("form[ChkSynIUPAC]") == "on")
                {
                    objchild.ChkSynIUPAC = true;
                }
                if (form.Get("form[SynChkEPChemicalName]") == "on")
                {
                    objchild.SynChkEPChemicalName = true;
                }
                if (form.Get("form[SynChkUSPChemicalName]") == "on")
                {
                    objchild.SynChkUSPChemicalName = true;
                }
                if (form.Get("form[SynChkOtherNameOne]") == "on")
                {
                    objchild.SynChkOtherNameOne = true;
                }
                if (form.Get("form[SynChkOtherNameSecond]") == "on")
                {
                    objchild.SynChkOtherNameSecond = true;
                }
                if (form.Get("form[SynChkOtherNameThird]") == "on")
                {
                    objchild.SynChkOtherNameThird = true;
                }
                //objchild.OtherSynonum = form.Get("OtherSynonum");
                objchild.AdditionalInfor = form.Get("passdata[Message]");
                objchild.IsEquation = form.Get("form[IsEquation]") == "on" ? true : false;
                objchild.IsLogoAttached = form.Get("form[IsLogoAttached]") == "on" ? true : false;
                db.Entry<SZ_ChildCOA>(objchild).State = EntityState.Modified;
                db.SaveChanges();
                //db.SZ_ChildCOA.Add(objchild);
                //db.SaveChanges();

                var checkRecord = db.SZ_NameMaster.Where(x => x.Sku.Trim().ToLower() == catnumber.Trim().ToLower()).FirstOrDefault();
                if (checkRecord == null)
                {
                    SZ_NameMaster objnamemaster = new SZ_NameMaster();
                    objnamemaster.Sku = catnumber;
                    objnamemaster.Other = form.Get("OtherSynonum");
                    objnamemaster.CreatedDate = DateTime.Now;
                    objnamemaster.ChemDraw = form.Get("IUPAC");
                    objnamemaster.EP = form.Get("EP");
                    objnamemaster.USP = form.Get("USP");
                    objnamemaster.EPChemicalName = form.Get("EPChemicalName");
                    objnamemaster.USPChemicalName = form.Get("USPChemicalName");
                    objnamemaster.OtherNameOne = form.Get("OtherNameOne");
                    objnamemaster.OtherNameSecond = form.Get("OtherNameSecond");
                    objnamemaster.OtherNameThird = form.Get("OtherNameThird");
                    db.SZ_NameMaster.Add(objnamemaster);
                    db.SaveChanges();
                }
                return Json(new
                {
                    success = true,
                    data = objchild.Id
                }, JsonRequestBehavior.AllowGet);
            }
            catch (DbEntityValidationException dbEx)
            {
                string str = string.Empty;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        str += "Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage + " /     ";
                    }
                }


                return Json(new
                {
                    success = false,
                    message = str
                }, JsonRequestBehavior.AllowGet);
            }
        }


        #endregion

        public ActionResult Report()
        {
            var listCompItems = new List<SelectListItem>();
            listCompItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var compData = db.SZ_CompanyList.OrderBy(x => x.Name).ToList();
            foreach (var term in compData)
            {
                listCompItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            ViewBag.listCompItems = listCompItems;
            return View();
        }

        public ActionResult GetInfo()
        {

            ViewBag.GetCompIp = GetComputer_LanIP();
            ViewBag.GetCompInternetIp = GetComputer_InternetIP();
            ViewBag.GetMACAddress = GetMacAddress().ToString();
            return View();
        }
        private string GetComputer_LanIP()
        {
            string strHostName = System.Net.Dns.GetHostName();

            IPHostEntry ipEntry = System.Net.Dns.GetHostEntry(strHostName);

            foreach (IPAddress ipAddress in ipEntry.AddressList)
            {
                if (ipAddress.AddressFamily.ToString() == "InterNetwork")
                {
                    return ipAddress.ToString();
                }
            }

            return "-";
        }

        private string GetComputer_InternetIP()
        {
            // check IP using DynDNS's service
            WebRequest request = WebRequest.Create("http://checkip.dyndns.org");
            WebResponse response = request.GetResponse();
            StreamReader stream = new StreamReader(response.GetResponseStream());

            // IMPORTANT: set Proxy to null, to drastically INCREASE the speed of request
            // request.Proxy = null;

            // read complete response
            string ipAddress = stream.ReadToEnd();

            // replace everything and keep only IP
            return ipAddress.
                Replace("<html><head><title>Current IP Check</title></head><body>Current IP Address: ", string.Empty).
                Replace("</body></html>", string.Empty);
        }
        public static PhysicalAddress GetMacAddress()
        {
            foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
            {
                // Only consider Ethernet network interfaces
                if (nic.NetworkInterfaceType == NetworkInterfaceType.Ethernet &&
                    nic.OperationalStatus == OperationalStatus.Up)
                {
                    return nic.GetPhysicalAddress();
                }
            }
            return null;
        }

        public ActionResult APIDBBackUP()
        {
            var name = String.Format("{0}{1}{2}.bak",
                "SYNZEALLIVE_", DateTime.Now.ToString().Replace("/", "_").Replace(" ", "_").Replace("#", "_").Replace(":", "_"),
                "_Autobackup");

            db.BackUpDatabase(name);

            return Json("Success", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult TakeBackupDatabase(string name)
        {
            try
            {
                if (string.IsNullOrEmpty(name))
                {
                    name = Guid.NewGuid().ToString();
                }

                // read connectionstring from config file
                var connectionString = ConfigurationManager.ConnectionStrings["MyConnString"].ConnectionString;

                // read backup folder from config file ("C:/temp/")
                //var backupFolder = ConfigurationManager.AppSettings["BackupFolder"];
                var backupFolder = "C:/MyDatabase/";
                var sqlConStrBuilder = new SqlConnectionStringBuilder(connectionString);

                // set backupfilename (you will get something like: "C:/temp/MyDatabase-2013-12-07.bak")
                var backupFileName = String.Format("{0}{1}{2}{3}.bak",
                    backupFolder, sqlConStrBuilder.InitialCatalog,
                    name, Guid.NewGuid().ToString());

                var path = backupFileName;

                db.BackUpDatabase(name);

                //using (var connection = new SqlConnection(sqlConStrBuilder.ConnectionString))
                //{
                //    var query = String.Format("BACKUP DATABASE {0} TO DISK='{1}'",
                //        sqlConStrBuilder.InitialCatalog, backupFileName);

                //    using (var command = new SqlCommand(query, connection))
                //    {
                //        connection.Open();
                //        command.ExecuteNonQuery();
                //    }
                //}
                Sz_DatabaseBackup obj = new Sz_DatabaseBackup();
                obj.Name = name;
                obj.Path = path;
                obj.CreatedDate = DateTime.Now;
                db.Sz_DatabaseBackup.Add(obj);
                db.SaveChanges();

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult BackupDatabase()
        {
            var model = db.Sz_DatabaseBackup.OrderByDescending(x => x.CreatedDate).ToList();
            return View(model);
        }

        public ActionResult COA()
        {
            if (!SessionCookieManagement.IsAdmin && !SessionCookieManagement.IsDispatch && !SessionCookieManagement.IsProjectLogin)
            {
                return RedirectToAction("Index", "Home");
            }

            DateTime futureDate = DateTime.Now.AddDays(7);
            var previouseCOA = db.SZ_MasterCOA.Where(x => x.ReTestDate != null && (x.ReTestDate >= DateTime.Now && x.ReTestDate <= futureDate)).OrderBy(x => x.ReTestDate).ToList();
            ViewBag.PreviouseCOA = previouseCOA;
            return this.View();
        }

        public ActionResult DownloadMasterCOAFromQuoteDetailsId(int id)
        {
            var quoteDetails = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (quoteDetails != null)
            {
                string batchNo = quoteDetails.QuoteBatchNo;
                var mastercoa = db.SZ_MasterCOA.Where(x => x.BatchNo == batchNo).OrderByDescending(x => x.Id).FirstOrDefault();
                if (mastercoa != null)
                {
                    var path = MasterCOAPath(mastercoa.Id, false);
                    return File(path, "application/pdf", Server.UrlEncode(quoteDetails.ProductName.Replace(" ", "_") + "_" + quoteDetails.CATNo + "_" + batchNo + "_COA.pdf"));
                }
            }

            return Json(0, JsonRequestBehavior.AllowGet);
        }



        public ActionResult DownloadMasterCOA(int id, bool isScanCopy = false, bool iswebsite = false)
        {
            var path = MasterCOAPath(id, isScanCopy, iswebsite, false);
            string batchNo = "";
            string catno = "";
            string productName = "";
            var data = db.SZ_MasterCOA.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                batchNo = data.BatchNo;
                catno = data.CATNo;
                productName = data.ProductName;
            }
            if (iswebsite)
            {
                return Json(path, JsonRequestBehavior.AllowGet);
            }
            return File(path, "application/pdf", Server.UrlEncode(productName.Replace(" ", "_") + "_" + catno + "_" + batchNo + "_COA.pdf"));
        }


        public ActionResult DownloadMasterCOAAndAnylyticalData(int id, bool isScanCopy = false, bool iswebsite = false)
        {
            var path = MasterCOAPath(id, isScanCopy, iswebsite, true);
            string batchNo = "";
            string catno = "";
            string productName = "";
            var data = db.SZ_MasterCOA.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                batchNo = data.BatchNo;
                catno = data.CATNo;
                productName = data.ProductName;
            }
            string specdatafilename = Guid.NewGuid().ToString() + ".pdf";
            string outputPdfPath = Server.MapPath("~/Content/NewProducts/" + specdatafilename);
            List<string> fileArray = new List<string>();
            if (!string.IsNullOrEmpty(path))
            {
                fileArray.Add(".." + path);
            }
            if (!string.IsNullOrEmpty(batchNo))
            {
                var itemObj = db.SZ_QuoteDetailForm.Where(x => x.BatchCode == batchNo).OrderByDescending(x => x.Id).FirstOrDefault();
                if (itemObj != null)
                {
                    if (!string.IsNullOrEmpty(itemObj.RbAdditionalAnalysis))
                    {
                        string PLCAttachment = itemObj.PLCAttachment != null ? itemObj.PLCAttachment.ReplaceForFilepath() : "";
                        string MassAttachment = itemObj.MassAttachment != null ? itemObj.MassAttachment.ReplaceForFilepath() : "";
                        string TGAAttachment = itemObj.TGAAttachment != null ? itemObj.TGAAttachment.ReplaceForFilepath() : "";
                        string IRAttachment = itemObj.IRAttachment != null ? itemObj.IRAttachment.ReplaceForFilepath() : "";
                        string CMRAttachment = itemObj.CMRAttchment != null ? itemObj.CMRAttchment.ReplaceForFilepath() : "";

                        if (!string.IsNullOrEmpty(PLCAttachment))
                        {
                            fileArray.Add(PLCAttachment);
                        }
                        if (!string.IsNullOrEmpty(MassAttachment))
                        {
                            fileArray.Add(MassAttachment);
                        }
                        if (!string.IsNullOrEmpty(itemObj.NMRAttchment))
                        {
                            fileArray.Add(itemObj.NMRAttchment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(TGAAttachment))
                        {
                            fileArray.Add(TGAAttachment);
                        }
                        if (!string.IsNullOrEmpty(IRAttachment))
                        {
                            fileArray.Add(IRAttachment);
                        }
                        if (!string.IsNullOrEmpty(itemObj.UVSpectra))
                        {
                            fileArray.Add(itemObj.UVSpectra.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(CMRAttachment))
                        {
                            fileArray.Add(CMRAttachment);
                        }
                        if (!string.IsNullOrEmpty(itemObj.QNMRAttchment))
                        {
                            fileArray.Add(itemObj.QNMRAttchment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.OtherAnalysisAttachment))
                        {
                            fileArray.Add(itemObj.OtherAnalysisAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.DEPTAttachment))
                        {
                            fileArray.Add(itemObj.DEPTAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.HRMSAttachment))
                        {
                            fileArray.Add(itemObj.HRMSAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.ROIAttachment))
                        {
                            fileArray.Add(itemObj.ROIAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.ElementralAttachment))
                        {
                            fileArray.Add(itemObj.ElementralAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.SERAttachment))
                        {
                            fileArray.Add(itemObj.SERAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.GCAttachment))
                        {
                            fileArray.Add(itemObj.GCAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.ELSDAttachment))
                        {
                            fileArray.Add(itemObj.ELSDAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.ChiralAttachmenrt))
                        {
                            fileArray.Add(itemObj.ChiralAttachmenrt.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.APCIMassAttachment))
                        {
                            fileArray.Add(itemObj.APCIMassAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.NMRInterpretaionAttachment))
                        {
                            fileArray.Add(itemObj.NMRInterpretaionAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.N1NmrAttachment))
                        {
                            fileArray.Add(itemObj.N1NmrAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.ChiralHPLCAttachment))
                        {
                            fileArray.Add(itemObj.ChiralHPLCAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.IsotropicpurityAttachment))
                        {
                            fileArray.Add(itemObj.IsotropicpurityAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.COSYAttachment))
                        {
                            fileArray.Add(itemObj.COSYAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.CHNSAttachment))
                        {
                            fileArray.Add(itemObj.CHNSAttachment.ReplaceForFilepath());
                        }
                        if (!string.IsNullOrEmpty(itemObj.StabilitydataAttachment))
                        {
                            fileArray.Add(itemObj.StabilitydataAttachment.ReplaceForFilepath());
                        }
                        //var output = new FileStream(outputPdfPath, FileMode.Create);
                        //PdfReader reader = null;
                        //Document sourceDocument = null;
                        //PdfCopy pdfCopyProvider = null;
                        //PdfImportedPage importedPage;
                        //sourceDocument = new Document();
                        //pdfCopyProvider = new PdfCopy(sourceDocument, output);
                        //sourceDocument.Open();
                        //foreach (var item in fileArray)
                        //{

                        //    var fPath = Server.MapPath(item.Replace("..", "~"));
                        //    int pages = Common.TotalPageCount(fPath);
                        //    reader = new PdfReader(fPath);
                        //    //Add pages in new file  
                        //    for (int i = 1; i <= pages; i++)
                        //    {
                        //        try
                        //        {
                        //            importedPage = pdfCopyProvider.GetImportedPage(reader, i);
                        //            pdfCopyProvider.AddPage(importedPage);
                        //        }
                        //        catch (Exception ex)
                        //        {
                        //            string errortext = "Line: " + ex.LineNumber();
                        //            System.IO.File.WriteAllText(Server.MapPath("~/img/Errorlog.txt"), System.DateTime.Now + " /Error : " + errortext + " / stacktrace:" + ex.StackTrace);

                        //            continue;
                        //        }
                        //    }
                        //    reader.Close();
                        //}
                        //sourceDocument.Close();
                        List<string> passFileArray = new List<string>();

                        foreach (var item in fileArray)
                        {
                            passFileArray.Add(Server.MapPath(item.Replace("..", "~")));
                        }
                        Common.MargeMultiplePDF(passFileArray, outputPdfPath);
                    }
                    else
                    {
                        return File(Server.MapPath("~" + path), "application/pdf", Server.UrlEncode(productName.Replace(" ", "_") + "_" + catno + "_" + batchNo + "_COA.pdf"));
                    }

                    return File(outputPdfPath, "application/pdf", Server.UrlEncode(productName.Replace(" ", "_") + "_" + catno + "_" + batchNo + "_COA_AND_AnalyticalData.pdf"));
                }
            }

            return File(path, "application/pdf", Server.UrlEncode(productName.Replace(" ", "_") + "_" + catno + "_" + batchNo + "_COA.pdf"));
        }

        public string MasterCOAPath(int id, bool isScanCopy = false, bool iswebsite = false, bool isReturnFile = false)
        {
            ViewBag.isScanCopy = isScanCopy;
            var htmlstring = string.Empty;
            var data = db.SZ_MasterCOA.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                if (isScanCopy)
                {
                    data.IsLogoAttached = true;
                }
                if (iswebsite)
                {
                    data.IsLogoAttached = true;
                }
                var batchdata = db.SZ_Inventory.Where(x => x.Id == data.BatchId).FirstOrDefault();
                if (batchdata != null)
                {
                    string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + batchdata.ProductId;
                    using (HttpClient httpClient = new HttpClient())
                    {
                        Task<String> response = httpClient.GetStringAsync(uri);
                        string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                        ViewBag.Products = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                    }
                    htmlstring = PartialViewdata(this, "_PartialRepresentativeMasterCOAPdf", data);
                }
            }

            //string path = ConvertHTMLToPDF(htmlstring, "mastercoa-" + + DateTime.Now.ToString().Replace(" ", "_").Replace(":", "_").Replace("/", "_"));
            string path = ConvertHTMLToPDF(htmlstring, "mastercoa-" + Guid.NewGuid(), false, isReturnFile);
            return path;
        }

        public ActionResult DownloadChildCOA(int id)
        {
            var htmlstring = string.Empty;
            var data = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                var batchdata = db.SZ_Inventory.Where(x => x.Id == id).FirstOrDefault();
                string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + batchdata.ProductId;
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    ViewBag.Products = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                }
                htmlstring = PartialViewdata(this, "_PartialRepresentativeCOAPdf", data);
            }

            string path = printpdf(htmlstring, "testcoa-" + DateTime.Now.ToShortDateString().Replace("/", "_"));
            return File(path, "application/pdf", Server.UrlEncode(data.RefNo + "-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM") + ".pdf"));
        }


        public ActionResult DownloadRepresentativeCOA(int id, bool isScanCopy = false)
        {
            ViewBag.isScanCopy = isScanCopy;
            var htmlstring = string.Empty;
            var data = db.SZ_ChildCOA.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                if (isScanCopy)
                {
                    data.IsLogoAttached = true;
                }

                var batchdata = db.SZ_Inventory.Where(x => x.Id == data.SZ_MasterCOA.BatchId).FirstOrDefault();
                string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + batchdata.ProductId;
                using (HttpClient httpClient = new HttpClient())
                {
                    Task<String> response = httpClient.GetStringAsync(uri);
                    string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                    ViewBag.Products = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                }

                if (string.IsNullOrEmpty(data.WegithLossBy))
                {
                    data.WegithLossBy = "TGA";
                }
                htmlstring = PartialViewdata(this, "_PartialRepresentativeCOAPdf", data);
            }

            string path = ConvertHTMLToPDF(htmlstring, "testcoa-" + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss").Replace("/", "_"));
            return File(path, "application/pdf", Server.UrlEncode(data.ProductName.Replace(" ", "_") + "_" + data.CATNo + "_" + data.BatchNo + "_COA.pdf"));
        }

        public ActionResult RefStock()
        {
            return View();
        }

        public ActionResult Purchase()
        {
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            var model = (from i in db.SZ_Quotation
                         join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                         where (string.IsNullOrEmpty(t2.TrackingNo)
                         && (t2.ProjectType == inhouseProjectType || t2.ProjectType == purSynthesisProjectType)
                         && (t2.IsOnHold == false || t2.IsOnHold == null))
                         || t2.IsPurchase == true
                         orderby t2.PurchaseDate descending
                         select t2).Distinct();

            var inventory = db.SZ_Inventory.ToList();
            var list = new List<SZ_QuotationModel>();
            var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
            var scistatusdata = db.SZ_ScientistStatus.ToList();
            var qdids = model.Select(x => x.Id).ToList();
            var quoteformdata = db.SZ_QuoteDetails_Form.Where(x => qdids.Contains(x.QuoteDetailsId)).ToList();
            foreach (var k in model.OrderByDescending(x => x.PurchaseDate).ThenByDescending(x => x.CreatedDate).ToList())
            {
                SZ_QuotationModel subList = new SZ_QuotationModel();
                subList.QuoteId = k.QuoteId;
                subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                subList.CompanyName = k.SZ_Quotation.CompanyName;
                subList.Email = k.SZ_Quotation.EmailAddress;
                subList.PONumber = k.SZ_Quotation.PONo;
                subList.Ref = k.SZ_Quotation.Ref;
                subList.Remark = k.SZ_Quotation.Remark;
                subList.MoveToScientistDate = k.MoveToScientistDate;
                subList.SZ_QuotationProductModel = new List<SZ_QuotationProductModel>();

                SZ_QuotationProductModel objlist = new SZ_QuotationProductModel();
                objlist.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                objlist.ScientistFormCount = quoteformdata.Where(x => x.QuoteDetailsId == k.Id).Count();
                objlist.QuoteDetailsId = k.Id;
                objlist.CASNo = k.CASNo;
                objlist.CATNo = k.CATNo;
                objlist.CreatedDate = k.CreatedDate;
                objlist.ImagePath = k.ImagePath;
                objlist.IsUploadServer = k.IsUploadServer;
                objlist.LeadTime = k.LeadTime;
                objlist.Price = k.Price;
                objlist.ProductId = k.ProductId;
                objlist.ProductName = k.ProductName;
                objlist.QuoteId = k.QuoteId;
                objlist.RequiredQty = k.RequiredQty;
                objlist.BatchNo = inventory.Where(x => x.Id == k.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                objlist.AdditionalBatchNo = k.AdditionalBatchNo;
                objlist.MoveToDispatch = k.MoveToDispatch;
                objlist.MoveToProject = k.MoveToProject;
                objlist.MoveProjectDate = k.MoveProjectDate;
                objlist.Remark = k.Remark;
                objlist.PurchaseStatus = k.PurchaseStatus;
                objlist.PurchaseDate = k.PurchaseDate;
                objlist.EstimateCompleteDate = k.EstimateCompleteDate;
                objlist.PurchaseDDLStatus = k.PurchaseDDLStatus;
                objlist.PurchaseRemark = k.PurchaseRemark;
                objlist.Reason = k.Reason;
                if (k.ProjectStatus != null)
                {
                    objlist.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                }
                objlist.ScientistStatustext = scistatusdata.Where(x => x.Id == k.ScientistStatus).Select(x => x.Name).FirstOrDefault();
                objlist.IsSynthesisLog = k.IsSynthesisLog;
                subList.SZ_QuotationProductModel.Add(objlist);

                list.Add(subList);
            }
            return View(list);

        }

        public ActionResult PriceList()
        {
            if (!SessionCookieManagement.IsPrice && !SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }

            var categorymasterlist = db.SZ_CategoryMaster.OrderBy(x => x.Name).ToList();
            var listcategorymaster = new List<SelectListItem>();
            listcategorymaster.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });

            foreach (var item in categorymasterlist)
            {
                listcategorymaster.Add(new SelectListItem
                {
                    Text = item.Name,
                    Value = item.Id.ToString()
                });
            }

            ViewBag.categorymasterlist = listcategorymaster;
            return View();
        }

        public ActionResult ProductMaster()
        {
            return View();
        }
        public ActionResult PurchaseProductMaster()
        {
            return View();
        }

        public ActionResult CategoryMasterList()
        {
            var model = db.SZ_CategoryMaster.ToList();
            return View(model);
        }

        public ActionResult AddCategoryMaster(int id = 0)
        {
            var model = db.SZ_CategoryMaster.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new SZ_CategoryMaster();

            return View(model);
        }

        public ActionResult AddCategoryMasterRange()
        {
            var model = db.SZ_CategoryMasterRange.FirstOrDefault();
            if (model == null)
                model = new SZ_CategoryMasterRange();

            return View(model);
        }

        [HttpPost]
        public JsonResult AddCategoryMasterRangeData(SZ_CategoryMasterRange model, FormCollection form)
        {
            var data = db.SZ_CategoryMasterRange.FirstOrDefault();
            if (data != null)
            {
                data.TenStartRange = model.TenStartRange;
                data.TenEndRange = model.TenEndRange;
                data.TwentyfiveStartRange = model.TwentyfiveStartRange;
                data.TwentyfiveEndRange = model.TwentyfiveEndRange;
                data.FiftyStartRange = model.FiftyStartRange;
                data.FiftyEndRange = model.FiftyEndRange;
                data.OnehundredStartRange = model.OnehundredStartRange;
                data.OnehundredEndRange = model.OnehundredEndRange;
                data.TwohundredFiftyStartRange = model.TwohundredFiftyStartRange;
                data.TwohundredFiftyEndRange = model.TwohundredFiftyEndRange;
                data.FivehundredStartRange = model.FivehundredStartRange;
                data.FivehundredEndRange = model.FivehundredEndRange;
                data.OneThousandStartRange = model.OneThousandStartRange;
                data.OneThousandEndRange = model.OneThousandEndRange;
                data.UpdatedDate = DateTime.Now;
                data.UpdatedBy = SessionCookieManagement.UserName;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            else
            {
                data = new SZ_CategoryMasterRange();
                data.TenStartRange = model.TenStartRange;
                data.TenEndRange = model.TenEndRange;
                data.TwentyfiveStartRange = model.TwentyfiveStartRange;
                data.TwentyfiveEndRange = model.TwentyfiveEndRange;
                data.FiftyStartRange = model.FiftyStartRange;
                data.FiftyEndRange = model.FiftyEndRange;
                data.OnehundredStartRange = model.OnehundredStartRange;
                data.OnehundredEndRange = model.OnehundredEndRange;
                data.TwohundredFiftyStartRange = model.TwohundredFiftyStartRange;
                data.TwohundredFiftyEndRange = model.TwohundredFiftyEndRange;
                data.FivehundredStartRange = model.FivehundredStartRange;
                data.FivehundredEndRange = model.FivehundredEndRange;
                data.OneThousandStartRange = model.OneThousandStartRange;
                data.OneThousandEndRange = model.OneThousandEndRange;
                data.UpdatedDate = DateTime.Now;
                data.UpdatedBy = SessionCookieManagement.UserName;
                db.SZ_CategoryMasterRange.Add(data);
                db.SaveChanges();
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AddCategoryMasterData(SZ_CategoryMaster model, FormCollection form)
        {
            try
            {
                if (model.Id == 0)
                {
                    var checkcompanyavailable = db.SZ_CategoryMaster.Where(x => x.Name.ToLower() == model.Name.ToLower()).FirstOrDefault();
                    if (checkcompanyavailable == null)
                    {
                        SZ_CategoryMaster objComp = new SZ_CategoryMaster();
                        objComp.Name = model.Name;
                        objComp.Rating = model.Rating;
                        objComp.Ten = model.Ten;
                        objComp.Twentyfive = model.Twentyfive;
                        objComp.Fifty = model.Fifty;
                        objComp.Onehundred = model.Onehundred;
                        objComp.TwohundredFifty = model.TwohundredFifty;
                        objComp.Fivehundred = model.Fivehundred;
                        objComp.OneThousand = model.OneThousand;
                        objComp.TenUSD = model.TenUSD;
                        objComp.TwentyfiveUSD = model.TwentyfiveUSD;
                        objComp.FiftyUSD = model.FiftyUSD;
                        objComp.OnehundredUSD = model.OnehundredUSD;
                        objComp.TwohundredFiftyUSD = model.TwohundredFiftyUSD;
                        objComp.FivehundredUSD = model.FivehundredUSD;
                        objComp.OneThousandUSD = model.OneThousandUSD;

                        objComp.CreatedDate = DateTime.Now;
                        objComp.Updateddate = DateTime.Now;
                        objComp.CreatedBy = SessionCookieManagement.UserName;
                        objComp.UpdatedBy = SessionCookieManagement.UserName;
                        db.SZ_CategoryMaster.Add(objComp);
                        db.SaveChanges();

                    }
                    else
                    {
                        return Json(new
                        {
                            success = false,
                            message = "Category master already available."
                        }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    var checkcompanyavailable = db.SZ_CategoryMaster.Where(x => x.Name.ToLower() == model.Name.ToLower() && x.Id != model.Id).FirstOrDefault();
                    if (checkcompanyavailable != null)
                    {
                        return Json(new
                        {
                            success = false,
                            message = "Category master already available."
                        }, JsonRequestBehavior.AllowGet);
                    }
                    var comp = db.SZ_CategoryMaster.Where(x => x.Id == model.Id).FirstOrDefault();
                    if (comp != null)
                    {
                        comp.Name = model.Name;
                        comp.Rating = model.Rating;
                        comp.Updateddate = DateTime.Now;
                        comp.UpdatedBy = SessionCookieManagement.UserName;
                        comp.Ten = model.Ten;
                        comp.Twentyfive = model.Twentyfive;
                        comp.Fifty = model.Fifty;
                        comp.Onehundred = model.Onehundred;
                        comp.TwohundredFifty = model.TwohundredFifty;
                        comp.Fivehundred = model.Fivehundred;
                        comp.OneThousand = model.OneThousand;
                        comp.TenUSD = model.TenUSD;
                        comp.TwentyfiveUSD = model.TwentyfiveUSD;
                        comp.FiftyUSD = model.FiftyUSD;
                        comp.OnehundredUSD = model.OnehundredUSD;
                        comp.TwohundredFiftyUSD = model.TwohundredFiftyUSD;
                        comp.FivehundredUSD = model.FivehundredUSD;
                        comp.OneThousandUSD = model.OneThousandUSD;
                        db.Entry(comp).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult UploadDocumentAndData(int id)
        {
            if (!SessionCookieManagement.IsDispatch && !SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }

            var model = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            return PartialView("_UploadDocumentAndData", model);
        }


        [HttpPost]
        public ActionResult UploadDocumentQuotedetails(FormCollection form)
        {
            int id = Convert.ToInt32(Request.Form.Get("Id"));
            string attacheddata = Request.Form.Get("attachedData");
            var quotationrecord = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            quotationrecord.AttachedDataList = attacheddata;
            var file = Request.Files["coadocument"];
            if (file != null)
            {
                var fileName = Path.GetFileName(file.FileName);
                var extension = Path.GetExtension(file.FileName);
                string newfileName = Guid.NewGuid().ToString() + "" + extension;
                var path = Path.Combine(Server.MapPath("~/Content/UploadDocument/"), newfileName);
                file.SaveAs(path);
                quotationrecord.COAPath = "../Content/UploadDocument/" + newfileName;
                quotationrecord.AdminScientistStatus = "COA/Data Sent";
                quotationrecord.ClientStatus = "COA/Data Sent";
                if (!quotationrecord.LastUploadDate.HasValue)
                {
                    quotationrecord.IsFirstTimeDataUpload = true;
                }
                else
                {
                    quotationrecord.IsFirstTimeDataUpload = false;
                }
                quotationrecord.LastUploadDate = DateTime.Now;
            }
            var analyticaldata = Request.Files["analyticaldata"];
            if (analyticaldata != null)
            {
                var fileAnalyticalName = Path.GetFileName(analyticaldata.FileName);
                var analyticalextension = Path.GetExtension(analyticaldata.FileName);
                string newanalyticalfileName = Guid.NewGuid().ToString() + "" + analyticalextension;
                var analyticalpath = Path.Combine(Server.MapPath("~/Content/UploadDocument/"), newanalyticalfileName);
                analyticaldata.SaveAs(analyticalpath);
                quotationrecord.AnalyticalData = "../Content/UploadDocument/" + newanalyticalfileName;
                quotationrecord.AdminScientistStatus = "COA/Data Sent";
                quotationrecord.ClientStatus = "COA/Data Sent";
                if (!quotationrecord.LastUploadDate.HasValue)
                {
                    quotationrecord.IsFirstTimeDataUpload = true;
                }
                else
                {
                    quotationrecord.IsFirstTimeDataUpload = false;
                }
                quotationrecord.LastUploadDate = DateTime.Now;
            }

            if (form.Get("delcoa") == "true")
            {
                quotationrecord.COAPath = string.Empty;
            }
            if (form.Get("deldata") == "true")
            {
                quotationrecord.AnalyticalData = string.Empty;
            }

            db.Entry<SZ_QuotationDetail>(quotationrecord).State = EntityState.Modified;
            db.SaveChanges();

            return Json("Success", JsonRequestBehavior.AllowGet);
        }

        public ActionResult ClientAdmin(int id)
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            ViewBag.CompanyId = id;
            return View();
        }

        public ActionResult Client()
        {
            if (!SessionCookieManagement.IsClient)
            {
                return RedirectToAction("Index", "Home");
            }
            if (string.IsNullOrEmpty(SessionCookieManagement.LoginCompanyName))
            {
                return RedirectToAction("Index", "Home");
            }

            string logCompName = Request.Cookies["LoginCompanyName"].Value;
            var id = db.SZ_CompanyList.Where(x => x.Name.ToLower() == logCompName).Select(x => x.Id).FirstOrDefault();
            ViewBag.CompanyId = id;
            return View();
        }

        public ActionResult RecentProductSubmit()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }

        public ActionResult ShortQtyData()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }

        [HttpPost]
        public ActionResult LoadRecentProductData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                var list = (from p in db.Products
                            join si in db.SZ_Inventory on p.Id equals si.ProductId
                            where p.Published == true && p.Deleted == false
                            orderby si.CreatedDate descending
                            select new
                            {
                                product = p,
                                createdDate = si.CreatedDate
                            }).Distinct().ToList();

                if (!string.IsNullOrEmpty(searchValue) && searchValue.ToLower().StartsWith("last week"))
                {
                    int weekNo = Convert.ToInt32(searchValue.ToLower().Replace("last week ", ""));
                    int days = 7 * weekNo;
                    DateTime startdate = DateTime.Now.AddDays(-days);
                    DateTime endDate = DateTime.Now;

                    list = (from i in list
                            where i.createdDate.Date <= endDate.Date && i.createdDate.Date >= startdate.Date
                            select i).ToList();
                }

                var inventoryList = db.SZ_Inventory.ToList();
                var quotationDetailsForm = db.SZ_QuoteDetailForm.ToList();
                var quotationDetail = db.SZ_QuotationDetail.ToList();

                var model = new List<ProjectListModel>();
                int count = 1;

                list.ForEach(k =>
                {
                    ProjectListModel subList = new ProjectListModel();

                    subList.CreatedDate = k.createdDate;
                    subList.ProductId = k.product.Id;
                    subList.ProductName = k.product.Name;
                    subList.CASNo = k.product.ManufacturerPartNumber;
                    subList.CATNo = k.product.Sku;

                    subList.ScientistName = "<span id='scname_" + k.product.Id + "'></span>";
                    subList.MoveProjectDateText = "<span id='dtsubmisstion_" + k.product.Id + "'></span>";
                    subList.RequiredQty = "<span id='reqqty_" + k.product.Id + "'></span>";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.product.Id + "' class='addbatch'><option value=''>--Select--</option>";
                    int additionalselectedbatchno = 0;
                    var proBatchData = inventoryList.Where(x => x.ProductId == subList.ProductId).OrderBy(x => x.Id).ToList();
                    if (proBatchData.Count > 0)
                    {
                        int probatchcount = 1;
                        foreach (var r in proBatchData)
                        {
                            string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            if (r.IsApproved == false)
                            {
                                text = "*" + text;
                            }
                            string selected = string.Empty;
                            if (probatchcount == proBatchData.Count())
                            {
                                selected = "selected ";
                                subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";


                                var datass = quotationDetailsForm.Where(x => x.BatchCode == r.BatchNo).Select(x => new
                                {
                                    ID = x.Id,
                                    CreatedDate = x.CreatedDate,
                                    ScientistName = x.ScientistName,
                                    ProductId = x.SZ_QuotationDetail.ProductId,
                                    ReqQty = x.SZ_QuotationDetail.RequiredQty
                                }).OrderByDescending(x => x.CreatedDate).FirstOrDefault();

                                if (datass != null)
                                {
                                    subList.ScientistName = "<span id='scname_" + k.product.Id + "'>" + datass.ScientistName + "</span>";
                                    subList.MoveProjectDateText = "<span id='dtsubmisstion_" + k.product.Id + "'>" + datass.CreatedDate.ToShortDateString() + "</span>";
                                    subList.RequiredQty = "<span id='reqqty_" + k.product.Id + "'>" + datass.ReqQty + "</span>";
                                }
                                else
                                {
                                    selected = "";
                                }
                            }
                            subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + " data-value='" + r.BatchNo + "'>" + text + "</option>";
                            probatchcount += 1;
                        }
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.SrPo = count;


                    var quotedata = quotationDetail.Where(x => x.ProductId == subList.ProductId && x.MoveToProject == true && string.IsNullOrEmpty(subList.TrackingNo)).FirstOrDefault();
                    if (quotedata != null)
                    {
                        subList.MoveToInvoice = true;
                    }

                    count += 1;
                    model.Add(subList);
                });

                model = model.OrderByDescending(x => x.CreatedDate).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue) && !searchValue.ToLower().StartsWith("last week"))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpPost]
        public ActionResult LoadShortqtyData()
        {
            try
            {
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                var length = Request.Form.GetValues("length").FirstOrDefault();
                //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
                //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

                //Paging Size (10,20,50,100)
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int recordsTotal = 0;

                var list = (from p in db.Products
                            join si in db.SZ_Inventory on p.Id equals si.ProductId
                            //  where p.Published == true && p.Deleted == false
                            orderby si.CreatedDate descending
                            group si by new { p, si.CreatedDate, si.Qty } into g
                            select new
                            {
                                product = g.Key.p,
                                CreatedDate = g.Key.CreatedDate,
                                Amount = g.Sum(t3 => t3.Qty)
                            })
                            .Where(x => x.Amount < 100)
                            .ToList();

                var model = new List<ProjectListModel>();
                int count = 1;
                var proids = list.Select(x => x.product.Id).ToList();
                var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();
                var quoteformdata = db.SZ_QuoteDetailForm.ToList();
                var quotedetailsData = db.SZ_QuotationDetail.Where(x => proids.Contains(x.ProductId.Value) && x.MoveToProject == true && string.IsNullOrEmpty(x.TrackingNo)).ToList();
                foreach (var k in list)
                {
                    bool isvalidEntry = true;
                    ProjectListModel subList = new ProjectListModel();
                    subList.ChkFirstRow = "<input type='checkbox' value='" + k.product.Id + "' class='clsSaverow' />";
                    subList.CreatedDate = k.CreatedDate;
                    subList.ProductId = k.product.Id;
                    subList.ProductName = k.product.Name;
                    subList.CASNo = k.product.ManufacturerPartNumber;
                    subList.CATNo = k.product.Sku;
                    subList.ScientistName = "<span id='scname_" + k.product.Id + "'></span>";
                    subList.MoveProjectDateText = "<span id='dtsubmisstion_" + k.product.Id + "'></span>";
                    subList.RequiredQty = "<span id='reqqty_" + k.product.Id + "'></span>";
                    subList.AdditionalBatchNoText = "<select id='additionalBatch_" + k.product.Id + "' class='addbatch'><option value=''>--Select--</option>";
                    if (k.product.Sku == "SZ-A009038")
                    {
                    }
                    decimal? amountcount = 0;
                    var proBatchData = inventorydata.Where(x => x.ProductId == subList.ProductId).ToList();
                    if (proBatchData.Count > 0)
                    {
                        int probatchcount = 1;
                        foreach (var r in proBatchData)
                        {
                            string text = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            if (r.IsApproved == false)
                            {
                                text = "*" + text;
                            }
                            string selected = string.Empty;
                            if (probatchcount == proBatchData.Count())
                            {
                                selected = "selected ";
                                subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";


                                var datass = quoteformdata.Where(x => x.BatchCode == r.BatchNo).Select(x => new
                                {
                                    ID = x.Id,
                                    CreatedDate = x.CreatedDate,
                                    ScientistName = x.ScientistName,
                                    ProductId = x.SZ_QuotationDetail.ProductId,
                                    ReqQty = x.SZ_QuotationDetail.RequiredQty
                                }).OrderByDescending(x => x.CreatedDate).FirstOrDefault();

                                if (datass != null)
                                {
                                    subList.ScientistName = "<span id='scname_" + k.product.Id + "'>" + datass.ScientistName + "</span>";
                                    subList.MoveProjectDateText = "<span id='dtsubmisstion_" + k.product.Id + "'>" + datass.CreatedDate.ToShortDateString() + "</span>";
                                    subList.RequiredQty = "<span id='reqqty_" + k.product.Id + "'>" + datass.ReqQty + "</span>";
                                }
                                else
                                {
                                    selected = "";
                                }
                            }
                            subList.AdditionalBatchNoText += "<option value='" + r.Id.ToString() + "' " + selected + " data-value='" + r.BatchNo + "'>" + text + "</option>";
                            probatchcount += 1;

                            amountcount += Convert.ToInt32(r.Qty);
                        }
                    }

                    if (amountcount > 100)
                    {
                        isvalidEntry = false;
                        continue;
                    }
                    subList.AdditionalBatchNoText += "</select>";
                    subList.SrPo = count;

                    var quotedata = quotedetailsData.Where(x => x.ProductId == subList.ProductId && x.MoveToProject == true && string.IsNullOrEmpty(subList.TrackingNo)).FirstOrDefault();
                    if (quotedata != null)
                    {
                        subList.MoveToInvoice = true;
                    }
                    if (isvalidEntry)
                    {
                        count += 1;
                        model.Add(subList);
                    }
                }

                model = model.OrderByDescending(x => x.CreatedDate).ToList();

                //Search
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = searchValue.ToLower().Trim();
                    model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(searchValue))
                                        || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(searchValue))
                                        || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(searchValue))
                                        || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(searchValue))
                                        || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(searchValue))).ToList();
                }

                //total number of rows count   
                recordsTotal = model.Count();
                //Paging   
                var data = model.Skip(skip).Take(pageSize).ToList();

                //var finalData = PrepareQuotationListModel(data);
                //Returning Json Data  
                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        [HttpGet]
        public ActionResult GetInfoByBatchNo(string batchno)
        {
            var data = db.SZ_QuoteDetailForm.Where(x => x.BatchCode == batchno).Select(x => new
            {
                ID = x.Id,
                CreatedDate = x.CreatedDate,
                ScientistName = x.ScientistName,
                ProductId = x.SZ_QuotationDetail.ProductId,
                ReqQty = x.SZ_QuotationDetail.RequiredQty
            }).OrderByDescending(x => x.CreatedDate).FirstOrDefault();

            if (data == null)
                return Json(new SZ_QuoteDetailForm(), JsonRequestBehavior.AllowGet);

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetChildCOAByBatchId(int batchId)
        {
            var masterCOA = db.SZ_MasterCOA.Where(x => x.BatchId == batchId).FirstOrDefault();
            if (masterCOA != null)
            {
                var childCOA = db.SZ_ChildCOA.Where(x => x.MasterCOAID == masterCOA.Id).OrderBy(x => x.Id).ToList();
                if (childCOA != null && childCOA.Count > 0)
                {
                    return Json(childCOA, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoQuotationGenerate(List<int> id)
        {
            try
            {
                int refNo = 1;
                string value = string.Empty;
                string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
                var SZ_Quotationdata = (from i in db.SZ_Quotation
                                        where i.Ref.StartsWith(matchingstring)
                                        select i).ToList();
                if (SZ_Quotationdata.Count > 0)
                {
                    refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                    int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                    value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-" + newbrokerrewf.ToString().PadLeft(2, '0');
                }
                else
                {
                    value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-01";
                }
                // string value = "SZ-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM");


                SZ_Quotation objquote = new SZ_Quotation();
                objquote.Ref = value;
                objquote.CompanyId = db.SZ_CompanyList.Where(x => x.Name.ToLower().Contains("synzeal")).Select(x => x.Id).FirstOrDefault();
                objquote.CompanyName = db.SZ_CompanyList.Where(x => x.Name.ToLower().Contains("synzeal")).Select(x => x.Name).FirstOrDefault();
                objquote.EmailAddress = "standards@synzeal.com";
                objquote.IsImageAttach = true;
                objquote.PONo = value;
                objquote.Remark = "";
                objquote.TermsId = null;
                objquote.CountryType = "";

                objquote.CreatedDate = DateTime.Now;
                if (!string.IsNullOrEmpty(objquote.PONo))
                {
                    objquote.PODate = DateTime.Now;
                }
                objquote.CreatedBy = SessionCookieManagement.UserName;

                if (objquote.CountryType == "Export")
                {
                    objquote.IsAnalyticalData = true;
                }
                db.SZ_Quotation.Add(objquote);
                db.SaveChanges();

                int QuoteId = objquote.Id;

                var productData = db.Products.Where(x => id.Contains(x.Id)).ToList();

                int displayOrder = 0;
                foreach (var i in productData)
                {
                    SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                    objdetails.IsUploadServer = true;
                    objdetails.CASNo = i.ManufacturerPartNumber;
                    objdetails.CATNo = i.Sku;
                    objdetails.CreatedDate = DateTime.Now;
                    objdetails.ImagePath = string.Empty;
                    objdetails.LeadTime = string.Empty;
                    objdetails.Price = string.Empty;
                    objdetails.ProductId = i.Id;
                    objdetails.ProductName = i.Name;
                    objdetails.QuoteId = objquote.Id;
                    objdetails.DisplayOrder = displayOrder;
                    objdetails.ProductRemark = string.Empty;
                    objdetails.ProcessState = (int)EnumList.ProcessState.MoveToProject;
                    objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                    objdetails.MoveProjectDate = DateTime.Now;
                    objdetails.MoveToProject = true;
                    objdetails.ProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
                    objdetails.SrPo = (displayOrder + 1);
                    db.SZ_QuotationDetail.Add(objdetails);
                    db.SaveChanges();
                    displayOrder += 1;
                }
                return Json(new
                {
                    success = true,
                    message = "Quotation generated successfully.Please check Project > Inhouse section."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult QuickAdd()
        {
            var listProjectTypeItems = new List<SelectListItem>();

            if (!SessionCookieManagement.IsScientist && !SessionCookieManagement.IsSubScientist)
            {
                listProjectTypeItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
            }
            foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
            {
                var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                int val = (int)r;
                if (SessionCookieManagement.IsScientist && !SessionCookieManagement.IsSubScientist)
                {
                    if (text == "In-House")
                    {
                        listProjectTypeItems.Add(new SelectListItem
                        {
                            Text = text,
                            Value = val.ToString(),
                            Selected = true
                        });
                    }
                }
                else
                {
                    if (text == "Purchase" || text == "In-House")
                    {
                        listProjectTypeItems.Add(new SelectListItem
                        {
                            Text = text,
                            Value = val.ToString()
                        });
                    }
                }
            }
            ViewBag.listProjectTypeItems = listProjectTypeItems;
            return View();
        }

        [HttpGet]
        public ActionResult addTempQuick(string search)
        {
            try
            {
                search = search.Trim();
                var product = db.Products.Where(x => x.Sku.Contains(search) && x.Deleted == false && x.Published == true).FirstOrDefault();
                if (product != null)
                {
                    SZ_TempQuickAdd objmodel = new SZ_TempQuickAdd();
                    objmodel.CatNo = product.Sku;
                    objmodel.CasNo = product.ManufacturerPartNumber;
                    objmodel.CreatedDate = DateTime.Now;
                    objmodel.ProductId = product.Id;
                    objmodel.ProductName = product.Name;
                    objmodel.Qty = "0";
                    db.SZ_TempQuickAdd.Add(objmodel);
                    db.SaveChanges();

                    return Json(new
                    {
                        success = true,
                        data = "Product added successfully."
                    }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new
                    {
                        success = false,
                        data = "Product not found"
                    }, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    data = ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult GetTempQuickData()
        {
            var listItems = new List<SelectListItem>();
            var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("scientist")).ToList();

            if (SessionCookieManagement.IsScientist && !SessionCookieManagement.IsSubScientist)
            {
                foreach (var term in scienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    if (customerName == SessionCookieManagement.UserName)
                    {
                        listItems.Add(new SelectListItem
                        {
                            Text = customerName,
                            Value = term.Id.ToString()
                        });
                    }
                }
            }
            else
            {
                listItems.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                foreach (var term in scienList)
                {
                    string customerName = string.Empty;
                    var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    listItems.Add(new SelectListItem
                    {
                        Text = customerName,
                        Value = term.Id.ToString()
                    });
                }
            }
            ViewBag.listScientist = listItems;


            var data = db.SZ_TempQuickAdd.ToList();

            return Json(new
            {
                html = PartialViewdata(this, "_PartialTempQuickAdd", data)
            }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult SaveQuickAddDataQuotation(FormCollection form)
        {
            var projType = Convert.ToInt32(form.Get("listProjectTypeItems"));
            int refNo = 1;
            string value = string.Empty;
            string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
            var SZ_Quotationdata = (from i in db.SZ_Quotation
                                    where i.Ref.StartsWith(matchingstring)
                                    select i).ToList();
            if (SZ_Quotationdata.Count > 0)
            {
                refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-" + newbrokerrewf.ToString().PadLeft(2, '0');
            }
            else
            {
                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-01";
            }
            int QuoteId = 0;
            //new value 
            //value = "SZ-" + DateTime.Now.ToString("HHmm") + "-" + DateTime.Now.ToString("yy") + "-" + DateTime.Now.ToString("ddMM");

            SZ_Quotation objquote = new SZ_Quotation();
            objquote.Ref = value;
            objquote.PONo = value;
            objquote.PODate = DateTime.Now;
            objquote.CompanyId = db.SZ_CompanyList.Where(x => x.Name.ToLower().Contains("synzeal")).Select(x => x.Id).FirstOrDefault();
            objquote.CompanyName = db.SZ_CompanyList.Where(x => x.Name.ToLower().Contains("synzeal")).Select(x => x.Name).FirstOrDefault();
            objquote.EmailAddress = "standards@synzeal.com";
            objquote.IsImageAttach = false;
            objquote.Remark = string.Empty;
            objquote.TermsId = null;
            objquote.CountryType = string.Empty;
            objquote.IsToBe = false;
            objquote.CreatedDate = DateTime.Now;
            objquote.CreatedBy = SessionCookieManagement.UserName;

            if (objquote.CountryType == "Export")
            {
                objquote.IsAnalyticalData = true;
            }
            db.SZ_Quotation.Add(objquote);
            db.SaveChanges();

            QuoteId = objquote.Id;

            int displayOrder = 0;
            var productData = db.SZ_TempQuickAdd.ToList();
            foreach (var i in productData)
            {
                SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                objdetails.IsUploadServer = true;
                objdetails.CASNo = i.CasNo;
                objdetails.CATNo = i.CatNo;
                objdetails.CreatedDate = DateTime.Now;
                objdetails.ProductId = i.ProductId;
                objdetails.ProductName = i.ProductName;
                objdetails.QuoteId = objquote.Id;
                objdetails.DisplayOrder = displayOrder;
                objdetails.ScientistCustomerId = Convert.ToInt32(form.Get("scientistid_" + i.Id));
                objdetails.RequiredQty = Convert.ToString(form.Get("qty_" + i.Id));
                objdetails.ProjectType = Convert.ToString(projType);
                if (projType == (int)EnumList.ProjectType.Purchase || projType == (int)EnumList.ProjectType.PurSynthesis)
                {
                    objdetails.ProjectStatus = (int)EnumList.ProjectStatus.MoveToPurchase;
                    //objdetails.ProcessState = (int)EnumList.ProcessState.MoveToPurchase;
                    objdetails.PurchaseDate = DateTime.Now;

                    if (objdetails.ProcessState <= (int)EnumList.ProcessState.MoveToPurchase)
                    {
                        objdetails.ProcessState = (int)EnumList.ProcessState.MoveToPurchase;
                    }
                }
                else
                {
                    objdetails.ProcessState = (int)EnumList.ProcessState.MoveToProject;
                    objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                }
                var quotedetailsPO = db.SZ_QuotationDetail.Where(x => x.QuoteId == objdetails.QuoteId).Max(x => x.SrPo);
                int srPo = 0;
                if (quotedetailsPO != null && quotedetailsPO != 0 && quotedetailsPO.HasValue)
                {
                    srPo = quotedetailsPO.Value + 1;
                }
                else
                {
                    srPo = 1;
                }
                objdetails.SrPo = srPo;
                objdetails.MoveToProject = true;
                objdetails.MoveProjectDate = DateTime.Now;
                objdetails.EstimateCompleteDate = DateTime.Now;

                db.SZ_QuotationDetail.Add(objdetails);
                db.SaveChanges();
                displayOrder += 1;
            }

            foreach (var k in productData)
            {
                db.Entry(k).State = EntityState.Deleted;
                db.SaveChanges();
            }

            return Json(new
            {
                success = true,
                data = ""
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Followup()
        {
            if (!SessionCookieManagement.IsFollowUp)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }


        [HttpPost]
        public ActionResult UploadFiles()
        {
            // Checking no of files injected in Request object  
            if (Request.Files.Count > 0)
            {
                try
                {
                    //  Get all files from Request object  
                    string uploadfilename = string.Empty;
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        //string path = AppDomain.CurrentDomain.BaseDirectory + "Uploads/";  
                        //string filename = Path.GetFileName(Request.Files[i].FileName);  

                        HttpPostedFileBase file = files[i];
                        string fname;

                        // Checking for Internet Explorer  
                        if (Request.Browser.Browser.ToUpper() == "IE" || Request.Browser.Browser.ToUpper() == "INTERNETEXPLORER")
                        {
                            string[] testfiles = file.FileName.Split(new char[] { '\\' });
                            fname = testfiles[testfiles.Length - 1];
                        }
                        else
                        {
                            fname = file.FileName;
                        }

                        string extension = Path.GetExtension(fname);
                        uploadfilename = Guid.NewGuid().ToString() + "" + extension;
                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath("~/Content/Attachment/"), uploadfilename);
                        file.SaveAs(fname);
                    }
                    // Returns message that successfully uploaded  
                    return Json(uploadfilename, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    return Json("Error occurred. Error details: " + ex.Message, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json("No files selected.", JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult ChangePaymentStatus(int id, bool status)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                var quotedata = db.SZ_Quotation.Where(x => x.Id == data.QuoteId).FirstOrDefault();
                if (quotedata != null)
                {
                    quotedata.IsPayment = status;
                    db.Entry(quotedata).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            return Json("Done", JsonRequestBehavior.AllowGet);
        }

        public ActionResult AttachmentRecord(int id)
        {
            var data = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                ViewBag.Attachment = data.Attachment;
                ViewBag.SuggChemName = data.SuggChemName;
            }
            return PartialView();
        }

        public ActionResult SendDailyPurchaseEmail()
        {
            try
            {
                string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
                string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);
                var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();

                var model = (from i in db.SZ_Quotation
                             join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                             where (string.IsNullOrEmpty(t2.TrackingNo)
                             && (t2.ProjectType == inhouseProjectType || t2.ProjectType == purSynthesisProjectType)
                             && (t2.IsOnHold == false || t2.IsOnHold == null))
                             || t2.IsPurchase == true
                             orderby t2.PurchaseDate descending
                             select t2).Distinct();
                var passmodel = model.Where(x =>
                            //(x.PurchaseDDLStatus == "RFQ"
                            //    || x.PurchaseDDLStatus == null) &&
                            (x.IsSynthesisLog == null || x.IsSynthesisLog == false)
                            && ReadyToDeliverScientistStatusId != x.ScientistStatus).OrderByDescending(x => x.PurchaseDate).ToList();

                if (passmodel != null && passmodel.Count > 0)
                {
                    passmodel = passmodel.Where(x => x.PurchaseDDLStatus == "RFQ" || x.PurchaseDDLStatus == null || x.PurchaseDDLStatus == "").OrderByDescending(x => x.PurchaseDate).ToList();
                }

                try
                {
                    var htmlstring = PartialViewdata(this, "_PartialDailyUpdatePurchaseEmail", passmodel);

                    MailMessage mail = new MailMessage();

                    SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                    mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

                    var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                    if (isDevelopment.ToLower().Contains("true"))
                    {
                        mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                    }
                    else
                    {
                        mail.To.Add("standards@synzeal.com");
                        mail.To.Add("scm@synzeal.com");
                        mail.CC.Add("purchase@synzeal.com");
                        mail.ReplyToList.Add("scm@synzeal.com");
                    }

                    mail.Subject = "SynZeal Research : SPMS Update as on " + DateTime.Now.ToShortDateString() + "," + DateTime.Now.ToShortTimeString();

                    mail.Body = htmlstring;
                    mail.IsBodyHtml = true;

                    SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                    SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mail);
                }
                catch (Exception ex)
                {
                    sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                }

                return Json("success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json("false", JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult SendDailyClientUpdateEmail()
        {
            try
            {
                var data = db.SZ_QuotationDetail.ToList();
                var finaldata = data.Where(x => (x.ResponseClientRemarkDate.HasValue ? (x.ResponseClientRemarkDate.Value.Date == DateTime.Now.Date) : false) || (x.LastUploadDate.HasValue ? x.LastUploadDate.Value.Date == DateTime.Now.Date : false && x.IsFirstTimeDataUpload == true) || (x.LastUploadDate.HasValue ? (x.LastUploadDate.Value.Date == DateTime.Now.Date) : false)).ToList();
                if (finaldata != null && finaldata.Count > 0)
                {
                    List<int> CompanyIds = new List<int>();
                    var model = new List<ProjectListModel>();
                    var proids = finaldata.Select(x => x.ProductId).ToList();
                    var productdata = db.Products.Where(x => proids.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
                    var inventorydata = db.SZ_Inventory.Where(x => proids.Contains(x.ProductId)).ToList();

                    foreach (var i in finaldata)
                    {
                        ProjectListModel objModel = new ProjectListModel();
                        objModel.PONumber = i.SZ_Quotation.PONo;
                        objModel.ProductName = i.ProductName;
                        objModel.CASNo = i.CASNo;
                        objModel.CompanyId = i.SZ_Quotation.CompanyId;
                        objModel.CATNo = i.CATNo;
                        objModel.PODate = i.SZ_Quotation.PODate;
                        objModel.RequiredQty = i.RequiredQty;
                        objModel.EstimateCompleteDate = i.EstimateCompleteDate;
                        if (i.ProductId.HasValue)
                        {
                            var proData = productdata.Where(x => x.Id == i.ProductId && x.Published == true && x.Deleted == false).Count();
                            var proBatchData = inventorydata.Where(x => x.ProductId == i.ProductId).ToList();
                            if (proBatchData.Count > 0 && proData > 0)
                            {
                                foreach (var r in proBatchData)
                                {

                                    if (r.Id == i.AdditionalBatchNo)
                                    {
                                        objModel.SelectedAdditionalBatchNo = r.BatchNo;
                                    }
                                }
                            }
                        }

                        string status = "";
                        if (i.IsFirstTimeDataUpload.HasValue && i.IsFirstTimeDataUpload.Value)
                        {
                            status = "COA/Data Uploaded";
                        }
                        else
                        {
                            if (i.ResponseClientRemarkDate.HasValue && i.ResponseClientRemarkDate.Value.Date == DateTime.Now.Date)
                            {
                                status = "Remarks Update";
                            }
                            if (i.LastUploadDate.HasValue && i.LastUploadDate.Value.Date == DateTime.Now.Date)
                            {
                                status = "COA/Data Update";
                            }
                        }
                        objModel.LastStatus = status;
                        model.Add(objModel);

                        if (!CompanyIds.Contains(objModel.CompanyId.Value))
                        {
                            CompanyIds.Add(objModel.CompanyId.Value);
                        }
                    }

                    var compdata = db.SZ_CompanyList.Where(x => CompanyIds.Contains(x.Id)).ToList();
                    foreach (var id in CompanyIds)
                    {
                        try
                        {
                            var passmodel = model.Where(x => x.CompanyId == id).ToList();
                            var companyData = compdata.Where(x => x.Id == id).FirstOrDefault();
                            ViewBag.CompanyName = companyData.Name;

                            var masterEmail = companyData.MasterEmail;

                            var htmlstring = PartialViewdata(this, "_PartialDailyUpdateEmail", passmodel);

                            MailMessage mail = new MailMessage();

                            SmtpClient SmtpServer = new SmtpClient(ConfigurationManager.AppSettings["Email.Host"]);
                            mail.From = new MailAddress(ConfigurationManager.AppSettings["Email.Username"], "SynZeal Standards");

                            var isDevelopment = ConfigurationManager.AppSettings["IsDevelopment"];
                            if (isDevelopment.ToLower().Contains("true"))
                            {
                                mail.To.Add(ConfigurationManager.AppSettings["DevEmailAddress"].ToString());
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(masterEmail))
                                {
                                    string[] masterEmailStr = masterEmail.Split(';');
                                    foreach (var i in masterEmailStr)
                                    {
                                        if (!string.IsNullOrEmpty(i))
                                        {
                                            mail.To.Add(i);
                                        }
                                    }
                                }
                                //mail.To.Add("standards@synzeal.com");
                                mail.Bcc.Add("standards@synzeal.com");
                                mail.Bcc.Add("noreply.synzeal@gmail.com");
                                mail.ReplyToList.Add("standards@synzeal.com");
                            }

                            mail.Subject = "SynZeal Research : SharePoint Update as on " + DateTime.Now.ToShortDateString() + "," + DateTime.Now.ToShortTimeString();

                            mail.Body = htmlstring;
                            mail.IsBodyHtml = true;

                            SmtpServer.Port = Convert.ToInt32(ConfigurationManager.AppSettings["Port"]);
                            SmtpServer.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Email.Username"], ConfigurationManager.AppSettings["Email.Password"]);
                            SmtpServer.EnableSsl = true;
                            SmtpServer.Send(mail);
                        }
                        catch (Exception ex)
                        {
                            sendErrorMail(ex.LineNumber() + " " + "Error Text : " + ex.Message + " / Stack Trace : " + ex.StackTrace);
                        }
                    }
                }
                return Json("success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json("false", JsonRequestBehavior.AllowGet);
            }
        }

        public string stringProjectStatus(int? projectStatus)
        {
            string str = "";
            foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectStatus)))
            {
                var item = Enum.GetName(typeof(EnumList.ProjectStatus), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)r);
                int val = (int)r;
                if (val == projectStatus)
                {
                    str = text;
                }
            }
            return str;
        }

        [HttpGet]
        public ActionResult CheckProductUsingBatchNo(int szdetailsid, int batchId)
        {
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

            var prodId = db.SZ_Inventory.Where(x => x.Id == batchId).Select(x => x.ProductId).FirstOrDefault();
            if (prodId != 0)
            {

                var data = (from t2 in db.SZ_QuotationDetail
                            where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                                  && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                                  && (t2.MoveToDispatch == null || t2.MoveToDispatch == false)
                                  && t2.Id != szdetailsid && t2.ProductId == prodId
                            select new QuotationListModel
                            {
                                PONumberText = t2.SZ_Quotation.PONo,
                                CompanyName = t2.SZ_Quotation.CompanyName,
                                ProductNameText = t2.ProductName,
                                CASNoText = t2.CASNo,
                                CATNoText = t2.CATNo,
                                RequiredQty = !string.IsNullOrEmpty(t2.RequiredQty) ? t2.RequiredQty : "",
                                ScientistCustomerId = t2.ScientistCustomerId,
                                ScientistName = "",
                                StrProjectStatus = "",
                                ProjectStatus = t2.ProjectStatus,
                                AdditionalBatchNo = t2.AdditionalBatchNo,
                                AdditionalBatchNoText = "",
                                AdminScientistStatus = !string.IsNullOrEmpty(t2.AdminScientistStatus) ? t2.AdminScientistStatus : "",
                                EstimateDispatchDate = t2.EstimateDispatchDate,
                                Reason = !string.IsNullOrEmpty(t2.Reason) ? t2.Reason : "",
                                DataRemark = !string.IsNullOrEmpty(t2.Remark) ? t2.Remark : "",
                                OrderRemark = !string.IsNullOrEmpty(t2.OrderRemark) ? t2.OrderRemark : ""
                            }).ToList();

                var scicustid = data.Select(x => x.ScientistCustomerId).ToList();
                var GenericAttributesData = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && scicustid.Contains(x.EntityId)).ToList();
                foreach (var item in data)
                {
                    string customerName = "";
                    var genericAttr = GenericAttributesData.Where(x => x.KeyGroup == "Customer" && x.EntityId == item.ScientistCustomerId).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    item.ScientistName = customerName;
                    item.StrProjectStatus = stringProjectStatus(item.ProjectStatus);
                    item.EstimateDispatchDateStr = item.EstimateDispatchDate.HasValue ? item.EstimateDispatchDate.Value.ToString() : "";
                    item.AdditionalBatchNoText = db.SZ_Inventory.Where(x => x.Id == item.AdditionalBatchNo && item.AdditionalBatchNo != null).Select(x => x.BatchNo).FirstOrDefault();
                    item.AdditionalBatchNoText = !string.IsNullOrEmpty(item.AdditionalBatchNoText) ? item.AdditionalBatchNoText : "";
                }

                if (data.Count() > 0)
                {
                    return Json(new
                    {
                        Data = "Yes",
                        Record = data
                    }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new
                    {
                        Data = "No"
                    }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(new
                {
                    Data = "No"
                }, JsonRequestBehavior.AllowGet);
            }

        }

        public ActionResult GetQuoteDetailsId(int id, int formid = 0, bool newprodumastr = false)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.ProductId == id).FirstOrDefault();
            if (data == null)
            {
                return RedirectToAction("ProductMaster");
            }
            return RedirectToAction("SubmitForm", new { id = data.Id, formid = formid, isprint = false, isdispatch = false, isnewform = false, newprodumastr = newprodumastr });
        }

        [HttpGet]
        public ActionResult GetBatch(int productId)
        {
            var inventoryData = (from i in db.SZ_Inventory
                                 join f in db.SZ_QuoteDetailForm on i.BatchNo equals f.BatchCode
                                 into ps
                                 from p in ps.DefaultIfEmpty()
                                 where i.ProductId == productId
                                 select new
                                 {
                                     BatchNo = i.BatchNo,
                                     BatchId = i.Id,
                                     QuoteDetailsId = p != null ? p.QuotationDetailsId : 0,
                                     FormId = p != null ? p.Id : 0,
                                     ProductId = productId,
                                 }).ToList();
            if (inventoryData.Count != 0)
            {

                return Json(new
                {
                    Data = "Yes",
                    Record = inventoryData
                }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new
                {
                    Data = "No"
                }, JsonRequestBehavior.AllowGet);
            }

        }

        public ActionResult SynthesisLog()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }


        public ActionResult ExportAllProductdata()
        {
            var result = (from i in db.SZ_Quotation
                          select i).ToList();

            var szInventory = (from i in db.SZ_Inventory
                               select i).ToList();

            var categorylist = (from i in db.Categories
                                where i.ParentCategoryId == 0 && i.Deleted == false && i.Published == true
                                select i).ToList();

            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet1");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            int loopCount = 2;
            wsSheet1.Cells[loopCount, 1].Value = "Sr No";
            wsSheet1.Cells[loopCount, 2].Value = "Quotation Id";
            wsSheet1.Cells[loopCount, 3].Value = "Company Name";
            wsSheet1.Cells[loopCount, 4].Value = "Product Name";
            wsSheet1.Cells[loopCount, 5].Value = "Price";
            wsSheet1.Cells[loopCount, 6].Value = "Quotation date";
            wsSheet1.Cells[loopCount, 7].Value = "PO No";
            wsSheet1.Cells[loopCount, 8].Value = "PO Date";
            wsSheet1.Cells[loopCount, 9].Value = "Domestic/Export";
            wsSheet1.Cells[loopCount, 10].Value = "Batch Available";
            wsSheet1.Cells[loopCount, 11].Value = "API Name";
            wsSheet1.Cells[loopCount, 12].Value = "Dispatch date";
            wsSheet1.Cells[loopCount, 13].Value = "CAS No";
            wsSheet1.Cells[loopCount, 14].Value = "CAT No";
            wsSheet1.Cells[loopCount, 15].Value = "Qty";
            wsSheet1.Cells[loopCount, 16].Value = "Move to Project";
            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 16])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }

            loopCount = loopCount + 1;
            int srno = 1;
            foreach (var quote in result)
            {
                foreach (var item in quote.SZ_QuotationDetail.ToList())
                {
                    wsSheet1.Cells[loopCount, 1].Value = srno;
                    wsSheet1.Cells[loopCount, 2].Value = quote.Ref;
                    wsSheet1.Cells[loopCount, 3].Value = quote.CompanyName;
                    wsSheet1.Cells[loopCount, 4].Value = item.ProductName;
                    wsSheet1.Cells[loopCount, 5].Value = item.Price;
                    wsSheet1.Cells[loopCount, 6].Value = quote.CreatedDate.HasValue ? quote.CreatedDate.Value.ToShortDateString() : "";
                    wsSheet1.Cells[loopCount, 7].Value = quote.PONo;
                    wsSheet1.Cells[loopCount, 8].Value = quote.PODate;
                    wsSheet1.Cells[loopCount, 9].Value = quote.CountryType;
                    wsSheet1.Cells[loopCount, 10].Value = string.Join(", ", szInventory.Where(x => x.ProductId == item.ProductId).Select(x => x.BatchNo).ToList());
                    wsSheet1.Cells[loopCount, 11].Value = item.ProductId.HasValue ? GetProductParentCategoryName(item.ProductId.Value) : "";
                    wsSheet1.Cells[loopCount, 12].Value = item.EstimateCompleteDate.HasValue ? item.EstimateCompleteDate.Value.ToShortDateString() : "";
                    wsSheet1.Cells[loopCount, 13].Value = item.CASNo;
                    wsSheet1.Cells[loopCount, 14].Value = item.CATNo;
                    wsSheet1.Cells[loopCount, 15].Value = item.RequiredQty;
                    wsSheet1.Cells[loopCount, 16].Value = item.MoveToProject.HasValue ? item.MoveToProject.Value : false;
                    srno += 1;
                    loopCount += 1;
                }
            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "AllReport-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("AllReport-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xls"));
        }

        public ActionResult ExportFromSynthesisLog()
        {

            var GenericAttributesData = db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();

            var categoryData = db.Categories.ToList();
            var productCategoryData = db.Product_Category_Mapping.ToList();
            var model = db.SynthesisLog("", 1, Int32.MaxValue).ToList();
            int? recordsTotal = 0;
            if (model != null)
            {
                recordsTotal = model.Select(x => x.TotalRecord).FirstOrDefault();
            }
            var szInventory = db.SZ_Inventory.ToList();
            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet1");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            int loopCount = 2;
            wsSheet1.Cells[loopCount, 1].Value = "Sr No";
            wsSheet1.Cells[loopCount, 2].Value = "Product Name";
            wsSheet1.Cells[loopCount, 3].Value = "CAS No";
            wsSheet1.Cells[loopCount, 4].Value = "CAT No";
            wsSheet1.Cells[loopCount, 5].Value = "Batch No";
            wsSheet1.Cells[loopCount, 6].Value = "Submitted Name";
            wsSheet1.Cells[loopCount, 7].Value = "API Name";
            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 16])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }
            loopCount = loopCount + 1;
            int srno = 1;
            foreach (var quote in model)
            {
                var submitedbyname = db.SZ_QuoteDetailForm.Where(x => x.ProductName == quote.ProductName).Select(x => x.SubmittedBy).OrderByDescending(x => x).FirstOrDefault();
                var scientistCustomerId = Convert.ToInt32(submitedbyname);
                string customerName = "";
                var genericAttr = GenericAttributesData.Where(x => x.KeyGroup == "Customer" && x.EntityId == scientistCustomerId).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                wsSheet1.Cells[loopCount, 1].Value = srno;
                wsSheet1.Cells[loopCount, 2].Value = quote.ProductName;
                wsSheet1.Cells[loopCount, 3].Value = quote.CASNo;
                wsSheet1.Cells[loopCount, 4].Value = quote.CATNo;
                wsSheet1.Cells[loopCount, 5].Value = string.Join(", ", szInventory.Where(x => x.ProductId == quote.ProductId).Select(x => x.BatchNo).ToList());
                wsSheet1.Cells[loopCount, 6].Value = customerName;
                wsSheet1.Cells[loopCount, 7].Value = quote.ProductId.HasValue ? GetApiNameOfProduct(quote.ProductId.Value, categoryData, productCategoryData) : "";
                srno += 1;
                loopCount += 1;
            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "SynthesislogReport-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("SynthesislogReport-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xls"));
        }

        public ActionResult ExportProjectAllTab(string parameter, string ScientistListItem, string SubScientistListItem
            , string fltactivity, string fltprostatusItem)
        {
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);
            string pursynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            List<string> orderbydetails = new List<String> {
                "Dispatching",
                "Invoiced",
                "Data Approved",
                "Client Confirmation",
                "Data Sent",
                "Data Recording",
                "RM Ordered",
                "In progress",
                "In progress - Delay",
                "Purification",
                "Prep HPLC",
                "Troubleshoot",
                "Clarification",
                "Attention",
                "Not Working",
                "On Hold" };

            var quotationDetailsdata = db.SZ_QuotationDetail.AsEnumerable();
            var list = (from i in db.SZ_Quotation
                        join t2 in quotationDetailsdata on i.Id equals t2.QuoteId
                        where t2.MoveToProject == true && string.IsNullOrEmpty(t2.TrackingNo) && (t2.IsOnHold == false || t2.IsOnHold == null)
                        && (t2.ProjectType != inhouseProjectType || t2.ProjectType == null)
                        orderby t2.MoveProjectDate descending
                        select t2).Distinct();

            list = list.OrderByDescending(x => x.MoveProjectDate).ThenBy(x => x.SrPo);
            var proIds = list.Select(x => x.ProductId).Distinct().ToList();
            var productsData = db.Products.Where(x => proIds.Contains(x.Id) && x.Published == true && x.Deleted == false).ToList();
            var subscilistItems = new List<SelectListItem>();
            var listItems = new List<SelectListItem>();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });
            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });
            var inventorydata = db.SZ_Inventory.Where(x => proIds.Contains(x.ProductId)).ToList();
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });

            var subscienList = objCache.Get("cache.subscienList", () =>
            {
                return db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            });
            foreach (var term in subscienList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }

                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });

            }
            var ReadyToDeliverScientistStatusId = db.SZ_ScientistStatus.Where(x => x.Name.ToLower().Contains("ready for dispatch")).Select(x => x.Id).FirstOrDefault();
            var model = new List<ProjectListModel>();
            foreach (var k in list)
            {
                ProjectListModel subList = new ProjectListModel();
                subList.ReadyToDeliverScientistStatusId = ReadyToDeliverScientistStatusId;
                subList.AdditionalBatchNo = k.AdditionalBatchNo;
                subList.ProjectType = k.ProjectType;
                subList.PODate = k.SZ_Quotation.PODate;
                subList.IsPaymentPending = k.SZ_Quotation.SZ_CompanyList.IsPaymentPending;
                subList.ActivityStatus = k.ActivityStatus;
                subList.ProductId = k.ProductId;
                listItems.ForEach(r =>
                {
                    if (r.Value == Convert.ToString(k.ScientistCustomerId))
                    {
                        subList.SelectedScientistName = r.Text;
                    }
                });
                if (subList.ProductId.HasValue)
                {
                    var proData = productsData.Where(x => x.Id == subList.ProductId).Count();
                    var proBatchData = inventorydata.Where(x => x.ProductId == subList.ProductId).ToList();
                    if (proBatchData.Count > 0 && proData > 0)
                    {
                        proBatchData.ForEach(r =>
                        {
                            if (r.Id == subList.AdditionalBatchNo)
                            {
                                subList.SelectedAdditionalBatchNo = r.BatchNo + " (" + Convert.ToInt32(r.Qty) + ")";
                            }
                        });
                    }
                }
                subList.MoveProjectDateText = k.MoveProjectDate.HasValue ? k.MoveProjectDate.Value.ToShortDateString() : "";
                subList.AdditionalBatchNo = k.AdditionalBatchNo;
                subList.QuoteId = k.SZ_Quotation.Id;
                subList.ProductId = k.ProductId;
                subList.ProductName = k.ProductName;
                subList.ExplainationSecond = k.ExplainationSecond;
                subList.IsImageAttach = k.SZ_Quotation.IsImageAttach;
                subList.CompanyName = k.SZ_Quotation.SZ_CompanyList.Name;
                subList.Email = k.SZ_Quotation.EmailAddress;
                subList.PONumber = k.SZ_Quotation.PONo;
                subList.Ref = k.SZ_Quotation.Ref;
                subList.Remark = k.SZ_Quotation.Remark;
                subList.MoveProjectDate = k.MoveProjectDate;
                subList.QuoteDetailsId = k.Id;
                subList.CASNo = k.CASNo;
                subList.CATNo = k.CATNo;
                subList.CreatedDate = k.CreatedDate;
                subList.ImagePath = k.ImagePath;
                subList.IsUploadServer = k.IsUploadServer;
                subList.LeadTime = k.LeadTime;
                subList.Price = k.Price;

                subList.QuoteId = k.QuoteId;
                subList.ProjectType = k.ProjectType;
                subList.ScientistCustomerId = k.ScientistCustomerId;

                subList.RequiredQty = k.RequiredQty;
                subList.ProjectStatus = k.ProjectStatus;
                subList.IsOnHold = k.IsOnHold;
                if (k.ProjectStatus != null)
                {
                    subList.ProjectStatustext = SZ_Helper.GetEnumDescription((EnumList.ProjectStatus)(int)k.ProjectStatus);
                }
                subList.ScientistStatus = k.ScientistStatus;
                subList.BatchCode1 = k.BatchCode1;
                subList.BatchCode2 = k.BatchCode2;
                subList.Qty1 = k.Qty1;
                subList.Qty2 = k.Qty2;
                subList.EstimateCompleteDate = k.EstimateCompleteDate;
                subList.PreviousEstCompleteDate = k.PreviousEstCompleteDate;
                subList.MoveToDispatch = k.MoveToDispatch;
                subList.MoveToProject = k.MoveToProject;
                subList.Remark = k.Remark;
                subList.SrPo = k.SrPo;
                subList.AdminScientistStatus = k.AdminScientistStatus;
                subList.InvoiceNo = k.InvoiceNo;
                subList.InvoiceRemark = k.InvoiceRemark;

                subList.MoveProjectDate = k.MoveProjectDate;
                subList.SubScientistName = k.SubScientistName;
                subList.DispatchedStatus = k.DispatchedStatus;
                subList.MoveToDispatch = k.MoveToDispatch;
                subList.MoveToInvoice = k.MoveToInvoice;
                subList.IsDispatchApprove = k.IsDispatchApprove;

                subList.IsPayment = k.SZ_Quotation.IsPayment;

                subList.OrderRemark = k.OrderRemark;

                subList.Reason = k.Reason;
                if (k.MoveToScientistDate.HasValue)
                {
                    subList.MoveToScientistDateStr = k.MoveToScientistDate.Value.ToShortDateString();
                }
                subList.DifficultyLevel = k.DifficultyLevel;
                subList.IsCancel = k.IsCancel;
                subList.IsPriority = k.IsPriority;
                subList.LastWeekUpdate = k.LastWeekUpdate;
                subList.ProStatus = k.ProStatus;
                subList.PreviousStatus = k.PreviousStatus;
                foreach (EnumList.DifficultyLevel r in Enum.GetValues(typeof(EnumList.DifficultyLevel)))
                {
                    var item = Enum.GetName(typeof(EnumList.DifficultyLevel), r);
                    var test = r.ToString();
                    string text = SZ_Helper.GetEnumDescription((EnumList.DifficultyLevel)(int)r);
                    int val = (int)r;
                    string selected = "";
                    if (Convert.ToString(val) == k.DifficultyLevel)
                    {
                        subList.DifficultyLevelText = text;
                    }
                }
                foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                {
                    int val = (int)r;
                    string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                    if (Convert.ToString(val) == k.ProStatus)
                    {
                        subList.SelectedProStatus = text;
                    }
                }
                foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
                {
                    int val = (int)r;
                    string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                    if (Convert.ToString(val) == k.PreviousStatus)
                    {
                        subList.PreviousStatusText = text;
                    }
                }
                subscilistItems.ForEach(r =>
                {
                    string selected = string.Empty;
                    if (r.Value == Convert.ToString(k.SubScientistName))
                    {
                        subList.SelectedSubScientistName = r.Text;
                    }
                });
                foreach (EnumList.ProjectType r in Enum.GetValues(typeof(EnumList.ProjectType)))
                {
                    var item = Enum.GetName(typeof(EnumList.ProjectType), r);
                    var test = r.ToString();
                    string text = SZ_Helper.GetEnumDescription((EnumList.ProjectType)(int)r);
                    int val = (int)r;
                    string selected = "";
                    if (Convert.ToString(val) == k.ProjectType)
                    {
                        subList.SelectedProjectType = text;
                    }
                }
                model.Add(subList);
            }

            model = model.OrderByDescending(item => Enumerable.Reverse(orderbydetails).ToList().IndexOf(item.ProStatus)).ToList();
            if (!string.IsNullOrEmpty(ScientistListItem))
            {
                int sciid = Convert.ToInt32(ScientistListItem);
                model = model.Where(x => x.ScientistCustomerId == sciid).ToList();
            }
            if (!string.IsNullOrEmpty(SubScientistListItem))
            {
                int subsciid = Convert.ToInt32(SubScientistListItem);
                model = model.Where(x => x.SubScientistCustomerId == subsciid).ToList();
            }
            if (!string.IsNullOrEmpty(fltprostatusItem))
            {
                model = model.Where(x => x.ProStatus == fltprostatusItem).ToList();
            }

            if (!string.IsNullOrEmpty(fltactivity))
            {
                model = model.Where(x => x.ActivityStatus == fltactivity).ToList();
            }
            //Search
            if (!string.IsNullOrEmpty(parameter))
            {
                parameter = parameter.ToLower().Trim();
                model = model.Where(m => (m.CompanyName != null && m.CompanyName.ToLower().Contains(parameter))).ToList();
                //model = model.Where(m => (m.SelectedScientistName != null && m.SelectedScientistName.ToLower().Contains(parameter))
                //                    || (m.CompanyName != null && m.CompanyName.ToLower().Contains(parameter))
                //                    || (m.PONumber != null && m.PONumber.ToLower().Contains(parameter))
                //                    || (m.ProductName != null && m.ProductName.ToLower().Contains(parameter))
                //                    || (m.Price != null && m.Price.ToLower().Contains(parameter))
                //                    || (m.CASNo != null && m.CASNo.ToLower().Contains(parameter))
                //                    || (m.CATNo != null && m.CATNo.ToLower().Contains(parameter))
                //                    || (m.SelectedProjectType != null && m.SelectedProjectType.ToLower().Contains(parameter))
                //                    || (m.RequiredQty != null && m.RequiredQty.ToLower().Contains(parameter))
                //                    || (m.SelectedAdditionalBatchNo != null && m.SelectedAdditionalBatchNo.ToLower().Contains(parameter))
                //                    || (m.BatchNo != null && m.BatchNo.ToLower().Contains(parameter))
                //                    || (m.MoveProjectDateText != null && m.MoveProjectDateText.ToString().ToLower().Contains(parameter))
                //                    || (m.EstimateCompleteDateText != null && m.EstimateCompleteDateText.ToString().ToLower().Contains(parameter))
                //                    || (m.AdminScientistStatus != null && m.AdminScientistStatus.ToLower().Contains(parameter))
                //                    || (m.ProjectStatustext != null && m.ProjectStatustext.ToLower().Contains(parameter))
                //                    || (m.Remark != null && m.Remark.ToLower().Contains(parameter))
                //                    || (m.ActivityStatus != null && m.ActivityStatus.ToLower().Contains(parameter))
                //                    || (m.LeadTime != null && m.LeadTime.ToLower().Contains(parameter))).ToList();
            }
            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet1");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            int loopCount = 3;
            int totalColumn = 19;
            if (SessionCookieManagement.UserEmail == "jinish@synzeal.com")
            {
                totalColumn = 20;
            }
            using (ExcelRange Rng = wsSheet1.Cells[1, 1, 1, totalColumn])
            {
                Rng.Value = "Company Wise Report";
                Rng.Merge = true;
                Rng.Style.Font.Bold = true;
                Rng.Style.Font.Size = 22;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#3c8dbc");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            }

            wsSheet1.Cells[loopCount, 1].Value = "Sr No";
            var columnCnt = 2;
            if (SessionCookieManagement.UserEmail == "jinish@synzeal.com")
            {
                wsSheet1.Cells[loopCount, columnCnt].Value = "Company Name";
                columnCnt++;
            }
            wsSheet1.Cells[loopCount, columnCnt].Value = "PO No";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Product Detail";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "CAS No";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "CAT No";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "QTY";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Batch No";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "PO Date";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Lead Time";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Scientist";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Sub-Scientist";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Diff";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Activity";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Status";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Current Status";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Estimated Dispatched Date";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Prev. Status";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Prev. Current Status";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Prev. Estimated Dispatched Date";
            columnCnt++;
            wsSheet1.Cells[loopCount, columnCnt].Value = "Project Type";
            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, columnCnt])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }

            loopCount = loopCount + 1;
            int srno = 1;
            foreach (var quote in model)
            {
                columnCnt = 2;
                wsSheet1.Cells[loopCount, 1].Value = srno;
                if (SessionCookieManagement.UserEmail == "jinish@synzeal.com")
                {
                    wsSheet1.Cells[loopCount, columnCnt].Value = quote.CompanyName;
                    columnCnt++;
                }
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.PONumber;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.ProductName;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.CASNo;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.CATNo;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.RequiredQty;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.SelectedAdditionalBatchNo;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.PODate.HasValue ? quote.PODate.Value.ToShortDateString() : "";
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.LeadTime;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.SelectedScientistName;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.SelectedSubScientistName;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.DifficultyLevelText;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.ActivityStatus;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.SelectedProStatus;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.ExplainationSecond;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.EstimateCompleteDate.HasValue ? quote.EstimateCompleteDate.Value.ToShortDateString() : "";
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.PreviousStatusText;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.LastWeekUpdate;
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.PreviousEstCompleteDate.HasValue ? quote.PreviousEstCompleteDate.Value.ToShortDateString() : "";
                columnCnt++;
                wsSheet1.Cells[loopCount, columnCnt].Value = quote.SelectedProjectType;

                if (quote.IsCancel.HasValue && quote.IsCancel.Value)
                {
                    using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, columnCnt])
                    {
                        Rng.Style.Font.Color.SetColor(Color.White);
                        Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#ff3300");
                        Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                    }
                }

                srno += 1;
                loopCount += 1;
            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "ExportReport-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("ExportReport-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xls"));
        }

        public ActionResult ExportAllCompanydata()
        {
            var result = (from i in db.SZ_CompanyList
                          select i).ToList();

            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet1");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            int loopCount = 2;
            wsSheet1.Cells[loopCount, 1].Value = "Sr No";
            wsSheet1.Cells[loopCount, 2].Value = "Name";
            wsSheet1.Cells[loopCount, 3].Value = "Master Email";
            wsSheet1.Cells[loopCount, 4].Value = "Country Type";
            wsSheet1.Cells[loopCount, 5].Value = "User Dist Type";
            wsSheet1.Cells[loopCount, 6].Value = "Address";
            wsSheet1.Cells[loopCount, 7].Value = "Location";
            wsSheet1.Cells[loopCount, 8].Value = "Country";
            wsSheet1.Cells[loopCount, 9].Value = "Contact";
            wsSheet1.Cells[loopCount, 10].Value = "Followup Time";
            wsSheet1.Cells[loopCount, 11].Value = "Payment Terms";
            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 11])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }
            loopCount += 1;
            int srno = 1;
            foreach (var quote in result)
            {

                wsSheet1.Cells[loopCount, 1].Value = srno;
                wsSheet1.Cells[loopCount, 2].Value = quote.Name;
                wsSheet1.Cells[loopCount, 3].Value = quote.MasterEmail;
                wsSheet1.Cells[loopCount, 4].Value = quote.CountryType;
                wsSheet1.Cells[loopCount, 5].Value = quote.UserDistType;
                wsSheet1.Cells[loopCount, 6].Value = quote.Address;
                wsSheet1.Cells[loopCount, 7].Value = quote.Location;
                wsSheet1.Cells[loopCount, 8].Value = quote.Country;
                wsSheet1.Cells[loopCount, 9].Value = quote.Contact;
                wsSheet1.Cells[loopCount, 10].Value = quote.FollowupTime;
                wsSheet1.Cells[loopCount, 11].Value = quote.PaymentTerms;
                srno += 1;
                loopCount += 1;
            }
            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "ExportCompanyList-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("ExportCompanyList-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xls"));
        }

        public string GetProductParentCategoryName(int productid)
        {
            string categoryName = "";
            var categoryList = (from i in db.Product_Category_Mapping
                                join t2 in db.Categories on i.CategoryId equals t2.Id
                                where i.ProductId == productid && t2.Deleted == false && t2.Published == true
                                select t2).ToList();

            if (categoryList != null && categoryList.Count > 0)
            {
                foreach (var item in categoryList)
                {
                    if (item.ParentCategoryId == 0)
                    {
                        return item.Name;
                    }
                    else
                    {
                        return GetParentCatNameByCategoryId(item.ParentCategoryId);
                    }
                }
            }

            return categoryName;
        }

        public string GetParentCatNameByCategoryId(int parentcategoryId)
        {
            string categoryName = "";
            var categoryList = (from i in db.Categories
                                where i.Id == parentcategoryId && i.Deleted == false && i.Published == true
                                select i).ToList();
            if (categoryList != null && categoryList.Count > 0)
            {
                foreach (var item in categoryList)
                {
                    if (item.ParentCategoryId == 0)
                    {
                        return item.Name;
                    }
                    else
                    {
                        return GetParentCatNameByCategoryId(item.ParentCategoryId);
                    }
                }
            }
            return categoryName;
        }


        [HttpPost]
        public ActionResult GenerateRFQQuote(int id, string rfqid)
        {
            var company = db.SZ_CompanyList.Where(x => x.Id == id).FirstOrDefault();
            int QuoteId = 0;
            if (company.IsBlockCompany.HasValue && company.IsBlockCompany.Value)
            {
                return Json(new
                {
                    success = false,
                    quoteId = QuoteId,
                    message = "Selected company is blocked by admin. You can not generate quote."
                }, JsonRequestBehavior.AllowGet);
            }

            int refNo = 1;
            string value = string.Empty;
            string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
            var SZ_Quotationdata = (from i in db.SZ_Quotation
                                    where i.Ref.StartsWith(matchingstring)
                                    select i).ToList();
            if (SZ_Quotationdata.Count > 0)
            {
                refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-" + newbrokerrewf.ToString().PadLeft(2, '0');
            }
            else
            {
                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-01";
            }

            List<int> rfqIds = new List<int>();
            string[] ids = rfqid.Split(',');
            foreach (var item in ids)
            {
                rfqIds.Add(Convert.ToInt32(item));
            }

            int firstRFQId = rfqIds[0];
            var rfqdata = db.SZ_Query.Where(x => x.Id == firstRFQId).FirstOrDefault();

            SZ_Quotation objquote = new SZ_Quotation();
            objquote.IsCOA = true;
            objquote.Ref = value;
            objquote.CompanyId = company.Id;
            objquote.CompanyName = company.Name;
            objquote.EmailAddress = rfqdata.Email;
            objquote.ClientRef = string.Empty;
            objquote.IsImageAttach = false;
            objquote.PONo = string.Empty;
            objquote.Remark = string.Empty;
            objquote.TermsId = company.TermsId;
            objquote.CountryType = company.CountryType;
            objquote.UserDistType = company.UserDistType;
            objquote.IsToBe = false;
            objquote.IsQuoteApproved = false;
            objquote.Auction = false;
            objquote.PODate = DateTime.Now;
            objquote.SuggChemName = string.Empty;
            objquote.Attachment = string.Empty;
            objquote.CreatedDate = DateTime.Now;
            objquote.EmailCC = string.Empty;
            if (company.CountryType == "Export")
            {
                objquote.IsAnalyticalData = true;
            }
            objquote.CreatedBy = SessionCookieManagement.UserName;
            db.SZ_Quotation.Add(objquote);
            db.SaveChanges();

            QuoteId = objquote.Id;

            int displayOrder = 0;
            foreach (var i in rfqIds)
            {
                var rfqAlldata = db.SZ_Query.Where(x => x.Id == i).FirstOrDefault();
                if (rfqAlldata != null)
                {
                    SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                    objdetails.IsUploadServer = true;
                    objdetails.CASNo = rfqAlldata.CASNo;
                    objdetails.CATNo = rfqAlldata.CATNo;
                    objdetails.CreatedDate = DateTime.Now;
                    objdetails.ImagePath = string.Empty;
                    objdetails.LeadTime = string.Empty;
                    objdetails.EstimateDispatchDate = null;
                    objdetails.Price = rfqAlldata.Package.Trim();
                    objdetails.ProductId = rfqAlldata.ProductId;
                    objdetails.ProductName = rfqAlldata.ProductName;
                    objdetails.QuoteId = objquote.Id;
                    objdetails.DisplayOrder = displayOrder;
                    objdetails.RequiredQty = rfqAlldata.Package.Replace("KG", "").Replace("MG", "").Replace("G", "").Trim();
                    objdetails.ProductRemark = rfqAlldata.AdditionalComment;
                    objdetails.ProcessState = (int)EnumList.ProcessState.InProgress;
                    objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                    objdetails.IsSynthesisLog = false;

                    db.SZ_QuotationDetail.Add(objdetails);
                    db.SaveChanges();
                    displayOrder += 1;

                    db.Entry(rfqAlldata).State = EntityState.Deleted;
                    db.SaveChanges();
                }
            }


            return Json(new
            {
                success = true,
                quoteId = QuoteId
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Messanger()
        {
            ViewBag.Customer = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.Email.ToLower().Contains("@synzeal.com")).OrderBy(x => x.Email).ToList();
            return View();
        }

        public ActionResult RetestCOA()
        {
            if (!SessionCookieManagement.IsDispatch && !SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }

            ViewBag.IsDispatchLogin = false;
            if (SessionCookieManagement.IsDispatch && !SessionCookieManagement.IsAdmin)
            {
                ViewBag.IsDispatchLogin = true;
            }
            return View();
        }
        public ActionResult MarkInstock(int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.ProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("done", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult LinkedFormData(int Id, int formid)
        {
            var product = db.SZ_QuoteDetails_Form.Where(x => x.FormId == formid && x.QuoteDetailsId == Id).FirstOrDefault();
            if (product == null)
            {
                SZ_QuoteDetails_Form objdetform = new SZ_QuoteDetails_Form();
                objdetform.CreatedDate = DateTime.Now;
                objdetform.FormId = formid;
                objdetform.QuoteDetailsId = Id;
                db.SZ_QuoteDetails_Form.Add(objdetform);
                db.SaveChanges();
            }
            return Json("done", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult addRetestData(int Id, List<int> Inventoryid)
        {
            var product = db.Products.Where(x => x.Id == Id).FirstOrDefault();

            foreach (var item in Inventoryid)
            {
                SZ_Retest objCOA = new SZ_Retest();
                objCOA.CatNo = product.Sku;
                objCOA.InventoryId = item;
                objCOA.Createddate = DateTime.Now;
                objCOA.ProductId = Id;
                objCOA.IsApproved = false;
                objCOA.IsRetestLater = false;
                objCOA.CreatedBy = SessionCookieManagement.UserName;
                db.Entry(objCOA).State = EntityState.Added;
                db.SaveChanges();
            }
            return Json("done", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult updateBatchnoInQuotation(int batchId, int quotationdetailId)
        {
            var quotedetailsData = db.SZ_QuotationDetail.Where(x => x.Id == quotationdetailId).FirstOrDefault();

            if (quotedetailsData != null)
            {
                quotedetailsData.AdditionalBatchNo = batchId;
                db.Entry(quotedetailsData).State = EntityState.Modified;
                db.SaveChanges();

                InsertLog("Quotation details", SessionCookieManagement.UserName + " has updated " + quotedetailsData.AdditionalBatchNo + " from dispatch tab in Retest COA module.");
            }
            return Json("done", JsonRequestBehavior.AllowGet);
        }


        public JsonResult LoadRetestData(string tabname)
        {
            try
            {

                var from_Date = string.Empty;
                var to_Date = string.Empty;
                var ApiName = string.Empty;
                var CasProductName = string.Empty;
                if (Request.Form.GetValues("from_Date") != null)
                {
                    from_Date = Request.Form.GetValues("from_Date")[0].ToString(); ;
                }
                if (Request.Form.GetValues("to_Date") != null)
                {
                    to_Date = Request.Form.GetValues("to_Date")[0].ToString(); ;
                }
                if (Request.Form.GetValues("ApiName") != null)
                {
                    ApiName = Request.Form.GetValues("ApiName")[0].ToString(); ;
                }
                if (Request.Form.GetValues("CasProductName") != null)
                {
                    CasProductName = Request.Form.GetValues("CasProductName")[0].ToString(); ;
                }
                bool setDefaultdate = false;
                DateTime startDate = DateTime.MinValue;
                DateTime endDate = DateTime.MinValue;
                if (!string.IsNullOrEmpty(from_Date))
                {
                    startDate = Convert.ToDateTime(from_Date);
                }
                if (!string.IsNullOrEmpty(to_Date))
                {
                    endDate = Convert.ToDateTime(to_Date);
                }
                if (tabname == "previous")
                {
                    startDate = Convert.ToDateTime(DateTime.Now.AddYears(-10));
                    endDate = Convert.ToDateTime(DateTime.Now.AddDays(-1));
                }
                var length = Request.Form.GetValues("length").FirstOrDefault();
                var draw = Request.Form.GetValues("draw").FirstOrDefault();
                var start = Request.Form.GetValues("start").FirstOrDefault();
                int numberOfObjectsPerPage = Convert.ToInt32(Request.Form["length"]);
                var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
                int pageSize = length != null ? Convert.ToInt32(length) : 0;
                int skip = start != null ? Convert.ToInt32(start) : 0;
                int pageNo = 1;
                if (skip > 0)
                {
                    pageNo = (skip / numberOfObjectsPerPage) + 1;
                }
                TempData["tabname"] = tabname;
                string instock = Convert.ToString((int)EnumList.ProjectType.InStock);
                var categoryData = (from i in db.Categories
                                    join t2 in db.Product_Category_Mapping on i.Id equals t2.CategoryId
                                    join t3 in db.Categories on i.ParentCategoryId equals t3.Id
                                    select new
                                    {
                                        categoryName = t3.Name,
                                        ProductId = t2.ProductId
                                    });

                List<ReTestModel> model = new List<ReTestModel>();
                var deletedRetest = db.SZ_DeleteRetest.Select(x => x.BatchId).ToList();

                if (tabname == "all")
                {
                    var allproductsData = (from i in db.Products
                                           join t2 in db.SZ_Inventory on i.Id equals t2.ProductId into ps
                                           //join i in db.SZ_Inventory on p.Id equals i.ProductId into ps
                                           from inv in ps.DefaultIfEmpty()
                                           join t3 in db.SZ_MasterCOA on inv.Id equals t3.BatchId into psb
                                           from invb in psb.DefaultIfEmpty()
                                           where !i.Deleted && i.Published && !db.SZ_DeleteRetest.Any(x => x.BatchId == inv.Id)
                                           orderby i.Sku.Replace("SZ-", "")
                                           select new ReTestModel
                                           {
                                               RetestId = i.Id,
                                               BatchId = inv != null ? inv.Id : 0,
                                               BatchNo = inv != null ? inv.BatchNo : "",
                                               CASNo = i.ManufacturerPartNumber,
                                               CATNo = i.Sku,
                                               COAId = invb != null ? invb.Id : 0,
                                               ProductId = i.Id,
                                               ProductName = i.Name,
                                               QTY = inv != null ? inv.Qty : 0,
                                               ReTestdate = invb != null ? invb.ReTestDate : null,
                                               AnalysisDate = invb != null ? invb.AnalysisDate : null,
                                               RetestRemark = inv != null ? inv.ReTestRemark : "",
                                               HPLC = invb != null ? invb.HPLCGCELSD : "",
                                               TGA = invb != null ? invb.TGALoss : "",
                                           }).ToList();
                    allproductsData = allproductsData.Where(x => x.BatchId != null && x.BatchId != 0).ToList();

                    model = (from i in allproductsData
                             orderby i.ProductName
                             select new ReTestModel
                             {
                                 HPLC = i.HPLC,
                                 TGA = i.TGA,
                                 FirstRow = "<input type='checkbox' value='" + i.BatchId + "'  data-batchid'" + i.BatchId + "'  data-productid='" + i.ProductId + "' class='clsRetest' />",
                                 RetestId = i.RetestId,
                                 BatchId = i.BatchId,
                                 BatchNo = i.BatchNo,
                                 CASNo = i.CASNo,
                                 CATNo = i.CATNo,
                                 COAId = i.COAId,
                                 ProductId = i.ProductId,
                                 ProductName = i.ProductName,
                                 QTY = i.QTY,
                                 ReTestdate = i.ReTestdate,
                                 AnalysisDate = i.AnalysisDate,
                                 AnalysisDateText = i.AnalysisDate.HasValue ? i.AnalysisDate.Value.ToShortDateString() : null,
                                 ReTestDateText = i.ReTestdate.HasValue ? i.ReTestdate.Value.ToShortDateString() : null,
                                 APIName = categoryData.Where(x => x.ProductId == i.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                 RetestRemark = i.RetestRemark,
                                 RetestRemarkText = "<input type='text' style='width:100%' id='remark_" + i.BatchId + "' value='" + i.RetestRemark + "'/>",
                                 Diffmonth = Common.GetMonthsBetween(i.AnalysisDate, i.ReTestdate),
                                 LastRow = "<i class='fa fa-times' onclick='deletebatchretest(" + i.BatchId + ")'></i>"
                             }).ToList();
                }
                else if (tabname == "upcomming")
                {

                    if (startDate == DateTime.MinValue)
                    {
                        setDefaultdate = true;
                        startDate = DateTime.Now.Date;
                    }
                    if (endDate == DateTime.MinValue)
                    {
                        setDefaultdate = true;
                        endDate = DateTime.Now.AddDays(14).Date;
                    }

                    var catNos = (from t2 in db.SZ_Inventory
                                  join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                  where t3.ReTestDate != null && t3.ReTestDate >= startDate && t3.ReTestDate <= endDate
                                  select t3.CATNo).Distinct().ToList();

                    var datas = (from i in db.Products
                                 join t2 in db.SZ_Inventory on i.Id equals t2.ProductId into ps
                                 //join i in db.SZ_Inventory on p.Id equals i.ProductId into ps
                                 from inv in ps.DefaultIfEmpty()
                                 join t3 in db.SZ_MasterCOA on inv.Id equals t3.BatchId into psb
                                 from invb in psb.DefaultIfEmpty()
                                 where catNos.Contains(i.Sku) && !i.Deleted && i.Published
                                 orderby i.Sku.Replace("SZ-", "")
                                 //(from t2 in db.SZ_Inventory
                                 //                   join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                 //                   where t3.ReTestDate != null && t3.ReTestDate >= startDate && t3.ReTestDate <= endDate
                                 select new ReTestModel
                                 {
                                     BatchId = inv != null ? inv.Id : 0,
                                     BatchNo = inv != null ? inv.BatchNo : "",
                                     CASNo = i.ManufacturerPartNumber,
                                     CATNo = i.Sku,
                                     COAId = invb != null ? invb.Id : 0,
                                     ProductId = inv != null ? inv.ProductId : 0,
                                     ProductName = i.Name,
                                     QTY = inv != null ? inv.Qty : 0,
                                     ReTestdate = invb != null ? invb.ReTestDate : null,
                                     RetestRemark = inv != null ? inv.ReTestRemark : "",
                                     AnalysisDate = invb != null ? invb.AnalysisDate : null,
                                     APIName = inv != null ? categoryData.Where(x => x.ProductId == inv.ProductId).Select(x => x.categoryName).FirstOrDefault() : "",
                                     HPLC = invb != null ? invb.HPLCGCELSD : "",
                                     TGA = invb != null ? invb.TGALoss : "",
                                 }).ToList();

                    datas = datas.Where(x => !deletedRetest.Any(y => y == x.BatchId)).ToList();

                    var ActuallRetestData = (from t2 in datas
                                                 //where t2.ReTestdate.Value.Date >= startDate && t2.ReTestdate.Value.Date <= endDate
                                             select new ReTestModel
                                             {
                                                 FirstRow = "<input type='checkbox' value='" + t2.BatchId + "' data-productid='" + t2.ProductId + "' class='clsRetest' />",
                                                 BatchId = t2.BatchId,
                                                 BatchNo = t2.BatchNo,
                                                 CASNo = t2.CASNo,
                                                 CATNo = t2.CATNo,
                                                 COAId = t2.COAId,
                                                 ProductId = t2.ProductId,
                                                 ProductName = t2.ProductName,
                                                 QTY = t2.QTY,
                                                 ReTestdate = t2.ReTestdate,
                                                 ReTestDateText = t2.ReTestdate.HasValue ? t2.ReTestdate.Value.ToShortDateString() : null,
                                                 AnalysisDate = t2.AnalysisDate,
                                                 AnalysisDateText = t2.AnalysisDate.HasValue ? t2.AnalysisDate.Value.ToShortDateString() : null,
                                                 APIName = t2.APIName,
                                                 RetestRemark = t2.RetestRemark,
                                                 RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t2.BatchId + "'  data-batchid='" + t2.BatchId + "' value='" + t2.RetestRemark + "'/>",
                                                 HPLC = t2.HPLC,
                                                 TGA = t2.TGA,
                                                 Diffmonth = Common.GetMonthsBetween(t2.AnalysisDate, t2.ReTestdate),
                                                 LastRow = "<i class='fa fa-times' onclick='deletebatchretest(" + t2.BatchId + ")'></i>"
                                             }).ToList();

                    model = ActuallRetestData;
                }
                else if (tabname == "dispatch")
                {

                    var datas = (from i in db.SZ_QuotationDetail
                                 join inv in db.SZ_Inventory on i.ProductId equals inv.ProductId
                                 //into ps
                                 //from inv in ps.DefaultIfEmpty()
                                 join t3 in db.SZ_MasterCOA on inv.Id equals t3.BatchId into psb
                                 from invb in psb.DefaultIfEmpty()
                                 where i.ProjectType == instock && (i.MoveToDispatch == false || i.MoveToDispatch == null) && (i.IsOnHold == false || i.IsOnHold == null) && i.ProductId != 0 && i.ProductId != null

                                 orderby i.CATNo.Replace("SZ-", "")
                                 //(from t2 in db.SZ_Inventory
                                 //                   join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                 //                   where t3.ReTestDate != null && t3.ReTestDate >= startDate && t3.ReTestDate <= endDate
                                 select new ReTestModel
                                 {
                                     QuoteDetailId = i.Id,
                                     QuoteId = i.QuoteId,
                                     BatchId = inv != null ? inv.Id : 0,
                                     BatchNo = inv != null ? inv.BatchNo : "",
                                     CASNo = i.CASNo,
                                     CATNo = i.CATNo,
                                     COAId = invb != null ? invb.Id : 0,
                                     ProductId = inv != null ? inv.ProductId : 0,
                                     ProductName = i.ProductName,
                                     QTY = inv != null ? inv.Qty : 0,
                                     ReTestdate = invb != null ? invb.ReTestDate : null,
                                     RetestRemark = inv != null ? inv.ReTestRemark : "",
                                     AnalysisDate = invb != null ? invb.AnalysisDate : null,
                                     APIName = inv != null ? categoryData.Where(x => x.ProductId == inv.ProductId).Select(x => x.categoryName).FirstOrDefault() : "",
                                     HPLC = invb != null ? invb.HPLCGCELSD : "",
                                     TGA = invb != null ? invb.TGALoss : "",
                                     QuotationCreateddate = i.CreatedDate,
                                     QuotationRef = i.SZ_Quotation.Ref,
                                     CompanyName = i.SZ_Quotation.CompanyName,
                                     PONumber = i.SZ_Quotation.PONo,
                                     PONumberDate = i.SZ_Quotation.PODate,
                                     ISBatchSelected = inv != null ? (i.AdditionalBatchNo == inv.Id ? true : false) : false
                                 }).ToList();
                    datas = datas.Where(x => !deletedRetest.Any(y => y == x.BatchId)).ToList();
                    var ActuallRetestData = (from t2 in datas
                                                 //where t2.ReTestdate.Value.Date >= startDate && t2.ReTestdate.Value.Date <= endDate
                                             select new ReTestModel
                                             {
                                                 QuoteDetailId = t2.QuoteDetailId,
                                                 QuoteId = t2.QuoteId,
                                                 FirstRow = "<input type='checkbox' value='" + t2.BatchId + "' data-productid='" + t2.ProductId + "' class='clsRetest' />",
                                                 BatchId = t2.BatchId,
                                                 BatchNo = t2.BatchNo,
                                                 CASNo = t2.CASNo,
                                                 CATNo = t2.CATNo,
                                                 COAId = t2.COAId,
                                                 ProductId = t2.ProductId,
                                                 ProductName = t2.ProductName,
                                                 QTY = t2.QTY,
                                                 ReTestdate = t2.ReTestdate,
                                                 ReTestDateText = t2.ReTestdate.HasValue ? t2.ReTestdate.Value.ToShortDateString() : null,
                                                 AnalysisDate = t2.AnalysisDate,
                                                 AnalysisDateText = t2.AnalysisDate.HasValue ? t2.AnalysisDate.Value.ToShortDateString() : null,
                                                 APIName = t2.APIName,
                                                 RetestRemark = t2.RetestRemark,
                                                 RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t2.BatchId + "'  data-batchid='" + t2.BatchId + "' value='" + t2.RetestRemark + "'/>",
                                                 HPLC = t2.HPLC,
                                                 TGA = t2.TGA,
                                                 QuotationCreateddate = t2.QuotationCreateddate,
                                                 QuotationRef = t2.QuotationRef,
                                                 CompanyName = t2.CompanyName,
                                                 CreatedDateText = t2.QuotationCreateddate.HasValue ? t2.QuotationCreateddate.Value.ToShortDateString() : "",
                                                 PONumber = t2.PONumber,
                                                 PONumberDate = t2.PONumberDate,
                                                 PONumberDateText = t2.PONumberDate.HasValue ? t2.PONumberDate.Value.ToShortDateString() : "",
                                                 ISBatchSelected = t2.ISBatchSelected,
                                                 Diffmonth = Common.GetMonthsBetween(t2.AnalysisDate, t2.ReTestdate),
                                                 LastRow = "<i class='fa fa-times' onclick='deletebatchretest(" + t2.BatchId + ")'></i>",
                                                 ChangeBatch = "<i class='fa fa-clone' title='Change Batch No' onclick='GetAllBatchNo(" + t2.ProductId + "," + t2.QuoteDetailId + ")' ></i>"
                                             }).ToList();

                    model = ActuallRetestData;
                }

                else if (tabname == "quote")
                {
                    if (startDate == DateTime.MinValue)
                    {
                        setDefaultdate = true;
                        startDate = DateTime.Now.AddDays(-7).Date;
                    }
                    if (endDate == DateTime.MinValue)
                    {
                        setDefaultdate = true;
                        endDate = DateTime.Now.Date;
                        TimeSpan ts = new TimeSpan(23, 59, 0);
                        endDate = endDate.Date + ts;
                    }

                    var allproductsData = (from i in db.SZ_QuotationDetail
                                           join inv in db.SZ_Inventory on i.ProductId equals inv.ProductId
                                           //into ps
                                           //from inv in ps.DefaultIfEmpty()
                                           join t3 in db.SZ_MasterCOA on inv.Id equals t3.BatchId into psb
                                           from invb in psb.DefaultIfEmpty()
                                           where (i.CATNo != null || i.CATNo != "" || i.CATNo.Trim() != "" || i.CATNo.Trim().ToLower().StartsWith("sz-")) && i.CreatedDate >= startDate && i.CreatedDate <= endDate
                                           orderby i.CreatedDate descending
                                           select new ReTestModel
                                           {
                                               HPLC = invb != null ? invb.HPLCGCELSD : "",
                                               TGA = invb != null ? invb.TGALoss : "",
                                               QuoteId = i.QuoteId,
                                               RetestId = i.Id,
                                               BatchId = inv != null ? inv.Id : 0,
                                               BatchNo = inv != null ? inv.BatchNo : "",
                                               CASNo = i.CASNo,
                                               CATNo = i.CATNo,
                                               COAId = invb != null ? invb.Id : 0,
                                               ProductId = i.Id,
                                               ProductName = i.ProductName,
                                               QTY = inv != null ? inv.Qty : 0,
                                               ReTestdate = invb != null ? invb.ReTestDate : null,
                                               AnalysisDate = invb != null ? invb.AnalysisDate : null,
                                               RetestRemark = inv != null ? inv.ReTestRemark : "",
                                               QuotationRef = i.SZ_Quotation.Ref,
                                               CompanyName = i.SZ_Quotation.CompanyName,
                                               QuotationCreateddate = i.SZ_Quotation.CreatedDate
                                           }).ToList();


                    allproductsData = allproductsData.Where(i => (i.CATNo != null || i.CATNo != "") && i.QuotationCreateddate.HasValue ? (i.QuotationCreateddate.Value.Date >= startDate && i.QuotationCreateddate.Value.Date <= endDate) : false).ToList();
                    allproductsData = allproductsData.Where(x => !deletedRetest.Any(y => y == x.BatchId)).ToList();
                    model = (from i in allproductsData
                             orderby i.ProductName
                             select new ReTestModel
                             {
                                 HPLC = i.HPLC,
                                 TGA = i.TGA,
                                 QuoteId = i.QuoteId,
                                 FirstRow = "<input type='checkbox' value='" + i.BatchId + "' data-batchid'" + i.BatchId + "'   data-productid='" + i.ProductId + "' class='clsRetest' />",
                                 RetestId = i.RetestId,
                                 BatchId = i.BatchId,
                                 BatchNo = i.BatchNo,
                                 CASNo = i.CASNo,
                                 CATNo = i.CATNo,
                                 COAId = i.COAId,
                                 ProductId = i.ProductId,
                                 ProductName = i.ProductName,
                                 QTY = i.QTY,
                                 ReTestdate = i.ReTestdate,
                                 ReTestDateText = i.ReTestdate.HasValue ? i.ReTestdate.Value.ToShortDateString() : null,
                                 AnalysisDate = i.AnalysisDate,
                                 AnalysisDateText = i.AnalysisDate.HasValue ? i.AnalysisDate.Value.ToShortDateString() : null,
                                 APIName = categoryData.Where(x => x.ProductId == i.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                 RetestRemark = i.RetestRemark,
                                 QuotationRef = i.QuotationRef,
                                 CompanyName = i.CompanyName,
                                 QuotationCreateddate = i.QuotationCreateddate,
                                 CreatedDateText = i.QuotationCreateddate.HasValue ? i.QuotationCreateddate.Value.ToShortDateString() : "",
                                 RetestRemarkText = "<input type='text' style='width:100%'  id='remark_" + i.BatchId + "' value='" + i.RetestRemark + "'/>",
                                 Diffmonth = Common.GetMonthsBetween(i.AnalysisDate, i.ReTestdate),
                                 LastRow = "<i class='fa fa-times' onclick='deletebatchretest(" + i.BatchId + ")'></i>"
                             }).ToList();
                }

                else if (tabname == "retestlater")
                {


                    var RetestDatas = (from i in db.SZ_Retest
                                       join t2 in db.SZ_Inventory on i.InventoryId equals t2.Id
                                       join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                       where i.IsApproved == false && i.IsRetestLater == true && (i.IsCompleted == false || i.IsCompleted == null)
                                       select new ReTestModel
                                       {
                                           RetestId = i.Id,
                                           BatchId = t2.Id,
                                           BatchNo = t2.BatchNo,
                                           CASNo = t3 != null ? t3.CASNo : "",
                                           CATNo = t3 != null ? t3.CATNo : "",
                                           COAId = t3 != null ? t3.Id : 0,
                                           ProductId = t3 != null ? t3.ProductId : 0,
                                           ProductName = t3 != null ? t3.ProductName : "",
                                           QTY = t2.Qty,
                                           ReTestdate = t3 != null ? t3.ReTestDate : null,
                                           AnalysisDate = t3 != null ? t3.AnalysisDate : null,
                                           RetestRemark = t2.ReTestRemark,
                                           APIName = categoryData.Where(x => x.ProductId == (t3 != null ? t3.ProductId : 0)).Select(x => x.categoryName).FirstOrDefault(),
                                           HPLC = t3 != null ? t3.HPLCGCELSD : "",
                                           TGA = t3 != null ? t3.TGALoss : "",
                                       }).ToList();

                    var RetestData = (from t3 in RetestDatas
                                      select new ReTestModel
                                      {
                                          RetestId = t3.RetestId,
                                          BatchId = t3.BatchId,
                                          BatchNo = t3.BatchNo,
                                          CASNo = t3.CASNo,
                                          CATNo = t3.CATNo,
                                          COAId = t3.COAId,
                                          ProductId = t3.ProductId,
                                          ProductName = t3.ProductName,
                                          QTY = t3.QTY,
                                          ReTestdate = t3.ReTestdate,
                                          AnalysisDate = t3.AnalysisDate,
                                          AnalysisDateText = t3.AnalysisDate.HasValue ? t3.AnalysisDate.Value.ToShortDateString() : null,
                                          ReTestDateText = t3.ReTestdate.HasValue ? t3.ReTestdate.Value.ToShortDateString() : null,
                                          APIName = categoryData.Where(x => x.ProductId == t3.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                          RetestRemark = t3.RetestRemark,
                                          RetestRemarkText = "<input type='text' style='width:100%' id='remark_" + t3.RetestId + "'  data-batchid='" + t3.BatchId + "' value='" + t3.RetestRemark + "'/>",
                                          HPLC = t3.HPLC,
                                          TGA = t3.TGA,
                                          Diffmonth = Common.GetMonthsBetween(t3.AnalysisDate, t3.ReTestdate),
                                          LastRow = "<i class='fa fa-times' onclick='deletebatchretest(" + t3.BatchId + ")'></i>"
                                      }).ToList();

                    var datas = (from t2 in db.SZ_Inventory
                                 join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                 where t3.ReTestDate != null
                                 select new ReTestModel
                                 {
                                     BatchId = t2.Id,
                                     BatchNo = t2.BatchNo,
                                     CASNo = t3.CASNo,
                                     CATNo = t3.CATNo,
                                     COAId = t3.Id,
                                     ProductId = t3.ProductId,
                                     ProductName = t3.ProductName,
                                     QTY = t2.Qty,
                                     ReTestdate = t3.ReTestDate,
                                     RetestRemark = t2.ReTestRemark,
                                     APIName = categoryData.Where(x => x.ProductId == t3.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                     HPLC = t3 != null ? t3.HPLCGCELSD : "",
                                     TGA = t3 != null ? t3.TGALoss : "",
                                     AnalysisDate = t3 != null ? t3.AnalysisDate : null,
                                 }).ToList();

                    var ActuallRetestData = (from t2 in datas
                                             where t2.ReTestdate.Value.Date >= startDate && t2.ReTestdate.Value.Date <= endDate
                                             select new ReTestModel
                                             {
                                                 BatchId = t2.BatchId,
                                                 BatchNo = t2.BatchNo,
                                                 CASNo = t2.CASNo,
                                                 CATNo = t2.CATNo,
                                                 COAId = t2.COAId,
                                                 ProductId = t2.ProductId,
                                                 ProductName = t2.ProductName,
                                                 QTY = t2.QTY,
                                                 ReTestdate = t2.ReTestdate,
                                                 AnalysisDate = t2.AnalysisDate,
                                                 AnalysisDateText = t2.AnalysisDate.HasValue ? t2.AnalysisDate.Value.ToShortDateString() : null,
                                                 ReTestDateText = t2.ReTestdate.HasValue ? t2.ReTestdate.Value.ToShortDateString() : null,
                                                 APIName = t2.APIName,
                                                 RetestRemark = t2.RetestRemark,
                                                 RetestRemarkText = "<input type='text' style='width:100%' id='remark_" + t2.BatchId + "'  data-batchid='" + t2.BatchId + "' value='" + t2.RetestRemark + "'/>",
                                                 HPLC = t2.HPLC,
                                                 TGA = t2.TGA,
                                                 Diffmonth = Common.GetMonthsBetween(t2.AnalysisDate, t2.ReTestdate),
                                                 LastRow = "<i class='fa fa-times' onclick='deletebatchretest(" + t2.BatchId + ")'></i>"
                                             }).ToList();

                    if (tabname == "previous")
                    {
                        foreach (var item in ActuallRetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.BatchId + "' data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                    else if (tabname == "retest")
                    {
                        foreach (var item in RetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.RetestId + "' data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                    else if (tabname == "retestlater")
                    {
                        foreach (var item in RetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.RetestId + "' data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }

                    else
                    {
                        //Upcomming records

                        foreach (var item in ActuallRetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.BatchId + "' data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }

                        if (!string.IsNullOrEmpty(ApiName) && ApiName != "0")
                        {
                            model = model.Where(x => x.APIName.Trim() == ApiName.Trim()).ToList();
                        }
                    }
                }

                else if (tabname == "previous")
                {

                    if (startDate == DateTime.MinValue)
                    {
                        setDefaultdate = true;
                        startDate = DateTime.Now.AddYears(5).Date;
                    }
                    if (endDate == DateTime.MinValue)
                    {
                        setDefaultdate = true;
                        endDate = DateTime.Now.AddDays(-1).Date;
                    }

                    var catNos = (from t2 in db.SZ_Inventory
                                  join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                  where t3.ReTestDate != null && t3.ReTestDate >= startDate && t3.ReTestDate <= endDate
                                  select t3.CATNo).Distinct().ToList();

                    var datas = (from i in db.Products
                                 join t2 in db.SZ_Inventory on i.Id equals t2.ProductId into ps
                                 //join i in db.SZ_Inventory on p.Id equals i.ProductId into ps
                                 from inv in ps.DefaultIfEmpty()
                                 join t3 in db.SZ_MasterCOA on inv.Id equals t3.BatchId into psb
                                 from invb in psb.DefaultIfEmpty()
                                 where catNos.Contains(i.Sku) && !i.Deleted && i.Published
                                 orderby i.Sku.Replace("SZ-", "")

                                 select new ReTestModel
                                 {
                                     BatchId = inv != null ? inv.Id : 0,
                                     BatchNo = inv != null ? inv.BatchNo : "",
                                     CASNo = i.ManufacturerPartNumber,
                                     CATNo = i.Sku,
                                     COAId = invb != null ? invb.Id : 0,
                                     ProductId = inv != null ? inv.ProductId : 0,
                                     ProductName = i.Name,
                                     QTY = inv != null ? inv.Qty : 0,
                                     ReTestdate = invb != null ? invb.ReTestDate : null,
                                     AnalysisDate = invb != null ? invb.AnalysisDate : null,
                                     RetestRemark = inv != null ? inv.ReTestRemark : "",
                                     APIName = inv != null ? categoryData.Where(x => x.ProductId == inv.ProductId).Select(x => x.categoryName).FirstOrDefault() : "",
                                     HPLC = invb != null ? invb.HPLCGCELSD : "",
                                     TGA = invb != null ? invb.TGALoss : "",
                                 }).ToList();
                    datas = datas.Where(x => !deletedRetest.Any(y => y == x.BatchId)).ToList();
                    var ActuallRetestData = (from t2 in datas
                                                 //where t2.ReTestdate.Value.Date >= startDate && t2.ReTestdate.Value.Date <= endDate
                                             select new ReTestModel
                                             {
                                                 FirstRow = "<input type='checkbox' value='" + t2.BatchId + "' data-productid='" + t2.ProductId + "' class='clsRetest' />",
                                                 BatchId = t2.BatchId,
                                                 BatchNo = t2.BatchNo,
                                                 CASNo = t2.CASNo,
                                                 CATNo = t2.CATNo,
                                                 COAId = t2.COAId,
                                                 ProductId = t2.ProductId,
                                                 ProductName = t2.ProductName,
                                                 QTY = t2.QTY,
                                                 ReTestdate = t2.ReTestdate,
                                                 AnalysisDate = t2.AnalysisDate,
                                                 AnalysisDateText = t2.AnalysisDate.HasValue ? t2.AnalysisDate.Value.ToShortDateString() : null,
                                                 ReTestDateText = t2.ReTestdate.HasValue ? t2.ReTestdate.Value.ToShortDateString() : null,
                                                 APIName = t2.APIName,
                                                 RetestRemark = t2.RetestRemark,
                                                 RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t2.BatchId + "'  data-batchid='" + t2.BatchId + "' value='" + t2.RetestRemark + "'/>",
                                                 HPLC = t2.HPLC,
                                                 TGA = t2.TGA,
                                                 Diffmonth = Common.GetMonthsBetween(t2.AnalysisDate, t2.ReTestdate),
                                                 LastRow = "<i class='fa fa-times' onclick='deletebatchretest(" + t2.BatchId + ")'></i>"
                                             }).ToList();

                    model = ActuallRetestData;
                }

                else if (tabname == "completed")
                {
                    var RetestDatas = (from i in db.SZ_Retest
                                       join t2 in db.SZ_Inventory on i.InventoryId equals t2.Id
                                       join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                       where i.IsApproved == true && (i.IsCompleted == false || i.IsCompleted == null)
                                       select new ReTestModel
                                       {
                                           RetestId = i.Id,
                                           BatchId = t2.Id,
                                           BatchNo = t2.BatchNo,
                                           CASNo = t3 != null ? t3.CASNo : "",
                                           CATNo = t3 != null ? t3.CATNo : "",
                                           COAId = t3 != null ? t3.Id : 0,
                                           ProductId = t3 != null ? t3.ProductId : 0,
                                           ProductName = t3 != null ? t3.ProductName : "",
                                           QTY = t2.Qty,
                                           ReTestdate = t3 != null ? t3.ReTestDate : null,
                                           AnalysisDate = t3 != null ? t3.AnalysisDate : null,
                                           RetestRemark = t2.ReTestRemark,
                                           HPLC = t3 != null ? t3.HPLCGCELSD : "",
                                           TGA = t3 != null ? t3.TGALoss : "",
                                           APIName = categoryData.Where(x => x.ProductId == (t3 != null ? t3.ProductId : 0)).Select(x => x.categoryName).FirstOrDefault()
                                       }).ToList();

                    var RetestData = (from t3 in RetestDatas
                                      select new ReTestModel
                                      {
                                          RetestId = t3.RetestId,
                                          BatchId = t3.BatchId,
                                          BatchNo = t3.BatchNo,
                                          CASNo = t3.CASNo,
                                          CATNo = t3.CATNo,
                                          COAId = t3.COAId,
                                          ProductId = t3.ProductId,
                                          ProductName = t3.ProductName,
                                          QTY = t3.QTY,
                                          ReTestdate = t3.ReTestdate,
                                          ReTestDateText = t3.ReTestdate.HasValue ? t3.ReTestdate.Value.ToShortDateString() : null,
                                          AnalysisDate = t3.AnalysisDate,
                                          AnalysisDateText = t3.AnalysisDate.HasValue ? t3.AnalysisDate.Value.ToShortDateString() : null,
                                          Diffmonth = Common.GetMonthsBetween(t3.AnalysisDate, t3.ReTestdate),
                                          APIName = categoryData.Where(x => x.ProductId == t3.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                          RetestRemark = t3.RetestRemark,
                                          HPLC = t3.HPLC,
                                          TGA = t3.TGA,
                                          RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t3.RetestId + "' data-batchid='" + t3.BatchId + "' value='" + t3.RetestRemark + "'/>",
                                      }).ToList();

                    var datas = (from t2 in db.SZ_Inventory
                                 join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                 where t3.ReTestDate != null
                                 select new ReTestModel
                                 {
                                     BatchId = t2.Id,
                                     BatchNo = t2.BatchNo,
                                     CASNo = t3.CASNo,
                                     CATNo = t3.CATNo,
                                     COAId = t3.Id,
                                     ProductId = t3.ProductId,
                                     ProductName = t3.ProductName,
                                     QTY = t2.Qty,
                                     ReTestdate = t3.ReTestDate,
                                     AnalysisDate = t3.AnalysisDate,
                                     APIName = categoryData.Where(x => x.ProductId == t3.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                     RetestRemark = t2.ReTestRemark,
                                     HPLC = t3 != null ? t3.HPLCGCELSD : "",
                                     TGA = t3 != null ? t3.TGALoss : "",
                                 }).ToList();

                    var ActuallRetestData = (from t2 in datas
                                             where t2.ReTestdate.Value.Date >= startDate && t2.ReTestdate.Value.Date <= endDate
                                             select new ReTestModel
                                             {
                                                 BatchId = t2.BatchId,
                                                 BatchNo = t2.BatchNo,
                                                 CASNo = t2.CASNo,
                                                 CATNo = t2.CATNo,
                                                 COAId = t2.COAId,
                                                 ProductId = t2.ProductId,
                                                 ProductName = t2.ProductName,
                                                 QTY = t2.QTY,
                                                 ReTestdate = t2.ReTestdate,
                                                 ReTestDateText = t2.ReTestdate.HasValue ? t2.ReTestdate.Value.ToShortDateString() : null,
                                                 AnalysisDate = t2.AnalysisDate,
                                                 AnalysisDateText = t2.AnalysisDate.HasValue ? t2.AnalysisDate.Value.ToShortDateString() : null,
                                                 APIName = t2.APIName,
                                                 RetestRemark = t2.RetestRemark,
                                                 RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t2.BatchId + "' data-batchid='" + t2.BatchId + "' value='" + t2.RetestRemark + "'/>",
                                                 HPLC = t2.HPLC,
                                                 TGA = t2.TGA,
                                                 Diffmonth = Common.GetMonthsBetween(t2.AnalysisDate, t2.ReTestdate)
                                             }).ToList();

                    if (tabname == "previous")
                    {
                        foreach (var item in ActuallRetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.BatchId + "' data-batchid'" + item.BatchId + "' data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                    else if (tabname == "retest")
                    {
                        foreach (var item in RetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.RetestId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                    else if (tabname == "completed")
                    {
                        foreach (var item in RetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.RetestId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                    else if (tabname == "retestlater")
                    {
                        foreach (var item in RetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.RetestId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }

                    else
                    {
                        //Upcomming records

                        foreach (var item in ActuallRetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.BatchId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                }

                else if (tabname == "deleted")
                {
                    var RetestDatas = (from i in db.SZ_DeleteRetest
                                       join t2 in db.SZ_Inventory on i.BatchId equals t2.Id
                                       join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                       select new ReTestModel
                                       {
                                           RetestId = i.Id,
                                           BatchId = t2.Id,
                                           BatchNo = t2.BatchNo,
                                           CASNo = t3 != null ? t3.CASNo : "",
                                           CATNo = t3 != null ? t3.CATNo : "",
                                           COAId = t3 != null ? t3.Id : 0,
                                           ProductId = t3 != null ? t3.ProductId : 0,
                                           ProductName = t3 != null ? t3.ProductName : "",
                                           QTY = t2.Qty,
                                           ReTestdate = t3 != null ? t3.ReTestDate : null,
                                           AnalysisDate = t3 != null ? t3.AnalysisDate : null,
                                           RetestRemark = t2.ReTestRemark,
                                           HPLC = t3 != null ? t3.HPLCGCELSD : "",
                                           TGA = t3 != null ? t3.TGALoss : "",
                                           APIName = categoryData.Where(x => x.ProductId == (t3 != null ? t3.ProductId : 0)).Select(x => x.categoryName).FirstOrDefault()
                                       }).ToList();

                    var RetestData = (from t3 in RetestDatas
                                      select new ReTestModel
                                      {
                                          RetestId = t3.RetestId,
                                          BatchId = t3.BatchId,
                                          BatchNo = t3.BatchNo,
                                          CASNo = t3.CASNo,
                                          CATNo = t3.CATNo,
                                          COAId = t3.COAId,
                                          ProductId = t3.ProductId,
                                          ProductName = t3.ProductName,
                                          QTY = t3.QTY,
                                          ReTestdate = t3.ReTestdate,
                                          ReTestDateText = t3.ReTestdate.HasValue ? t3.ReTestdate.Value.ToShortDateString() : null,
                                          AnalysisDate = t3.AnalysisDate,
                                          AnalysisDateText = t3.AnalysisDate.HasValue ? t3.AnalysisDate.Value.ToShortDateString() : null,
                                          Diffmonth = Common.GetMonthsBetween(t3.AnalysisDate, t3.ReTestdate),
                                          APIName = categoryData.Where(x => x.ProductId == t3.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                          RetestRemark = t3.RetestRemark,
                                          HPLC = t3.HPLC,
                                          TGA = t3.TGA,
                                          LastRow = "<a href='javascript:void(0)' onclick='resumedeleted(" + t3.BatchId + ")'>Resume</a>",
                                          RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t3.BatchId + "' data-batchid='" + t3.BatchId + "' value='" + t3.RetestRemark + "'/>",
                                      }).ToList();

                    foreach (var item in RetestData)
                    {
                        if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                        {
                            item.FirstRow = "<input type='checkbox' value='" + item.BatchId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                            model.Add(item);
                        }
                    }
                }

                else
                {


                    var RetestDatas = (from i in db.SZ_Retest
                                       join t2 in db.SZ_Inventory on i.InventoryId equals t2.Id
                                       join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                       where i.IsApproved == false && i.IsRetestLater == false && (i.IsCompleted == false || i.IsCompleted == null)
                                       select new ReTestModel
                                       {
                                           RetestId = i.Id,
                                           BatchId = t2.Id,
                                           BatchNo = t2.BatchNo,
                                           CASNo = t3 != null ? t3.CASNo : "",
                                           CATNo = t3 != null ? t3.CATNo : "",
                                           COAId = t3 != null ? t3.Id : 0,
                                           ProductId = t3 != null ? t3.ProductId : 0,
                                           ProductName = t3 != null ? t3.ProductName : "",
                                           QTY = t2.Qty,
                                           ReTestdate = t3 != null ? t3.ReTestDate : null,
                                           AnalysisDate = t3 != null ? t3.AnalysisDate : null,
                                           RetestRemark = t2.ReTestRemark,
                                           HPLC = t3 != null ? t3.HPLCGCELSD : "",
                                           TGA = t3 != null ? t3.TGALoss : "",
                                           APIName = categoryData.Where(x => x.ProductId == (t3 != null ? t3.ProductId : 0)).Select(x => x.categoryName).FirstOrDefault()
                                       }).ToList();

                    var RetestData = (from t3 in RetestDatas
                                      select new ReTestModel
                                      {
                                          RetestId = t3.RetestId,
                                          BatchId = t3.BatchId,
                                          BatchNo = t3.BatchNo,
                                          CASNo = t3.CASNo,
                                          CATNo = t3.CATNo,
                                          COAId = t3.COAId,
                                          ProductId = t3.ProductId,
                                          ProductName = t3.ProductName,
                                          QTY = t3.QTY,
                                          ReTestdate = t3.ReTestdate,
                                          ReTestDateText = t3.ReTestdate.HasValue ? t3.ReTestdate.Value.ToShortDateString() : null,
                                          AnalysisDate = t3.AnalysisDate,
                                          AnalysisDateText = t3.AnalysisDate.HasValue ? t3.AnalysisDate.Value.ToShortDateString() : null,
                                          Diffmonth = Common.GetMonthsBetween(t3.AnalysisDate, t3.ReTestdate),
                                          APIName = categoryData.Where(x => x.ProductId == t3.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                          RetestRemark = t3.RetestRemark,
                                          HPLC = t3.HPLC,
                                          TGA = t3.TGA,
                                          RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t3.RetestId + "' data-batchid='" + t3.BatchId + "' value='" + t3.RetestRemark + "'/>",
                                      }).ToList();

                    var datas = (from t2 in db.SZ_Inventory
                                 join t3 in db.SZ_MasterCOA on t2.Id equals t3.BatchId
                                 where t3.ReTestDate != null
                                 select new ReTestModel
                                 {
                                     BatchId = t2.Id,
                                     BatchNo = t2.BatchNo,
                                     CASNo = t3.CASNo,
                                     CATNo = t3.CATNo,
                                     COAId = t3.Id,
                                     ProductId = t3.ProductId,
                                     ProductName = t3.ProductName,
                                     QTY = t2.Qty,
                                     ReTestdate = t3.ReTestDate,
                                     AnalysisDate = t3.AnalysisDate,
                                     APIName = categoryData.Where(x => x.ProductId == t3.ProductId).Select(x => x.categoryName).FirstOrDefault(),
                                     RetestRemark = t2.ReTestRemark,
                                     HPLC = t3 != null ? t3.HPLCGCELSD : "",
                                     TGA = t3 != null ? t3.TGALoss : "",
                                 }).ToList();

                    var ActuallRetestData = (from t2 in datas
                                             where t2.ReTestdate.Value.Date >= startDate && t2.ReTestdate.Value.Date <= endDate
                                             select new ReTestModel
                                             {
                                                 BatchId = t2.BatchId,
                                                 BatchNo = t2.BatchNo,
                                                 CASNo = t2.CASNo,
                                                 CATNo = t2.CATNo,
                                                 COAId = t2.COAId,
                                                 ProductId = t2.ProductId,
                                                 ProductName = t2.ProductName,
                                                 QTY = t2.QTY,
                                                 ReTestdate = t2.ReTestdate,
                                                 ReTestDateText = t2.ReTestdate.HasValue ? t2.ReTestdate.Value.ToShortDateString() : null,
                                                 AnalysisDate = t2.AnalysisDate,
                                                 AnalysisDateText = t2.AnalysisDate.HasValue ? t2.AnalysisDate.Value.ToShortDateString() : null,
                                                 APIName = t2.APIName,
                                                 RetestRemark = t2.RetestRemark,
                                                 RetestRemarkText = "<input type='text'  style='width:100%' id='remark_" + t2.BatchId + "' data-batchid='" + t2.BatchId + "' value='" + t2.RetestRemark + "'/>",
                                                 HPLC = t2.HPLC,
                                                 TGA = t2.TGA,
                                                 Diffmonth = Common.GetMonthsBetween(t2.AnalysisDate, t2.ReTestdate)
                                             }).ToList();

                    if (tabname == "previous")
                    {
                        foreach (var item in ActuallRetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.BatchId + "' data-batchid'" + item.BatchId + "' data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                    else if (tabname == "retest")
                    {
                        foreach (var item in RetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.RetestId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                    else if (tabname == "retestlater")
                    {
                        foreach (var item in RetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.RetestId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }

                    else
                    {
                        //Upcomming records

                        foreach (var item in ActuallRetestData)
                        {
                            if (!model.Select(x => x.BatchId).Contains(item.BatchId))
                            {
                                item.FirstRow = "<input type='checkbox' value='" + item.BatchId + "' data-batchid'" + item.BatchId + "'   data-productid='" + item.ProductId + "' class='clsRetest' />";
                                model.Add(item);
                            }
                        }
                    }
                }

                if (!string.IsNullOrEmpty(ApiName) && ApiName != "0")
                {
                    model = model.Where(x => x.APIName.Trim() == ApiName.Trim()).ToList();
                }

                if (!string.IsNullOrEmpty(searchValue))
                {

                    searchValue = searchValue.ToLower();

                    model = model.Where(m => (m.APIName != null && m.APIName.ToLower().Contains(searchValue))
                                        || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                        || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                        || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                        || (m.QuotationRef != null && m.QuotationRef.ToLower().Contains(searchValue))
                                        || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                        || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                        || (m.ReTestDateText != null && m.ReTestDateText.ToLower().Contains(searchValue))
                                        || (m.AnalysisDateText != null && m.AnalysisDateText.ToLower().Contains(searchValue))).ToList();
                }

                if (setDefaultdate)
                {
                    startDate = DateTime.MinValue;
                    endDate = DateTime.MinValue;
                }
                if (startDate != null && startDate != DateTime.MinValue)
                {
                    model = model.Where(t2 => t2.ReTestdate.HasValue ? (t2.ReTestdate.Value.Date >= startDate) : false).ToList();
                }
                if (endDate != null && endDate != DateTime.MinValue)
                {
                    model = model.Where(t2 => t2.ReTestdate.HasValue ? (t2.ReTestdate.Value.Date <= endDate) : false).ToList();
                }

                //remove 0 qty
                model = model.Where(x => x.QTY != null && x.QTY.Value != 0).ToList();

                int? recordsTotal = model.Count;
                if (tabname == "all" || tabname == "upcomming")
                {
                    model = model.OrderBy(x => x.CATNo.Trim().Replace("SZ-", "")).ToList();
                    model = model.Skip(skip).Take(pageSize).ToList();
                }
                else if (tabname == "quote")
                {
                    model = model.OrderByDescending(x => x.QuotationCreateddate).ToList();
                    model = model.Skip(skip).Take(pageSize).ToList();
                }
                else if (tabname == "dispatch")
                {
                    model = model.OrderByDescending(x => x.PONumberDate).ToList();
                    model = model.Skip(skip).Take(pageSize).ToList();
                }
                else
                {
                    model = model.Skip(skip).Take(pageSize).OrderBy(x => x.ReTestdate).ToList();
                }

                return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = model });
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoRetestData(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();
                foreach (var item in id)
                {
                    var inventory = db.SZ_Inventory.Where(x => x.Id == item).FirstOrDefault();
                    var product = db.Products.Where(x => x.Id == inventory.ProductId).FirstOrDefault();
                    var checkdata = db.SZ_Retest.Where(x => x.InventoryId == item && x.IsApproved == false).FirstOrDefault();
                    if (checkdata == null)
                    {
                        SZ_Retest objCOA = new SZ_Retest();
                        objCOA.CatNo = product.Sku;
                        objCOA.InventoryId = item;
                        objCOA.Createddate = DateTime.Now;
                        objCOA.ProductId = product.Id;
                        objCOA.IsApproved = false;
                        objCOA.IsRetestLater = false;
                        objCOA.IsCompleted = false;
                        objCOA.CreatedBy = SessionCookieManagement.UserName;
                        db.Entry(objCOA).State = EntityState.Added;
                        db.SaveChanges();

                        if (inventory != null)
                        {
                            InsertLog("Move to retest", SessionCookieManagement.UserName + " has moved " + inventory.BatchNo + " in retest tab.");
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Re-test added successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoRetestLaterData(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();


                foreach (var item in id)
                {

                    var inventory = db.SZ_Inventory.Where(x => x.Id == item).FirstOrDefault();
                    var product = db.Products.Where(x => x.Id == inventory.ProductId).FirstOrDefault();
                    var checkdata = db.SZ_Retest.Where(x => x.InventoryId == item && x.IsApproved == false).FirstOrDefault();
                    if (checkdata == null)
                    {
                        SZ_Retest objCOA = new SZ_Retest();
                        objCOA.CatNo = product.Sku;
                        objCOA.InventoryId = item;
                        objCOA.Createddate = DateTime.Now;
                        objCOA.ProductId = product.Id;
                        objCOA.IsApproved = false;
                        objCOA.IsRetestLater = true;
                        objCOA.CreatedBy = SessionCookieManagement.UserName;
                        db.Entry(objCOA).State = EntityState.Added;
                        db.SaveChanges();

                        if (inventory != null)
                        {
                            InsertLog("Move to retest later", SessionCookieManagement.UserName + " has moved " + inventory.BatchNo + " in retest later tab.");
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Re-test added successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoRetestApproved(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();


                foreach (var item in id)
                {
                    var retestData = db.SZ_Retest.Where(x => x.Id == item).FirstOrDefault();

                    if (retestData != null)
                    {
                        retestData.IsApproved = true;
                        retestData.ApprovedDate = DateTime.Now;
                        db.Entry(retestData).State = EntityState.Modified;
                        db.SaveChanges();

                        var inv = db.SZ_Inventory.Where(x => x.Id == retestData.InventoryId).FirstOrDefault();
                        if (inv != null)
                        {
                            InsertLog("Move to retest approved", SessionCookieManagement.UserName + " has approved " + inv.BatchNo + " batch nos.");
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Re-test approved successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoComplete(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();


                foreach (var item in id)
                {
                    var retestData = db.SZ_Retest.Where(x => x.Id == item).FirstOrDefault();

                    if (retestData != null)
                    {
                        retestData.IsCompleted = true;
                        retestData.CompletedDate = DateTime.Now;
                        db.Entry(retestData).State = EntityState.Modified;
                        db.SaveChanges();

                        var inv = db.SZ_Inventory.Where(x => x.Id == retestData.InventoryId).FirstOrDefault();
                        if (inv != null)
                        {
                            InsertLog("Move to retest completed", SessionCookieManagement.UserName + " has completed coa of " + inv.BatchNo + " batch no.");
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Re-test completed successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoRetestFromLater(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();


                foreach (var item in id)
                {
                    var retestData = db.SZ_Retest.Where(x => x.Id == item).FirstOrDefault();

                    if (retestData != null)
                    {
                        retestData.IsRetestLater = false;
                        db.Entry(retestData).State = EntityState.Modified;
                        db.SaveChanges();

                        var inv = db.SZ_Inventory.Where(x => x.Id == retestData.InventoryId).FirstOrDefault();
                        if (inv != null)
                        {
                            InsertLog("Move to retest", SessionCookieManagement.UserName + " has moved " + inv.BatchNo + " batch no to retest from retest later tab.");
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Re-test approved successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult MovetoRetestLaterFromRetest(List<int> id)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();


                foreach (var item in id)
                {
                    var retestData = db.SZ_Retest.Where(x => x.Id == item).FirstOrDefault();

                    if (retestData != null)
                    {
                        retestData.IsRetestLater = true;
                        db.Entry(retestData).State = EntityState.Modified;
                        db.SaveChanges();

                        var inv = db.SZ_Inventory.Where(x => x.Id == retestData.InventoryId).FirstOrDefault();
                        if (inv != null)
                        {
                            InsertLog("Move to retest later", SessionCookieManagement.UserName + " has moved " + inv.BatchNo + " batch no to retest later from retest tab.");
                        }
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Re-test approved successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ReTestSave(List<ReTestModel> paramdata)
        {
            try
            {
                List<QuotationListModel> model = new List<QuotationListModel>();


                foreach (var item in paramdata)
                {
                    var inventoryData = db.SZ_Inventory.Where(x => x.Id == item.BatchId).FirstOrDefault();

                    if (inventoryData != null)
                    {
                        inventoryData.ReTestRemark = item.RetestRemark;
                        db.Entry(inventoryData).State = EntityState.Modified;
                        db.SaveChanges();

                        InsertLog("Retest remark updated", SessionCookieManagement.UserName + " has updated remark of " + inventoryData.BatchNo + " batch no.");
                    }
                }

                return Json(new
                {
                    success = true,
                    message = "Re-test remark added successfully."
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                return Json(new
                {
                    success = false,
                    message = ex.Message + " / " + ex.StackTrace
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public void InsertLog(string Action, string Message)
        {
            SZ_Log objLog = new SZ_Log();
            objLog.Id = Guid.NewGuid();
            objLog.Action = Action;
            objLog.CreatedDate = DateTime.Now;
            objLog.Message = Message;
            objLog.UserId = SessionCookieManagement.UserId;
            db.SZ_Log.Add(objLog);
            db.SaveChanges();
        }

        public ActionResult Deleteretest(int id)
        {
            SZ_DeleteRetest objretest = new SZ_DeleteRetest();
            objretest.Createddate = DateTime.Now;
            objretest.BatchId = id;
            db.SZ_DeleteRetest.Add(objretest);
            db.SaveChanges();

            var inventoryData = db.SZ_Inventory.Where(x => x.Id == id).FirstOrDefault();
            if (inventoryData != null)
            {
                InsertLog("Retest Delete", SessionCookieManagement.UserName + " has deleted " + inventoryData.BatchNo + " batch no from retest module.");
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult resumedeletedretest(int id)
        {
            SZ_DeleteRetest objretest = db.SZ_DeleteRetest.Where(x => x.BatchId == id).FirstOrDefault();
            if (objretest != null)
            {
                db.Entry(objretest).State = EntityState.Deleted;
                db.SaveChanges();
            }

            var inventoryData = db.SZ_Inventory.Where(x => x.Id == id).FirstOrDefault();
            if (inventoryData != null)
            {
                InsertLog("Retest Resume", SessionCookieManagement.UserName + " has resumed " + inventoryData.BatchNo + " batch no from retest module.");
            }
            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult SaveReadyToSendQuoteDetails(int id)
        {
            var quote = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
            if (quote != null)
            {
                quote.IsToBe = false;
                quote.IsQuoteApproved = false;
                quote.IsInstock = false;
                quote.IsCustomSynthesis = false;
                db.Entry(quote).State = EntityState.Modified;
                db.SaveChanges();
            }

            return Json(new
            {
                success = true
            }, JsonRequestBehavior.AllowGet);
        }

        public void PrepareQuoteDetailsLog(SZ_QuotationDetail Newdatamodel, SZ_QuotationDetail Olddatamodel)
        {
            foreach (var prop in Newdatamodel.GetType().GetProperties())
            {
                string name = prop.Name;
                object value = prop.GetValue(Newdatamodel, null);

                foreach (var oldprop in Olddatamodel.GetType().GetProperties())
                {
                    string oldname = oldprop.Name;
                    object oldvalue = oldprop.GetValue(Olddatamodel, null);
                    if (oldname == name)
                    {
                        if (Convert.ToString(value) != Convert.ToString(oldvalue))
                        {
                            string fieldname = findfieldname(name);
                            if (!string.IsNullOrEmpty(fieldname))
                            {
                                if (fieldname == "Scientist")
                                {
                                    int oldscid = !string.IsNullOrEmpty(Convert.ToString(oldvalue)) ? Convert.ToInt32(oldvalue) : 0;
                                    int newscid = !string.IsNullOrEmpty(Convert.ToString(value)) ? Convert.ToInt32(value) : 0;
                                    var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("scientist")).ToList();
                                    var oldscdata = scienList.Where(x => x.Id == oldscid).FirstOrDefault();
                                    var newscdata = scienList.Where(x => x.Id == newscid).FirstOrDefault();
                                    if (oldscdata != null)
                                    {
                                        var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == oldscdata.Id).ToList();
                                        if (genericAttr.Count > 0)
                                        {
                                            oldvalue = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                                        }
                                    }
                                    if (newscdata != null)
                                    {
                                        var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == newscdata.Id).ToList();
                                        if (genericAttr.Count > 0)
                                        {
                                            value = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                                        }
                                    }
                                }

                                if (fieldname == "Project Status")
                                {
                                    EnumList.ProjectStatus oldfoo = (EnumList.ProjectStatus)Enum.ToObject(typeof(EnumList.ProjectStatus), oldvalue);
                                    oldvalue = Common.GetDescription<EnumList.ProjectStatus>(oldfoo);

                                    EnumList.ProjectStatus newfoo = (EnumList.ProjectStatus)Enum.ToObject(typeof(EnumList.ProjectStatus), value);
                                    value = Common.GetDescription<EnumList.ProjectStatus>(newfoo);
                                }

                                if (fieldname == "Project Type")
                                {
                                    int ov = Convert.ToInt32(oldvalue);
                                    int nv = Convert.ToInt32(value);
                                    EnumList.ProjectType oldfoo = (EnumList.ProjectType)Enum.ToObject(typeof(EnumList.ProjectType), ov);
                                    oldvalue = Common.GetDescription<EnumList.ProjectType>(oldfoo);

                                    EnumList.ProjectType newfoo = (EnumList.ProjectType)Enum.ToObject(typeof(EnumList.ProjectType), nv);
                                    value = Common.GetDescription<EnumList.ProjectType>(newfoo);
                                }

                                SZ_QuotationDetailLog objhis = new SZ_QuotationDetailLog();
                                objhis.QuoteId = Olddatamodel.QuoteId;
                                objhis.QuoteDetailsId = Newdatamodel.Id;
                                objhis.QuoteRef = Newdatamodel.SZ_Quotation.Ref;
                                objhis.Username = SessionCookieManagement.UserName;
                                objhis.Datetime = System.DateTime.Now;
                                objhis.PropertyName = name;
                                objhis.FieldName = fieldname; // need to change
                                objhis.Before = Convert.ToString(oldvalue);
                                objhis.After = Convert.ToString(value);
                                objhis.UserId = SessionCookieManagement.UserId;
                                db.SZ_QuotationDetailLog.Add(objhis);
                                db.SaveChanges();
                            }
                        }
                    }
                }
            }
        }

        public string findfieldname(string propname)
        {
            string fieldname = "";
            if (propname == "ProductName")
            {
                fieldname = "Product Name";
            }
            if (propname == "CASNo")
            {
                fieldname = "CAS No";
            }
            if (propname == "FinalPrice")
            {
                fieldname = "Final Price";
            }
            if (propname == "Price")
            {
                fieldname = "Price";
            }
            if (propname == "LeadTime")
            {
                fieldname = "Lead Time";
            }
            if (propname == "CATNo")
            {
                fieldname = "CAT No";
            }
            if (propname == "RequiredQty")
            {
                fieldname = "Qty";
            }
            if (propname == "ProjectType")
            {
                fieldname = "Project Type";
            }
            if (propname == "ScientistCustomerId")
            {
                fieldname = "Scientist";
            }
            if (propname == "ProjectStatus")
            {
                fieldname = "Project Status";
            }
            if (propname == "Courier")
            {
                fieldname = "Courier";
            }

            if (propname == "TrackingNo")
            {
                fieldname = "Tracking No";
            }
            if (propname == "Location")
            {
                fieldname = "Location";
            }
            if (propname == "RefName")
            {
                fieldname = "Ref Name";
            }
            if (propname == "PurposeDispatch")
            {
                fieldname = "Purpose Dispatch";
            }

            #region Step 3
            if (propname == "DeliveryDate")
            {
                fieldname = "Delivery Date";
            }
            if (propname == "AdditionalBatchNo")
            {
                fieldname = "Additional BatchNo";
            }
            if (propname == "Remark")
            {
                fieldname = "Data Remark";
            }
            if (propname == "EstimateDispatchDate")
            {
                fieldname = "Estimate Dispatch Date";
            }
            if (propname == "ContactDetail")
            {
                fieldname = "Contact Detail";
            }
            if (propname == "IsSynthesisLog")
            {
                fieldname = "Is Synthesis Log";
            }
            if (propname == "EstimateCompleteDate")
            {
                fieldname = "Estimate Complete Date";
            }


            #endregion

            #region Step 4
            if (propname == "AdminScientistStatus")
            {
                fieldname = "Admin Scientist Status";
            }
            if (propname == "InvoiceRemark")
            {
                fieldname = "Invoice Remark";
            }
            if (propname == "InvoiceNo")
            {
                fieldname = "Invoice No";
            }
            if (propname == "PaymentStatus")
            {
                fieldname = "Payment Status";
            }
            if (propname == "IsOnHold")
            {
                fieldname = "Is On Hold";
            }
            if (propname == "ProductRemark")
            {
                fieldname = "Product Remark";
            }
            if (propname == "ScientistRemark")
            {
                fieldname = "Scientist Remark";
            }
            if (propname == "PurchaseStatus")
            {
                fieldname = "Purchase Status";
            }
            if (propname == "DifficultyLevel")
            {
                fieldname = "Difficulty Level";
            }
            if (propname == "QueryText")
            {
                fieldname = "Query Text";
            }
            if (propname == "OrderRemark")
            {
                fieldname = "Order Remark";
            }
            if (propname == "Reason")
            {
                fieldname = "Reason";
            }
            #endregion
            return fieldname;
        }

        [HttpGet]
        public ActionResult GetAllCompanydata()
        {
            var listCompItems = new List<SelectListItem>();
            listCompItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            var compData = db.SZ_CompanyList.OrderBy(x => x.Name.Trim()).ToList();
            foreach (var term in compData)
            {
                listCompItems.Add(new SelectListItem
                {
                    Text = term.Name,
                    Value = term.Id.ToString()
                });
            }

            return Json(listCompItems, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult WebsiteDeployNotification()
        {
            var settingdata = db.Settings.ToList();
            var isDeploy = settingdata.Where(x => x.Name == "isDeploy").Select(x => x.Value).FirstOrDefault();
            var date = DateTime.MinValue;
            if (isDeploy == "true")
            {
                var dateofdeploy = settingdata.Where(x => x.Name == "DeployDate").Select(x => x.Value).FirstOrDefault();
                date = Convert.ToDateTime(dateofdeploy).AddMinutes(10);
            }
            return Json(new { isDeploy = isDeploy, date = date }, JsonRequestBehavior.AllowGet);
        }


        public ActionResult QueryModule()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }

        public ActionResult ScientistQueryModule()
        {
            if (!SessionCookieManagement.IsScientist && !SessionCookieManagement.IsSubScientist && !SessionCookieManagement.IsAnalytical)
            {
                return RedirectToAction("Index", "Home");
            }
            if (SessionCookieManagement.IsAnalytical)
            {
                var models = db.SZ_QueryModule.Where(x => x.Status != "Completed" && (x.IsAnalytical == true)).ToList();
                return View(models);
            }

            var model = db.SZ_QueryModule.Where(x => x.Status != "Completed" && (x.TeamLeaderId == SessionCookieManagement.UserId || x.ScientistId == SessionCookieManagement.UserId)).ToList();
            return View(model);
        }

        public ActionResult QuerySolution(int id, string page = "")
        {
            ViewBag.pagename = page;
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }

            var model = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            var quotedetails = db.SZ_QuotationDetail.Where(x => x.Id == model.QuoteDetailsId).FirstOrDefault();
            if (model.CASNo != "NA" && model.CASNo != "NA")
            {
                ViewBag.Solution = db.SZ_SolutionModule.Where(x => (x.CASNo == model.CASNo || x.CATNo == model.CATNo) && model.CASNo != "NA" && model.CASNo != "NA").ToList();
            }
            else
            {
                ViewBag.Solution = db.SZ_SolutionModule.Where(x => (x.CATNo == model.CATNo)).ToList();
            }
            ViewBag.SolutionData = db.SZ_SolutionModule.Where(x => x.Id == model.SolutionId).FirstOrDefault();

            string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + quotedetails.ProductId;
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                var productmodel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                if (productmodel != null)
                {
                    if (productmodel.DefaultPictureModel != null)
                    {
                        ViewBag.imageURL = productmodel.DefaultPictureModel.FullSizeImageUrl;
                    }
                    ViewBag.Synonym = productmodel.Synonym;
                }
            }
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });
            var listItems = new List<SelectListItem>();
            var subscilistItems = new List<SelectListItem>();
            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });

            var subscienList = objCache.Get("cache.subscienList", () =>
            {
                return db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            });
            foreach (var term in subscienList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }

                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });

            }
            ViewBag.ScientistList = listItems;
            ViewBag.TeamLeaderList = listItems;
            return View(model);
        }

        public ActionResult ViewQueryModule(int id, string page = null)
        {
            ViewBag.pagename = page;
            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            var quotedetails = db.SZ_QuotationDetail.Where(x => x.Id == list.QuoteDetailsId).FirstOrDefault();
            string uri = Domain + "/api/RestAPI/ProductDetails?productId=" + quotedetails.ProductId;
            using (HttpClient httpClient = new HttpClient())
            {
                Task<String> response = httpClient.GetStringAsync(uri);
                string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                var productmodel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);
                if (productmodel != null)
                {
                    if (productmodel.DefaultPictureModel != null)
                    {
                        ViewBag.imageURL = productmodel.DefaultPictureModel.FullSizeImageUrl;
                    }
                    ViewBag.Synonym = productmodel.Synonym;
                }
            }
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });

            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });
            ViewBag.SolutionData = db.SZ_SolutionModule.Where(x => x.Id == list.SolutionId).FirstOrDefault();
            var listItems = new List<SelectListItem>();
            var subscilistItems = new List<SelectListItem>();

            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });
            var subscienList = objCache.Get("cache.subscienList", () =>
            {
                return db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            });
            foreach (var term in subscienList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }

                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }
            if (list.TeamLeaderId.HasValue)
            {
                string tlname = Convert.ToString(list.TeamLeaderId);
                ViewBag.teamLeaderName = listItems.Where(x => x.Value == tlname).Select(x => x.Text).FirstOrDefault();
            }
            if (!string.IsNullOrEmpty(list.SubScientistName))
            {
                ViewBag.subscientistname = listItems.Where(x => x.Value == list.SubScientistName).Select(x => x.Text).FirstOrDefault();
            }
            return View(list);
        }

        public ActionResult QueryDetails(int id)
        {
            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            if (list == null)
            {

            }
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });
            var listItems = new List<SelectListItem>();
            var DispatchItems = new List<SelectListItem>();
            var AnalyticalItems = new List<SelectListItem>();
            var dispatchList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("dispatch")).ToList();
            foreach (var term in dispatchList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                DispatchItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }
            var AnalyticalList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("analytical")).ToList();
            foreach (var term in AnalyticalList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                AnalyticalItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }
            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });

            ViewBag.ScientistList = listItems;
            ViewBag.TeamLeaderList = listItems;
            ViewBag.DispatchList = DispatchItems;
            ViewBag.AnalyticalList = AnalyticalItems;
            ViewBag.subscientistname = "";
            ViewBag.teamLeaderName = "";
            if (list.TeamLeaderId.HasValue)
            {
                string tlname = Convert.ToString(list.TeamLeaderId);
                ViewBag.teamLeaderName = listItems.Where(x => x.Value == tlname).Select(x => x.Text).FirstOrDefault();
            }
            if (!string.IsNullOrEmpty(list.SubScientistName))
            {
                ViewBag.subscientistname = listItems.Where(x => x.Value == list.SubScientistName).Select(x => x.Text).FirstOrDefault();
            }
            return View(list);
        }

        //[HttpGet]
        //public JsonResult GetQueryModuleCountData(string status)
        //{
        //    var data = db.SZ_QueryModule.Where(x => x.Status == status).GroupBy(x => x.Email, (key, g) => new { Email = key, Count = g.Count() }).ToList();
        //    return Json(data, JsonRequestBehavior.AllowGet);
        //}

        [HttpGet]
        public JsonResult GetQueryModuleCountData(string status)
        {
            ViewBag.Status = status;
            var list = db.SZ_QueryModule.Where(x => x.Status == status).OrderByDescending(x => x.CreatedDate).ToList();
            string html = PartialViewdata(this, "_PartialQueryModuleData", list);
            return Json(html, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetCountOfQueryModule()
        {
            var data = db.SZ_QueryModule.ToList();
            var openCount = data.Where(x => x.Status == "Open").Count();
            var inprocessCount = data.Where(x => x.Status == "In Process").Count();
            var completeCount = data.Where(x => x.Status == "Completed").Count();
            var solveCount = data.Where(x => x.Status == "Solved").Count();
            return Json(new { openCount, inprocessCount, completeCount, solveCount }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult LoadOpenQueryModuledata()
        {
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
            //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

            //Paging Size (10,20,50,100)
            int pageSize = length != null ? Convert.ToInt32(length) : 0;
            int skip = start != null ? Convert.ToInt32(start) : 0;
            int recordsTotal = 0;
            var list = db.SZ_QueryModule.Where(x => x.Status == "Open").OrderByDescending(x => x.CreatedDate).ToList();

            List<int?> quotedetailsids = list.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();

            var model = (from i in list
                         select new QueryModuleModel()
                         {
                             FirstRow = "<input type='checkbox' class='clsrow' value='" + i.Id + "' />",
                             Id = i.Id,
                             CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == i.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                             Email = i.Email,
                             QueryType = i.QueryType,
                             QuoteDetailsId = i.QuoteDetailsId,
                             Origin = i.Origin,
                             SubStatus = i.SubStatus,
                             Status = i.Status,
                             ProblemType = i.ProblemType,
                             ProblemSubType = i.ProblemSubType,
                             TeamLeaderId = i.TeamLeaderId,
                             TeamLeader = i.TeamLeader,
                             ScientistId = i.ScientistId,
                             Scientist = i.Scientist,
                             Priority = i.Priority,
                             ClosingOn = i.ClosingOn,
                             CreatedDate = i.CreatedDate,
                             QueryDate = i.CreatedDate.Value.ToShortDateString(),
                             ClosingDate = i.ClosingDate,
                             ClientRemark = i.ClientRemark,
                             PrimaryEmail = i.PrimaryEmail,
                             CCEmail = i.CCEmail,
                             Attachment = i.Attachment,
                             PoDate = i.PoDate,
                             PoDateText = i.PoDate.HasValue ? i.PoDate.Value.ToShortDateString() : "",
                             PONo = i.PONo,
                             ProductName = i.ProductName,
                             CASNo = i.CASNo,
                             CATNo = i.CATNo,
                             BatchNo = i.BatchNo,
                             Qty = i.Qty,
                             SynzealRemark = i.SynzealRemark,
                             SynzealRemarkText = GetSynzealRemarkText(i),
                             CompletedDate = i.CompletedDate,
                             SolutionType = i.SolutionType,
                             SolutionId = i.SolutionId,
                             SolutionText = i.SolutionText,
                             QueryNo = i.QueryNo,
                             QuerySubject = i.QuerySubject,
                             ActionRow = GetQueryModuleActionRow(i, "open")
                         }).ToList();
            recordsTotal = model.Count();
            //Search
            if (!string.IsNullOrEmpty(searchValue))
            {
                searchValue = searchValue.ToLower().Trim();
                model = model.Where(m => (m.QueryNo != null && m.QueryNo.ToLower().Contains(searchValue))
                                    || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                    || (m.Status != null && m.Status.ToLower().Contains(searchValue))
                                    || (m.SubScientistName != null && m.SubScientistName.ToLower().Contains(searchValue))
                                    || (m.SubStatus != null && m.SubStatus.ToLower().Contains(searchValue))
                                    || (m.PONo != null && m.PONo.ToLower().Contains(searchValue))
                                    || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                    || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                    || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                    || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                    || (m.Qty != null && m.Qty.ToLower().Contains(searchValue))
                                    || (m.QuerySubject != null && m.QuerySubject.ToLower().Contains(searchValue))).ToList();
            }
            //Paging   
            var data = model.Skip(skip).Take(pageSize).ToList();
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });

        }

        public ActionResult ExportQueryModuleOpenTab()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            var model = db.SZ_QueryModule.Where(x => x.Status == "Open").OrderByDescending(x => x.CreatedDate).ToList();
            List<int?> quotedetailsids = model.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });

            //var listItems = new List<SelectListItem>();
            //var scienList = db.GetScientistId().ToList();
            //scienList.ForEach(term =>
            //{
            //    string customerName = string.Empty;
            //    var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
            //    if (genericAttr.Count > 0)
            //    {
            //        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
            //    }
            //    listItems.Add(new SelectListItem
            //    {
            //        Text = customerName,
            //        Value = term.ToString()
            //    });
            //});
            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 QueryDate = t2.CreatedDate.HasValue ? t2.CreatedDate.Value.ToShortDateString() : "",
                                 QueryNo = t2.QueryNo,
                                 CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == t2.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                                 PoDate = t2.PoDate.HasValue ? t2.PoDate.Value.ToShortDateString() : "",
                                 PONo = t2.PONo,
                                 ProductName = t2.ProductName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Qty = t2.Qty,
                                 BatchNo = t2.BatchNo,
                                 QuerySubject = t2.QuerySubject,
                                 SynzealRemark = t2.SynzealRemark,
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Query_Open_" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("QueryModule");
        }

        [HttpPost]
        public JsonResult LoadInProcessQueryModuledata()
        {
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
            //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

            //Paging Size (10,20,50,100)
            int pageSize = length != null ? Convert.ToInt32(length) : 0;
            int skip = start != null ? Convert.ToInt32(start) : 0;
            int recordsTotal = 0;
            var list = db.SZ_QueryModule.Where(x => x.Status == "In Process").OrderByDescending(x => x.InProcessDate).ToList();

            List<int?> quotedetailsids = list.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();

            var model = (from i in list
                         select new QueryModuleModel()
                         {
                             FirstRow = "<input type='checkbox' class='clsrow' value='" + i.Id + "' />",

                             Id = i.Id,
                             CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == i.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                             Email = i.Email,
                             QueryType = i.QueryType,
                             QuoteDetailsId = i.QuoteDetailsId,
                             Origin = i.Origin,
                             SubStatus = i.SubStatus,
                             Status = i.Status,
                             ProblemType = i.ProblemType,
                             ProblemSubType = i.ProblemSubType,
                             TeamLeaderId = i.TeamLeaderId,
                             TeamLeader = i.TeamLeader,
                             ScientistId = i.ScientistId,
                             Scientist = i.Scientist,
                             Priority = i.Priority,
                             ClosingOn = i.ClosingOn,
                             CreatedDate = i.CreatedDate,
                             QueryDate = i.CreatedDate.Value.ToShortDateString(),
                             ClosingDate = i.ClosingDate,
                             ClosingDateText = i.ClosingDate.HasValue ? i.ClosingDate.Value.ToShortDateString() : "",
                             ClientRemark = i.ClientRemark,
                             PrimaryEmail = i.PrimaryEmail,
                             CCEmail = i.CCEmail,
                             Attachment = i.Attachment,
                             PoDate = i.PoDate,
                             PoDateText = i.PoDate.HasValue ? i.PoDate.Value.ToShortDateString() : "",
                             PONo = i.PONo,
                             ProductName = i.ProductName,
                             CASNo = i.CASNo,
                             CATNo = i.CATNo,
                             BatchNo = i.BatchNo,
                             Qty = i.Qty,
                             SynzealRemark = i.SynzealRemark,
                             SynzealRemarkText = GetSynzealRemarkText(i),
                             CompletedDate = i.CompletedDate,
                             SolutionType = i.SolutionType,
                             SolutionId = i.SolutionId,
                             SolutionText = i.SolutionText,
                             QueryNo = i.QueryNo,
                             QuerySubject = i.QuerySubject,
                             ActionRow = GetQueryModuleActionRow(i, "inprocess")
                         }).ToList();
            //Search
            if (!string.IsNullOrEmpty(searchValue))
            {
                searchValue = searchValue.ToLower().Trim();
                model = model.Where(m => (m.QueryNo != null && m.QueryNo.ToLower().Contains(searchValue))
                || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                    || (m.Status != null && m.Status.ToLower().Contains(searchValue))
                                    || (m.SubScientistName != null && m.SubScientistName.ToLower().Contains(searchValue))
                                    || (m.SubStatus != null && m.SubStatus.ToLower().Contains(searchValue))
                                    || (m.PONo != null && m.PONo.ToLower().Contains(searchValue))
                                    || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                    || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                    || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                    || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                    || (m.Qty != null && m.Qty.ToLower().Contains(searchValue))
                                    || (m.QuerySubject != null && m.QuerySubject.ToLower().Contains(searchValue))).ToList();
            }
            recordsTotal = model.Count();
            //Paging   
            var data = model.Skip(skip).Take(pageSize).ToList();
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });

        }

        public ActionResult ExportQueryModuleInProcessTab()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            var model = db.SZ_QueryModule.Where(x => x.Status == "In Process").OrderByDescending(x => x.InProcessDate).ToList();
            List<int?> quotedetailsids = model.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });


            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 QueryDate = t2.CreatedDate.HasValue ? t2.CreatedDate.Value.ToShortDateString() : "",
                                 QueryNo = t2.QueryNo,
                                 SubStatus = t2.SubStatus,
                                 CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == t2.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                                 PoDate = t2.PoDate.HasValue ? t2.PoDate.Value.ToShortDateString() : "",
                                 PONo = t2.PONo,
                                 ProductName = t2.ProductName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Qty = t2.Qty,
                                 BatchNo = t2.BatchNo,
                                 QuerySubject = t2.QuerySubject,
                                 SynzealRemark = t2.SynzealRemark,
                                 EstDate = t2.ClosingDate.HasValue ? t2.ClosingDate.Value.ToShortDateString() : ""
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Query_Open_" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("QueryModule");
        }

        [HttpPost]
        public JsonResult LoadSolvedQueryModuledata()
        {
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            //var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
            //var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();

            //Paging Size (10,20,50,100)
            int pageSize = length != null ? Convert.ToInt32(length) : 0;
            int skip = start != null ? Convert.ToInt32(start) : 0;
            int recordsTotal = 0;
            var list = db.SZ_QueryModule.Where(x => x.Status == "Solved").OrderByDescending(x => x.SolvedDate).ToList();

            List<int?> quotedetailsids = list.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();

            var model = (from i in list
                         select new QueryModuleModel()
                         {
                             FirstRow = "<input type='checkbox' class='clsrow' value='" + i.Id + "' />",
                             Id = i.Id,
                             CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == i.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                             Email = i.Email,
                             QueryType = i.QueryType,
                             QuoteDetailsId = i.QuoteDetailsId,
                             Origin = i.Origin,
                             SubStatus = i.SubStatus,
                             Status = i.Status,
                             ProblemType = i.ProblemType,
                             ProblemSubType = i.ProblemSubType,
                             TeamLeaderId = i.TeamLeaderId,
                             TeamLeader = i.TeamLeader,
                             ScientistId = i.ScientistId,
                             Scientist = i.Scientist,
                             Priority = i.Priority,
                             ClosingOn = i.ClosingOn,
                             CreatedDate = i.CreatedDate,
                             QueryDate = i.CreatedDate.Value.ToShortDateString(),
                             ClosingDate = i.ClosingDate,
                             ClosingDateText = i.ClosingDate.HasValue ? i.ClosingDate.Value.ToShortDateString() : "",
                             ClientRemark = i.ClientRemark,
                             PrimaryEmail = i.PrimaryEmail,
                             CCEmail = i.CCEmail,
                             Attachment = i.Attachment,
                             PoDate = i.PoDate,
                             PoDateText = i.PoDate.HasValue ? i.PoDate.Value.ToShortDateString() : "",
                             PONo = i.PONo,
                             ProductName = i.ProductName,
                             CASNo = i.CASNo,
                             CATNo = i.CATNo,
                             BatchNo = i.BatchNo,
                             Qty = i.Qty,
                             SynzealRemark = i.SynzealRemark,
                             SynzealRemarkText = GetSynzealRemarkText(i),
                             CompletedDate = i.CompletedDate,
                             SolutionType = i.SolutionType,
                             SolutionId = i.SolutionId,
                             SolutionText = i.SolutionText,
                             QueryNo = i.QueryNo,
                             QuerySubject = i.QuerySubject,
                             ActionRow = GetQueryModuleActionRow(i, "solved")
                         }).ToList();
            //Search
            if (!string.IsNullOrEmpty(searchValue))
            {
                searchValue = searchValue.ToLower().Trim();
                model = model.Where(m => (m.QueryNo != null && m.QueryNo.ToLower().Contains(searchValue))
                || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                    || (m.Status != null && m.Status.ToLower().Contains(searchValue))
                                    || (m.SubScientistName != null && m.SubScientistName.ToLower().Contains(searchValue))
                                    || (m.SubStatus != null && m.SubStatus.ToLower().Contains(searchValue))
                                    || (m.PONo != null && m.PONo.ToLower().Contains(searchValue))
                                    || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                    || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                    || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                    || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                    || (m.Qty != null && m.Qty.ToLower().Contains(searchValue))
                                    || (m.QuerySubject != null && m.QuerySubject.ToLower().Contains(searchValue))).ToList();
            }
            recordsTotal = model.Count();
            //Paging   
            var data = model.Skip(skip).Take(pageSize).ToList();
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });

        }

        public ActionResult ExportQueryModuleSolvedTab()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            var model = db.SZ_QueryModule.Where(x => x.Status == "Solved").OrderByDescending(x => x.SolvedDate).ToList();
            List<int?> quotedetailsids = model.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });


            //change logic start
            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 QueryDate = t2.CreatedDate.HasValue ? t2.CreatedDate.Value.ToShortDateString() : "",
                                 QueryNo = t2.QueryNo,
                                 SubStatus = t2.SubStatus,
                                 CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == t2.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                                 PoDate = t2.PoDate.HasValue ? t2.PoDate.Value.ToShortDateString() : "",
                                 PONo = t2.PONo,
                                 ProductName = t2.ProductName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Qty = t2.Qty,
                                 BatchNo = t2.BatchNo,
                                 QuerySubject = t2.QuerySubject,
                                 SynzealRemark = t2.SynzealRemark,
                                 EstDate = t2.ClosingDate.HasValue ? t2.ClosingDate.Value.ToShortDateString() : "",
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Query_Open_" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("QueryModule");
        }
        [HttpPost]
        public JsonResult LoadCompletedQueryModuledata()
        {
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            var searchValue = Request.Form.GetValues("search[value]").FirstOrDefault();
            int pageSize = length != null ? Convert.ToInt32(length) : 0;
            int skip = start != null ? Convert.ToInt32(start) : 0;
            int recordsTotal = 0;
            var list = db.SZ_QueryModule.Where(x => x.Status == "Completed").OrderByDescending(x => x.CompletedDate).ToList();

            List<int?> quotedetailsids = list.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();

            var model = (from i in list
                         select new QueryModuleModel()
                         {
                             Id = i.Id,
                             CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == i.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                             Email = i.Email,
                             QueryType = i.QueryType,
                             QuoteDetailsId = i.QuoteDetailsId,
                             Origin = i.Origin,
                             SubStatus = i.SubStatus,
                             Status = i.Status,
                             ProblemType = i.ProblemType,
                             ProblemSubType = i.ProblemSubType,
                             TeamLeaderId = i.TeamLeaderId,
                             TeamLeader = i.TeamLeader,
                             ScientistId = i.ScientistId,
                             Scientist = i.Scientist,
                             Priority = i.Priority,
                             ClosingOn = i.ClosingOn,
                             CreatedDate = i.CreatedDate,
                             QueryDate = i.CreatedDate.Value.ToShortDateString(),
                             ClosingDate = i.ClosingDate,
                             ClosingDateText = i.ClosingDate.HasValue ? i.ClosingDate.Value.ToShortDateString() : "",
                             ClientRemark = i.ClientRemark,
                             PrimaryEmail = i.PrimaryEmail,
                             CCEmail = i.CCEmail,
                             Attachment = i.Attachment,
                             PoDate = i.PoDate,
                             PoDateText = i.PoDate.HasValue ? i.PoDate.Value.ToShortDateString() : "",
                             PONo = i.PONo,
                             ProductName = i.ProductName,
                             CASNo = i.CASNo,
                             CATNo = i.CATNo,
                             BatchNo = i.BatchNo,
                             Qty = i.Qty,
                             SynzealRemark = i.SynzealRemark,
                             SynzealRemarkText = GetSynzealRemarkText(i),
                             CompletedDate = i.CompletedDate,
                             SolutionType = i.SolutionType,
                             SolutionId = i.SolutionId,
                             SolutionText = i.SolutionText,
                             QueryNo = i.QueryNo,
                             QuerySubject = i.QuerySubject,
                             ActionRow = GetQueryModuleActionRow(i, "completed"),
                             FirstRow = "<input type='checkbox' class='clsrow clsreplacement' value='" + i.Id + "' />"
                         }).ToList();
            //Search
            if (!string.IsNullOrEmpty(searchValue))
            {
                searchValue = searchValue.ToLower().Trim();
                model = model.Where(m => (m.QueryNo != null && m.QueryNo.ToLower().Contains(searchValue))
                || (m.CompanyName != null && m.CompanyName.ToLower().Contains(searchValue))
                                    || (m.Status != null && m.Status.ToLower().Contains(searchValue))
                                    || (m.SubScientistName != null && m.SubScientistName.ToLower().Contains(searchValue))
                                    || (m.SubStatus != null && m.SubStatus.ToLower().Contains(searchValue))
                                    || (m.PONo != null && m.PONo.ToLower().Contains(searchValue))
                                    || (m.ProductName != null && m.ProductName.ToLower().Contains(searchValue))
                                    || (m.CASNo != null && m.CASNo.ToLower().Contains(searchValue))
                                    || (m.CATNo != null && m.CATNo.ToLower().Contains(searchValue))
                                    || (m.BatchNo != null && m.BatchNo.ToLower().Contains(searchValue))
                                    || (m.Qty != null && m.Qty.ToLower().Contains(searchValue))
                                    || (m.QuerySubject != null && m.QuerySubject.ToLower().Contains(searchValue))).ToList();
            }
            recordsTotal = model.Count();
            //Paging   
            var data = model.Skip(skip).Take(pageSize).ToList();
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data });

        }

        public ActionResult ExportQueryModuleCloseTab()
        {
            int page = 1;
            int rows = 0;
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.Purchase);
            string purSynthesisProjectType = Convert.ToString((int)EnumList.ProjectType.PurSynthesis);

            var model = db.SZ_QueryModule.Where(x => x.Status == "Completed").OrderByDescending(x => x.CompletedDate).ToList();
            List<int?> quotedetailsids = model.Select(x => x.QuoteDetailsId).ToList();
            var quotedetailsList = db.SZ_QuotationDetail.Where(x => quotedetailsids.Contains(x.Id)).ToList();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });


            System.Web.UI.WebControls.GridView gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = (from t2 in model
                             select new
                             {
                                 QueryDate = t2.CreatedDate.HasValue ? t2.CreatedDate.Value.ToShortDateString() : "",
                                 QueryNo = t2.QueryNo,
                                 SubStatus = t2.SubStatus,
                                 CompanyName = !SessionCookieManagement.IsDispatch ? (quotedetailsList.Where(x => x.Id == t2.QuoteDetailsId).Select(x => x.SZ_Quotation.CompanyName).FirstOrDefault()) : "",
                                 PoDate = t2.PoDate.HasValue ? t2.PoDate.Value.ToShortDateString() : "",
                                 PONo = t2.PONo,
                                 ProductName = t2.ProductName,
                                 CASNo = t2.CASNo,
                                 CATNo = t2.CATNo,
                                 Qty = t2.Qty,
                                 BatchNo = t2.BatchNo,
                                 QuerySubject = t2.QuerySubject,
                                 SynzealRemark = t2.SynzealRemark,
                                 EstDate = t2.ClosingDate.HasValue ? t2.ClosingDate.Value.ToShortDateString() : "",
                             }).ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Query_Open_" + DateTime.Now.Year + DateTime.Now.ToString("MM") + DateTime.Now.ToString("dd") + ".xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string passstr = sw.ToString().Replace(" 00:00:00", "");
            Response.Output.Write(passstr);
            Response.Flush();
            Response.End();
            return RedirectToAction("QueryModule");
        }
        public ActionResult DeleteQuery(int id)
        {
            var querySolution = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            if (querySolution != null)
            {
                db.Entry(querySolution).State = EntityState.Deleted;
                db.SaveChanges();
            }
            return Json(new { success = true, message = "Query deleted successfully." });
        }
        public string GetQueryModuleActionRow(SZ_QueryModule i, string status)
        {
            if (status == "close" || status == "completed")
            {
                return "<a href='/Form/QuerySolution/" + i.Id + "?page=close'>Modified</a> | <a href='/Form/ViewQueryModule/" + i.Id + "?page=close'>View</a> | <a href='javascript:void(0)' onclick='queryDelete(" + i.Id + ")' " + i.Id + "'>Delete</a>";
            }
            var str = "<a data-toggle='modal' href='/Form/QueryDetails/" + i.Id + "' data-target='#myModalQueryDetails'>Select</a>";
            if (status == "inprocess")
            {
                str += " | <a href='/Form/QuerySolution/" + i.Id + "?page=inprocess'>View</a>";
            }
            if (status == "solved")
            {
                str += " | <a href='/Form/ViewQueryModule/" + i.Id + "?page=Solved'>View</a> | <a href='/Form/QuerySolution/" + i.Id + "?page=Solved'>Modified</a> ";
            }
            if (status == "open")
            {
                str += " | <a href='/Form/QuerySolution/" + i.Id + "?page=open'>View</a>";
            }
            str += " | <a href='javascript:void(0)' onclick='queryDelete(" + i.Id + ")' " + i.Id + "'>Delete</a>";
            return str;
        }
        public string GetSynzealRemarkText(SZ_QueryModule i)
        {
            var str = "<i class='fa fa-pencil' onclick='synzealremarkpopup(" + i.Id + ")'></i>";
            if (!string.IsNullOrEmpty(i.SynzealRemark))
            {
                str += "<span> &nbsp; &nbsp;</span><i class='fa fa-info' title='" + i.SynzealRemark + "'></i>";
            }
            return str;
        }
        [HttpGet]
        public JsonResult getQueryModuleRecordByEmailandStatus(string email, string status)
        {

            ViewBag.Status = status;
            var list = db.SZ_QueryModule.Where(x => x.Status == status).OrderByDescending(x => x.CreatedDate).ToList();
            string html = PartialViewdata(this, "_PartialQueryModuleData", list);
            return Json(html, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult saveSynzealRemark(int id, string Remark)
        {
            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            if (list != null)
            {
                list.SynzealRemark = Remark;
                db.Entry(list).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult AddSynzealRemarkById(int id)
        {
            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            string html = PartialViewdata(this, "_PartialAddSynzealRemark", list);
            return Json(html, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult getQueryModuleGeneralTabbyId(int id)
        {

            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            string html = PartialViewdata(this, "_PartialQuerygeneralTab", list);
            return Json(html, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult AddSolution(int id, int solutionId = 0)
        {
            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            var quotedetails = db.SZ_QuotationDetail.Where(x => x.Id == list.QuoteDetailsId).FirstOrDefault();
            if (quotedetails != null)
            {
                ViewBag.ProductId = quotedetails.ProductId;
            }
            var solutionData = db.SZ_SolutionModule.Where(x => x.Id == solutionId).FirstOrDefault();
            if (solutionData != null)
            {
                ViewBag.solutionData = solutionData;
            }
            else
            {
                ViewBag.solutionData = null;
            }
            var formid = db.SZ_QuoteDetails_Form.Where(x => x.QuoteDetailsId == list.QuoteDetailsId).Select(x => x.FormId).FirstOrDefault();

            ViewBag.QuoteDetailsForm = db.SZ_QuoteDetailForm.Where(x => x.Id == formid).ToList();
            string html = PartialViewdata(this, "_PartialAddSolution", list);
            return Json(html, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult AssignSolutionText(int id, string text)
        {
            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            if (list != null)
            {
                list.Status = "Solved";
                list.SolutionType = "Verbal";
                list.IsScientistResolved = true;
                list.SolutionText = text;
                list.SolvedDate = DateTime.Now;
                db.Entry(list).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult AssignSolution(int id, int SolutionId)
        {
            var list = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            if (list != null)
            {
                list.Status = "Solved";
                list.SolutionType = "Technical";
                list.IsScientistResolved = true;
                list.SolutionId = SolutionId;
                list.SolvedDate = DateTime.Now;
                db.Entry(list).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult SaveQueryData(int id, string SubStatus, string SubScientist, int? ClosingOn, int? TeamLeaderId)
        {
            var querymodule = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            if (querymodule != null)
            {
                querymodule.SubStatus = SubStatus;
                querymodule.ClosingOn = ClosingOn;
                querymodule.SubScientistName = SubScientist;
                if (ClosingOn.HasValue)
                {
                    querymodule.ClosingDate = querymodule.CreatedDate.Value.AddDays(ClosingOn.Value);
                }
                querymodule.TeamLeaderId = TeamLeaderId;
                db.Entry(querymodule).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult saveSolutionData(SZ_SolutionModule model, int id)
        {
            var querymodule = db.SZ_QueryModule.Where(x => x.Id == model.Id).FirstOrDefault();
            if (querymodule != null)
            {
                int solnumber = 1;
                var lastsolution = db.SZ_SolutionModule.OrderByDescending(x => x.Id).FirstOrDefault();
                if (lastsolution != null)
                {
                    solnumber += lastsolution.Id;
                }
                var solutionId = Request.Form["SolutionId"] != null ? Convert.ToInt32(Request.Form["SolutionId"].ToString()) : 0;
                if (solutionId != null && solutionId != 0)
                {
                    SZ_SolutionModule objSolution = db.SZ_SolutionModule.Where(x => x.Id == solutionId).FirstOrDefault();

                    objSolution.Status = Request.Form["Status"] != null ? Request.Form["Status"].ToString() : "";
                    objSolution.Solution = Request.Form["Solution"] != null ? Request.Form["Solution"].ToString() : "";
                    objSolution.Symptom = Request.Form["Symptom"] != null ? Request.Form["Symptom"].ToString() : "";
                    objSolution.Cause = Request.Form["Cause"] != null ? Request.Form["Cause"].ToString() : "";
                    objSolution.Remark = Request.Form["Remark"] != null ? Request.Form["Remark"].ToString() : "";
                    objSolution.ProductName = querymodule.ProductName;
                    objSolution.CASNo = querymodule.CASNo;
                    objSolution.CATNo = querymodule.CATNo;
                    objSolution.BatchNo = querymodule.BatchNo;
                    objSolution.CreatedBy = SessionCookieManagement.UserName;
                    if (objSolution.Solution == "undefined")
                    {
                        objSolution.Solution = string.Empty;
                    }
                    if (objSolution.Symptom == "undefined")
                    {
                        objSolution.Symptom = string.Empty;
                    }
                    if (objSolution.Cause == "undefined")
                    {
                        objSolution.Cause = string.Empty;
                    }
                    if (objSolution.Remark == "undefined")
                    {
                        objSolution.Remark = string.Empty;
                    }
                    if (Request.Files.Count > 0)
                    {
                        try
                        {
                            string attachment = "";
                            //  Get all files from Request object  
                            HttpFileCollectionBase files = Request.Files;
                            for (int i = 0; i < files.Count; i++)
                            {
                                HttpPostedFileBase file = files[i];
                                string fname;

                                string extension = System.IO.Path.GetExtension(file.FileName);
                                string filename = Guid.NewGuid().ToString() + "" + extension;
                                // Get the complete folder path and store the file inside it.  
                                fname = Path.Combine(Server.MapPath("~/Content/Attachment/"), filename);
                                file.SaveAs(fname);
                                attachment += "../Content/Attachment/" + filename + ",";
                            }
                            objSolution.Attachment = attachment;
                        }
                        catch (Exception ex)
                        {

                        }
                    }

                    db.Entry(objSolution).State = EntityState.Modified;
                    db.SaveChanges();
                }
                else
                {
                    SZ_SolutionModule objSolution = new SZ_SolutionModule();
                    objSolution.Status = Request.Form["Status"] != null ? Request.Form["Status"].ToString() : "";
                    objSolution.SolutionNumber = solnumber;
                    objSolution.Solution = Request.Form["Solution"] != null ? Request.Form["Solution"].ToString() : "";
                    objSolution.Symptom = Request.Form["Symptom"] != null ? Request.Form["Symptom"].ToString() : "";
                    objSolution.Cause = Request.Form["Cause"] != null ? Request.Form["Cause"].ToString() : "";
                    objSolution.Remark = Request.Form["Remark"] != null ? Request.Form["Remark"].ToString() : "";
                    objSolution.ProductName = querymodule.ProductName;
                    objSolution.CASNo = querymodule.CASNo;
                    objSolution.CATNo = querymodule.CATNo;
                    objSolution.BatchNo = querymodule.BatchNo;
                    objSolution.CreatedDate = DateTime.Now;
                    objSolution.CreatedBy = SessionCookieManagement.UserName;
                    if (objSolution.Solution == "undefined")
                    {
                        objSolution.Solution = string.Empty;
                    }
                    if (objSolution.Symptom == "undefined")
                    {
                        objSolution.Symptom = string.Empty;
                    }
                    if (objSolution.Cause == "undefined")
                    {
                        objSolution.Cause = string.Empty;
                    }
                    if (objSolution.Remark == "undefined")
                    {
                        objSolution.Remark = string.Empty;
                    }
                    if (Request.Files.Count > 0)
                    {
                        try
                        {
                            string attachment = "";
                            //  Get all files from Request object  
                            HttpFileCollectionBase files = Request.Files;
                            for (int i = 0; i < files.Count; i++)
                            {
                                HttpPostedFileBase file = files[i];
                                string fname;

                                string extension = System.IO.Path.GetExtension(file.FileName);
                                string filename = Guid.NewGuid().ToString() + "" + extension;
                                // Get the complete folder path and store the file inside it.  
                                fname = Path.Combine(Server.MapPath("~/Content/Attachment/"), filename);
                                file.SaveAs(fname);
                                attachment += "../Content/Attachment/" + filename + ",";
                            }
                            objSolution.Attachment = attachment;
                        }
                        catch (Exception ex)
                        {

                        }
                    }

                    db.Entry(objSolution).State = EntityState.Added;
                    db.SaveChanges();
                }
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult saveQueryModuleData(SZ_QueryModule model)
        {
            var querymodule = db.SZ_QueryModule.Where(x => x.Id == model.Id).FirstOrDefault();
            if (querymodule != null)
            {
                querymodule.SubStatus = model.SubStatus;
                if (model.Status == "Completed" && querymodule.Status != "Completed")
                {
                    querymodule.CompletedDate = DateTime.Now;
                }
                if (model.Status == "In Process" && querymodule.Status != "In Process")
                {
                    querymodule.InProcessDate = DateTime.Now;
                }
                querymodule.Status = model.Status;
                querymodule.Priority = model.Priority;
                querymodule.TeamLeaderId = model.TeamLeaderId;
                querymodule.ScientistId = model.ScientistId;
                querymodule.PrimaryEmail = model.PrimaryEmail;
                querymodule.CCEmail = model.CCEmail;
                querymodule.ClosingOn = model.ClosingOn;
                querymodule.ClosingDate = model.ClosingDate;
                querymodule.ClientRemark = model.ClientRemark;
                querymodule.IsDispatched = model.IsDispatched;
                querymodule.IsAnalytical = model.IsAnalytical;
                querymodule.Scientist = model.Scientist;
                querymodule.TeamLeader = model.TeamLeader;
                db.Entry(querymodule).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult QueryModuleAttachment()
        {
            int Id = Convert.ToInt32(Request.Form["Id"].ToString());
            // Checking no of files injected in Request object  
            if (Request.Files.Count > 0)
            {
                try
                {
                    string attachment = "";
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        string fname;

                        string extension = System.IO.Path.GetExtension(file.FileName);
                        string filename = Guid.NewGuid().ToString() + "" + extension;
                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath("~/Content/Attachment/"), filename);
                        file.SaveAs(fname);
                        attachment += "../Content/Attachment/" + filename + ",";
                    }
                    var queryModule = db.SZ_QueryModule.Where(x => x.Id == Id).FirstOrDefault();
                    if (queryModule != null)
                    {
                        queryModule.Attachment += attachment;
                        db.Entry(queryModule).State = EntityState.Modified;
                        db.SaveChanges();

                        attachment = queryModule.Attachment;
                    }
                    // Returns message that successfully uploaded  
                    return Json(new { attachment = attachment, success = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    return Json(new { message = "Error occurred. Error details: " + ex.Message, success = false }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(new { message = "No files selected.", success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult DeleteAttchment(string filename, int id)
        {
            string attachment = "";
            var queryModule = db.SZ_QueryModule.Where(x => x.Id == id).FirstOrDefault();
            if (queryModule != null)
            {
                queryModule.Attachment = queryModule.Attachment.Replace(filename, "");
                db.Entry(queryModule).State = EntityState.Modified;
                db.SaveChanges();

                attachment = queryModule.Attachment;
            }
            return Json(attachment, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult clubquotepricescreen(List<QuotationListModel> modelusd, List<QuotationListModel> modelinr, int companyId)
        {
            var companyRecord = db.SZ_CompanyList.Where(x => x.Id == companyId).FirstOrDefault();
            int refNo = 1;
            string value = string.Empty;
            string matchingstring = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-";
            var SZ_Quotationdata = (from i in db.SZ_Quotation
                                    where i.Ref.StartsWith(matchingstring)
                                    select i).ToList();
            if (SZ_Quotationdata.Count > 0)
            {
                refNo = SZ_Quotationdata.Select(x => ExtractQuoreRefNumber(x.Ref)).Max(w => w);
                int newbrokerrewf = Convert.ToInt32(refNo) + 1;

                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-" + newbrokerrewf.ToString().PadLeft(2, '0');
            }
            else
            {
                value = "SZ-" + DateTime.Now.ToString("ddMMyy") + "-01";
            }
            int QuoteId = 0;
            SZ_Quotation objquote = new SZ_Quotation();
            objquote.Ref = value;
            objquote.CompanyId = companyRecord.Id;
            objquote.CompanyName = companyRecord.Name;
            objquote.EmailAddress = "";
            objquote.ClientRef = "";
            objquote.IsImageAttach = false;
            objquote.PONo = "";
            objquote.Remark = "";
            objquote.TermsId = null;
            objquote.CountryType = companyRecord.CountryType;
            objquote.UserDistType = companyRecord.UserDistType;
            objquote.IsToBe = false;
            objquote.IsQuoteApproved = false;
            objquote.IsCOA = true;
            objquote.Auction = false;
            objquote.PODate = DateTime.Now;
            objquote.SuggChemName = string.Empty;
            objquote.Attachment = string.Empty;
            objquote.CreatedDate = DateTime.Now;
            objquote.EmailCC = string.Empty;
            objquote.IsFollowupRequired = true;
            objquote.CreatedBy = SessionCookieManagement.UserName;
            objquote.LayoutType = "Standard";
            objquote.IsInstock = false;
            objquote.IsCustomSynthesis = false;
            if (objquote.CountryType == "Export")
            {
                objquote.IsAnalyticalData = true;
            }
            db.SZ_Quotation.Add(objquote);
            db.SaveChanges();

            QuoteId = objquote.Id;

            if (companyRecord.CountryType == "Export")
            {
                //Export
                int displayOrder = 0;
                foreach (var i in modelusd)
                {
                    var product = db.Products.Where(x => x.Id == i.ProductId).FirstOrDefault();
                    if (product != null)
                    {
                        SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                        objdetails.IsUploadServer = true;
                        objdetails.CASNo = product.ManufacturerPartNumber;
                        objdetails.CATNo = product.Sku;
                        objdetails.CreatedDate = DateTime.Now;
                        objdetails.ImagePath = string.Empty;
                        objdetails.LeadTime = i.LeadTime;
                        objdetails.EstimateDispatchDate = null;
                        objdetails.Price = i.Price;
                        objdetails.FinalPrice = string.Empty;
                        objdetails.ProductId = i.ProductId;
                        objdetails.ProductName = product.Name;
                        objdetails.QuoteId = objquote.Id;
                        objdetails.DisplayOrder = displayOrder;
                        objdetails.ProductRemark = i.ProductRemark;
                        objdetails.ProcessState = (int)EnumList.ProcessState.InProgress;
                        objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                        objdetails.IsSynthesisLog = false;
                        db.SZ_QuotationDetail.Add(objdetails);

                        displayOrder += 1;
                    }
                }

                db.SaveChanges();
            }
            else
            {
                //Domestic
                int displayOrder = 0;
                foreach (var i in modelinr)
                {
                    var product = db.Products.Where(x => x.Id == i.ProductId).FirstOrDefault();
                    if (product != null)
                    {
                        SZ_QuotationDetail objdetails = new SZ_QuotationDetail();
                        objdetails.IsUploadServer = true;
                        objdetails.CASNo = product.ManufacturerPartNumber;
                        objdetails.CATNo = product.Sku;
                        objdetails.CreatedDate = DateTime.Now;
                        objdetails.ImagePath = string.Empty;
                        objdetails.LeadTime = i.LeadTime;
                        objdetails.EstimateDispatchDate = null;
                        objdetails.Price = i.Price;
                        objdetails.FinalPrice = string.Empty;
                        objdetails.ProductId = i.ProductId;
                        objdetails.ProductName = product.Name;
                        objdetails.QuoteId = objquote.Id;
                        objdetails.DisplayOrder = displayOrder;
                        objdetails.ProductRemark = i.ProductRemark;
                        objdetails.ProcessState = (int)EnumList.ProcessState.InProgress;
                        objdetails.ProjectStatus = (int)EnumList.ProjectStatus.NoAction;
                        objdetails.IsSynthesisLog = false;
                        db.SZ_QuotationDetail.Add(objdetails);

                        displayOrder += 1;
                    }
                }

                db.SaveChanges();
            }
            return Json(QuoteId);
        }

        public ActionResult SaveQuoteLogInfoFromDispatch(int id, int? additionalBatch, int? coa)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.AdditionalBatchNo = additionalBatch;
                if (coa.HasValue)
                {
                    data.COAId = coa;
                    data.COARefNumber = db.SZ_ChildCOA.Where(x => x.Id == data.COAId).Select(x => x.RefNo).FirstOrDefault();
                }
                else
                {
                    data.COAId = null;
                    data.COARefNumber = string.Empty;
                }
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("ok", JsonRequestBehavior.AllowGet);
        }

        public ActionResult RemoveHoldManually(int id)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
            if (data != null)
            {
                data.IsHoldManually = false;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("ScientistForm");
        }

        public ActionResult PaymentTerm()
        {
            if (!SessionCookieManagement.IsAdmin)
            {
                return RedirectToAction("Index", "Home");
            }
            var model = db.PaymentTerms.ToList();
            return View(model);
        }

        public ActionResult AddpaymentTerm(int id = 0)
        {
            var model = db.PaymentTerms.Where(x => x.Id == id).FirstOrDefault();
            if (model == null)
                model = new PaymentTerm();

            return View(model);
        }
        [HttpPost]
        public JsonResult AddpaymentTermData(string name, int? day, string note, int id)
        {
            try
            {
                if (note == "undefined")
                {
                    note = "";
                }
                if (id == 0)
                {
                    PaymentTerm objComp = new PaymentTerm();
                    objComp.Name = name;
                    objComp.Note = note;
                    objComp.Day = day;
                    objComp.CreatedDate = DateTime.Now;
                    objComp.UpdatedDate = DateTime.Now;
                    objComp.UpdatedBy = SessionCookieManagement.UserName;
                    db.PaymentTerms.Add(objComp);
                    db.SaveChanges();
                }
                else
                {
                    var comp = db.PaymentTerms.Where(x => x.Id == id).FirstOrDefault();
                    if (comp != null)
                    {
                        comp.Name = name;
                        comp.Note = note;
                        comp.Day = day;
                        comp.UpdatedDate = DateTime.Now;
                        comp.UpdatedBy = SessionCookieManagement.UserName;
                        db.Entry(comp).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }

                return Json(new
                {
                    success = true
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = ""
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult QcModuleList()
        {
            if (!SessionCookieManagement.IsLogin)
            {
                return RedirectToAction("Index", "Home");
            }

            var str = "<select id='fltapprovestatus' class='form-control fltclsappropro'><option value=''>--Select--</option>";
            foreach (EnumList.ApprovedStatus r in Enum.GetValues(typeof(EnumList.ApprovedStatus)))
            {
                var item = Enum.GetName(typeof(EnumList.ApprovedStatus), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ApprovedStatus)(int)r);
                int val = (int)r;
                string selected = "";
                str += "<option value='" + val + "' " + selected + ">" + text + "</option>";
            }
            str += "</select>";
            ViewBag.fltapprovestatus = str;
            return View();
        }

        public ActionResult NotificationQuote()
        {
            if (!SessionCookieManagement.IsQuote)
            {
                return RedirectToAction("Index", "Home");
            }

            return View();
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateQCFormRecord(QCInfoModel model)
        {
            var data = (from i in db.SZ_QuoteDetailForm
                        join t3 in db.SZ_QuoteDetails_Form on i.Id equals t3.FormId
                        join t2 in db.SZ_QuotationDetail on t3.QuoteDetailsId equals t2.Id
                        where i.Id == model.formId
                        select i).FirstOrDefault();
            if (data != null)
            {
                //if (model.TableId == "tblinventory")
                //{
                //    var quotedetailsrecord = data.SZ_QuotationDetail;
                //    quotedetailsrecord.AdditionalBatchNo = model.BatchId;
                //    db.Entry(quotedetailsrecord).State = EntityState.Modified;
                //}
                data.ApprovedAs = model.ApprovedAs;

                if (data.ApprovalStatus != Convert.ToString((int)EnumList.ApprovedStatus.QCApproved) && model.ApprovedStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCApproved))
                {
                    //Approved Mail
                    data.QCApprovedDate = DateTime.Now;
                }
                data.ApprovalStatus = model.ApprovedStatus;
                data.RecommendedPeriod = model.RecommondationRetest;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();

                var quotedetailsdata = db.SZ_QuotationDetail.Where(x => x.Id == data.QuotationDetailsId).FirstOrDefault();
                if (quotedetailsdata != null)
                {
                    if (data.ApprovalStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCApproval))
                    {
                        quotedetailsdata.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.QCApproval);
                        quotedetailsdata.OtherProStatus = Convert.ToString((int)EnumList.ProInstockexportStatusDDL.QCApproval);
                        quotedetailsdata.DispatchStatus = Convert.ToString((int)EnumList.DispatchStatusDDl.QCApproval);
                        quotedetailsdata.ReviewSciStatus = Convert.ToString((int)EnumList.ScientistReviewStatusDDL.QCApproval);

                    }
                    if (data.ApprovalStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCApproved))
                    {
                        quotedetailsdata.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.QCApproved);
                        quotedetailsdata.OtherProStatus = Convert.ToString("14");
                        quotedetailsdata.DispatchStatus = Convert.ToString("14");
                        quotedetailsdata.ReviewSciStatus = Convert.ToString((int)EnumList.ScientistReviewStatusDDL.QCApproved);
                    }
                    if (data.ApprovalStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCCorrection))
                    {
                        quotedetailsdata.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.QCCorrection);
                        quotedetailsdata.OtherProStatus = Convert.ToString("13");
                        quotedetailsdata.DispatchStatus = Convert.ToString("13");
                        quotedetailsdata.ReviewSciStatus = Convert.ToString((int)EnumList.ScientistReviewStatusDDL.QCCorrection);
                    }
                    db.Entry(quotedetailsdata).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            else
            {
                return Json("Form Data Not Found. Form Id : " + model.formId, JsonRequestBehavior.AllowGet);
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UpdateQCRecord(QCInfoModel model)
        {

            //var data = (from i in db.SZ_QuoteDetailForm
            //            join t2 in db.SZ_QuotationDetail on i.QuotationDetailsId equals t2.Id
            //            where i.Id == model.formId
            //            select t2).FirstOrDefault();
            var data = (from t2 in db.SZ_QuotationDetail
                        where t2.Id == model.QuotationDetailsId
                        select t2).FirstOrDefault();
            if (data != null)
            {
                if (model.TableId == "tblworkingstandard")
                {
                    data.PrimaryStdOrdered = model.PrimaryStdOrdered;
                    data.ColumnOrder = model.ColumnOrder;
                    data.SystemSuitability = model.SystemSuitability;
                    data.AdditionalBatchNo = model.BatchId;
                }
                if (model.TableId == "tblinventory" || model.TableId == "tbldispatch")
                {
                    data.AdditionalBatchNo = model.BatchId;
                }
                data.ApprovedAs = model.ApprovedAs;

                if (data.ApprovalStatus != Convert.ToString((int)EnumList.ApprovedStatus.QCApproved) && model.ApprovedStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCApproved))
                {
                    data.QCApprovedDate = DateTime.Now;
                }
                data.ApprovedAs = model.ApprovedAs;
                data.ApprovalStatus = model.ApprovedStatus;
                if (data.ApprovalStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCApproval))
                {
                    data.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.QCApproval);
                    data.OtherProStatus = Convert.ToString((int)EnumList.ProInstockexportStatusDDL.QCApproval);
                    data.DispatchStatus = Convert.ToString((int)EnumList.DispatchStatusDDl.QCApproval);
                    data.ReviewSciStatus = Convert.ToString((int)EnumList.ScientistReviewStatusDDL.QCApproval);

                }
                if (data.ApprovalStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCApproved))
                {
                    data.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.QCApproved);
                    data.OtherProStatus = Convert.ToString("14");
                    data.DispatchStatus = Convert.ToString("14");
                    data.ReviewSciStatus = Convert.ToString((int)EnumList.ScientistReviewStatusDDL.QCApproved);

                    if (model.TableId == "tbldispatch" || model.TableId == "tblallinstock")
                    {
                        data.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.ReadyforDispatch);
                        data.OtherProStatus = Convert.ToString("15");
                        data.DispatchStatus = Convert.ToString("15");
                        data.ReviewSciStatus = Convert.ToString("15");
                        data.ReviewSciStatus = Convert.ToString("15");
                        data.IsDispatchApprove = true;
                    }
                }
                if (data.ApprovalStatus == Convert.ToString((int)EnumList.ApprovedStatus.QCCorrection))
                {
                    data.ProStatus = Convert.ToString((int)EnumList.ProStatusDDL.QCCorrection);
                    data.OtherProStatus = Convert.ToString("13");
                    data.DispatchStatus = Convert.ToString("13");
                    data.ReviewSciStatus = Convert.ToString((int)EnumList.ScientistReviewStatusDDL.QCCorrection);
                }
                data.RecommendedPeriod = model.RecommondationRetest;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        public ActionResult ApprovedsubmittedFormInventoryData(int formid)
        {
            var formdata = db.SZ_QuoteDetailForm.Where(x => x.Id == formid).FirstOrDefault();
            if (formdata != null)
            {
                var quotedetails = db.SZ_QuotationDetail.Where(x => x.Id == formdata.QuotationDetailsId).FirstOrDefault();
                var productData = db.Products.Where(x => x.Sku.Trim().ToLower() == formdata.CATNo.Trim().ToLower().Replace("\t", "") && x.Deleted == false && x.Published == true).FirstOrDefault();
                SZ_Inventory objInv = db.SZ_Inventory.Where(x => x.BatchNo.Trim().ToLower() == formdata.BatchCode.Trim().ToLower()).FirstOrDefault();
                if (objInv != null)
                {
                    objInv.ProductId = productData.Id;
                    objInv.BatchNo = formdata.BatchCode;
                    if (!string.IsNullOrEmpty(formdata.Qty))
                    {
                        objInv.Qty = Convert.ToDecimal(formdata.Qty);
                    }
                    objInv.IsApproved = false;
                    objInv.CreatedDate = DateTime.Now;
                    objInv.Remarks = formdata.State;
                    db.Entry(objInv).State = EntityState.Modified;
                    db.SaveChanges();
                }
                else
                {
                    objInv = new SZ_Inventory();
                    objInv.ProductId = productData.Id;
                    objInv.BatchNo = formdata.BatchCode;
                    if (!string.IsNullOrEmpty(formdata.Qty))
                    {
                        objInv.Qty = Convert.ToDecimal(formdata.Qty);
                    }
                    objInv.IsApproved = false;
                    objInv.CreatedDate = DateTime.Now;
                    objInv.Remarks = formdata.State;
                    db.SZ_Inventory.Add(objInv);

                    if (quotedetails.ProjectType != Convert.ToString((int)EnumList.ProjectType.InHouse))
                    {
                        if (quotedetails.ProjectType != Convert.ToString((int)EnumList.ProjectType.InStock))
                        {
                            quotedetails.Instockdate = DateTime.Now;
                        }
                        quotedetails.ProjectStatus = (int)EnumList.ProjectStatus.MoveToInstock;
                        quotedetails.ProjectType = Convert.ToString((int)EnumList.ProjectType.InStock);
                    }
                    if (quotedetails.ProcessState <= (int)EnumList.ProcessState.MoveToInStock)
                    {
                        quotedetails.ProcessState = (int)EnumList.ProcessState.MoveToInStock;
                    }
                    db.Entry(quotedetails).State = EntityState.Modified;
                    db.SaveChanges();

                    MemoryCacheManager objCache = new MemoryCacheManager();
                    objCache.Remove("cache.inventoryData");
                }

                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = true, message = "Data added into inventory." }
                };
            }
            else
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { success = false, message = "Sorry!!! System can not find any products from this sku. Please try again later." }
                };
            }
        }

        [HttpPost]
        public ActionResult SER(FormCollection fc, HttpPostedFileBase filess)
        {
            var file = Request.Files[0];
            var allowedExtensions = new[] { ".pdf" };
            var fileName = Path.GetFileName(file.FileName); //getting only file name(ex-ganesh.jpg)  
            var ext = Path.GetExtension(file.FileName); //getting the extension(ex-.jpg)  
            if (allowedExtensions.Contains(ext)) //check what type of extension  
            {
                string name = Path.GetFileNameWithoutExtension(fileName); //getting file name without extension  
                string myfile = name + "_" + DateTime.Now.ToString().Replace(" ", "_").Replace(":", "_").Replace("/", "_") + ext; //appending the name with id  
                                                                                                                                  // store the file inside ~/project folder(Img)  
                var path = Path.Combine(Server.MapPath("~/Content/SER/"), myfile);
                file.SaveAs(path);

                using (Stream inputPdfStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read))
                using (Stream inputImageStream = new FileStream(Server.MapPath("~/img/logo.png"), FileMode.Open, FileAccess.Read, FileShare.Read))
                using (Stream outputPdfStream = new FileStream(Server.MapPath("~/content/result.pdf"), FileMode.Create, FileAccess.Write, FileShare.None))
                {
                    var reader = new PdfReader(inputPdfStream);
                    var stamper = new PdfStamper(reader, outputPdfStream);
                    var pdfContentByte = stamper.GetOverContent(1);

                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(inputImageStream);
                    image.SetAbsolutePosition(10, pdfContentByte.PdfDocument.PageSize.Height - 100);
                    pdfContentByte.AddImage(image);

                    iTextSharp.text.Image signatureoneimage = iTextSharp.text.Image.GetInstance(Server.MapPath("~/images/ser01.png"));
                    signatureoneimage.SetAbsolutePosition(100, 40);
                    signatureoneimage.ScaleAbsolute(80f, 35f);
                    pdfContentByte.AddImage(signatureoneimage);

                    iTextSharp.text.Image signaturetwoimage = iTextSharp.text.Image.GetInstance(Server.MapPath("~/images/ser02.png"));
                    signaturetwoimage.SetAbsolutePosition(250, 40);
                    signaturetwoimage.ScaleAbsolute(80f, 35f);
                    pdfContentByte.AddImage(signaturetwoimage);

                    iTextSharp.text.Image signaturethreeimage = iTextSharp.text.Image.GetInstance(Server.MapPath("~/images/ser03.png"));
                    signaturethreeimage.SetAbsolutePosition(400, 40);
                    signaturethreeimage.ScaleAbsolute(80f, 35f);
                    pdfContentByte.AddImage(signaturethreeimage);

                    var numberofpages = reader.NumberOfPages;
                    for (int page = 1; page <= numberofpages; page++)
                    {
                        var pdfContentBytepage = stamper.GetOverContent(page);
                        iTextSharp.text.Image stampimage = iTextSharp.text.Image.GetInstance(Server.MapPath("~/images/stamp.png"));
                        stampimage.SetAbsolutePosition(pdfContentBytepage.PdfDocument.PageSize.Width - 110, 80);
                        stampimage.ScaleAbsolute(80f, 80f);
                        pdfContentBytepage.AddImage(stampimage);
                    }
                    stamper.Close();
                }
            }
            else
            {
                ViewBag.message = "Please choose only Image file";
            }
            return File(Server.MapPath("~/content/result.pdf"), "application/pdf", Server.UrlEncode("SER.pdf"));
        }

        public ActionResult SER()
        {
            return View();
        }

        public ActionResult PrepHPLC()
        {
            return View();
        }

        public ActionResult ParkAllQuoteFromConsoleApplication()
        {
            try
            {
                var date = DateTime.Now.AddMonths(-1);
                var data = (from i in db.SZ_Quotation
                            join t2 in db.SZ_QuotationDetail on i.Id equals t2.QuoteId
                            where i.IsToBe == true && (t2.IsSynthesisLog == false || t2.IsSynthesisLog == null)
                            && (i.IsQuoteApproved == false || i.IsQuoteApproved == null)
                            && (i.IsPark == false || i.IsPark == null)
                            && (i.UserDistType == "User" || i.UserDistType == "Distributor")
                            && i.CreatedDate <= date
                            && string.IsNullOrEmpty(i.PONo)
                            && (t2.MoveToProject == false || t2.MoveToProject == null)
                            select i).Distinct().ToList();

                if (data != null && data.Count > 0)
                {
                    data.ForEach(item =>
                    {
                        item.IsPark = true;
                        item.ParkReason = "SynthemSystem moved into park because of one month old quotation.";
                        item.IsInstock = false;
                        item.IsCustomSynthesis = false;
                        item.IsToBe = false;
                        //db.Entry(item).State = EntityState.Modified;
                    });
                    db.SaveChanges();
                }

                return Json("true", JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return Json("false", JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ClientApproved()
        {
            var listItems = new List<SelectListItem>();
            var subscilistItems = new List<SelectListItem>();
            var prostatusItem = new List<SelectListItem>();
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });

            var scienList = objCache.Get("cache.GetScientistId", () =>
            {
                return db.GetScientistId().ToList();
            });
            listItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            subscilistItems.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            prostatusItem.Add(new SelectListItem
            {
                Text = "--Select--",
                Value = ""
            });
            scienList.ForEach(term =>
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.ToString()
                });
            });

            ViewBag.ScientistListItem = listItems;

            var subscienList = objCache.Get("cache.subscienList", () =>
            {
                return db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("subscientist")).ToList();
            });
            foreach (var term in subscienList)
            {
                string customerName = string.Empty;
                var genericAttr = genericData.Where(x => x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                subscilistItems.Add(new SelectListItem
                {
                    Text = customerName,
                    Value = term.Id.ToString()
                });
            }
            ViewBag.SubScientistListItem = subscilistItems;

            foreach (EnumList.ProStatusDDL r in Enum.GetValues(typeof(EnumList.ProStatusDDL)))
            {
                var item = Enum.GetName(typeof(EnumList.ProStatusDDL), r);
                var test = r.ToString();
                string text = SZ_Helper.GetEnumDescription((EnumList.ProStatusDDL)(int)r);
                int val = (int)r;
                prostatusItem.Add(new SelectListItem
                {
                    Text = text,
                    Value = val.ToString()
                });
            }
            ViewBag.fltprostatusItem = prostatusItem;
            return View();
        }

        public ActionResult GetQuoteById(int id)
        {
            var quotedata = db.SZ_Quotation.Where(x => x.Id == id).FirstOrDefault();
            if (quotedata != null)
            {
                return Json(new { success = true, data = quotedata }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = true, data = quotedata }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SettleUserDashboard()
        {
            var userIds = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("quote")).Select(x => x.Id).ToList();

            List<MonthWiseUserDashboardDto> mainmodel = new List<MonthWiseUserDashboardDto>();
            var startDate = DateTime.Now.AddMonths(-2);
            var endDate = DateTime.Now;
            MemoryCacheManager objCache = new MemoryCacheManager();
            var genericData = objCache.Get("cache.genericData", () =>
            {
                return db.GenericAttributes.Where(x => x.KeyGroup == "Customer").ToList();
            });
            while (startDate <= endDate)
            {
                var startMonthDate = new DateTime(startDate.Year, startDate.Month, 1);
                var endMonthDate = startDate.AddMonths(1).AddDays(-1);

                List<UserDashboardDto> model = new List<UserDashboardDto>();

                foreach (var uId in userIds)
                {
                    string customerName = string.Empty;
                    var genericAttr = genericData.Where(x => x.EntityId == uId).ToList();
                    if (genericAttr.Count > 0)
                    {
                        customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                    }
                    var szquotelist = db.SZ_Quotation.Where(x => x.CreatedBy == customerName
                    && x.CreatedDate >= startMonthDate && x.CreatedDate <= endMonthDate).ToList();

                    UserDashboardDto objModel = new UserDashboardDto();
                    objModel.UserId = uId;
                    objModel.Month = startDate.Month;
                    objModel.Year = startDate.Year;
                    objModel.Username = customerName;
                    objModel.AllDetails = szquotelist.Select(x => x.SZ_QuotationDetail.Where(z => !string.IsNullOrEmpty(z.CATNo) && !string.IsNullOrEmpty(z.CASNo) && !string.IsNullOrEmpty(z.Price)).Count()).Sum(z => z);
                    objModel.WithoutCatNo = szquotelist.Select(x => x.SZ_QuotationDetail.Where(z => string.IsNullOrEmpty(z.CATNo)).Count()).Sum(z => z);
                    objModel.WithoutCasNo = szquotelist.Select(x => x.SZ_QuotationDetail.Where(z => string.IsNullOrEmpty(z.CASNo)).Count()).Sum(z => z);
                    objModel.WithoutPrice = szquotelist.Select(x => x.SZ_QuotationDetail.Where(z => string.IsNullOrEmpty(z.Price)).Count()).Sum(z => z);
                    objModel.TotalAdded = objModel.AllDetails + objModel.WithoutCatNo + objModel.WithoutCasNo;
                    objModel.RevisionCatNo = (from q in szquotelist
                                              join qd in db.SZ_QuotationDetail on q.Id equals qd.QuoteId
                                              join l in db.SZ_QuotationDetailLog on qd.Id equals l.QuoteDetailsId
                                              where l.PropertyName == "CATNo" && string.IsNullOrEmpty(l.Before)
                                              && !string.IsNullOrEmpty(l.After)
                                              && l.UserId != uId
                                              select qd).Count();

                    objModel.RevisionCasNo = (from q in szquotelist
                                              join qd in db.SZ_QuotationDetail on q.Id equals qd.QuoteId
                                              join l in db.SZ_QuotationDetailLog on qd.Id equals l.QuoteDetailsId
                                              where l.PropertyName == "CAS No" && string.IsNullOrEmpty(l.Before)
                                              && !string.IsNullOrEmpty(l.After)
                                              && l.UserId != uId
                                              select qd).Count();

                    objModel.RevisionPrice = (from q in szquotelist
                                              join qd in db.SZ_QuotationDetail on q.Id equals qd.QuoteId
                                              join l in db.SZ_QuotationDetailLog on qd.Id equals l.QuoteDetailsId
                                              where l.PropertyName == "Price" && string.IsNullOrEmpty(l.Before)
                                              && !string.IsNullOrEmpty(l.After)
                                              && l.UserId != uId
                                              select qd).Count();

                    objModel.TotalRevisionProduct = objModel.TotalAdded - objModel.RevisionCatNo - objModel.RevisionCasNo - objModel.RevisionPrice;
                    model.Add(objModel);

                    SZ_UserDashboard objUserDashboard = db.SZ_UserDashboard.Where(x => x.UserId == uId
                    && x.Month == objModel.Month
                    && x.Year == objModel.Year).FirstOrDefault();
                    if (objUserDashboard != null)
                    {
                        //Update
                        objUserDashboard.UpdatedDate = DateTime.Now;
                        objUserDashboard.AllDetails = objModel.AllDetails;
                        objUserDashboard.WithoutCatNo = objModel.WithoutCatNo;
                        objUserDashboard.WithoutCasNo = objModel.WithoutCasNo;
                        objUserDashboard.WithoutPrice = objModel.WithoutPrice;
                        objUserDashboard.TotalAdded = objModel.TotalAdded;
                        objUserDashboard.CatNoRevision = objModel.RevisionCatNo;
                        objUserDashboard.CASNoRevision = objModel.RevisionCasNo;
                        objUserDashboard.PriceRevision = objModel.RevisionPrice;
                        objUserDashboard.TotalRevisionProduct = objModel.TotalRevisionProduct;
                        db.Entry(objUserDashboard).State = EntityState.Modified;
                    }
                    else
                    {
                        //Insert
                        objUserDashboard = new SZ_UserDashboard();
                        objUserDashboard.UserId = objModel.UserId;
                        objUserDashboard.UserName = objModel.Username;
                        objUserDashboard.Month = objModel.Month;
                        objUserDashboard.Year = objModel.Year;
                        objUserDashboard.UpdatedDate = DateTime.Now;
                        objUserDashboard.AllDetails = objModel.AllDetails;
                        objUserDashboard.WithoutCatNo = objModel.WithoutCatNo;
                        objUserDashboard.WithoutCasNo = objModel.WithoutCasNo;
                        objUserDashboard.WithoutPrice = objModel.WithoutPrice;
                        objUserDashboard.TotalAdded = objModel.TotalAdded;
                        objUserDashboard.CatNoRevision = objModel.RevisionCatNo;
                        objUserDashboard.CASNoRevision = objModel.RevisionCasNo;
                        objUserDashboard.PriceRevision = objModel.RevisionPrice;
                        objUserDashboard.TotalRevisionProduct = objModel.TotalRevisionProduct;
                        db.Entry(objUserDashboard).State = EntityState.Added;
                    }
                    db.SaveChanges();
                }
                startDate = startDate.AddMonths(1);
            }

            return Content("Success");
        }

        public ActionResult SettleDescription()
        {
            var processids = "";
            var category = db.Categories.Where(x => !string.IsNullOrEmpty(x.DataReference)).ToList();
            foreach (var item in category)
            {
                item.DataReference = System.Text.RegularExpressions.Regex.Replace(item.DataReference, @"\s+", " ");

                item.DataReference = item.DataReference.Replace("</p><p>", "<br />").Replace("</p> <p>", "<br />").Replace("</p>  <p>", "<br />").Replace("</p>   <p>", "<br />");
                db.Entry(item).State = EntityState.Modified;
                db.SaveChanges();
                processids += item.Name + "(" + item.Id + "), ";
            }
            return Content("Success : " + processids);
        }


        public ActionResult SettleFollowUpData()
        {
            DateTime startDate = DateTime.Now.AddMonths(-1);
            DateTime endDate = DateTime.Now;
            var quoteData = db.SZ_Quotation.Where(x => (!x.IsPark.HasValue || x.IsPark == false) && (!x.IsToBe.HasValue || x.IsToBe == false) && x.CreatedDate >= startDate && x.CreatedDate <= endDate && string.IsNullOrEmpty(x.PONo) && !x.CompanyName.Contains("synzeal")).ToList();
            if (quoteData != null && quoteData.Count > 0)
            {
                foreach (var quote in quoteData)
                {
                    var quotedetailsData = db.SZ_QuotationDetail.Where(x => x.QuoteId == quote.Id).ToList();
                    decimal total = 0;
                    int price1total = 0;
                    int price2total = 0;
                    int price3total = 0;
                    int price4total = 0;
                    var countryType = quote.CountryType;    //"Domestic" ? "INR" : "USD"
                    foreach (var details in quotedetailsData)
                    {
                        if (!string.IsNullOrEmpty(details.Price))
                        {
                            var allpricedata = details.Price.Split(',');
                            if (allpricedata.Count() == 1)
                            {
                                if (allpricedata[0].IndexOf("X") != -1)
                                {
                                    string packs = allpricedata[0].Split('X')[1];
                                    if (packs.Contains("="))
                                    {
                                        if (Convert.ToInt32(packs.Split('=')[0]) > 1)
                                        {
                                            if (!string.IsNullOrEmpty(packs.Split('=')[1].Trim().Split(' ')[0]))
                                            {
                                                total += Convert.ToDecimal(packs.Split('=')[1].Trim().Split(' ')[0]);
                                                price1total += Convert.ToInt32(packs.Split('=')[1].Trim().Split(' ')[0]);
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(allpricedata[0].Split(' ')[1].Split('@')[1]))
                                        {
                                            total += Convert.ToDecimal(allpricedata[0].Split(' ')[1].Split('@')[1]);
                                            price1total += Convert.ToInt32(allpricedata[0].Split(' ')[1].Split('@')[1]);
                                        }
                                    }
                                    catch
                                    {
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(allpricedata[0].Split('@')[1].Trim().Split(' ')[0]))
                                            {
                                                total += Convert.ToDecimal(allpricedata[0].Split('@')[1].Trim().Split(' ')[0]);
                                                price1total += Convert.ToInt32(allpricedata[0].Split('@')[1].Trim().Split(' ')[0]);
                                            }
                                        }
                                        catch
                                        {

                                        }
                                    }
                                }
                            }
                            else
                            {
                                var cnt = new List<string>();
                                var loopcnt = 1;
                                foreach (var item in allpricedata)
                                {
                                    var qty = System.Text.RegularExpressions.Regex.Match(item.Split('@')[0], @"\d+").Value;
                                    var price = System.Text.RegularExpressions.Regex.Match(item.Split('@')[1], @"\d+").Value;
                                    if (item.Split('X').Count() > 1)
                                    {
                                        if (item.Split('X')[1].Contains("="))
                                        {
                                            if (!string.IsNullOrEmpty(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]))
                                            {
                                                total += Convert.ToDecimal(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                if (loopcnt == 1)
                                                {
                                                    price1total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                                if (loopcnt == 2)
                                                {
                                                    price2total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                                if (loopcnt == 2)
                                                {
                                                    price3total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                                if (loopcnt == 3)
                                                {
                                                    price4total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]))
                                            {
                                                total += Convert.ToDecimal(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                if (loopcnt == 1)
                                                {
                                                    price1total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                                if (loopcnt == 2)
                                                {
                                                    price2total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                                if (loopcnt == 2)
                                                {
                                                    price3total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                                if (loopcnt == 3)
                                                {
                                                    price4total += Convert.ToInt32(item.Split('X')[1].Split('=')[1].Trim().Split(' ')[0]);
                                                }
                                            }
                                        }
                                    }
                                    loopcnt += 1;
                                }
                                if (cnt.Count == 1)
                                {
                                    if (!string.IsNullOrEmpty(cnt[0].Split(' ')[1].Split('@')[1]))
                                    {
                                        total += Convert.ToDecimal(cnt[0].Split(' ')[1].Split('@')[1]);
                                    }
                                }
                            }
                        }
                    }

                    if (countryType == "Domestic")
                    {
                        if (price1total >= 360000 || price2total >= 360000 || price3total >= 360000 || price4total >= 360000)
                        {
                            quote.IsFollowupRequired = true;
                            quote.IsRemoveFollowup = false;
                        }
                        //if (total >= 360000)
                        //{
                        //    quote.IsFollowupRequired = true;
                        //    quote.IsRemoveFollowup = false;
                        //}
                    }
                    else
                    {
                        if (price1total >= 5000 || price2total >= 5000 || price3total >= 5000 || price4total >= 5000)
                        {
                            quote.IsFollowupRequired = true;
                            quote.IsRemoveFollowup = false;
                        }
                        //if (total >= 5000)
                        //{
                        //    quote.IsFollowupRequired = true;
                        //    quote.IsRemoveFollowup = false;
                        //}
                    }

                    db.Entry(quote).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }

            return Content("true");
        }

        public ActionResult getProductDetailsByProductId(int id)
        {
            try
            {
                var model = (from x in db.Products
                             where x.Id == id && x.Deleted == false && x.Published == true
                             select x).FirstOrDefault();

                if (!string.IsNullOrEmpty(model.Sku))
                {
                    string uri = Domain + "/api/RestAPI/ProductDetailsBySku?sku=" + model.Sku;
                    using (HttpClient httpClient = new HttpClient())
                    {
                        Task<String> response = httpClient.GetStringAsync(uri);
                        string productModel = JsonConvert.DeserializeObjectAsync<string>(response.Result).Result;
                        var ProductOutputModel = JsonConvert.DeserializeObject<ProductDetailsModel>(productModel);

                        var pricedata = db.SZ_PriceList.Where(x => x.ProductId == id).FirstOrDefault();
                        var pdata = new SZ_PriceList();
                        if (pricedata != null)
                        {
                            pdata.CategoryMasterUSdId = pricedata.CategoryMasterUSdId;
                            pdata.ProductId = pricedata.ProductId;
                            pdata.IsPriceApproved = pricedata.IsPriceApproved;
                            pdata.ProductRemark = pricedata.ProductRemark;
                            pdata.LeadTime = pricedata.LeadTime;
                            pdata.TenPrice = pricedata.TenPrice;
                            pdata.TwentyFivePrice = pricedata.TwentyFivePrice;
                            pdata.FiftyPrice = pricedata.FiftyPrice;
                            pdata.HundredPrice = pricedata.HundredPrice;
                            pdata.TenUSD = pricedata.TenUSD;
                            pdata.TwentyfiveUSD = pricedata.TwentyfiveUSD;
                            pdata.FiftyUSD = pricedata.FiftyUSD;
                            pdata.OnehundredUSD = pricedata.OnehundredUSD;
                        }
                        return new JsonResult()
                        {
                            JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                            Data = new { record = ProductOutputModel, pricedata = pdata, success = true }
                        };
                    }
                }
                else
                {
                    var ProductOutputModel = new ProductDetailsModel();
                    return new JsonResult()
                    {
                        JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                        Data = new { record = ProductOutputModel, success = true }
                    };
                }
            }
            catch (Exception ex)
            {
                return new JsonResult()
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new { record = ex.Message, success = false }
                };
            }
        }

        public ActionResult GetProductById(int id)
        {
            var product = db.Products.Where(x => x.Id == id).FirstOrDefault();
            var result = new Product()
            {
                Gtin = product.Gtin,
                Id = product.Id,
                MolecularWeight = product.MolecularWeight,
                Sku = product.Sku,
                ManufacturerPartNumber = product.ManufacturerPartNumber
            };

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetInventoryDataByBatchNo(string batchno)
        {
            var inventorydata = db.SZ_Inventory.Where(x => x.BatchNo == batchno).FirstOrDefault();
            return Json(inventorydata, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetQuoteDetailsbyAdditionalBatchNoid(int batchid)
        {
            var data = db.SZ_QuotationDetail.Where(x => x.AdditionalBatchNo == batchid).OrderByDescending(x => x.Id).FirstOrDefault();
            if (data == null)
            {
                var productdata = db.SZ_Inventory.Where(x => x.Id == batchid).FirstOrDefault();
                if (productdata != null)
                {
                    var quotedetailsdata = db.SZ_QuotationDetail.Where(x => x.ProductId == productdata.ProductId).OrderByDescending(x => x.Id).FirstOrDefault();
                    if (quotedetailsdata != null)
                    {
                        var outputss = new SZ_QuotationDetailModel()
                        {
                            Id = quotedetailsdata.Id,
                            CATNo = quotedetailsdata.CATNo,
                            CASNo = quotedetailsdata.CASNo,
                            ProductName = quotedetailsdata.ProductName,
                            ProductId = quotedetailsdata.ProductId
                        };
                        return Json(outputss, JsonRequestBehavior.AllowGet);
                    }
                }

                return Json(data, JsonRequestBehavior.AllowGet);
            }

            var output = new SZ_QuotationDetailModel()
            {
                Id = data.Id,
                CATNo = data.CATNo,
                CASNo = data.CASNo,
                ProductName = data.ProductName,
                ProductId = data.ProductId
            };
            return Json(output, JsonRequestBehavior.AllowGet);

            // var list = JsonConvert.SerializeObject(new SZ_QuotationDetailModel() {
            //     Id = data.Id,
            //     CATNo = data.CATNo,
            //     CASNo = data.CASNo,
            //     ProductName = data.ProductName,
            //     ProductId = data.ProductId
            // },
            //             Formatting.None,
            //             new JsonSerializerSettings()
            //             {
            //                 ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
            //             });

            // //return Json(list, JsonRequestBehavior.AllowGet);
            // var jsonResult = Json(list, JsonRequestBehavior.AllowGet);
            // jsonResult.MaxJsonLength = int.MaxValue;
            // return jsonResult;
        }

        public ActionResult GetQuoteDetailsFormByBatchCode(string BatchCode)
        {
            var data = db.SZ_QuoteDetailForm.Where(x => x.BatchCode == BatchCode).FirstOrDefault();
            if (data == null)
                return Json(null, JsonRequestBehavior.AllowGet);

            var model = new SZ_QuoteDetailForm()
            {
                Id = data.Id,
                QuotationDetailsId = data.QuotationDetailsId,
                SubmissionDate = data.SubmissionDate,
                CATNo = data.CATNo,
                ProjectName = data.ProjectName,
                CASNo = data.CASNo,
                ProductName = data.ProductName,
                ScientistName = data.ScientistName,
                BatchCode = data.BatchCode,
                JournalDate = data.JournalDate,
                MolWeight = data.MolWeight,
                MolFormula = data.MolFormula,
                NMRCode = data.NMRCode,
                HPCLCode = data.HPCLCode,
                MSCode = data.MSCode,
                OtherAnalysis = data.OtherAnalysis,
                TypeCompound = data.TypeCompound,
                StateCompound = data.StateCompound,
                SaltName = data.SaltName,
                StructurePath = data.StructurePath,
                Qty = data.Qty,
                Apearance = data.Apearance,
                Error = data.Error,
                CreatedDate = data.CreatedDate,
                UpdatedDate = data.UpdatedDate,
                RbSaltMentionName = data.RbSaltMentionName,
                SubmittedBy = data.SubmittedBy,
                TLName = data.TLName,
                HPLCDate = data.HPLCDate,
                HPLCPurity = data.HPLCPurity,
                ChkHygroscopic = data.ChkHygroscopic,
                RbAdditionalAnalysis = data.RbAdditionalAnalysis,
                MolecularFormula = data.MolecularFormula,
                SolutionForm = data.SolutionForm,
                SolidForm = data.SolidForm,
                State = data.State,
                NoOfFinalStep = data.NoOfFinalStep,
                EarlierSynthesized = data.EarlierSynthesized,
                PurificationBy = data.PurificationBy,
                SpectralDataAttachment = data.SpectralDataAttachment,
                Chemist = data.Chemist,
                TempSensitive = data.TempSensitive,
                Lacrymatory = data.Lacrymatory,
                StabilityRelatedComment = data.StabilityRelatedComment,
                Stability = data.Stability,
                IRAttachment = data.IRAttachment,
                MassAttachment = data.MassAttachment,
                PLCAttachment = data.PLCAttachment,
                NMRAttchment = data.NMRAttchment,
                QNMRAttchment = data.QNMRAttchment,
                TGAAttachment = data.TGAAttachment,
                CMRAttchment = data.CMRAttchment,
                DEPTAttachment = data.DEPTAttachment,
                HRMSAttachment = data.HRMSAttachment,
                ROIAttachment = data.ROIAttachment,
                ElementralAttachment = data.ElementralAttachment,
                SERAttachment = data.SERAttachment,
                GCAttachment = data.GCAttachment,
                ELSDAttachment = data.ELSDAttachment,
                ChiralAttachmenrt = data.ChiralAttachmenrt,
                IsDraftEntry = data.IsDraftEntry,
                chkNMRDone = data.chkNMRDone,
                chkCrystallizationDone = data.chkCrystallizationDone,
                APCIMassAttachment = data.APCIMassAttachment,
                ChemdrawFileAttachment = data.ChemdrawFileAttachment,
                WeightingSlipAttachment = data.WeightingSlipAttachment,
                NMRInterpretaionAttachment = data.NMRInterpretaionAttachment,
                IsDispatchedEntry = data.IsDispatchedEntry,
                LightSensitivity = data.LightSensitivity,
                ApprovalStatus = data.ApprovalStatus,
                ApprovedAs = data.ApprovedAs,
                ApprovalComment = data.ApprovalComment,
                RecommendedPeriod = data.RecommendedPeriod,
                QCApprovedDate = data.QCApprovedDate,
                Photostability = data.Photostability,
                UVSpectra = data.UVSpectra,
                OtherAnalysisAttachment = data.OtherAnalysisAttachment,
                N1NmrAttachment = data.N1NmrAttachment,
                ChiralHPLCAttachment = data.ChiralHPLCAttachment,
                IsotropicpurityAttachment = data.IsotropicpurityAttachment,
                TwoDNMRAttachment = data.TwoDNMRAttachment
            };
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public ActionResult NewQuotationForm(SZ_QuoteDetailForm model)
        {
            db.SZ_QuoteDetailForm.Add(model);
            db.SaveChanges();
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public ActionResult UpdateQuotationForm(SZ_QuoteDetailForm model)
        {
            db.Entry(model).State = EntityState.Modified;
            db.SaveChanges();
            return Json(model, JsonRequestBehavior.AllowGet);
        }


        public ActionResult NewQuotationFormMap(SZ_QuoteDetails_Form model)
        {
            db.SZ_QuoteDetails_Form.Add(model);
            db.SaveChanges();
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ChangeClientApproved(int id, bool status)
        {
            try
            {
                var model = db.SZ_QuotationDetail.Where(x => x.Id == id).FirstOrDefault();
                if (model != null)
                {
                    model.ApprovedForClient = status;
                    db.Entry(model).State = EntityState.Modified;
                    db.SaveChanges();
                }
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult PrintNewCompanyReportExcel(string Startdate, string Enddate)
        {
            ExcelPackage ExcelPkg = new ExcelPackage();
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

            var model = db.SZ_CompanyList.ToList();
            db.Database.ExecuteSqlCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED");

            var modelAvailable = (from pc in db.SZ_Quotation
                                  join c in db.SZ_QuotationDetail on pc.Id equals c.QuoteId
                                  where (c.MoveToProject == null || c.MoveToProject == false)
                                    && (c.MoveToDispatch == false || c.MoveToDispatch == null)
                                  select new
                                  {
                                      CompanyName = pc.CompanyName,
                                      EmailAddress = pc.EmailAddress,
                                      CreatedDate = pc.CreatedDate
                                  }).Distinct().ToList();

            //group p by p.Name into pt1
            //select new
            //{
            //    CompanyName = pt1.Key,
            //    ProductCount = pt1.Count()
            //}).ToList();
            if (!string.IsNullOrEmpty(Startdate))
            {
                TimeSpan ts = new TimeSpan(00, 00, 00);
                DateTime sd = Convert.ToDateTime(Startdate);
                sd = sd.Add(ts);
                modelAvailable = modelAvailable.Where(x => x.CreatedDate >= sd).ToList();
            }
            if (!string.IsNullOrEmpty(Enddate))
            {
                TimeSpan ts = new TimeSpan(23, 59, 59);
                DateTime ed = Convert.ToDateTime(Enddate);
                ed = ed.Add(ts);
                modelAvailable = modelAvailable.Where(x => x.CreatedDate <= ed).ToList();
            }

            string madeby = string.Empty;

            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Company Record");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;

            int loopCount = 1;
            wsSheet1.Cells[loopCount, 1].Value = "Sr No";
            wsSheet1.Cells[loopCount, 2].Value = "Company Name";
            wsSheet1.Cells[loopCount, 3].Value = "Email Address";

            int columnCount = 3;

            using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, columnCount])
            {
                Rng.Style.Font.Bold = true;
                Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                Rng.Style.Font.Color.SetColor(Color.White);
                Rng.Style.WrapText = true;
            }
            var newmodelAvailable = (from i in modelAvailable
                                     select new
                                     {
                                         CompanyName = i.CompanyName,
                                         EmailAddress = i.EmailAddress
                                     }).Distinct().ToList();
            loopCount = loopCount + 1;
            int srno = 1;
            foreach (var data in newmodelAvailable)
            {
                wsSheet1.Cells[loopCount, 1].Value = srno;
                wsSheet1.Cells[loopCount, 2].Value = data.CompanyName;
                wsSheet1.Cells[loopCount, 3].Value = data.EmailAddress;

                loopCount += 1;
                srno += 1;
            }

            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "NewCompanyReport-" + DateTime.Now.ToShortDateString().Replace("/", "_") + "-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("NewCompanyReport_" + DateTime.Now.ToShortDateString().Replace("#", "_") + ".xls"));
        }


        public ActionResult PrintPOReportExcel(int? CreatedBy, string Startdate, string Enddate)
        {
            var categoryData = db.Categories.ToList();
            var productCategoryData = db.Product_Category_Mapping.ToList();
            ExcelPackage ExcelPkg = new ExcelPackage();
            List<string> typeList = new List<string>();
            typeList.Add("Project");
            typeList.Add("Invoice");
            string inhouseProjectType = Convert.ToString((int)EnumList.ProjectType.InHouse);

            foreach (var type in typeList)
            {
                var model = new List<SZ_QuotationDetail>();
                if (type == "Project")
                {
                    model = (from i in db.SZ_Quotation
                             join qd in db.SZ_QuotationDetail on i.Id equals qd.QuoteId
                             where qd.MoveToProject == true
                            && string.IsNullOrEmpty(qd.TrackingNo)
                            && (qd.IsOnHold == false || qd.IsOnHold == null)
                            && (qd.ProjectType != inhouseProjectType || qd.ProjectType == null)
                             orderby qd.MoveProjectDate descending
                             select qd).OrderByDescending(x => x.MoveProjectDate).ToList();
                }
                else
                {
                    model = (from i in db.SZ_Quotation
                             join qd in db.SZ_QuotationDetail on i.Id equals qd.QuoteId
                             where qd.MoveToInvoice == true
                             select qd).OrderByDescending(x => x.MoveToInvoiceDate).ToList();
                }

                if (CreatedBy.HasValue)
                {
                    model = model.Where(x => x.SZ_Quotation.CompanyId == CreatedBy).ToList();
                }

                if (type == "Project")
                {
                    if (!string.IsNullOrEmpty(Startdate))
                    {
                        TimeSpan ts = new TimeSpan(00, 00, 00);
                        DateTime sd = Convert.ToDateTime(Startdate);
                        sd = sd.Add(ts);
                        model = model.Where(x => x.MoveProjectDate >= sd).ToList();
                    }
                    if (!string.IsNullOrEmpty(Enddate))
                    {
                        TimeSpan ts = new TimeSpan(23, 59, 59);
                        DateTime ed = Convert.ToDateTime(Enddate);
                        ed = ed.Add(ts);
                        model = model.Where(x => x.MoveProjectDate <= ed).ToList();
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(Startdate))
                    {
                        TimeSpan ts = new TimeSpan(00, 00, 00);
                        DateTime sd = Convert.ToDateTime(Startdate);
                        sd = sd.Add(ts);
                        model = model.Where(x => x.MoveToInvoiceDate >= sd).ToList();
                    }
                    if (!string.IsNullOrEmpty(Enddate))
                    {
                        TimeSpan ts = new TimeSpan(23, 59, 59);
                        DateTime ed = Convert.ToDateTime(Enddate);
                        ed = ed.Add(ts);
                        model = model.Where(x => x.MoveToInvoiceDate <= ed).ToList();
                    }
                }

                string madeby = string.Empty;
                var result = (from i in model
                              select i).Distinct().ToList();

                ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add(type);
                wsSheet1.DefaultColWidth = 16;
                wsSheet1.Protection.IsProtected = false;
                wsSheet1.Protection.AllowSelectLockedCells = false;
                wsSheet1.Cells.AutoFitColumns(14, 40);
                wsSheet1.Column(3).Width = 40;
                wsSheet1.Column(3).Style.WrapText = true;

                int loopCount = 1;
                wsSheet1.Cells[loopCount, 1].Value = "Sr No";
                wsSheet1.Cells[loopCount, 2].Value = "Product Name";
                wsSheet1.Cells[loopCount, 3].Value = "CAS No";
                wsSheet1.Cells[loopCount, 4].Value = "Cat No";
                wsSheet1.Cells[loopCount, 5].Value = "Client Name";
                wsSheet1.Cells[loopCount, 6].Value = "PO Dt";
                wsSheet1.Cells[loopCount, 7].Value = "PO No";
                wsSheet1.Cells[loopCount, 8].Value = "Lead Time";
                wsSheet1.Cells[loopCount, 9].Value = "Value";
                wsSheet1.Cells[loopCount, 10].Value = "Quantity";
                wsSheet1.Cells[loopCount, 11].Value = "Dispatch Date";
                wsSheet1.Cells[loopCount, 12].Value = "Domestic/Export";

                int columnCount = 12;
                if (SessionCookieManagement.UserEmail == "shailesh@synzeal.com" || SessionCookieManagement.UserEmail == "parthsuthar2010@gmail.com")
                {
                    wsSheet1.Cells[loopCount, 13].Value = "Batch No";
                    wsSheet1.Cells[loopCount, 14].Value = "COA No";
                    wsSheet1.Cells[loopCount, 15].Value = "Tracking No";
                    wsSheet1.Cells[loopCount, 16].Value = "API Name";
                    columnCount = 16;
                }

                using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, columnCount])
                {
                    Rng.Style.Font.Bold = true;
                    Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                    Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                    Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    Rng.Style.Font.Color.SetColor(Color.White);
                    Rng.Style.WrapText = true;
                }

                //string IntCellFormat = "###0;";
                //using (ExcelRange Rng = wsSheet1.Cells[1, 9, 100000, 9])
                //{
                //    Rng.Style.
                //    Rng.Style.Numberformat.Format = IntCellFormat;
                //}

                loopCount = loopCount + 1;
                int srno = 1;
                List<int> quoteids = result.Select(x => x.QuoteId).Distinct().ToList();
                foreach (var data in result)
                {
                    wsSheet1.Cells[loopCount, 1].Value = srno;
                    wsSheet1.Cells[loopCount, 2].Value = data.ProductName;
                    wsSheet1.Cells[loopCount, 3].Value = data.CASNo;
                    wsSheet1.Cells[loopCount, 4].Value = data.CATNo;
                    wsSheet1.Cells[loopCount, 5].Value = data.SZ_Quotation.CompanyName;
                    wsSheet1.Cells[loopCount, 6].Value = data.SZ_Quotation.PODate.HasValue ? data.SZ_Quotation.PODate.Value.ToShortDateString() : "";
                    wsSheet1.Cells[loopCount, 7].Value = data.SZ_Quotation.PONo;
                    wsSheet1.Cells[loopCount, 8].Value = data.LeadTime;
                    var priceStr = Common.GetPriceFromPriceString(data.Price);
                    if (data.SZ_Quotation.CountryType == "Export" && !string.IsNullOrEmpty(priceStr))
                    {
                        priceStr = Convert.ToString(Convert.ToDecimal(priceStr) * 73);
                    }
                    wsSheet1.Cells[loopCount, 9].Value = priceStr;
                    wsSheet1.Cells[loopCount, 10].Value = Common.GetQTYFromPriceString(data.Price);
                    wsSheet1.Cells[loopCount, 11].Value = data.MoveDispatchDate.HasValue ? data.MoveDispatchDate.Value.ToShortDateString() : "";
                    wsSheet1.Cells[loopCount, 12].Value = data.SZ_Quotation.CountryType;
                    if (SessionCookieManagement.UserEmail == "shailesh@synzeal.com" || SessionCookieManagement.UserEmail == "parthsuthar2010@gmail.com")
                    {
                        wsSheet1.Cells[loopCount, 13].Value = db.SZ_Inventory.Where(x => x.Id == data.AdditionalBatchNo).Select(x => x.BatchNo).FirstOrDefault();
                        wsSheet1.Cells[loopCount, 14].Value = data.COARefNumber;
                        wsSheet1.Cells[loopCount, 15].Value = data.TrackingNo;
                        wsSheet1.Cells[loopCount, 16].Value = GetApiNameOfProduct(data.ProductId.Value, categoryData, productCategoryData); ;
                    }

                    loopCount += 1;
                    srno += 1;
                }
            }

            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "POReport-" + DateTime.Now.ToShortDateString().Replace("/", "_") + "-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("POReport_" + DateTime.Now.ToShortDateString().Replace("#", "_") + ".xls"));
        }

        public ActionResult SEO()
        {
            string path = Server.MapPath("~/img/seo.xlsx");

            var file = new FileInfo(path);

            using (var package = new ExcelPackage(file))
            {
                var currentSheet = package.Workbook.Worksheets;
                var workSheet = currentSheet.First();
                var noOfCol = workSheet.Dimension.End.Column;
                var noOfRow = workSheet.Dimension.End.Row;
                for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                {
                    string CATNo = workSheet.Cells[rowIterator, 1].Value != null ? workSheet.Cells[rowIterator, 1].Value.ToString() : string.Empty;
                    string keyword = workSheet.Cells[rowIterator, 2].Value != null ? workSheet.Cells[rowIterator, 2].Value.ToString() : string.Empty;
                    string title = workSheet.Cells[rowIterator, 3].Value != null ? workSheet.Cells[rowIterator, 3].Value.ToString() : string.Empty;
                    string description = workSheet.Cells[rowIterator, 4].Value != null ? workSheet.Cells[rowIterator, 4].Value.ToString() : "";
                    if (!string.IsNullOrEmpty(CATNo))
                    {
                        CATNo = CATNo.Trim();
                    }
                    else
                    {
                        continue;
                    }

                    var productData = db.Products.Where(x => x.Deleted == false && x.Published == true && x.Sku.ToLower().Contains(CATNo.ToLower())).FirstOrDefault();
                    if (productData != null)
                    {
                        productData.MetaTitle = title;
                        productData.MetaDescription = description;
                        productData.MetaKeywords = keyword;
                        db.Entry(productData).State = EntityState.Modified;
                    }
                }
                db.SaveChanges();
            }

            return Content("Done");
        }


        public ActionResult GenerateAnualReport()
        {
            var listItems = new List<SelectListItem>();
            var scienList = db.Customers.Where(x => x.Deleted == false && x.Active == true && x.CustomerRoles.Select(z => z.SystemName.ToLower()).Contains("quote")).ToList();
            foreach (var term in scienList)
            {
                string customerName = string.Empty;
                var genericAttr = db.GenericAttributes.Where(x => x.KeyGroup == "Customer" && x.EntityId == term.Id).ToList();
                if (genericAttr.Count > 0)
                {
                    customerName = genericAttr.Where(x => x.Key == "FirstName").Select(x => x.Value).FirstOrDefault() + " " + genericAttr.Where(x => x.Key == "LastName").Select(x => x.Value).FirstOrDefault();
                }
                listItems.Add(new SelectListItem
                {
                    Text = customerName.ToLower().Trim(),
                    Value = term.Id.ToString()
                });
            }
            var allQuoteData = (from i in db.SZ_Quotation
                                select i).Distinct().ToList();
            ExcelPackage ExcelPkg = new ExcelPackage();
            ExcelWorksheet wsSheet1 = ExcelPkg.Workbook.Worksheets.Add("Sheet");
            wsSheet1.DefaultColWidth = 16;
            wsSheet1.Protection.IsProtected = false;
            wsSheet1.Protection.AllowSelectLockedCells = false;
            wsSheet1.Cells.AutoFitColumns(14, 40);
            wsSheet1.Column(3).Width = 40;
            wsSheet1.Column(3).Style.WrapText = true;
            int loopCount = 1;
            foreach (var customer in listItems)
            {
                string madeby = string.Empty;
                var result = (from i in allQuoteData
                              where !string.IsNullOrEmpty(i.CreatedBy) && i.CreatedBy.ToLower().Trim() == customer.Text
                              select i).Distinct().ToList();


                wsSheet1.Cells[loopCount, 1].Value = "Employee Name";
                wsSheet1.Cells[loopCount, 2].Value = "";
                wsSheet1.Cells[loopCount, 3].Value = "Apr-20";
                wsSheet1.Cells[loopCount, 4].Value = "May-20";
                wsSheet1.Cells[loopCount, 5].Value = "Jun-20";
                wsSheet1.Cells[loopCount, 6].Value = "Jul-20";
                wsSheet1.Cells[loopCount, 7].Value = "Aug-20";
                wsSheet1.Cells[loopCount, 8].Value = "Sep-20";
                wsSheet1.Cells[loopCount, 9].Value = "Oct-20";
                wsSheet1.Cells[loopCount, 10].Value = "Nov-20";
                wsSheet1.Cells[loopCount, 11].Value = "Dec-20";
                wsSheet1.Cells[loopCount, 12].Value = "Jan-21";
                wsSheet1.Cells[loopCount, 13].Value = "Feb-21";
                wsSheet1.Cells[loopCount, 14].Value = "Mar-21";
                wsSheet1.Cells[loopCount, 15].Value = "Apr-21";
                wsSheet1.Cells[loopCount, 16].Value = "May-21";
                wsSheet1.Cells[loopCount, 17].Value = "Jun-21";
                wsSheet1.Cells[loopCount, 18].Value = "Jul-21";
                using (ExcelRange Rng = wsSheet1.Cells[loopCount, 1, loopCount, 18])
                {
                    Rng.Style.Font.Bold = true;
                    Rng.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#7b7b7b");
                    Rng.Style.Fill.BackgroundColor.SetColor(colFromHex);
                    Rng.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    Rng.Style.Font.Color.SetColor(Color.White);
                    Rng.Style.WrapText = true;
                }

                loopCount = loopCount + 1;
                int srno = 1;

                List<string> listoftypes = new List<string>();
                listoftypes.Add("Products Added");
                listoftypes.Add("Quotations Added");
                listoftypes.Add("Approved");
                listoftypes.Add("Masters Updated");
                foreach (var type in listoftypes)
                {
                    if (type == "Products Added")
                    {
                        wsSheet1.Cells[loopCount, 1].Value = customer.Text;
                        wsSheet1.Cells[loopCount, 2].Value = type;
                        wsSheet1.Cells[loopCount, 3].Value = GetProductCountOfQuote(new DateTime(2020, 4, 1), new DateTime(2020, 4, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 4].Value = GetProductCountOfQuote(new DateTime(2020, 5, 1), new DateTime(2020, 5, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 5].Value = GetProductCountOfQuote(new DateTime(2020, 6, 1), new DateTime(2020, 6, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 6].Value = GetProductCountOfQuote(new DateTime(2020, 7, 1), new DateTime(2020, 7, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 7].Value = GetProductCountOfQuote(new DateTime(2020, 8, 1), new DateTime(2020, 8, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 8].Value = GetProductCountOfQuote(new DateTime(2020, 9, 1), new DateTime(2020, 9, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 9].Value = GetProductCountOfQuote(new DateTime(2020, 10, 1), new DateTime(2020, 10, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 10].Value = GetProductCountOfQuote(new DateTime(2020, 11, 1), new DateTime(2020, 11, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 11].Value = GetProductCountOfQuote(new DateTime(2020, 12, 1), new DateTime(2020, 12, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 12].Value = GetProductCountOfQuote(new DateTime(2021, 1, 1), new DateTime(2021, 1, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 13].Value = GetProductCountOfQuote(new DateTime(2021, 2, 1), new DateTime(2021, 2, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 14].Value = GetProductCountOfQuote(new DateTime(2021, 3, 1), new DateTime(2021, 3, 1).AddMonths(1).AddDays(-1), result);

                        wsSheet1.Cells[loopCount, 15].Value = GetProductCountOfQuote(new DateTime(2021, 4, 1), new DateTime(2021, 4, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 16].Value = GetProductCountOfQuote(new DateTime(2021, 5, 1), new DateTime(2021, 5, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 17].Value = GetProductCountOfQuote(new DateTime(2021, 6, 1), new DateTime(2021, 6, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 18].Value = GetProductCountOfQuote(new DateTime(2021, 7, 1), new DateTime(2021, 7, 1).AddMonths(1).AddDays(-1), result);

                    }
                    else if (type == "Quotations Added")
                    {
                        wsSheet1.Cells[loopCount, 1].Value = "";
                        wsSheet1.Cells[loopCount, 2].Value = type;
                        wsSheet1.Cells[loopCount, 3].Value = GetQuoteCountOfQuote(new DateTime(2020, 4, 1), new DateTime(2020, 4, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 4].Value = GetQuoteCountOfQuote(new DateTime(2020, 5, 1), new DateTime(2020, 5, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 5].Value = GetQuoteCountOfQuote(new DateTime(2020, 6, 1), new DateTime(2020, 6, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 6].Value = GetQuoteCountOfQuote(new DateTime(2020, 7, 1), new DateTime(2020, 7, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 7].Value = GetQuoteCountOfQuote(new DateTime(2020, 8, 1), new DateTime(2020, 8, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 8].Value = GetQuoteCountOfQuote(new DateTime(2020, 9, 1), new DateTime(2020, 9, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 9].Value = GetQuoteCountOfQuote(new DateTime(2020, 10, 1), new DateTime(2020, 10, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 10].Value = GetQuoteCountOfQuote(new DateTime(2020, 11, 1), new DateTime(2020, 11, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 11].Value = GetQuoteCountOfQuote(new DateTime(2020, 12, 1), new DateTime(2020, 12, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 12].Value = GetQuoteCountOfQuote(new DateTime(2021, 1, 1), new DateTime(2021, 1, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 13].Value = GetQuoteCountOfQuote(new DateTime(2021, 2, 1), new DateTime(2021, 2, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 14].Value = GetQuoteCountOfQuote(new DateTime(2021, 3, 1), new DateTime(2021, 3, 1).AddMonths(1).AddDays(-1), result);

                        wsSheet1.Cells[loopCount, 15].Value = GetQuoteCountOfQuote(new DateTime(2021, 4, 1), new DateTime(2021, 4, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 16].Value = GetQuoteCountOfQuote(new DateTime(2021, 5, 1), new DateTime(2021, 5, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 17].Value = GetQuoteCountOfQuote(new DateTime(2021, 6, 1), new DateTime(2021, 6, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 18].Value = GetQuoteCountOfQuote(new DateTime(2021, 7, 1), new DateTime(2021, 7, 1).AddMonths(1).AddDays(-1), result);

                    }
                    else if (type == "Approved")
                    {
                        wsSheet1.Cells[loopCount, 1].Value = "";
                        wsSheet1.Cells[loopCount, 2].Value = type;
                        wsSheet1.Cells[loopCount, 3].Value = GetApprovedCountOfQuote(new DateTime(2020, 4, 1), new DateTime(2020, 4, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 4].Value = GetApprovedCountOfQuote(new DateTime(2020, 5, 1), new DateTime(2020, 5, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 5].Value = GetApprovedCountOfQuote(new DateTime(2020, 6, 1), new DateTime(2020, 6, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 6].Value = GetApprovedCountOfQuote(new DateTime(2020, 7, 1), new DateTime(2020, 7, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 7].Value = GetApprovedCountOfQuote(new DateTime(2020, 8, 1), new DateTime(2020, 8, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 8].Value = GetApprovedCountOfQuote(new DateTime(2020, 9, 1), new DateTime(2020, 9, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 9].Value = GetApprovedCountOfQuote(new DateTime(2020, 10, 1), new DateTime(2020, 10, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 10].Value = GetApprovedCountOfQuote(new DateTime(2020, 11, 1), new DateTime(2020, 11, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 11].Value = GetApprovedCountOfQuote(new DateTime(2020, 12, 1), new DateTime(2020, 12, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 12].Value = GetApprovedCountOfQuote(new DateTime(2021, 1, 1), new DateTime(2021, 1, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 13].Value = GetApprovedCountOfQuote(new DateTime(2021, 2, 1), new DateTime(2021, 2, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 14].Value = GetApprovedCountOfQuote(new DateTime(2021, 3, 1), new DateTime(2021, 3, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 15].Value = GetApprovedCountOfQuote(new DateTime(2021, 4, 1), new DateTime(2021, 4, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 16].Value = GetApprovedCountOfQuote(new DateTime(2021, 5, 1), new DateTime(2021, 5, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 17].Value = GetApprovedCountOfQuote(new DateTime(2021, 6, 1), new DateTime(2021, 6, 1).AddMonths(1).AddDays(-1), result);
                        wsSheet1.Cells[loopCount, 18].Value = GetApprovedCountOfQuote(new DateTime(2021, 7, 1), new DateTime(2021, 7, 1).AddMonths(1).AddDays(-1), result);

                    }
                    else if (type == "Masters Updated")
                    {
                        wsSheet1.Cells[loopCount, 1].Value = "";
                        wsSheet1.Cells[loopCount, 2].Value = "";
                        wsSheet1.Cells[loopCount, 3].Value = "";
                        wsSheet1.Cells[loopCount, 4].Value = "";
                        wsSheet1.Cells[loopCount, 5].Value = "";
                        wsSheet1.Cells[loopCount, 6].Value = "";
                        wsSheet1.Cells[loopCount, 7].Value = "";
                        wsSheet1.Cells[loopCount, 8].Value = "";
                        wsSheet1.Cells[loopCount, 9].Value = "";
                        wsSheet1.Cells[loopCount, 10].Value = "";
                        wsSheet1.Cells[loopCount, 11].Value = "";
                        wsSheet1.Cells[loopCount, 12].Value = "";
                        wsSheet1.Cells[loopCount, 13].Value = "";
                        wsSheet1.Cells[loopCount, 14].Value = "";
                        wsSheet1.Cells[loopCount, 15].Value = "";
                        wsSheet1.Cells[loopCount, 16].Value = "";
                        wsSheet1.Cells[loopCount, 17].Value = "";
                        wsSheet1.Cells[loopCount, 18].Value = "";
                    }

                    loopCount += 1;
                    srno += 1;
                }
            }

            string filePath = HostingEnvironment.MapPath("~/Content/Quotation/") + "AnualReport-" + DateTime.Now.ToShortDateString().Replace("/", "_") + "-" + DateTime.Now.ToShortTimeString().Replace("#", "_").Replace(":", "_") + ".xlsx";
            ExcelPkg.SaveAs(new FileInfo(filePath));
            return File(filePath, "application/excel", Server.UrlEncode("AnualReport_" + DateTime.Now.ToShortDateString().Replace("#", "_") + ".xls"));
        }

        public int GetProductCountOfQuote(DateTime startDate, DateTime endDate, List<SZ_Quotation> quotationData)
        {
            var productCount = (from q in quotationData
                                where q.CreatedDate >= startDate && q.CreatedDate <= endDate
                                select q.SZ_QuotationDetail.Count).Sum(x => x);
            return productCount;
        }
        public int GetQuoteCountOfQuote(DateTime startDate, DateTime endDate, List<SZ_Quotation> quotationData)
        {
            var productCount = (from q in quotationData
                                where q.CreatedDate >= startDate && q.CreatedDate <= endDate
                                select q).Count();
            return productCount;
        }

        public int GetApprovedCountOfQuote(DateTime startDate, DateTime endDate, List<SZ_Quotation> quotationData)
        {
            var productCount = (from q in quotationData
                                where q.CreatedDate >= startDate && q.CreatedDate <= endDate
                                && (q.IsQuoteApproved == false || q.IsQuoteApproved == null) && !string.IsNullOrEmpty(q.ApprovedBy)
                                select q).Count();
            return productCount;
        }

    }




    public class ProductInfo
    {
        [AllowHtml]
        public string ProductName { get; set; }
        public string casno { get; set; }
        public string catNo { get; set; }
        [AllowHtml]
        public string price { get; set; }
        [AllowHtml]
        public string finalprice { get; set; }
        [AllowHtml]
        public string leadtime { get; set; }
        public int id { get; set; }
        public string ponumber { get; set; }
        public int displayOrder { get; set; }
        [AllowHtml]
        public string productremark { get; set; }
        [AllowHtml]
        public string followUpRemark { get; set; }
        [AllowHtml]
        public string followUpRemarkSecond { get; set; }
        public string estimateDispatchDate { get; set; }
        public string projectType { get; set; }
        public int? scientistCustomerid { get; set; }
        public bool? synthesislog { get; set; }
        public string actionname { get; set; }

        public string batchno { get; set; }

        [AllowHtml]
        public string contactdetail { get; set; }

        public bool IsClubQuotation { get; set; }

        public int? discount { get; set; }
    }

    public class ProductPriceModel
    {
        public string ChkRow { get; set; }
        public int Id { get; set; }
        public int SrNo { get; set; }
        public string ProductName { get; set; }
        public string casno { get; set; }
        public string catNo { get; set; }
        public string catNoLink { get; set; }
        public string TenPrice { get; set; }
        public string TwentyFivePrice { get; set; }
        public string FiftyPrice { get; set; }
        public string HundredPrice { get; set; }
        public string TwoHundredPrice { get; set; }
        public string FivehundredPrice { get; set; }
        public string OneThousandPrice { get; set; }
        public string DiscountINR { get; set; }
        public string DiscountUSD { get; set; }
        public string LeadTime { get; set; }
        public string RefStock { get; set; }
        public string LastRow { get; set; }
        public string ImagePath { get; set; }
        public bool IsBatchAvailable { get; set; }
        public string CategoryMasterUSDText { get; set; }
        public string CategoryMasterINRText { get; set; }
        public string AdditionalBatchNoText { get; set; }
        public int? CategoryMasterUSDId { get; set; }
        public int? CategoryMasterINRId { get; set; }
        public string TenUSD { get; set; }
        public string TwentyfiveUSD { get; set; }
        public string FiftyUSD { get; set; }
        public string OnehundredUSD { get; set; }
        public string TwohundredFiftyUSD { get; set; }
        public string FivehundredUSD { get; set; }
        public string OneThousandUSD { get; set; }
        public string CopyPaste { get; set; }
        public string ProductRemark { get; set; }
        public string ApprovedText { get; set; }
        public Nullable<bool> IsPriceApproved { get; set; }
    }

    public class ProductMasterModel
    {
        public string Quotationreceived { get; set; }
        public string PurchaseComment { get; set; }
        public string ProductRemark { get; set; }
        public string ChkRow { get; set; }
        public int Id { get; set; }
        public int SrNo { get; set; }
        public string ProductName { get; set; }
        public string casno { get; set; }
        public string MW { get; set; }

        public string MF { get; set; }

        public string catNo { get; set; }
        public string LeadTime { get; set; }
        public string Appearance { get; set; }
        public string DdlStatus { get; set; }
        public string ReTestRequired { get; set; }
        public string ShippingCondition { get; set; }
        public string SourceRequired { get; set; }
        public string Source { get; set; }
        public string ImagePath { get; set; }
        public string BatchNo { get; set; }
        public string Description { get; set; }
        public string CountryOrigin { get; set; }
        public string HSNCode { get; set; }
        public string DangGoodToShip { get; set; }
        public string SameAs { get; set; }
        public string ProductStatus { get; set; }
        public string ProductDdlStatus { get; set; }
        public string AdditionalBatchNoText { get; set; }
        public string BatchDataCheck { get; set; }

        public string HPLC { get; set; }
        public string RbAdditionalAnalysis { get; set; }
        public string IR { get; set; }
        public string Mass { get; set; }
        public string HPLCGCELSD { get; set; }
        public string NMR { get; set; }
        public string qNMR { get; set; }
        public string TGA { get; set; }
        public string CMR { get; set; }
        public string DEPT { get; set; }
        public string HRMS { get; set; }
        public string ROI { get; set; }
        public string Elemental { get; set; }
        public string SER { get; set; }
        public string GC { get; set; }
        public string ELSD { get; set; }
        public string Chairal { get; set; }
        public string APCIMass { get; set; }
        public string NMRInterpretaion { get; set; }
        public string StabilitySolution { get; set; }
        public string StabilityRT { get; set; }
        public string Photostability { get; set; }
        public string Hygroscopic { get; set; }
        public string TempSensitive { get; set; }
        public string Lacrymatory { get; set; }
        public bool IsBatchAvailable { get; set; }
        public string ControlledSubstance { get; set; }
    }
    public class SZ_QuotationDetailModel
    {
        public int Id { get; set; }
        public Nullable<int> ProductId { get; set; }
        public string ProductName { get; set; }
        public string CASNo { get; set; }
        public string CATNo { get; set; }
    }
}


