
@{
    ViewBag.Title = "Terms";
    Layout = null;
}
@model Synzeal_Inventory.Models.RuleModel
<!-- left column -->
<div class="col-md-12">
    <!-- general form elements -->
    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Add New Rule</h3>
        </div>
        <!-- /.box-header -->
        <!-- form start -->
        <form role="form">
            <div class="box-body">
                <input type="hidden" id="ruleid" name="ruleid" value="@Model.id" />
                <div class="form-group">
                    <label for="exampleInputEmail1">Rule Name</label>
                    <input type="text" class="form-control" id="rulename" name="rulename" placeholder="Rule Name" required value="@Model.ruleName">
                </div>
                <div class="form-group">
                    <label>Condition</label><br />
                    <select id="condition" class="form-control" style=" width: 20%; float: left; margin-right: 10px;">
                        <option value="1">All</option>
                        <option value="2">At Least One</option>
                        <option value="3">None</option>
                    </select> <div style="float: left; padding-top: 5px;"><b>3</b>  conditions must match:</div>
                    <div style="float:right; margin-bottom:25px;">
                        <i class="fa fa-plus" style="font-size: 18px; padding-top: 10px;" onclick="addnewrow()"></i>
                    </div>
                </div>
                <div class="clearfix"></div>
                <div class="form-group clsmultirow">
                    <input type="hidden" id="ruledetailid_1" class="ruledetailid" value="0" />
                    <select id="type_1" class="form-control clstype" style=" width: 20%; float: left; margin-right: 10px;">
                        <option value="1">CAT No</option>
                        <option value="2">Company</option>
                        <option value="3">PO No</option>
                        <option value="4">Batch No</option>
                        <option value="5">Section</option>
                        <option value="6">Field</option>
                    </select>
                    <select id="query_1" class="form-control clsquery" style=" width: 20%; float: left; margin-right: 10px;">
                        <option value="1">Is</option>
                        <option value="2">Contains</option>
                        <option value="3">Start With</option>
                        <option value="4">End With</option>
                    </select>
                    <input type="text" id="value_1" class="form-control clsvalue" style=" width: 50%; float: left; margin-right: 10px;" />
                </div>

                <div id="divnewrows"></div>
                <div class="clearfix"></div>
                <div class="form-group" style="margin-top:10px;">
                    <label>Add Tag(s)</label><br /> <i style="font-size:11px;"> (Add Multiple Tags using Comma(;))</i><br />
                    <input type="text" id="ruletag" name="ruletag" class="form-control" />
                </div><div class="clearfix"></div>
                <div class="form-group" style="text-align:right; margin-top:10px;">
                    <button type="button" onclick="saverule()" class="btn btn-primary">Save</button>
                </div>
            </div>
        </form>
    </div>
</div>
<script src="@Url.Content("~/Content/bower_components/ckeditor/ckeditor.js")"></script>
<script>
    var count = 2;
    function addnewrow() {
        var newrowstr = '<div class="clearfix"></div><div class="form-group  clsmultirow" style="margin-top:10px;" id="rowlevel_' + count + '">';
        newrowstr += ' <input type="hidden" class="ruledetailid" value="0" />   <select id="type_' + count + '" class="form-control clstype" style=" width: 20%; float: left; margin-right: 10px;">';
        newrowstr += '<option value="1">CAT No</option>';
        newrowstr += '<option value="2">Company</option>';
        newrowstr += '<option value="3">PO No</option>';
        newrowstr += '<option value="4">Batch No</option>';
        newrowstr += '<option value="5">Section</option>';
        newrowstr += '<option value="6">Field</option>';
        newrowstr += '</select>';
        newrowstr += '<select id="query_' + count + '" class="form-control clsquery" style=" width: 20%; float: left; margin-right: 10px;">';
        newrowstr += '<option value="1">Is</option>';
        newrowstr += '<option value="2">Contains</option>';
        newrowstr += '<option value="3">Start With</option>';
        newrowstr += '<option value="4">End With</option>';
        newrowstr += '</select>';
        newrowstr += '<input type="text" id="value_' + count + '" class="form-control clsvalue" style=" width: 50%; float: left; margin-right: 10px;" />';
        newrowstr += '<i class="fa fa-remove" style="color:red; font-size: 18px; padding-top: 10px;" onclick="removerow(' + count + ')"></i>';
        newrowstr += '</div>';
        $("#divnewrows").append(newrowstr);
        count += 1;
    }
    function removerow(loopnumber) {
        $("#rowlevel_" + loopnumber).remove();
    }

    function saverule() {
        var id = $("#ruleid").val();
        var ruleName = $("#rulename").val();
        var ruletag = $("#ruletag").val();
        var condition = $("#condition").val();
        if (ruleName === '') {
            toastr.error("Please enter Rule Name");
            return false;
        }
        if (ruletag === '') {
            toastr.error("Please enter Rule Tag");
            return false;
        }

        var rules = [];
        $(".clsmultirow").each(function () {
            debugger;
            var type = $(this).find('.clstype').val();
            var query = $(this).find('.clsquery').val();
            var value = $(this).find('.clsvalue').val();
            var ruledetailid = $(this).find('.ruledetailid').val(); 
            if (value === '') {
                toastr.error("Please enter value");
                return false;
            }
            var subModel = {
                ruledetailid: parseInt(ruledetailid),
                typedata: parseInt(type),
                query: parseInt(query),
                value: value
            };
            rules.push(subModel);
        });
        var model = {
            id: id,
            ruleName: ruleName,
            ruletag: ruletag,
            condition: condition,
            rules: rules
        };

        $.ajax({
            type: "POST",
            url: "/Form/SaveRuleData",
            data: JSON.stringify(model),
            contentType: "application/json",
            success: function (results) {
                if (!results.success) {
                    toastr.error(results.message);
                    return false;
                }
                toastr.success("Remark updated.");
                $('#invoiceQueryModal').modal('hide');
                window.location.reload(true);
            }
        });
    }

    var sectionList = [];
    sectionList.push('Quote');
    sectionList.push('Quotedetail');
    sectionList.push('Project');
    sectionList.push('Dispatch');
    sectionList.push('QC');
    sectionList.push('Invoice');
    sectionList.push('COA');
    sectionList.push('Query');

    var fieldList = [];
    fieldList.push('Tracebility');
    fieldList.push('ColdShipment');

    var catnolist = [];
    var compList = [];
    var batchList = [];
    var poList = [];

    loaddefaultdata();
    function loaddefaultdata() {
        $.ajax({
            type: "GET",
            url: "/Form/GetDefaultDataForRules",
            data: {},
            contentType: "application/json",
            success: function (results) {
                catnolist = results.catnolist;
                compList = results.compList;
                batchList = results.batchList;
                poList = results.poList;
            }
        });
    }
    $(document).on("keyup keypress paste", ".clsvalue", function () {
        debugger;
        var arr = [];
        var closestType =$(this).closest('.clsmultirow').find('.clstype').val()
        //if (closestType === "1") {
        //    //CAT No
        //    arr = catnolist;
        //}
        //if (closestType === "2") {
        //    //Company
        //    arr = compList;
        //}
        //if (closestType === "3") {
        //    //PO No
        //    arr = poList;
        //}
        //if (closestType === "4") {
        //    //Batch No
        //    arr = batchList;
        //}
        if (closestType === "5") {
            //Section
            arr = sectionList;
        }
        if (closestType === "6") {
            //Section
            arr = fieldList;
        }
        autocomplete(document.getElementById($(this).attr('id')), arr);
    }); 

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {

                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;

                        /*GetCompanyDetailsFromEmail(inp.value);*/

                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        inp.addEventListener("focus", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            //if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {

                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }

        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>
<style type="text/css">
    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }
    .autocomplete-items {
        position: relative;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        /*left: 0;
        right: 0;*/
        left: 43.7%;
        width: 50%;
    }
    #tblalready .autocomplete-items, #ProductNameautocomplete-list .autocomplete-items {
        position: relative;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 9999;
        top: 0%;
        left: 0;
        right: 0;
    }

    .autocomplete-items div {
        text-align: left;
    }
    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff;
        border-bottom: 1px solid #d4d4d4;
    }

        .autocomplete-items div:hover {
            /*when hovering an item:*/
            background-color: #e9e9e9;
        }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>
@if (Model != null && Model.id > 0)
{
    <text>
        <script type="text/javascript">
            var d = '@Html.Raw(System.Web.Helpers.Json.Encode(Model))';
            var mainModel = JSON.parse(d);
            $("#ruletag").val('@Model.ruletag');
            $("#condition").val('@Model.condition');
            var totalRowAdded = '@Model.rules.Count()';

            for (var i = 1; i <= totalRowAdded; i++) {
                if (i > 1) {
                    addnewrow();
                }
                var index = i - 1;
                var submodeldata = mainModel.rules[index];
                $('.clsmultirow:last').find('.ruledetailid').val(submodeldata.ruledetailid); 
                $('.clsmultirow:last').find('.clstype').val(submodeldata.typedata);
                $('.clsmultirow:last').find('.clsquery').val(submodeldata.query);
                $('.clsmultirow:last').find('.clsvalue').val(submodeldata.value);
            }
        </script>
    </text>
}
