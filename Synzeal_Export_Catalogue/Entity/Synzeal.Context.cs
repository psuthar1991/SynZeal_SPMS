//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Synzeal_Export_Catalogue.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SynzealEntities : DbContext
    {
        public SynzealEntities()
            : base("name=SynzealEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AclRecord> AclRecords { get; set; }
        public DbSet<ActivityLog> ActivityLogs { get; set; }
        public DbSet<ActivityLogType> ActivityLogTypes { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<AddressAttribute> AddressAttributes { get; set; }
        public DbSet<AddressAttributeValue> AddressAttributeValues { get; set; }
        public DbSet<Affiliate> Affiliates { get; set; }
        public DbSet<BackInStockSubscription> BackInStockSubscriptions { get; set; }
        public DbSet<BlogComment> BlogComments { get; set; }
        public DbSet<BlogPost> BlogPosts { get; set; }
        public DbSet<Campaign> Campaigns { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<CategoryTemplate> CategoryTemplates { get; set; }
        public DbSet<CheckoutAttribute> CheckoutAttributes { get; set; }
        public DbSet<CheckoutAttributeValue> CheckoutAttributeValues { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Country1> Countries1 { get; set; }
        public DbSet<CrossSellProduct> CrossSellProducts { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerAttribute> CustomerAttributes { get; set; }
        public DbSet<CustomerAttributeValue> CustomerAttributeValues { get; set; }
        public DbSet<CustomerRole> CustomerRoles { get; set; }
        public DbSet<DeliveryDate> DeliveryDates { get; set; }
        public DbSet<Discount> Discounts { get; set; }
        public DbSet<DiscountRequirement> DiscountRequirements { get; set; }
        public DbSet<DiscountUsageHistory> DiscountUsageHistories { get; set; }
        public DbSet<Download> Downloads { get; set; }
        public DbSet<EmailAccount> EmailAccounts { get; set; }
        public DbSet<ExternalAuthenticationRecord> ExternalAuthenticationRecords { get; set; }
        public DbSet<Forums_Forum> Forums_Forum { get; set; }
        public DbSet<Forums_Group> Forums_Group { get; set; }
        public DbSet<Forums_Post> Forums_Post { get; set; }
        public DbSet<Forums_PrivateMessage> Forums_PrivateMessage { get; set; }
        public DbSet<Forums_Subscription> Forums_Subscription { get; set; }
        public DbSet<Forums_Topic> Forums_Topic { get; set; }
        public DbSet<GenericAttribute> GenericAttributes { get; set; }
        public DbSet<GiftCard> GiftCards { get; set; }
        public DbSet<GiftCardUsageHistory> GiftCardUsageHistories { get; set; }
        public DbSet<GoogleProduct> GoogleProducts { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<Group_Newsletter_Map> Group_Newsletter_Map { get; set; }
        public DbSet<InccoTerm> InccoTerms { get; set; }
        public DbSet<Language> Languages { get; set; }
        public DbSet<LocaleStringResource> LocaleStringResources { get; set; }
        public DbSet<LocalizedProperty> LocalizedProperties { get; set; }
        public DbSet<Log> Logs { get; set; }
        public DbSet<Manufacturer> Manufacturers { get; set; }
        public DbSet<ManufacturerTemplate> ManufacturerTemplates { get; set; }
        public DbSet<MeasureDimension> MeasureDimensions { get; set; }
        public DbSet<MeasureWeight> MeasureWeights { get; set; }
        public DbSet<MessageTemplate> MessageTemplates { get; set; }
        public DbSet<MessageTemplateNewsLetter> MessageTemplateNewsLetters { get; set; }
        public DbSet<MissiveResponse> MissiveResponses { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<NewsComment> NewsComments { get; set; }
        public DbSet<Newsletter> Newsletters { get; set; }
        public DbSet<NewsLetterSubscription> NewsLetterSubscriptions { get; set; }
        public DbSet<Notification> Notifications { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
        public DbSet<OrderNote> OrderNotes { get; set; }
        public DbSet<PaymentTerm> PaymentTerms { get; set; }
        public DbSet<PermissionRecord> PermissionRecords { get; set; }
        public DbSet<Picture> Pictures { get; set; }
        public DbSet<Poll> Polls { get; set; }
        public DbSet<PollAnswer> PollAnswers { get; set; }
        public DbSet<PollVotingRecord> PollVotingRecords { get; set; }
        public DbSet<PredefinedProductAttributeValue> PredefinedProductAttributeValues { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Product_Category_Mapping> Product_Category_Mapping { get; set; }
        public DbSet<Product_Manufacturer_Mapping> Product_Manufacturer_Mapping { get; set; }
        public DbSet<Product_Picture_Mapping> Product_Picture_Mapping { get; set; }
        public DbSet<Product_ProductAttribute_Mapping> Product_ProductAttribute_Mapping { get; set; }
        public DbSet<Product_SpecificationAttribute_Mapping> Product_SpecificationAttribute_Mapping { get; set; }
        public DbSet<ProductAttribute> ProductAttributes { get; set; }
        public DbSet<ProductAttributeCombination> ProductAttributeCombinations { get; set; }
        public DbSet<ProductAttributeValue> ProductAttributeValues { get; set; }
        public DbSet<ProductReview> ProductReviews { get; set; }
        public DbSet<ProductReviewHelpfulness> ProductReviewHelpfulnesses { get; set; }
        public DbSet<ProductTag> ProductTags { get; set; }
        public DbSet<ProductTemplate> ProductTemplates { get; set; }
        public DbSet<ProductWarehouseInventory> ProductWarehouseInventories { get; set; }
        public DbSet<QueuedEmail> QueuedEmails { get; set; }
        public DbSet<RecurringPayment> RecurringPayments { get; set; }
        public DbSet<RecurringPaymentHistory> RecurringPaymentHistories { get; set; }
        public DbSet<RelatedProduct> RelatedProducts { get; set; }
        public DbSet<ReturnRequest> ReturnRequests { get; set; }
        public DbSet<RewardPointsHistory> RewardPointsHistories { get; set; }
        public DbSet<Rfq> Rfqs { get; set; }
        public DbSet<ScheduleTask> ScheduleTasks { get; set; }
        public DbSet<SearchTerm> SearchTerms { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<Shipment> Shipments { get; set; }
        public DbSet<ShipmentItem> ShipmentItems { get; set; }
        public DbSet<ShippingByWeight> ShippingByWeights { get; set; }
        public DbSet<ShippingMethod> ShippingMethods { get; set; }
        public DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        public DbSet<SpecificationAttribute> SpecificationAttributes { get; set; }
        public DbSet<SpecificationAttributeOption> SpecificationAttributeOptions { get; set; }
        public DbSet<StateProvince> StateProvinces { get; set; }
        public DbSet<Store> Stores { get; set; }
        public DbSet<StoreMapping> StoreMappings { get; set; }
        public DbSet<SystemLog> SystemLogs { get; set; }
        public DbSet<SZ_AdditionalTest> SZ_AdditionalTest { get; set; }
        public DbSet<SZ_Bug> SZ_Bug { get; set; }
        public DbSet<SZ_CartRfq> SZ_CartRfq { get; set; }
        public DbSet<SZ_CartRFQ_Product> SZ_CartRFQ_Product { get; set; }
        public DbSet<SZ_Category_Price> SZ_Category_Price { get; set; }
        public DbSet<SZ_CategoryMaster> SZ_CategoryMaster { get; set; }
        public DbSet<SZ_CategoryMasterRange> SZ_CategoryMasterRange { get; set; }
        public DbSet<SZ_ChildCOA> SZ_ChildCOA { get; set; }
        public DbSet<SZ_Clientremark> SZ_Clientremark { get; set; }
        public DbSet<SZ_ClubQuote> SZ_ClubQuote { get; set; }
        public DbSet<SZ_CompanyAddress> SZ_CompanyAddress { get; set; }
        public DbSet<SZ_CompanyList> SZ_CompanyList { get; set; }
        public DbSet<SZ_Courier> SZ_Courier { get; set; }
        public DbSet<SZ_Currency> SZ_Currency { get; set; }
        public DbSet<Sz_DatabaseBackup> Sz_DatabaseBackup { get; set; }
        public DbSet<SZ_DeleteRetest> SZ_DeleteRetest { get; set; }
        public DbSet<SZ_EmailSuggestion> SZ_EmailSuggestion { get; set; }
        public DbSet<SZ_Inventory> SZ_Inventory { get; set; }
        public DbSet<SZ_InventoryLog> SZ_InventoryLog { get; set; }
        public DbSet<SZ_Invoice> SZ_Invoice { get; set; }
        public DbSet<SZ_InvoiceData> SZ_InvoiceData { get; set; }
        public DbSet<SZ_InvoiceDetailsData> SZ_InvoiceDetailsData { get; set; }
        public DbSet<SZ_InvoiceDocument> SZ_InvoiceDocument { get; set; }
        public DbSet<SZ_Log> SZ_Log { get; set; }
        public DbSet<SZ_MasterCOA> SZ_MasterCOA { get; set; }
        public DbSet<SZ_Meeting> SZ_Meeting { get; set; }
        public DbSet<SZ_NameMaster> SZ_NameMaster { get; set; }
        public DbSet<SZ_Notification> SZ_Notification { get; set; }
        public DbSet<SZ_PerformaInvoice> SZ_PerformaInvoice { get; set; }
        public DbSet<SZ_PerformaInvoiceDetailsData> SZ_PerformaInvoiceDetailsData { get; set; }
        public DbSet<SZ_Physicalstate> SZ_Physicalstate { get; set; }
        public DbSet<SZ_Popup> SZ_Popup { get; set; }
        public DbSet<SZ_PopupGroup> SZ_PopupGroup { get; set; }
        public DbSet<SZ_PopupGroupEmailList> SZ_PopupGroupEmailList { get; set; }
        public DbSet<SZ_Price> SZ_Price { get; set; }
        public DbSet<SZ_PriceList> SZ_PriceList { get; set; }
        public DbSet<SZ_ProductScheme> SZ_ProductScheme { get; set; }
        public DbSet<SZ_Project> SZ_Project { get; set; }
        public DbSet<SZ_ProjectDetail> SZ_ProjectDetail { get; set; }
        public DbSet<SZ_PRRequest> SZ_PRRequest { get; set; }
        public DbSet<SZ_PurchaseRFQ> SZ_PurchaseRFQ { get; set; }
        public DbSet<SZ_PurchaseSupplierCatalogue> SZ_PurchaseSupplierCatalogue { get; set; }
        public DbSet<SZ_Query> SZ_Query { get; set; }
        public DbSet<SZ_QueryModule> SZ_QueryModule { get; set; }
        public DbSet<SZ_Quotation> SZ_Quotation { get; set; }
        public DbSet<SZ_QuotationDetail> SZ_QuotationDetail { get; set; }
        public DbSet<SZ_QuotationDetailLog> SZ_QuotationDetailLog { get; set; }
        public DbSet<SZ_QuotationPDF> SZ_QuotationPDF { get; set; }
        public DbSet<SZ_QuoteDetail_Correctionlog> SZ_QuoteDetail_Correctionlog { get; set; }
        public DbSet<SZ_QuoteDetailForm> SZ_QuoteDetailForm { get; set; }
        public DbSet<SZ_QuoteDetailPrice> SZ_QuoteDetailPrice { get; set; }
        public DbSet<SZ_QuoteDetails_Form> SZ_QuoteDetails_Form { get; set; }
        public DbSet<SZ_QuoteDetailsComment> SZ_QuoteDetailsComment { get; set; }
        public DbSet<SZ_QuoteDetailsControlSubstance> SZ_QuoteDetailsControlSubstance { get; set; }
        public DbSet<SZ_QuoteSummary> SZ_QuoteSummary { get; set; }
        public DbSet<SZ_ReactionMatrix> SZ_ReactionMatrix { get; set; }
        public DbSet<SZ_Retest> SZ_Retest { get; set; }
        public DbSet<SZ_SampleReason> SZ_SampleReason { get; set; }
        public DbSet<SZ_SampleRequest> SZ_SampleRequest { get; set; }
        public DbSet<SZ_SampleRequestDetail> SZ_SampleRequestDetail { get; set; }
        public DbSet<SZ_SAPCASNo> SZ_SAPCASNo { get; set; }
        public DbSet<SZ_SAPProjectNameData> SZ_SAPProjectNameData { get; set; }
        public DbSet<SZ_SAPRawMaterial> SZ_SAPRawMaterial { get; set; }
        public DbSet<SZ_ScientistStatus> SZ_ScientistStatus { get; set; }
        public DbSet<SZ_Slogan> SZ_Slogan { get; set; }
        public DbSet<SZ_SolutionModule> SZ_SolutionModule { get; set; }
        public DbSet<SZ_Survey> SZ_Survey { get; set; }
        public DbSet<SZ_SystemNotification> SZ_SystemNotification { get; set; }
        public DbSet<SZ_TempQuickAdd> SZ_TempQuickAdd { get; set; }
        public DbSet<SZ_TempQuotationDetail> SZ_TempQuotationDetail { get; set; }
        public DbSet<SZ_Terms> SZ_Terms { get; set; }
        public DbSet<SZ_UserDashboard> SZ_UserDashboard { get; set; }
        public DbSet<SZ_UserManagement> SZ_UserManagement { get; set; }
        public DbSet<TaxCategory> TaxCategories { get; set; }
        public DbSet<TaxRate> TaxRates { get; set; }
        public DbSet<TierPrice> TierPrices { get; set; }
        public DbSet<Topic> Topics { get; set; }
        public DbSet<TopicTemplate> TopicTemplates { get; set; }
        public DbSet<UrlRecord> UrlRecords { get; set; }
        public DbSet<Vendor> Vendors { get; set; }
        public DbSet<Warehouse> Warehouses { get; set; }
        public DbSet<QuotationAndDetailsView> QuotationAndDetailsViews { get; set; }
        public DbSet<QuoteandDetailsview> QuoteandDetailsviews { get; set; }
    
        [EdmFunction("SynzealEntities", "nop_splitstring_to_table")]
        public virtual IQueryable<nop_splitstring_to_table_Result> nop_splitstring_to_table(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<nop_splitstring_to_table_Result>("[SynzealEntities].[nop_splitstring_to_table](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int BackUpDatabase(string address)
        {
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BackUpDatabase", addressParameter);
        }
    
        public virtual ObjectResult<CompanyList_Result> CompanyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyList_Result>("CompanyList");
        }
    
        public virtual ObjectResult<string> CompanyMasterList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CompanyMasterList");
        }
    
        public virtual ObjectResult<Dashboard_Result> Dashboard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dashboard_Result>("Dashboard");
        }
    
        public virtual int DeleteGuests(Nullable<bool> onlyWithoutShoppingCart, Nullable<System.DateTime> createdFromUtc, Nullable<System.DateTime> createdToUtc, ObjectParameter totalRecordsDeleted)
        {
            var onlyWithoutShoppingCartParameter = onlyWithoutShoppingCart.HasValue ?
                new ObjectParameter("OnlyWithoutShoppingCart", onlyWithoutShoppingCart) :
                new ObjectParameter("OnlyWithoutShoppingCart", typeof(bool));
    
            var createdFromUtcParameter = createdFromUtc.HasValue ?
                new ObjectParameter("CreatedFromUtc", createdFromUtc) :
                new ObjectParameter("CreatedFromUtc", typeof(System.DateTime));
    
            var createdToUtcParameter = createdToUtc.HasValue ?
                new ObjectParameter("CreatedToUtc", createdToUtc) :
                new ObjectParameter("CreatedToUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGuests", onlyWithoutShoppingCartParameter, createdFromUtcParameter, createdToUtcParameter, totalRecordsDeleted);
        }
    
        public virtual ObjectResult<DispatchedDeliveredList_Result> DispatchedDeliveredList(string searchString, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DispatchedDeliveredList_Result>("DispatchedDeliveredList", searchStringParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<FollowupOverview_Result> FollowupOverview(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FollowupOverview_Result>("FollowupOverview", actionParameter);
        }
    
        public virtual int FullText_Disable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FullText_Disable");
        }
    
        public virtual int FullText_Enable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FullText_Enable");
        }
    
        public virtual ObjectResult<Nullable<int>> FullText_IsSupported()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FullText_IsSupported");
        }
    
        public virtual ObjectResult<string> GetAllEmail(Nullable<int> company)
        {
            var companyParameter = company.HasValue ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllEmail", companyParameter);
        }
    
        public virtual ObjectResult<string> getallproductname(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getallproductname", valueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCompanyDetailsFromEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCompanyDetailsFromEmail", emailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetScientistId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetScientistId");
        }
    
        public virtual ObjectResult<InventoryList_Result> InventoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryList_Result>("InventoryList");
        }
    
        public virtual ObjectResult<InvoiceList_Result> InvoiceList(string countryType, string searchString, string internationcompanylist, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var countryTypeParameter = countryType != null ?
                new ObjectParameter("countryType", countryType) :
                new ObjectParameter("countryType", typeof(string));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var internationcompanylistParameter = internationcompanylist != null ?
                new ObjectParameter("internationcompanylist", internationcompanylist) :
                new ObjectParameter("internationcompanylist", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceList_Result>("InvoiceList", countryTypeParameter, searchStringParameter, internationcompanylistParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int LanguagePackImport(Nullable<int> languageId, string xmlPackage)
        {
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var xmlPackageParameter = xmlPackage != null ?
                new ObjectParameter("XmlPackage", xmlPackage) :
                new ObjectParameter("XmlPackage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LanguagePackImport", languageIdParameter, xmlPackageParameter);
        }
    
        public virtual int ProductLoadAllPaged(string categoryIds, Nullable<int> manufacturerId, Nullable<int> storeId, Nullable<int> vendorId, Nullable<int> warehouseId, Nullable<int> productTypeId, Nullable<bool> visibleIndividuallyOnly, Nullable<int> productTagId, Nullable<bool> featuredProducts, Nullable<decimal> priceMin, Nullable<decimal> priceMax, string keywords, Nullable<bool> searchDescriptions, Nullable<bool> searchSku, Nullable<bool> searchProductTags, Nullable<bool> useFullTextSearch, Nullable<int> fullTextMode, string filteredSpecs, Nullable<int> languageId, Nullable<int> orderBy, string allowedCustomerRoleIds, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> showHidden, Nullable<bool> overridePublished, Nullable<bool> loadFilterableSpecificationAttributeOptionIds, ObjectParameter filterableSpecificationAttributeOptionIds, ObjectParameter totalRecords)
        {
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var visibleIndividuallyOnlyParameter = visibleIndividuallyOnly.HasValue ?
                new ObjectParameter("VisibleIndividuallyOnly", visibleIndividuallyOnly) :
                new ObjectParameter("VisibleIndividuallyOnly", typeof(bool));
    
            var productTagIdParameter = productTagId.HasValue ?
                new ObjectParameter("ProductTagId", productTagId) :
                new ObjectParameter("ProductTagId", typeof(int));
    
            var featuredProductsParameter = featuredProducts.HasValue ?
                new ObjectParameter("FeaturedProducts", featuredProducts) :
                new ObjectParameter("FeaturedProducts", typeof(bool));
    
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("PriceMin", priceMin) :
                new ObjectParameter("PriceMin", typeof(decimal));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("PriceMax", priceMax) :
                new ObjectParameter("PriceMax", typeof(decimal));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var searchDescriptionsParameter = searchDescriptions.HasValue ?
                new ObjectParameter("SearchDescriptions", searchDescriptions) :
                new ObjectParameter("SearchDescriptions", typeof(bool));
    
            var searchSkuParameter = searchSku.HasValue ?
                new ObjectParameter("SearchSku", searchSku) :
                new ObjectParameter("SearchSku", typeof(bool));
    
            var searchProductTagsParameter = searchProductTags.HasValue ?
                new ObjectParameter("SearchProductTags", searchProductTags) :
                new ObjectParameter("SearchProductTags", typeof(bool));
    
            var useFullTextSearchParameter = useFullTextSearch.HasValue ?
                new ObjectParameter("UseFullTextSearch", useFullTextSearch) :
                new ObjectParameter("UseFullTextSearch", typeof(bool));
    
            var fullTextModeParameter = fullTextMode.HasValue ?
                new ObjectParameter("FullTextMode", fullTextMode) :
                new ObjectParameter("FullTextMode", typeof(int));
    
            var filteredSpecsParameter = filteredSpecs != null ?
                new ObjectParameter("FilteredSpecs", filteredSpecs) :
                new ObjectParameter("FilteredSpecs", typeof(string));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var orderByParameter = orderBy.HasValue ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(int));
    
            var allowedCustomerRoleIdsParameter = allowedCustomerRoleIds != null ?
                new ObjectParameter("AllowedCustomerRoleIds", allowedCustomerRoleIds) :
                new ObjectParameter("AllowedCustomerRoleIds", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var showHiddenParameter = showHidden.HasValue ?
                new ObjectParameter("ShowHidden", showHidden) :
                new ObjectParameter("ShowHidden", typeof(bool));
    
            var overridePublishedParameter = overridePublished.HasValue ?
                new ObjectParameter("OverridePublished", overridePublished) :
                new ObjectParameter("OverridePublished", typeof(bool));
    
            var loadFilterableSpecificationAttributeOptionIdsParameter = loadFilterableSpecificationAttributeOptionIds.HasValue ?
                new ObjectParameter("LoadFilterableSpecificationAttributeOptionIds", loadFilterableSpecificationAttributeOptionIds) :
                new ObjectParameter("LoadFilterableSpecificationAttributeOptionIds", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductLoadAllPaged", categoryIdsParameter, manufacturerIdParameter, storeIdParameter, vendorIdParameter, warehouseIdParameter, productTypeIdParameter, visibleIndividuallyOnlyParameter, productTagIdParameter, featuredProductsParameter, priceMinParameter, priceMaxParameter, keywordsParameter, searchDescriptionsParameter, searchSkuParameter, searchProductTagsParameter, useFullTextSearchParameter, fullTextModeParameter, filteredSpecsParameter, languageIdParameter, orderByParameter, allowedCustomerRoleIdsParameter, pageIndexParameter, pageSizeParameter, showHiddenParameter, overridePublishedParameter, loadFilterableSpecificationAttributeOptionIdsParameter, filterableSpecificationAttributeOptionIds, totalRecords);
        }
    
        public virtual ObjectResult<ProductTagCountLoadAll_Result> ProductTagCountLoadAll(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductTagCountLoadAll_Result>("ProductTagCountLoadAll", storeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Project_Count(string internationcompanylist)
        {
            var internationcompanylistParameter = internationcompanylist != null ?
                new ObjectParameter("internationcompanylist", internationcompanylist) :
                new ObjectParameter("internationcompanylist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Project_Count", internationcompanylistParameter);
        }
    
        public virtual ObjectResult<Project_HoldTab_Result> Project_HoldTab()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Project_HoldTab_Result>("Project_HoldTab");
        }
    
        public virtual ObjectResult<QuotationList_Backup_Result> QuotationList_Backup(string searchString, string company, string date, string countrytype, string tabName, string searchby, string searchbyvalue, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var countrytypeParameter = countrytype != null ?
                new ObjectParameter("countrytype", countrytype) :
                new ObjectParameter("countrytype", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("tabName", tabName) :
                new ObjectParameter("tabName", typeof(string));
    
            var searchbyParameter = searchby != null ?
                new ObjectParameter("searchby", searchby) :
                new ObjectParameter("searchby", typeof(string));
    
            var searchbyvalueParameter = searchbyvalue != null ?
                new ObjectParameter("searchbyvalue", searchbyvalue) :
                new ObjectParameter("searchbyvalue", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationList_Backup_Result>("QuotationList_Backup", searchStringParameter, companyParameter, dateParameter, countrytypeParameter, tabNameParameter, searchbyParameter, searchbyvalueParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Scientist_Count(Nullable<int> scientistUserId, string scientistId)
        {
            var scientistUserIdParameter = scientistUserId.HasValue ?
                new ObjectParameter("ScientistUserId", scientistUserId) :
                new ObjectParameter("ScientistUserId", typeof(int));
    
            var scientistIdParameter = scientistId != null ?
                new ObjectParameter("ScientistId", scientistId) :
                new ObjectParameter("ScientistId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Scientist_Count", scientistUserIdParameter, scientistIdParameter);
        }
    
        public virtual ObjectResult<sp_BlitzCache_Result> sp_BlitzCache(Nullable<bool> help, Nullable<int> top, string sortOrder, Nullable<bool> useTriggersAnyway, Nullable<bool> exportToExcel, Nullable<byte> expertMode, string outputServerName, string outputDatabaseName, string outputSchemaName, string outputTableName, string configurationDatabaseName, string configurationSchemaName, string configurationTableName, Nullable<decimal> durationFilter, Nullable<bool> hideSummary, Nullable<bool> ignoreSystemDBs, string onlyQueryHashes, string ignoreQueryHashes, string onlySqlHandles, string ignoreSqlHandles, string queryFilter, string databaseName, string storedProcName, string slowlySearchPlansFor, Nullable<bool> reanalyze, Nullable<bool> skipAnalysis, Nullable<bool> bringThePain, Nullable<int> minimumExecutionCount, Nullable<bool> debug, Nullable<System.DateTimeOffset> checkDateOverride, Nullable<int> minutesBack, ObjectParameter version, ObjectParameter versionDate, Nullable<bool> versionCheckMode)
        {
            var helpParameter = help.HasValue ?
                new ObjectParameter("Help", help) :
                new ObjectParameter("Help", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var useTriggersAnywayParameter = useTriggersAnyway.HasValue ?
                new ObjectParameter("UseTriggersAnyway", useTriggersAnyway) :
                new ObjectParameter("UseTriggersAnyway", typeof(bool));
    
            var exportToExcelParameter = exportToExcel.HasValue ?
                new ObjectParameter("ExportToExcel", exportToExcel) :
                new ObjectParameter("ExportToExcel", typeof(bool));
    
            var expertModeParameter = expertMode.HasValue ?
                new ObjectParameter("ExpertMode", expertMode) :
                new ObjectParameter("ExpertMode", typeof(byte));
    
            var outputServerNameParameter = outputServerName != null ?
                new ObjectParameter("OutputServerName", outputServerName) :
                new ObjectParameter("OutputServerName", typeof(string));
    
            var outputDatabaseNameParameter = outputDatabaseName != null ?
                new ObjectParameter("OutputDatabaseName", outputDatabaseName) :
                new ObjectParameter("OutputDatabaseName", typeof(string));
    
            var outputSchemaNameParameter = outputSchemaName != null ?
                new ObjectParameter("OutputSchemaName", outputSchemaName) :
                new ObjectParameter("OutputSchemaName", typeof(string));
    
            var outputTableNameParameter = outputTableName != null ?
                new ObjectParameter("OutputTableName", outputTableName) :
                new ObjectParameter("OutputTableName", typeof(string));
    
            var configurationDatabaseNameParameter = configurationDatabaseName != null ?
                new ObjectParameter("ConfigurationDatabaseName", configurationDatabaseName) :
                new ObjectParameter("ConfigurationDatabaseName", typeof(string));
    
            var configurationSchemaNameParameter = configurationSchemaName != null ?
                new ObjectParameter("ConfigurationSchemaName", configurationSchemaName) :
                new ObjectParameter("ConfigurationSchemaName", typeof(string));
    
            var configurationTableNameParameter = configurationTableName != null ?
                new ObjectParameter("ConfigurationTableName", configurationTableName) :
                new ObjectParameter("ConfigurationTableName", typeof(string));
    
            var durationFilterParameter = durationFilter.HasValue ?
                new ObjectParameter("DurationFilter", durationFilter) :
                new ObjectParameter("DurationFilter", typeof(decimal));
    
            var hideSummaryParameter = hideSummary.HasValue ?
                new ObjectParameter("HideSummary", hideSummary) :
                new ObjectParameter("HideSummary", typeof(bool));
    
            var ignoreSystemDBsParameter = ignoreSystemDBs.HasValue ?
                new ObjectParameter("IgnoreSystemDBs", ignoreSystemDBs) :
                new ObjectParameter("IgnoreSystemDBs", typeof(bool));
    
            var onlyQueryHashesParameter = onlyQueryHashes != null ?
                new ObjectParameter("OnlyQueryHashes", onlyQueryHashes) :
                new ObjectParameter("OnlyQueryHashes", typeof(string));
    
            var ignoreQueryHashesParameter = ignoreQueryHashes != null ?
                new ObjectParameter("IgnoreQueryHashes", ignoreQueryHashes) :
                new ObjectParameter("IgnoreQueryHashes", typeof(string));
    
            var onlySqlHandlesParameter = onlySqlHandles != null ?
                new ObjectParameter("OnlySqlHandles", onlySqlHandles) :
                new ObjectParameter("OnlySqlHandles", typeof(string));
    
            var ignoreSqlHandlesParameter = ignoreSqlHandles != null ?
                new ObjectParameter("IgnoreSqlHandles", ignoreSqlHandles) :
                new ObjectParameter("IgnoreSqlHandles", typeof(string));
    
            var queryFilterParameter = queryFilter != null ?
                new ObjectParameter("QueryFilter", queryFilter) :
                new ObjectParameter("QueryFilter", typeof(string));
    
            var databaseNameParameter = databaseName != null ?
                new ObjectParameter("DatabaseName", databaseName) :
                new ObjectParameter("DatabaseName", typeof(string));
    
            var storedProcNameParameter = storedProcName != null ?
                new ObjectParameter("StoredProcName", storedProcName) :
                new ObjectParameter("StoredProcName", typeof(string));
    
            var slowlySearchPlansForParameter = slowlySearchPlansFor != null ?
                new ObjectParameter("SlowlySearchPlansFor", slowlySearchPlansFor) :
                new ObjectParameter("SlowlySearchPlansFor", typeof(string));
    
            var reanalyzeParameter = reanalyze.HasValue ?
                new ObjectParameter("Reanalyze", reanalyze) :
                new ObjectParameter("Reanalyze", typeof(bool));
    
            var skipAnalysisParameter = skipAnalysis.HasValue ?
                new ObjectParameter("SkipAnalysis", skipAnalysis) :
                new ObjectParameter("SkipAnalysis", typeof(bool));
    
            var bringThePainParameter = bringThePain.HasValue ?
                new ObjectParameter("BringThePain", bringThePain) :
                new ObjectParameter("BringThePain", typeof(bool));
    
            var minimumExecutionCountParameter = minimumExecutionCount.HasValue ?
                new ObjectParameter("MinimumExecutionCount", minimumExecutionCount) :
                new ObjectParameter("MinimumExecutionCount", typeof(int));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(bool));
    
            var checkDateOverrideParameter = checkDateOverride.HasValue ?
                new ObjectParameter("CheckDateOverride", checkDateOverride) :
                new ObjectParameter("CheckDateOverride", typeof(System.DateTimeOffset));
    
            var minutesBackParameter = minutesBack.HasValue ?
                new ObjectParameter("MinutesBack", minutesBack) :
                new ObjectParameter("MinutesBack", typeof(int));
    
            var versionCheckModeParameter = versionCheckMode.HasValue ?
                new ObjectParameter("VersionCheckMode", versionCheckMode) :
                new ObjectParameter("VersionCheckMode", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BlitzCache_Result>("sp_BlitzCache", helpParameter, topParameter, sortOrderParameter, useTriggersAnywayParameter, exportToExcelParameter, expertModeParameter, outputServerNameParameter, outputDatabaseNameParameter, outputSchemaNameParameter, outputTableNameParameter, configurationDatabaseNameParameter, configurationSchemaNameParameter, configurationTableNameParameter, durationFilterParameter, hideSummaryParameter, ignoreSystemDBsParameter, onlyQueryHashesParameter, ignoreQueryHashesParameter, onlySqlHandlesParameter, ignoreSqlHandlesParameter, queryFilterParameter, databaseNameParameter, storedProcNameParameter, slowlySearchPlansForParameter, reanalyzeParameter, skipAnalysisParameter, bringThePainParameter, minimumExecutionCountParameter, debugParameter, checkDateOverrideParameter, minutesBackParameter, version, versionDate, versionCheckModeParameter);
        }
    
        public virtual ObjectResult<SynthesisLog_Result> SynthesisLog(string searchString, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SynthesisLog_Result>("SynthesisLog", searchStringParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int ConversionReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> allCompany)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var allCompanyParameter = allCompany.HasValue ?
                new ObjectParameter("AllCompany", allCompany) :
                new ObjectParameter("AllCompany", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConversionReport", startDateParameter, endDateParameter, allCompanyParameter);
        }
    
        public virtual int GETPreviousDataHistory(string productname, Nullable<int> companyId, Nullable<int> quoteId, Nullable<int> quotedetailsid, Nullable<int> productIds)
        {
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            var quotedetailsidParameter = quotedetailsid.HasValue ?
                new ObjectParameter("quotedetailsid", quotedetailsid) :
                new ObjectParameter("quotedetailsid", typeof(int));
    
            var productIdsParameter = productIds.HasValue ?
                new ObjectParameter("productIds", productIds) :
                new ObjectParameter("productIds", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GETPreviousDataHistory", productnameParameter, companyIdParameter, quoteIdParameter, quotedetailsidParameter, productIdsParameter);
        }
    
        public virtual int ProductsInchi(string inchis)
        {
            var inchisParameter = inchis != null ?
                new ObjectParameter("Inchis", inchis) :
                new ObjectParameter("Inchis", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductsInchi", inchisParameter);
        }
    
        public virtual ObjectResult<QuotationList_17052023_Result> QuotationList_17052023(string searchString, string company, string date, string countrytype, string tabName, string searchby, string searchbyvalue, string internationcompanylist, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var countrytypeParameter = countrytype != null ?
                new ObjectParameter("countrytype", countrytype) :
                new ObjectParameter("countrytype", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("tabName", tabName) :
                new ObjectParameter("tabName", typeof(string));
    
            var searchbyParameter = searchby != null ?
                new ObjectParameter("searchby", searchby) :
                new ObjectParameter("searchby", typeof(string));
    
            var searchbyvalueParameter = searchbyvalue != null ?
                new ObjectParameter("searchbyvalue", searchbyvalue) :
                new ObjectParameter("searchbyvalue", typeof(string));
    
            var internationcompanylistParameter = internationcompanylist != null ?
                new ObjectParameter("internationcompanylist", internationcompanylist) :
                new ObjectParameter("internationcompanylist", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationList_17052023_Result>("QuotationList_17052023", searchStringParameter, companyParameter, dateParameter, countrytypeParameter, tabNameParameter, searchbyParameter, searchbyvalueParameter, internationcompanylistParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<QuotationList_Result> QuotationList(string searchString, string company, string date, string countrytype, string tabName, string searchby, string searchbyvalue, string internationcompanylist, string startdate, string enddate, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var countrytypeParameter = countrytype != null ?
                new ObjectParameter("countrytype", countrytype) :
                new ObjectParameter("countrytype", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("tabName", tabName) :
                new ObjectParameter("tabName", typeof(string));
    
            var searchbyParameter = searchby != null ?
                new ObjectParameter("searchby", searchby) :
                new ObjectParameter("searchby", typeof(string));
    
            var searchbyvalueParameter = searchbyvalue != null ?
                new ObjectParameter("searchbyvalue", searchbyvalue) :
                new ObjectParameter("searchbyvalue", typeof(string));
    
            var internationcompanylistParameter = internationcompanylist != null ?
                new ObjectParameter("internationcompanylist", internationcompanylist) :
                new ObjectParameter("internationcompanylist", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationList_Result>("QuotationList", searchStringParameter, companyParameter, dateParameter, countrytypeParameter, tabNameParameter, searchbyParameter, searchbyvalueParameter, internationcompanylistParameter, startdateParameter, enddateParameter, pageNumberParameter, pageSizeParameter);
        }
    }
}
